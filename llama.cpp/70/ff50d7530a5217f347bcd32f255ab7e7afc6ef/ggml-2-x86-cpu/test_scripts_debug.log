+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.654 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.845 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.152 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.160 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.163 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.164 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.166 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.167 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.167 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.179 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.180 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.182 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.016 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.897 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.905 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.907 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.908 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.911 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.912 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.916 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.919 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.920 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.929 I llama_model_loader: - type  f32:   37 tensors
0.00.267.934 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.125 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.448.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.449.033 I llm_load_vocab: special tokens cache size = 5
0.00.560.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.314 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.315 I llm_load_print_meta: arch             = gemma
0.00.560.316 I llm_load_print_meta: vocab type       = SPM
0.00.560.317 I llm_load_print_meta: n_vocab          = 256000
0.00.560.319 I llm_load_print_meta: n_merges         = 0
0.00.560.319 I llm_load_print_meta: vocab_only       = 0
0.00.560.320 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.320 I llm_load_print_meta: n_embd           = 2048
0.00.560.321 I llm_load_print_meta: n_layer          = 18
0.00.560.382 I llm_load_print_meta: n_head           = 8
0.00.560.389 I llm_load_print_meta: n_head_kv        = 1
0.00.560.389 I llm_load_print_meta: n_rot            = 256
0.00.560.390 I llm_load_print_meta: n_swa            = 0
0.00.560.390 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.390 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.395 I llm_load_print_meta: n_gqa            = 8
0.00.560.399 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.407 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.408 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.409 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.414 I llm_load_print_meta: n_ff             = 16384
0.00.560.414 I llm_load_print_meta: n_expert         = 0
0.00.560.415 I llm_load_print_meta: n_expert_used    = 0
0.00.560.415 I llm_load_print_meta: causal attn      = 1
0.00.560.416 I llm_load_print_meta: pooling type     = 0
0.00.560.417 I llm_load_print_meta: rope type        = 2
0.00.560.417 I llm_load_print_meta: rope scaling     = linear
0.00.560.418 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.419 I llm_load_print_meta: freq_scale_train = 1
0.00.560.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.437 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.438 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.438 I llm_load_print_meta: model type       = 2B
0.00.560.447 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.448 I llm_load_print_meta: model params     = 2.51 B
0.00.560.452 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.454 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.454 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.454 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.455 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.456 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.462 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.560.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.560.464 I llm_load_print_meta: max token length = 93
0.00.560.631 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.660.817 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.660.828 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.660.829 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.660.829 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.660.830 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.660.831 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.666.519 I llama_new_context_with_model: n_ctx      = 8192
0.00.666.524 I llama_new_context_with_model: n_batch    = 2048
0.00.666.525 I llama_new_context_with_model: n_ubatch   = 512
0.00.666.525 I llama_new_context_with_model: flash_attn = 0
0.00.666.528 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.528 I llama_new_context_with_model: freq_scale = 1
0.00.695.609 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.654 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.695.771 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.183 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.188 I llama_new_context_with_model: graph nodes  = 601
0.00.697.189 I llama_new_context_with_model: graph splits = 1
0.00.697.205 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.505 I main: llama threadpool init, n_threads = 4
0.01.319.517 I 
0.01.319.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.627 I 
0.01.319.789 I sampler seed: 1465942693
0.01.319.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.319.805 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.319.806 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.319.806 I 
 increamically.

I am curious about the relationship between the mean and median in a dataset.

**Mean:**

- Represents the average value of the dataset

0.15.038.096 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.15 tokens per second)
0.15.038.101 I llama_perf_context_print:        load time =    1316.51 ms
0.15.038.103 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.038.105 I llama_perf_context_print:        eval time =   13636.21 ms /    32 runs   (  426.13 ms per token,     2.35 tokens per second)
0.15.038.106 I llama_perf_context_print:       total time =   13718.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.661 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.002.886 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.398 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.508 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.525 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.536 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.538 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.539 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.552 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.565 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.569 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.726 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.272.628 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.974 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.976 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.290.985 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.290.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.290.995 I llama_model_loader: - type  f32:   37 tensors
0.00.291.000 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.734 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.219 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.486.348 I llm_load_vocab: special tokens cache size = 5
0.00.597.517 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.582 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.583 I llm_load_print_meta: arch             = gemma
0.00.597.584 I llm_load_print_meta: vocab type       = SPM
0.00.597.585 I llm_load_print_meta: n_vocab          = 256000
0.00.597.587 I llm_load_print_meta: n_merges         = 0
0.00.597.587 I llm_load_print_meta: vocab_only       = 0
0.00.597.587 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.588 I llm_load_print_meta: n_embd           = 2048
0.00.597.588 I llm_load_print_meta: n_layer          = 18
0.00.597.652 I llm_load_print_meta: n_head           = 8
0.00.597.660 I llm_load_print_meta: n_head_kv        = 1
0.00.597.660 I llm_load_print_meta: n_rot            = 256
0.00.597.661 I llm_load_print_meta: n_swa            = 0
0.00.597.661 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.661 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.666 I llm_load_print_meta: n_gqa            = 8
0.00.597.671 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.676 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.678 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.680 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.682 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.687 I llm_load_print_meta: n_ff             = 16384
0.00.597.687 I llm_load_print_meta: n_expert         = 0
0.00.597.688 I llm_load_print_meta: n_expert_used    = 0
0.00.597.689 I llm_load_print_meta: causal attn      = 1
0.00.597.689 I llm_load_print_meta: pooling type     = 0
0.00.597.690 I llm_load_print_meta: rope type        = 2
0.00.597.691 I llm_load_print_meta: rope scaling     = linear
0.00.597.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.693 I llm_load_print_meta: freq_scale_train = 1
0.00.597.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.694 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.694 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.694 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.695 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.696 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.696 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.719 I llm_load_print_meta: model type       = 2B
0.00.597.730 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.731 I llm_load_print_meta: model params     = 2.51 B
0.00.597.732 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.733 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.734 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.735 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.737 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.743 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.745 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.745 I llm_load_print_meta: max token length = 93
0.00.597.930 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.669 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.698.467 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.475 I llama_new_context_with_model: n_batch    = 2048
0.00.698.476 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.476 I llama_new_context_with_model: flash_attn = 0
0.00.698.480 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.480 I llama_new_context_with_model: freq_scale = 1
0.00.729.536 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.583 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.731.136 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.144 I llama_new_context_with_model: graph nodes  = 601
0.00.731.144 I llama_new_context_with_model: graph splits = 1
0.00.731.162 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.097 I main: llama threadpool init, n_threads = 4
0.01.363.108 I 
0.01.363.225 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.230 I 
0.01.363.403 I sampler seed: 2022361405
0.01.363.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.421 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.363.421 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.422 I 
 increably. [end of text]


0.03.046.765 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.21 tokens per second)
0.03.046.769 I llama_perf_context_print:        load time =    1360.01 ms
0.03.046.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.046.773 I llama_perf_context_print:        eval time =    1671.62 ms /     4 runs   (  417.90 ms per token,     2.39 tokens per second)
0.03.046.774 I llama_perf_context_print:       total time =    1683.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.701 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.919 I main: llama backend init
0.00.003.849 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.027.226 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.432 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.525 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.537 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.539 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.547 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.548 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.549 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.552 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.560 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.561 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.562 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.563 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.564 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.757 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.855 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.279.263 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.279.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.279.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.279.275 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.279.277 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.279.279 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.279.281 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.279.284 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.279.286 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.279.287 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.279.288 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.279.289 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.279.298 I llama_model_loader: - type  f32:   37 tensors
0.00.279.301 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.142 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.282 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.474.313 I llm_load_vocab: special tokens cache size = 5
0.00.568.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.654 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.656 I llm_load_print_meta: arch             = gemma
0.00.568.656 I llm_load_print_meta: vocab type       = SPM
0.00.568.657 I llm_load_print_meta: n_vocab          = 256000
0.00.568.660 I llm_load_print_meta: n_merges         = 0
0.00.568.660 I llm_load_print_meta: vocab_only       = 0
0.00.568.661 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.661 I llm_load_print_meta: n_embd           = 2048
0.00.568.662 I llm_load_print_meta: n_layer          = 18
0.00.568.726 I llm_load_print_meta: n_head           = 8
0.00.568.733 I llm_load_print_meta: n_head_kv        = 1
0.00.568.733 I llm_load_print_meta: n_rot            = 256
0.00.568.734 I llm_load_print_meta: n_swa            = 0
0.00.568.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.739 I llm_load_print_meta: n_gqa            = 8
0.00.568.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.759 I llm_load_print_meta: n_ff             = 16384
0.00.568.760 I llm_load_print_meta: n_expert         = 0
0.00.568.760 I llm_load_print_meta: n_expert_used    = 0
0.00.568.761 I llm_load_print_meta: causal attn      = 1
0.00.568.762 I llm_load_print_meta: pooling type     = 0
0.00.568.762 I llm_load_print_meta: rope type        = 2
0.00.568.763 I llm_load_print_meta: rope scaling     = linear
0.00.568.764 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.764 I llm_load_print_meta: freq_scale_train = 1
0.00.568.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.770 I llm_load_print_meta: model type       = 2B
0.00.568.779 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.780 I llm_load_print_meta: model params     = 2.51 B
0.00.568.781 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.794 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.819 I llm_load_print_meta: max token length = 93
0.00.568.987 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.586 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.645.595 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.596 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.645.597 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.645.597 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.598 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.651.353 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.361 I llama_new_context_with_model: n_batch    = 2048
0.00.651.361 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.362 I llama_new_context_with_model: flash_attn = 0
0.00.651.365 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.366 I llama_new_context_with_model: freq_scale = 1
0.00.681.225 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.266 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.681.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.682.755 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.682.762 I llama_new_context_with_model: graph nodes  = 601
0.00.682.762 I llama_new_context_with_model: graph splits = 1
0.00.682.778 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.961 I main: llama threadpool init, n_threads = 4
0.01.299.973 I 
0.01.300.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.087 I 
0.01.300.246 I sampler seed: 2510962018
0.01.300.256 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.264 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.300.265 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.265 I 
 seconary, the following are the factors that affect the performance of a database management system (DBMS):

**a) Hardware factors**
**b) Software

0.14.980.055 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.68 tokens per second)
0.14.980.068 I llama_perf_context_print:        load time =    1295.88 ms
0.14.980.070 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.980.073 I llama_perf_context_print:        eval time =   13597.82 ms /    32 runs   (  424.93 ms per token,     2.35 tokens per second)
0.14.980.074 I llama_perf_context_print:       total time =   13680.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.682 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.878 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.131 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.445 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.468 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.470 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.471 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.472 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.474 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.272.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.291.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.291.213 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.291.214 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.291.215 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.291.216 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.291.217 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.291.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.291.224 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.291.225 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.291.226 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.291.227 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.291.228 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.291.235 I llama_model_loader: - type  f32:   37 tensors
0.00.291.240 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.751 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.760 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.785 I llm_load_vocab: special tokens cache size = 5
0.00.604.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.725 I llm_load_print_meta: arch             = gemma
0.00.604.725 I llm_load_print_meta: vocab type       = SPM
0.00.604.727 I llm_load_print_meta: n_vocab          = 256000
0.00.604.729 I llm_load_print_meta: n_merges         = 0
0.00.604.730 I llm_load_print_meta: vocab_only       = 0
0.00.604.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.730 I llm_load_print_meta: n_embd           = 2048
0.00.604.731 I llm_load_print_meta: n_layer          = 18
0.00.604.794 I llm_load_print_meta: n_head           = 8
0.00.604.801 I llm_load_print_meta: n_head_kv        = 1
0.00.604.802 I llm_load_print_meta: n_rot            = 256
0.00.604.803 I llm_load_print_meta: n_swa            = 0
0.00.604.803 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.804 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.814 I llm_load_print_meta: n_gqa            = 8
0.00.604.819 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.826 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.837 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.839 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.846 I llm_load_print_meta: n_ff             = 16384
0.00.604.846 I llm_load_print_meta: n_expert         = 0
0.00.604.847 I llm_load_print_meta: n_expert_used    = 0
0.00.604.847 I llm_load_print_meta: causal attn      = 1
0.00.604.851 I llm_load_print_meta: pooling type     = 0
0.00.604.851 I llm_load_print_meta: rope type        = 2
0.00.604.852 I llm_load_print_meta: rope scaling     = linear
0.00.604.853 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.853 I llm_load_print_meta: freq_scale_train = 1
0.00.604.854 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.854 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.855 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.855 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.855 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.856 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.867 I llm_load_print_meta: model type       = 2B
0.00.604.876 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.877 I llm_load_print_meta: model params     = 2.51 B
0.00.604.878 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.878 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.883 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.890 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.892 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.892 I llm_load_print_meta: max token length = 93
0.00.605.055 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.250 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.676.263 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.682.059 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.066 I llama_new_context_with_model: n_batch    = 2048
0.00.682.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.067 I llama_new_context_with_model: flash_attn = 0
0.00.682.071 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.072 I llama_new_context_with_model: freq_scale = 1
0.00.711.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.982 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.713.483 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.489 I llama_new_context_with_model: graph nodes  = 601
0.00.713.489 I llama_new_context_with_model: graph splits = 1
0.00.713.505 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.137 I main: llama threadpool init, n_threads = 4
0.01.325.149 I 
0.01.325.259 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.263 I 
0.01.325.428 I sampler seed: 139984433
0.01.325.439 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.446 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.447 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.448 I 
 increasities of the past century.

The passage discusses the importance of understanding the past to inform future decision-making. It highlights that studying history allows individuals to

0.14.908.664 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.87 tokens per second)
0.14.908.678 I llama_perf_context_print:        load time =    1322.07 ms
0.14.908.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.908.683 I llama_perf_context_print:        eval time =   13501.41 ms /    32 runs   (  421.92 ms per token,     2.37 tokens per second)
0.14.908.684 I llama_perf_context_print:       total time =   13583.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.689s
user	3m3.394s
sys	0m9.434s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3902 (70ff50d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199517.92 ms
main:    total time = 199517.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.671 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.021 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.231 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.335 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.340 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.341 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.342 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.343 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.348 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.358 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.359 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.360 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.499 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.507 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.508 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.509 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.510 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.513 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.517 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.518 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.520 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.521 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.286.522 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.530 I llama_model_loader: - type  f32:   37 tensors
0.00.286.534 I llama_model_loader: - type q4_K:  108 tensors
0.00.286.534 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.869 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.171 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.483.281 I llm_load_vocab: special tokens cache size = 5
0.00.589.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.630 I llm_load_print_meta: arch             = gemma
0.00.589.631 I llm_load_print_meta: vocab type       = SPM
0.00.589.632 I llm_load_print_meta: n_vocab          = 256000
0.00.589.634 I llm_load_print_meta: n_merges         = 0
0.00.589.635 I llm_load_print_meta: vocab_only       = 0
0.00.589.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.637 I llm_load_print_meta: n_embd           = 2048
0.00.589.638 I llm_load_print_meta: n_layer          = 18
0.00.589.702 I llm_load_print_meta: n_head           = 8
0.00.589.712 I llm_load_print_meta: n_head_kv        = 1
0.00.589.712 I llm_load_print_meta: n_rot            = 256
0.00.589.713 I llm_load_print_meta: n_swa            = 0
0.00.589.713 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.713 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.718 I llm_load_print_meta: n_gqa            = 8
0.00.589.722 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.727 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.728 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.730 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.731 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.731 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.736 I llm_load_print_meta: n_ff             = 16384
0.00.589.736 I llm_load_print_meta: n_expert         = 0
0.00.589.737 I llm_load_print_meta: n_expert_used    = 0
0.00.589.737 I llm_load_print_meta: causal attn      = 1
0.00.589.737 I llm_load_print_meta: pooling type     = 0
0.00.589.738 I llm_load_print_meta: rope type        = 2
0.00.589.739 I llm_load_print_meta: rope scaling     = linear
0.00.589.740 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.741 I llm_load_print_meta: freq_scale_train = 1
0.00.589.742 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.742 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.743 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.743 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.744 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.744 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.745 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.746 I llm_load_print_meta: model type       = 2B
0.00.589.753 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.589.754 I llm_load_print_meta: model params     = 2.51 B
0.00.589.755 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.589.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.766 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.766 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.780 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.787 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.788 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.788 I llm_load_print_meta: max token length = 93
0.00.589.954 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.263 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.651.271 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.651.272 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.651.273 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.651.273 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.651.274 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.656.958 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.965 I llama_new_context_with_model: n_batch    = 2048
0.00.656.965 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.966 I llama_new_context_with_model: flash_attn = 0
0.00.656.968 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.969 I llama_new_context_with_model: freq_scale = 1
0.00.685.877 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.040 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.445 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.451 I llama_new_context_with_model: graph nodes  = 601
0.00.687.452 I llama_new_context_with_model: graph splits = 1
0.00.687.467 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.742 I main: llama threadpool init, n_threads = 4
0.01.266.755 I 
0.01.266.862 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.866 I 
0.01.267.025 I sampler seed: 1953439238
0.01.267.036 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.046 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.048 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.267.049 I 
 increamically with the rising tension. The room pulsed with a feverish anticipation, a crescendo of hushed whispers and nervous glances. The tension crackled through the air like

0.12.216.892 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.06 tokens per second)
0.12.216.895 I llama_perf_context_print:        load time =    1263.77 ms
0.12.216.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.216.919 I llama_perf_context_print:        eval time =   10868.07 ms /    32 runs   (  339.63 ms per token,     2.94 tokens per second)
0.12.216.920 I llama_perf_context_print:       total time =   10950.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3902 (70ff50d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199362.64 ms
main:    total time = 199362.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.635 I build: 3902 (70ff50d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.922 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.038 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.041 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.051 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.058 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.066 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.067 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.068 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.070 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.084 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.986 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.356 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.358 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.359 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.360 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.375 I llama_model_loader: - type  f32:   37 tensors
0.00.274.380 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.381 I llama_model_loader: - type q6_K:   19 tensors
0.00.430.024 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.215 I llm_load_vocab: special tokens cache size = 5
0.00.551.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.257 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.262 I llm_load_print_meta: arch             = gemma
0.00.551.263 I llm_load_print_meta: vocab type       = SPM
0.00.551.264 I llm_load_print_meta: n_vocab          = 256000
0.00.551.267 I llm_load_print_meta: n_merges         = 0
0.00.551.267 I llm_load_print_meta: vocab_only       = 0
0.00.551.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.269 I llm_load_print_meta: n_embd           = 2048
0.00.551.269 I llm_load_print_meta: n_layer          = 18
0.00.551.347 I llm_load_print_meta: n_head           = 8
0.00.551.357 I llm_load_print_meta: n_head_kv        = 1
0.00.551.357 I llm_load_print_meta: n_rot            = 256
0.00.551.358 I llm_load_print_meta: n_swa            = 0
0.00.551.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.359 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.364 I llm_load_print_meta: n_gqa            = 8
0.00.551.370 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.383 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.385 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.386 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.387 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.404 I llm_load_print_meta: n_ff             = 16384
0.00.551.408 I llm_load_print_meta: n_expert         = 0
0.00.551.408 I llm_load_print_meta: n_expert_used    = 0
0.00.551.409 I llm_load_print_meta: causal attn      = 1
0.00.551.410 I llm_load_print_meta: pooling type     = 0
0.00.551.410 I llm_load_print_meta: rope type        = 2
0.00.551.411 I llm_load_print_meta: rope scaling     = linear
0.00.551.413 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.414 I llm_load_print_meta: freq_scale_train = 1
0.00.551.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.415 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.416 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.417 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.418 I llm_load_print_meta: model type       = 2B
0.00.551.429 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.551.430 I llm_load_print_meta: model params     = 2.51 B
0.00.551.432 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.551.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.551.457 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.551.458 I llm_load_print_meta: max token length = 93
0.00.551.641 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.610.181 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.615.943 I llama_new_context_with_model: n_ctx      = 8192
0.00.615.950 I llama_new_context_with_model: n_batch    = 2048
0.00.615.950 I llama_new_context_with_model: n_ubatch   = 512
0.00.615.951 I llama_new_context_with_model: flash_attn = 0
0.00.615.953 I llama_new_context_with_model: freq_base  = 10000.0
0.00.615.954 I llama_new_context_with_model: freq_scale = 1
0.00.645.748 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.645.796 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.645.915 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.288 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.295 I llama_new_context_with_model: graph nodes  = 601
0.00.647.296 I llama_new_context_with_model: graph splits = 1
0.00.647.314 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.225.797 I main: llama threadpool init, n_threads = 4
0.01.225.812 I 
0.01.225.920 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.225.920 I 
0.01.226.113 I sampler seed: 1201717731
0.01.226.123 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.226.133 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.226.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.226.134 I 
 maneuvously. [end of text]


0.02.932.995 I llama_perf_sampler_print:    sampling time =       7.79 ms /     6 runs   (    1.30 ms per token,   770.71 tokens per second)
0.02.932.998 I llama_perf_context_print:        load time =    1222.78 ms
0.02.933.012 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.933.014 I llama_perf_context_print:        eval time =    1692.91 ms /     5 runs   (  338.58 ms per token,     2.95 tokens per second)
0.02.933.016 I llama_perf_context_print:       total time =    1707.21 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.933s
user	49m36.914s
sys	0m6.407s
