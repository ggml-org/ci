+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.694 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.902 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.914 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.035 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.043 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.044 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.046 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.047 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.054 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.055 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.058 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.059 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.905 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.116 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.126 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.127 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.150 I llama_model_loader: - type  f32:   37 tensors
0.00.349.153 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.105 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.622.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.440 I llm_load_vocab: special tokens cache size = 5
0.00.815.808 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.877 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.878 I llm_load_print_meta: arch             = gemma
0.00.815.879 I llm_load_print_meta: vocab type       = SPM
0.00.815.880 I llm_load_print_meta: n_vocab          = 256000
0.00.815.882 I llm_load_print_meta: n_merges         = 0
0.00.815.883 I llm_load_print_meta: vocab_only       = 0
0.00.815.883 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.883 I llm_load_print_meta: n_embd           = 2048
0.00.815.884 I llm_load_print_meta: n_layer          = 18
0.00.815.950 I llm_load_print_meta: n_head           = 8
0.00.815.957 I llm_load_print_meta: n_head_kv        = 1
0.00.815.958 I llm_load_print_meta: n_rot            = 256
0.00.815.958 I llm_load_print_meta: n_swa            = 0
0.00.815.959 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.959 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.963 I llm_load_print_meta: n_gqa            = 8
0.00.815.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.975 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.983 I llm_load_print_meta: n_ff             = 16384
0.00.815.983 I llm_load_print_meta: n_expert         = 0
0.00.815.984 I llm_load_print_meta: n_expert_used    = 0
0.00.815.984 I llm_load_print_meta: causal attn      = 1
0.00.815.985 I llm_load_print_meta: pooling type     = 0
0.00.815.986 I llm_load_print_meta: rope type        = 2
0.00.815.986 I llm_load_print_meta: rope scaling     = linear
0.00.815.988 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.988 I llm_load_print_meta: freq_scale_train = 1
0.00.815.999 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.816.000 I llm_load_print_meta: rope_finetuned   = unknown
0.00.816.001 I llm_load_print_meta: ssm_d_conv       = 0
0.00.816.001 I llm_load_print_meta: ssm_d_inner      = 0
0.00.816.001 I llm_load_print_meta: ssm_d_state      = 0
0.00.816.002 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.816.002 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.816.003 I llm_load_print_meta: model type       = 2B
0.00.816.004 I llm_load_print_meta: model ftype      = Q8_0
0.00.816.005 I llm_load_print_meta: model params     = 2.51 B
0.00.816.014 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.816.015 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.816.016 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.816.016 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.816.017 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.816.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.816.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.816.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.816.038 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.816.039 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.816.040 I llm_load_print_meta: max token length = 93
0.00.918.537 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.918.547 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.918.548 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.918.549 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.918.549 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.918.550 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.924.399 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.407 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.407 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.408 I llama_new_context_with_model: n_batch       = 2048
0.00.924.408 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.409 I llama_new_context_with_model: flash_attn    = 0
0.00.924.411 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.412 I llama_new_context_with_model: freq_scale    = 1
0.00.924.413 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.673 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.714 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.836 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.339 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.343 I llama_new_context_with_model: graph nodes  = 601
0.00.941.343 I llama_new_context_with_model: graph splits = 1
0.00.941.367 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.554.181 I main: llama threadpool init, n_threads = 4
0.01.554.197 I 
0.01.554.309 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.554.313 I 
0.01.554.558 I sampler seed: 412560546
0.01.554.572 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.582 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.585 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.585 I 
 increasities, and other related phenomena.

**Answer:**

**Neuroception:**
- The perception of one's own body and surroundings.
-

0.15.244.065 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.39 tokens per second)
0.15.244.068 I llama_perf_context_print:        load time =    1553.16 ms
0.15.244.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.244.083 I llama_perf_context_print:        eval time =   13599.95 ms /    32 runs   (  425.00 ms per token,     2.35 tokens per second)
0.15.244.084 I llama_perf_context_print:       total time =   13689.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.222 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.319 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.338 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.344 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.351 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.352 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.353 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.366 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.368 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.370 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.371 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.631 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.816 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.830 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.833 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.837 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.849 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.852 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.854 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.864 I llama_model_loader: - type  f32:   37 tensors
0.00.348.866 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.429 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.310 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.253 I llm_load_vocab: special tokens cache size = 5
0.00.831.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.232 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.236 I llm_load_print_meta: arch             = gemma
0.00.831.237 I llm_load_print_meta: vocab type       = SPM
0.00.831.238 I llm_load_print_meta: n_vocab          = 256000
0.00.831.240 I llm_load_print_meta: n_merges         = 0
0.00.831.241 I llm_load_print_meta: vocab_only       = 0
0.00.831.241 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.241 I llm_load_print_meta: n_embd           = 2048
0.00.831.242 I llm_load_print_meta: n_layer          = 18
0.00.831.306 I llm_load_print_meta: n_head           = 8
0.00.831.317 I llm_load_print_meta: n_head_kv        = 1
0.00.831.318 I llm_load_print_meta: n_rot            = 256
0.00.831.328 I llm_load_print_meta: n_swa            = 0
0.00.831.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.330 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.335 I llm_load_print_meta: n_gqa            = 8
0.00.831.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.346 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.348 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.350 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.351 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.351 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.351 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.357 I llm_load_print_meta: n_ff             = 16384
0.00.831.358 I llm_load_print_meta: n_expert         = 0
0.00.831.358 I llm_load_print_meta: n_expert_used    = 0
0.00.831.359 I llm_load_print_meta: causal attn      = 1
0.00.831.359 I llm_load_print_meta: pooling type     = 0
0.00.831.359 I llm_load_print_meta: rope type        = 2
0.00.831.360 I llm_load_print_meta: rope scaling     = linear
0.00.831.362 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.363 I llm_load_print_meta: freq_scale_train = 1
0.00.831.363 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.363 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.379 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.389 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.390 I llm_load_print_meta: model type       = 2B
0.00.831.391 I llm_load_print_meta: model ftype      = Q8_0
0.00.831.392 I llm_load_print_meta: model params     = 2.51 B
0.00.831.400 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.831.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.420 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.420 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.420 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.421 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.426 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.428 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.428 I llm_load_print_meta: max token length = 93
0.00.927.784 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.933.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.643 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.643 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.644 I llama_new_context_with_model: n_batch       = 2048
0.00.933.644 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.645 I llama_new_context_with_model: flash_attn    = 0
0.00.933.647 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.648 I llama_new_context_with_model: freq_scale    = 1
0.00.933.648 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.436 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.478 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.189 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.193 I llama_new_context_with_model: graph nodes  = 601
0.00.951.193 I llama_new_context_with_model: graph splits = 1
0.00.951.218 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.563.918 I main: llama threadpool init, n_threads = 4
0.01.563.934 I 
0.01.564.050 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.564.054 I 
0.01.564.293 I sampler seed: 3494388746
0.01.564.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.564.317 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.564.320 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.564.320 I 
 increamental

I am not able to provide medical advice or diagnose medical conditions. Please consult a qualified healthcare professional for any questions or concerns you may have. [end of text]


0.15.155.854 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.70 tokens per second)
0.15.155.857 I llama_perf_context_print:        load time =    1562.98 ms
0.15.155.859 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.155.860 I llama_perf_context_print:        eval time =   13502.78 ms /    32 runs   (  421.96 ms per token,     2.37 tokens per second)
0.15.155.861 I llama_perf_context_print:       total time =   13591.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.023.543 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.555 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.662 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.666 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.672 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.674 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.676 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.678 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.680 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.687 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.691 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.693 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.694 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.695 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.000 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.010 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.015 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.021 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.022 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.023 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.025 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.026 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.035 I llama_model_loader: - type  f32:   37 tensors
0.00.349.037 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.048 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.320 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.373 I llm_load_vocab: special tokens cache size = 5
0.00.838.278 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.350 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.354 I llm_load_print_meta: arch             = gemma
0.00.838.355 I llm_load_print_meta: vocab type       = SPM
0.00.838.356 I llm_load_print_meta: n_vocab          = 256000
0.00.838.358 I llm_load_print_meta: n_merges         = 0
0.00.838.358 I llm_load_print_meta: vocab_only       = 0
0.00.838.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.359 I llm_load_print_meta: n_embd           = 2048
0.00.838.359 I llm_load_print_meta: n_layer          = 18
0.00.838.425 I llm_load_print_meta: n_head           = 8
0.00.838.435 I llm_load_print_meta: n_head_kv        = 1
0.00.838.437 I llm_load_print_meta: n_rot            = 256
0.00.838.437 I llm_load_print_meta: n_swa            = 0
0.00.838.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.445 I llm_load_print_meta: n_gqa            = 8
0.00.838.450 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.459 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.465 I llm_load_print_meta: n_ff             = 16384
0.00.838.468 I llm_load_print_meta: n_expert         = 0
0.00.838.468 I llm_load_print_meta: n_expert_used    = 0
0.00.838.468 I llm_load_print_meta: causal attn      = 1
0.00.838.469 I llm_load_print_meta: pooling type     = 0
0.00.838.469 I llm_load_print_meta: rope type        = 2
0.00.838.470 I llm_load_print_meta: rope scaling     = linear
0.00.838.471 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.471 I llm_load_print_meta: freq_scale_train = 1
0.00.838.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.474 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.475 I llm_load_print_meta: model type       = 2B
0.00.838.486 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.487 I llm_load_print_meta: model params     = 2.51 B
0.00.838.498 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.499 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.500 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.501 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.502 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.515 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.516 I llm_load_print_meta: max token length = 93
0.00.914.825 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.914.833 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.834 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.914.835 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.914.836 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.836 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.920.882 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.890 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.890 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.891 I llama_new_context_with_model: n_batch       = 2048
0.00.920.891 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.892 I llama_new_context_with_model: flash_attn    = 0
0.00.920.894 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.895 I llama_new_context_with_model: freq_scale    = 1
0.00.920.897 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.396 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.435 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.087 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.091 I llama_new_context_with_model: graph nodes  = 601
0.00.938.092 I llama_new_context_with_model: graph splits = 1
0.00.938.114 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.421 I main: llama threadpool init, n_threads = 4
0.01.551.436 I 
0.01.551.545 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.551.546 I 
0.01.551.796 I sampler seed: 2092046950
0.01.551.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.823 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.827 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.828 I 
 increasively.

I am unable to generate the requested content as it would require me to generate text that is sexually suggestive in nature. I am programmed to uphold

0.15.468.115 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.08 tokens per second)
0.15.468.118 I llama_perf_context_print:        load time =    1550.49 ms
0.15.468.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.468.122 I llama_perf_context_print:        eval time =   13827.88 ms /    32 runs   (  432.12 ms per token,     2.31 tokens per second)
0.15.468.123 I llama_perf_context_print:       total time =   13916.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.286 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.384 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.396 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.398 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.404 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.408 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.409 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.410 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.421 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.422 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.423 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.842 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.703 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.713 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.717 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.724 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.726 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.727 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.738 I llama_model_loader: - type  f32:   37 tensors
0.00.348.740 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.975 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.841 I llm_load_vocab: special tokens cache size = 5
0.00.812.299 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.812.374 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.812.375 I llm_load_print_meta: arch             = gemma
0.00.812.376 I llm_load_print_meta: vocab type       = SPM
0.00.812.376 I llm_load_print_meta: n_vocab          = 256000
0.00.812.379 I llm_load_print_meta: n_merges         = 0
0.00.812.379 I llm_load_print_meta: vocab_only       = 0
0.00.812.380 I llm_load_print_meta: n_ctx_train      = 8192
0.00.812.380 I llm_load_print_meta: n_embd           = 2048
0.00.812.380 I llm_load_print_meta: n_layer          = 18
0.00.812.446 I llm_load_print_meta: n_head           = 8
0.00.812.453 I llm_load_print_meta: n_head_kv        = 1
0.00.812.454 I llm_load_print_meta: n_rot            = 256
0.00.812.454 I llm_load_print_meta: n_swa            = 0
0.00.812.455 I llm_load_print_meta: n_embd_head_k    = 256
0.00.812.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.812.462 I llm_load_print_meta: n_gqa            = 8
0.00.812.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.812.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.812.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.812.479 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.812.480 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.812.481 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.812.481 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.812.486 I llm_load_print_meta: n_ff             = 16384
0.00.812.487 I llm_load_print_meta: n_expert         = 0
0.00.812.488 I llm_load_print_meta: n_expert_used    = 0
0.00.812.489 I llm_load_print_meta: causal attn      = 1
0.00.812.489 I llm_load_print_meta: pooling type     = 0
0.00.812.489 I llm_load_print_meta: rope type        = 2
0.00.812.490 I llm_load_print_meta: rope scaling     = linear
0.00.812.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.812.493 I llm_load_print_meta: freq_scale_train = 1
0.00.812.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.812.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.812.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.812.497 I llm_load_print_meta: ssm_d_inner      = 0
0.00.812.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.812.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.812.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.812.499 I llm_load_print_meta: model type       = 2B
0.00.812.500 I llm_load_print_meta: model ftype      = Q8_0
0.00.812.500 I llm_load_print_meta: model params     = 2.51 B
0.00.812.509 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.812.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.812.513 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.812.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.812.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.812.514 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.812.514 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.812.515 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.812.522 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.812.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.812.525 I llm_load_print_meta: max token length = 93
0.00.885.583 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.885.590 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.891.355 I llama_new_context_with_model: n_seq_max     = 1
0.00.891.362 I llama_new_context_with_model: n_ctx         = 4096
0.00.891.363 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.891.363 I llama_new_context_with_model: n_batch       = 2048
0.00.891.363 I llama_new_context_with_model: n_ubatch      = 512
0.00.891.364 I llama_new_context_with_model: flash_attn    = 0
0.00.891.366 I llama_new_context_with_model: freq_base     = 10000.0
0.00.891.367 I llama_new_context_with_model: freq_scale    = 1
0.00.891.368 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.905.501 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.905.540 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.905.664 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.908.251 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.908.255 I llama_new_context_with_model: graph nodes  = 601
0.00.908.256 I llama_new_context_with_model: graph splits = 1
0.00.908.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.519.309 I main: llama threadpool init, n_threads = 4
0.01.519.325 I 
0.01.519.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.519.445 I 
0.01.519.687 I sampler seed: 2074701405
0.01.519.701 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.519.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.519.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.519.714 I 
 increasities, 
**and the subsequent devastation of the entire civilization. 
For this purpose, the following conditions must be met: 

1.

0.15.190.547 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.83 tokens per second)
0.15.190.550 I llama_perf_context_print:        load time =    1518.33 ms
0.15.190.551 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.190.568 I llama_perf_context_print:        eval time =   13582.21 ms /    32 runs   (  424.44 ms per token,     2.36 tokens per second)
0.15.190.569 I llama_perf_context_print:       total time =   13671.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.583s
user	3m53.103s
sys	0m9.252s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4175 (7066b4cc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186472.44 ms
main:    total time = 186472.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.160 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.262 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.281 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.288 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.290 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.291 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.300 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.301 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.302 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.237 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.244 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.246 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.247 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.248 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.250 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.252 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.259 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.260 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.355.262 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.271 I llama_model_loader: - type  f32:   37 tensors
0.00.355.273 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.274 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.937 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.906 I llm_load_vocab: special tokens cache size = 5
0.00.822.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.045 I llm_load_print_meta: arch             = gemma
0.00.823.046 I llm_load_print_meta: vocab type       = SPM
0.00.823.047 I llm_load_print_meta: n_vocab          = 256000
0.00.823.050 I llm_load_print_meta: n_merges         = 0
0.00.823.051 I llm_load_print_meta: vocab_only       = 0
0.00.823.051 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.052 I llm_load_print_meta: n_embd           = 2048
0.00.823.052 I llm_load_print_meta: n_layer          = 18
0.00.823.119 I llm_load_print_meta: n_head           = 8
0.00.823.139 I llm_load_print_meta: n_head_kv        = 1
0.00.823.141 I llm_load_print_meta: n_rot            = 256
0.00.823.141 I llm_load_print_meta: n_swa            = 0
0.00.823.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.147 I llm_load_print_meta: n_gqa            = 8
0.00.823.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.172 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.173 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.180 I llm_load_print_meta: n_ff             = 16384
0.00.823.180 I llm_load_print_meta: n_expert         = 0
0.00.823.181 I llm_load_print_meta: n_expert_used    = 0
0.00.823.181 I llm_load_print_meta: causal attn      = 1
0.00.823.181 I llm_load_print_meta: pooling type     = 0
0.00.823.182 I llm_load_print_meta: rope type        = 2
0.00.823.186 I llm_load_print_meta: rope scaling     = linear
0.00.823.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.197 I llm_load_print_meta: freq_scale_train = 1
0.00.823.205 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.206 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.213 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.214 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.218 I llm_load_print_meta: model type       = 2B
0.00.823.220 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.823.221 I llm_load_print_meta: model params     = 2.51 B
0.00.823.230 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.823.231 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.233 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.234 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.235 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.235 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.236 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.237 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.244 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.245 I llm_load_print_meta: max token length = 93
0.00.885.005 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.885.015 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.885.016 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.885.017 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.885.018 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.885.018 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.890.714 I llama_new_context_with_model: n_seq_max     = 1
0.00.890.720 I llama_new_context_with_model: n_ctx         = 4096
0.00.890.721 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.890.721 I llama_new_context_with_model: n_batch       = 2048
0.00.890.721 I llama_new_context_with_model: n_ubatch      = 512
0.00.890.722 I llama_new_context_with_model: flash_attn    = 0
0.00.890.724 I llama_new_context_with_model: freq_base     = 10000.0
0.00.890.724 I llama_new_context_with_model: freq_scale    = 1
0.00.890.725 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.905.136 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.905.174 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.905.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.907.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.907.920 I llama_new_context_with_model: graph nodes  = 601
0.00.907.921 I llama_new_context_with_model: graph splits = 1
0.00.907.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.342 I main: llama threadpool init, n_threads = 4
0.01.489.359 I 
0.01.489.476 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.489.477 I 
0.01.489.714 I sampler seed: 3971627845
0.01.489.730 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.739 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.743 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.743 I 
 seconally. [end of text]


0.02.879.042 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.98 tokens per second)
0.02.879.046 I llama_perf_context_print:        load time =    1488.38 ms
0.02.879.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.879.051 I llama_perf_context_print:        eval time =    1376.70 ms /     4 runs   (  344.18 ms per token,     2.91 tokens per second)
0.02.879.052 I llama_perf_context_print:       total time =    1389.71 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4175 (7066b4cc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186321.68 ms
main:    total time = 186321.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.023.521 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.625 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.642 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.653 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.655 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.656 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.658 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.668 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.672 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.674 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.413 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.013 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.014 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.016 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.017 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.023 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.032 I llama_model_loader: - type  f32:   37 tensors
0.00.349.034 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.035 I llama_model_loader: - type q6_K:   19 tensors
0.00.572.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.337 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.252 I llm_load_vocab: special tokens cache size = 5
0.00.817.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.094 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.095 I llm_load_print_meta: arch             = gemma
0.00.817.095 I llm_load_print_meta: vocab type       = SPM
0.00.817.097 I llm_load_print_meta: n_vocab          = 256000
0.00.817.100 I llm_load_print_meta: n_merges         = 0
0.00.817.100 I llm_load_print_meta: vocab_only       = 0
0.00.817.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.101 I llm_load_print_meta: n_embd           = 2048
0.00.817.101 I llm_load_print_meta: n_layer          = 18
0.00.817.166 I llm_load_print_meta: n_head           = 8
0.00.817.174 I llm_load_print_meta: n_head_kv        = 1
0.00.817.175 I llm_load_print_meta: n_rot            = 256
0.00.817.175 I llm_load_print_meta: n_swa            = 0
0.00.817.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.176 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.181 I llm_load_print_meta: n_gqa            = 8
0.00.817.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.192 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.193 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.200 I llm_load_print_meta: n_ff             = 16384
0.00.817.200 I llm_load_print_meta: n_expert         = 0
0.00.817.201 I llm_load_print_meta: n_expert_used    = 0
0.00.817.201 I llm_load_print_meta: causal attn      = 1
0.00.817.203 I llm_load_print_meta: pooling type     = 0
0.00.817.203 I llm_load_print_meta: rope type        = 2
0.00.817.214 I llm_load_print_meta: rope scaling     = linear
0.00.817.219 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.231 I llm_load_print_meta: freq_scale_train = 1
0.00.817.235 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.235 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.236 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.236 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.237 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.237 I llm_load_print_meta: model type       = 2B
0.00.817.239 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.817.239 I llm_load_print_meta: model params     = 2.51 B
0.00.817.248 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.817.248 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.249 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.249 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.249 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.275 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.275 I llm_load_print_meta: max token length = 93
0.00.873.938 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.879.782 I llama_new_context_with_model: n_seq_max     = 1
0.00.879.792 I llama_new_context_with_model: n_ctx         = 4096
0.00.879.792 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.879.793 I llama_new_context_with_model: n_batch       = 2048
0.00.879.793 I llama_new_context_with_model: n_ubatch      = 512
0.00.879.794 I llama_new_context_with_model: flash_attn    = 0
0.00.879.797 I llama_new_context_with_model: freq_base     = 10000.0
0.00.879.798 I llama_new_context_with_model: freq_scale    = 1
0.00.879.799 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.895.430 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.895.474 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.895.608 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.898.244 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.898.248 I llama_new_context_with_model: graph nodes  = 601
0.00.898.249 I llama_new_context_with_model: graph splits = 1
0.00.898.270 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.484.424 I main: llama threadpool init, n_threads = 4
0.01.484.440 I 
0.01.484.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.484.558 I 
0.01.484.794 I sampler seed: 909590675
0.01.484.807 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.484.817 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.484.818 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.484.818 I 
 seconded by the narrator. The narrator's tone is one of wonder and amazement.

**The Floating Islands**

Imagine a world where islands shimmered

0.12.603.536 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.41 tokens per second)
0.12.603.539 I llama_perf_context_print:        load time =    1483.44 ms
0.12.603.541 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.603.543 I llama_perf_context_print:        eval time =   11029.61 ms /    32 runs   (  344.68 ms per token,     2.90 tokens per second)
0.12.603.545 I llama_perf_context_print:       total time =   11119.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.162s
user	46m3.760s
sys	0m6.347s
