+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.437 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.635 I main: llama backend init
0.00.000.641 I main: load the model and apply lora adapter, if any
0.00.020.848 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.856 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.873 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.875 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.876 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.876 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.877 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.881 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.265 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.272 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.273 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.274 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.278 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.279 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.280 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.284 I llama_model_loader: - type  f32:   37 tensors
0.00.132.285 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.826 I llm_load_vocab: special tokens cache size = 5
0.00.263.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.996 I llm_load_print_meta: arch             = gemma
0.00.263.996 I llm_load_print_meta: vocab type       = SPM
0.00.263.997 I llm_load_print_meta: n_vocab          = 256000
0.00.263.998 I llm_load_print_meta: n_merges         = 0
0.00.263.998 I llm_load_print_meta: vocab_only       = 0
0.00.263.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.999 I llm_load_print_meta: n_embd           = 2048
0.00.263.999 I llm_load_print_meta: n_layer          = 18
0.00.264.010 I llm_load_print_meta: n_head           = 8
0.00.264.011 I llm_load_print_meta: n_head_kv        = 1
0.00.264.012 I llm_load_print_meta: n_rot            = 256
0.00.264.012 I llm_load_print_meta: n_swa            = 0
0.00.264.013 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.013 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.014 I llm_load_print_meta: n_gqa            = 8
0.00.264.015 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.017 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.019 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.020 I llm_load_print_meta: n_ff             = 16384
0.00.264.020 I llm_load_print_meta: n_expert         = 0
0.00.264.021 I llm_load_print_meta: n_expert_used    = 0
0.00.264.021 I llm_load_print_meta: causal attn      = 1
0.00.264.021 I llm_load_print_meta: pooling type     = 0
0.00.264.022 I llm_load_print_meta: rope type        = 2
0.00.264.022 I llm_load_print_meta: rope scaling     = linear
0.00.264.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.024 I llm_load_print_meta: freq_scale_train = 1
0.00.264.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.025 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.026 I llm_load_print_meta: model type       = 2B
0.00.264.027 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.028 I llm_load_print_meta: model params     = 2.51 B
0.00.264.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.030 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.031 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.032 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.033 I llm_load_print_meta: max token length = 93
0.00.363.867 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.874 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.875 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.876 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.876 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.877 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.055 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.063 I llama_new_context_with_model: n_batch       = 2048
0.00.369.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.064 I llama_new_context_with_model: flash_attn    = 0
0.00.369.066 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.067 I llama_new_context_with_model: freq_scale    = 1
0.00.369.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.213 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.632 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.638 I llama_new_context_with_model: graph nodes  = 601
0.00.384.639 I llama_new_context_with_model: graph splits = 1
0.00.384.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.383 I main: llama threadpool init, n_threads = 4
0.00.469.398 I 
0.00.469.470 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.474 I 
0.00.469.522 I sampler seed: 1904313390
0.00.469.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.536 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.537 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.537 I 
 increasities.

I cannot find the requested information in the provided context. [end of text]


0.01.595.358 I llama_perf_sampler_print:    sampling time =       2.35 ms /    17 runs   (    0.14 ms per token,  7224.82 tokens per second)
0.01.595.361 I llama_perf_context_print:        load time =     468.72 ms
0.01.595.362 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.595.364 I llama_perf_context_print:        eval time =    1115.76 ms /    16 runs   (   69.74 ms per token,    14.34 tokens per second)
0.01.595.365 I llama_perf_context_print:       total time =    1125.98 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.784 I main: load the model and apply lora adapter, if any
0.00.021.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.215 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.223 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.227 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.228 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.229 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.230 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.231 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.237 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.238 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.121 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.014 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.021 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.022 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.023 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.024 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.026 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.032 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.037 I llama_model_loader: - type  f32:   37 tensors
0.00.132.038 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.552 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.087 I llm_load_vocab: special tokens cache size = 5
0.00.267.360 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.387 I llm_load_print_meta: arch             = gemma
0.00.267.388 I llm_load_print_meta: vocab type       = SPM
0.00.267.389 I llm_load_print_meta: n_vocab          = 256000
0.00.267.389 I llm_load_print_meta: n_merges         = 0
0.00.267.390 I llm_load_print_meta: vocab_only       = 0
0.00.267.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.390 I llm_load_print_meta: n_embd           = 2048
0.00.267.391 I llm_load_print_meta: n_layer          = 18
0.00.267.402 I llm_load_print_meta: n_head           = 8
0.00.267.403 I llm_load_print_meta: n_head_kv        = 1
0.00.267.403 I llm_load_print_meta: n_rot            = 256
0.00.267.403 I llm_load_print_meta: n_swa            = 0
0.00.267.404 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.404 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.406 I llm_load_print_meta: n_gqa            = 8
0.00.267.407 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.410 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.410 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.411 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.412 I llm_load_print_meta: n_ff             = 16384
0.00.267.412 I llm_load_print_meta: n_expert         = 0
0.00.267.413 I llm_load_print_meta: n_expert_used    = 0
0.00.267.413 I llm_load_print_meta: causal attn      = 1
0.00.267.413 I llm_load_print_meta: pooling type     = 0
0.00.267.414 I llm_load_print_meta: rope type        = 2
0.00.267.414 I llm_load_print_meta: rope scaling     = linear
0.00.267.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.416 I llm_load_print_meta: freq_scale_train = 1
0.00.267.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.417 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.418 I llm_load_print_meta: model type       = 2B
0.00.267.419 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.420 I llm_load_print_meta: model params     = 2.51 B
0.00.267.421 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.421 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.422 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.425 I llm_load_print_meta: max token length = 93
0.00.364.614 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.000 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.000 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.001 I llama_new_context_with_model: n_batch       = 2048
0.00.370.001 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.002 I llama_new_context_with_model: flash_attn    = 0
0.00.370.004 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.005 I llama_new_context_with_model: freq_scale    = 1
0.00.370.006 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.717 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.734 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.154 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.159 I llama_new_context_with_model: graph nodes  = 601
0.00.387.160 I llama_new_context_with_model: graph splits = 1
0.00.387.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.862 I main: llama threadpool init, n_threads = 4
0.00.467.878 I 
0.00.467.955 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.960 I 
0.00.468.015 I sampler seed: 680885180
0.00.468.027 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.044 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.045 I 
 increasities and vulnerabilities of the system.

**Answer:**
**Vulnerabilities** are weaknesses or defects in a system that could be exploited by malicious actors

0.02.634.244 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.02.634.246 I llama_perf_context_print:        load time =     467.06 ms
0.02.634.247 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.634.249 I llama_perf_context_print:        eval time =    2146.90 ms /    32 runs   (   67.09 ms per token,    14.91 tokens per second)
0.02.634.250 I llama_perf_context_print:       total time =    2166.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.569 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.801 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.021.354 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.362 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.380 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.383 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.384 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.385 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.385 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.386 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.391 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.391 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.392 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.394 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.276 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.127 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.136 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.137 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.142 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.147 I llama_model_loader: - type  f32:   37 tensors
0.00.132.149 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.123 I llm_load_vocab: special tokens cache size = 5
0.00.272.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.441 I llm_load_print_meta: arch             = gemma
0.00.272.442 I llm_load_print_meta: vocab type       = SPM
0.00.272.443 I llm_load_print_meta: n_vocab          = 256000
0.00.272.443 I llm_load_print_meta: n_merges         = 0
0.00.272.443 I llm_load_print_meta: vocab_only       = 0
0.00.272.444 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.444 I llm_load_print_meta: n_embd           = 2048
0.00.272.444 I llm_load_print_meta: n_layer          = 18
0.00.272.456 I llm_load_print_meta: n_head           = 8
0.00.272.457 I llm_load_print_meta: n_head_kv        = 1
0.00.272.457 I llm_load_print_meta: n_rot            = 256
0.00.272.457 I llm_load_print_meta: n_swa            = 0
0.00.272.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.459 I llm_load_print_meta: n_gqa            = 8
0.00.272.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.464 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.465 I llm_load_print_meta: n_ff             = 16384
0.00.272.465 I llm_load_print_meta: n_expert         = 0
0.00.272.465 I llm_load_print_meta: n_expert_used    = 0
0.00.272.466 I llm_load_print_meta: causal attn      = 1
0.00.272.466 I llm_load_print_meta: pooling type     = 0
0.00.272.466 I llm_load_print_meta: rope type        = 2
0.00.272.467 I llm_load_print_meta: rope scaling     = linear
0.00.272.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.468 I llm_load_print_meta: freq_scale_train = 1
0.00.272.469 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.472 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.472 I llm_load_print_meta: model type       = 2B
0.00.272.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.474 I llm_load_print_meta: model params     = 2.51 B
0.00.272.475 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.478 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.478 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.479 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.480 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.481 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.481 I llm_load_print_meta: max token length = 93
0.00.346.510 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.515 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.516 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.517 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.517 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.518 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.351.946 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.952 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.953 I llama_new_context_with_model: n_batch       = 2048
0.00.351.954 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.954 I llama_new_context_with_model: flash_attn    = 0
0.00.351.957 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.957 I llama_new_context_with_model: freq_scale    = 1
0.00.351.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.729 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.741 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.085 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.091 I llama_new_context_with_model: graph nodes  = 601
0.00.368.091 I llama_new_context_with_model: graph splits = 1
0.00.368.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.185 I main: llama threadpool init, n_threads = 4
0.00.452.202 I 
0.00.452.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.274 I 
0.00.452.314 I sampler seed: 3273505507
0.00.452.323 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.326 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.326 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.327 I 
 increasels with a mischievous grin.

**Answer:** The Cheshire Cat.

The Cheshire Cat is a mythical feline with a mischievous grin and a penchant for riddles

0.02.708.202 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6882.17 tokens per second)
0.02.708.204 I llama_perf_context_print:        load time =     451.36 ms
0.02.708.205 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.207 I llama_perf_context_print:        eval time =    2237.46 ms /    32 runs   (   69.92 ms per token,    14.30 tokens per second)
0.02.708.208 I llama_perf_context_print:       total time =    2256.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.584 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.811 I main: llama backend init
0.00.000.819 I main: load the model and apply lora adapter, if any
0.00.021.523 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.533 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.541 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.547 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.551 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.554 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.554 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.559 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.560 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.560 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.562 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.525 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.798 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.660 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.667 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.667 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.668 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.669 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.673 I llama_model_loader: - type  f32:   37 tensors
0.00.132.674 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.246 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.603 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.240 I llm_load_vocab: special tokens cache size = 5
0.00.270.285 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.300 I llm_load_print_meta: arch             = gemma
0.00.270.300 I llm_load_print_meta: vocab type       = SPM
0.00.270.301 I llm_load_print_meta: n_vocab          = 256000
0.00.270.302 I llm_load_print_meta: n_merges         = 0
0.00.270.302 I llm_load_print_meta: vocab_only       = 0
0.00.270.302 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.302 I llm_load_print_meta: n_embd           = 2048
0.00.270.303 I llm_load_print_meta: n_layer          = 18
0.00.270.313 I llm_load_print_meta: n_head           = 8
0.00.270.314 I llm_load_print_meta: n_head_kv        = 1
0.00.270.315 I llm_load_print_meta: n_rot            = 256
0.00.270.315 I llm_load_print_meta: n_swa            = 0
0.00.270.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.316 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.317 I llm_load_print_meta: n_gqa            = 8
0.00.270.318 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.319 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.321 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.321 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.322 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.322 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.323 I llm_load_print_meta: n_ff             = 16384
0.00.270.323 I llm_load_print_meta: n_expert         = 0
0.00.270.323 I llm_load_print_meta: n_expert_used    = 0
0.00.270.324 I llm_load_print_meta: causal attn      = 1
0.00.270.324 I llm_load_print_meta: pooling type     = 0
0.00.270.324 I llm_load_print_meta: rope type        = 2
0.00.270.325 I llm_load_print_meta: rope scaling     = linear
0.00.270.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.327 I llm_load_print_meta: freq_scale_train = 1
0.00.270.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.328 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.328 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.328 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.329 I llm_load_print_meta: model type       = 2B
0.00.270.330 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.331 I llm_load_print_meta: model params     = 2.51 B
0.00.270.331 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.333 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.334 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.334 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.335 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.335 I llm_load_print_meta: max token length = 93
0.00.342.031 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.039 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.398 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.406 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.407 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.407 I llama_new_context_with_model: n_batch       = 2048
0.00.347.407 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.408 I llama_new_context_with_model: flash_attn    = 0
0.00.347.411 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.412 I llama_new_context_with_model: freq_scale    = 1
0.00.347.413 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.433 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.448 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.541 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.874 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.880 I llama_new_context_with_model: graph nodes  = 601
0.00.363.880 I llama_new_context_with_model: graph splits = 1
0.00.363.883 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.396 I main: llama threadpool init, n_threads = 4
0.00.450.410 I 
0.00.450.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.493 I 
0.00.450.544 I sampler seed: 2049674100
0.00.450.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.567 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.568 I 
 increasements, and the overall impact on the ecosystem. [end of text]


0.01.363.049 I llama_perf_sampler_print:    sampling time =       1.91 ms /    13 runs   (    0.15 ms per token,  6795.61 tokens per second)
0.01.363.052 I llama_perf_context_print:        load time =     449.56 ms
0.01.363.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.363.054 I llama_perf_context_print:        eval time =     904.39 ms /    12 runs   (   75.37 ms per token,    13.27 tokens per second)
0.01.363.055 I llama_perf_context_print:       total time =     912.66 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.771s
user	0m28.696s
sys	0m9.284s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4175 (7066b4cc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40196.35 ms
main:    total time = 40196.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.521 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.020.886 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.895 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.911 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.912 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.915 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.916 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.917 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.918 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.922 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.922 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.922 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.924 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.837 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.333 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.221 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.227 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.228 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.229 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.230 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.235 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.236 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.237 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.241 I llama_model_loader: - type  f32:   37 tensors
0.00.132.242 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.242 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.729 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.604 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.122 I llm_load_vocab: special tokens cache size = 5
0.00.263.997 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.012 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.013 I llm_load_print_meta: arch             = gemma
0.00.264.013 I llm_load_print_meta: vocab type       = SPM
0.00.264.014 I llm_load_print_meta: n_vocab          = 256000
0.00.264.014 I llm_load_print_meta: n_merges         = 0
0.00.264.015 I llm_load_print_meta: vocab_only       = 0
0.00.264.015 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.015 I llm_load_print_meta: n_embd           = 2048
0.00.264.015 I llm_load_print_meta: n_layer          = 18
0.00.264.028 I llm_load_print_meta: n_head           = 8
0.00.264.029 I llm_load_print_meta: n_head_kv        = 1
0.00.264.029 I llm_load_print_meta: n_rot            = 256
0.00.264.030 I llm_load_print_meta: n_swa            = 0
0.00.264.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.031 I llm_load_print_meta: n_gqa            = 8
0.00.264.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.033 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.034 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.036 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.036 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.037 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.038 I llm_load_print_meta: n_ff             = 16384
0.00.264.038 I llm_load_print_meta: n_expert         = 0
0.00.264.038 I llm_load_print_meta: n_expert_used    = 0
0.00.264.039 I llm_load_print_meta: causal attn      = 1
0.00.264.039 I llm_load_print_meta: pooling type     = 0
0.00.264.039 I llm_load_print_meta: rope type        = 2
0.00.264.040 I llm_load_print_meta: rope scaling     = linear
0.00.264.041 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.042 I llm_load_print_meta: freq_scale_train = 1
0.00.264.042 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.042 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.043 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.043 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.043 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.044 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.044 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.044 I llm_load_print_meta: model type       = 2B
0.00.264.045 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.046 I llm_load_print_meta: model params     = 2.51 B
0.00.264.047 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.047 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.048 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.049 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.050 I llm_load_print_meta: max token length = 93
0.00.323.860 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.866 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.867 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.868 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.868 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.869 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.909 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.916 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.916 I llama_new_context_with_model: n_batch       = 2048
0.00.328.916 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.917 I llama_new_context_with_model: flash_attn    = 0
0.00.328.919 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.920 I llama_new_context_with_model: freq_scale    = 1
0.00.328.920 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.022 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.034 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.132 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.438 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.444 I llama_new_context_with_model: graph nodes  = 601
0.00.345.445 I llama_new_context_with_model: graph splits = 1
0.00.345.447 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.725 I main: llama threadpool init, n_threads = 4
0.00.420.740 I 
0.00.420.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.816 I 
0.00.420.860 I sampler seed: 4149203062
0.00.420.871 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.883 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.887 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.887 I 
 seconally. The two words are closely related and have a figurative meaning.

**Answer:** A tempest.

A tempest is a violent and turbulent display of

0.01.989.870 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6503.74 tokens per second)
0.01.989.872 I llama_perf_context_print:        load time =     419.97 ms
0.01.989.874 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.989.875 I llama_perf_context_print:        eval time =    1550.00 ms /    32 runs   (   48.44 ms per token,    20.65 tokens per second)
0.01.989.876 I llama_perf_context_print:       total time =    1569.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4175 (7066b4cc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40161.79 ms
main:    total time = 40161.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.566 I build: 4175 (7066b4cc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.236 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.251 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.266 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.267 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.268 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.268 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.269 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.272 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.793 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.875 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.760 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.763 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.764 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.772 I llama_model_loader: - type  f32:   37 tensors
0.00.131.773 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.774 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.525 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.839 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.342 I llm_load_vocab: special tokens cache size = 5
0.00.282.396 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.416 I llm_load_print_meta: arch             = gemma
0.00.282.417 I llm_load_print_meta: vocab type       = SPM
0.00.282.418 I llm_load_print_meta: n_vocab          = 256000
0.00.282.418 I llm_load_print_meta: n_merges         = 0
0.00.282.419 I llm_load_print_meta: vocab_only       = 0
0.00.282.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.419 I llm_load_print_meta: n_embd           = 2048
0.00.282.420 I llm_load_print_meta: n_layer          = 18
0.00.282.432 I llm_load_print_meta: n_head           = 8
0.00.282.433 I llm_load_print_meta: n_head_kv        = 1
0.00.282.433 I llm_load_print_meta: n_rot            = 256
0.00.282.434 I llm_load_print_meta: n_swa            = 0
0.00.282.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.435 I llm_load_print_meta: n_gqa            = 8
0.00.282.436 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.437 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.439 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.441 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.442 I llm_load_print_meta: n_ff             = 16384
0.00.282.442 I llm_load_print_meta: n_expert         = 0
0.00.282.443 I llm_load_print_meta: n_expert_used    = 0
0.00.282.443 I llm_load_print_meta: causal attn      = 1
0.00.282.443 I llm_load_print_meta: pooling type     = 0
0.00.282.444 I llm_load_print_meta: rope type        = 2
0.00.282.444 I llm_load_print_meta: rope scaling     = linear
0.00.282.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.449 I llm_load_print_meta: freq_scale_train = 1
0.00.282.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.450 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.450 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.451 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.452 I llm_load_print_meta: model type       = 2B
0.00.282.452 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.453 I llm_load_print_meta: model params     = 2.51 B
0.00.282.454 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.454 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.455 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.456 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.456 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.466 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.467 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.467 I llm_load_print_meta: max token length = 93
0.00.339.169 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.344.246 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.252 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.252 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.252 I llama_new_context_with_model: n_batch       = 2048
0.00.344.253 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.253 I llama_new_context_with_model: flash_attn    = 0
0.00.344.255 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.256 I llama_new_context_with_model: freq_scale    = 1
0.00.344.256 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.789 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.076 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.083 I llama_new_context_with_model: graph nodes  = 601
0.00.360.083 I llama_new_context_with_model: graph splits = 1
0.00.360.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.271 I main: llama threadpool init, n_threads = 4
0.00.434.287 I 
0.00.434.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.434.361 I 
0.00.434.405 I sampler seed: 3450208661
0.00.434.414 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.418 I 
 fufilling

## The Story of a Forgotten Treasure

The wind howled through the canyons, whistling through the ancient ruins of the forgotten city of Xylia.

0.01.976.673 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6762.30 tokens per second)
0.01.976.677 I llama_perf_context_print:        load time =     433.49 ms
0.01.976.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.680 I llama_perf_context_print:        eval time =    1524.17 ms /    32 runs   (   47.63 ms per token,    21.00 tokens per second)
0.01.976.693 I llama_perf_context_print:       total time =    1542.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.108s
user	10m23.806s
sys	0m6.939s
