+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.903 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.026.019 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.126 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.151 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.152 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.153 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.153 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.172 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.173 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.237 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.811 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.891 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.903 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.906 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.908 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.911 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.912 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.913 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.914 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.916 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.925 I llama_model_loader: - type  f32:   37 tensors
0.00.272.927 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.860 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.555 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.528 I llm_load_vocab: special tokens cache size = 5
0.00.641.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.570 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.571 I llm_load_print_meta: arch             = gemma
0.00.641.571 I llm_load_print_meta: vocab type       = SPM
0.00.641.573 I llm_load_print_meta: n_vocab          = 256000
0.00.641.576 I llm_load_print_meta: n_merges         = 0
0.00.641.576 I llm_load_print_meta: vocab_only       = 0
0.00.641.576 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.577 I llm_load_print_meta: n_embd           = 2048
0.00.641.577 I llm_load_print_meta: n_layer          = 18
0.00.641.642 I llm_load_print_meta: n_head           = 8
0.00.641.649 I llm_load_print_meta: n_head_kv        = 1
0.00.641.650 I llm_load_print_meta: n_rot            = 256
0.00.641.650 I llm_load_print_meta: n_swa            = 0
0.00.641.650 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.651 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.656 I llm_load_print_meta: n_gqa            = 8
0.00.641.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.670 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.671 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.674 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.675 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.675 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.691 I llm_load_print_meta: n_ff             = 16384
0.00.641.695 I llm_load_print_meta: n_expert         = 0
0.00.641.695 I llm_load_print_meta: n_expert_used    = 0
0.00.641.696 I llm_load_print_meta: causal attn      = 1
0.00.641.696 I llm_load_print_meta: pooling type     = 0
0.00.641.696 I llm_load_print_meta: rope type        = 2
0.00.641.697 I llm_load_print_meta: rope scaling     = linear
0.00.641.699 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.700 I llm_load_print_meta: freq_scale_train = 1
0.00.641.700 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.700 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.700 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.701 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.701 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.701 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.702 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.702 I llm_load_print_meta: model type       = 2B
0.00.641.703 I llm_load_print_meta: model ftype      = Q8_0
0.00.641.704 I llm_load_print_meta: model params     = 2.51 B
0.00.641.713 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.641.714 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.726 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.726 I llm_load_print_meta: max token length = 93
0.00.742.752 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.742.765 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.742.766 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.742.767 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.742.768 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.742.768 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.748.772 I llama_new_context_with_model: n_seq_max     = 1
0.00.748.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.748.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.748.781 I llama_new_context_with_model: n_batch       = 2048
0.00.748.781 I llama_new_context_with_model: n_ubatch      = 512
0.00.748.782 I llama_new_context_with_model: flash_attn    = 0
0.00.748.785 I llama_new_context_with_model: freq_base     = 10000.0
0.00.748.785 I llama_new_context_with_model: freq_scale    = 1
0.00.748.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.763.678 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.763.718 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.763.844 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.766.445 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.766.449 I llama_new_context_with_model: graph nodes  = 601
0.00.766.449 I llama_new_context_with_model: graph splits = 1
0.00.766.472 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.707 I main: llama threadpool init, n_threads = 4
0.01.375.720 I 
0.01.375.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.831 I 
0.01.376.055 I sampler seed: 597748833
0.01.376.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.376.075 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.376.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.376.078 I 
 increasities and inconsistencies within the accounting profession's pronouncements. [end of text]


0.07.266.664 I llama_perf_sampler_print:    sampling time =      21.64 ms /    15 runs   (    1.44 ms per token,   693.10 tokens per second)
0.07.266.667 I llama_perf_context_print:        load time =    1374.69 ms
0.07.266.683 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.266.685 I llama_perf_context_print:        eval time =    5850.81 ms /    14 runs   (  417.92 ms per token,     2.39 tokens per second)
0.07.266.686 I llama_perf_context_print:       total time =    5890.97 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.024.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.258 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.288 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.289 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.290 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.291 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.292 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.300 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.302 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.303 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.304 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.305 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.362 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.373 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.380 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.383 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.386 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.387 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.388 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.398 I llama_model_loader: - type  f32:   37 tensors
0.00.270.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.490.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.561.797 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.562.851 I llm_load_vocab: special tokens cache size = 5
0.00.666.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.666.125 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.666.126 I llm_load_print_meta: arch             = gemma
0.00.666.127 I llm_load_print_meta: vocab type       = SPM
0.00.666.128 I llm_load_print_meta: n_vocab          = 256000
0.00.666.130 I llm_load_print_meta: n_merges         = 0
0.00.666.131 I llm_load_print_meta: vocab_only       = 0
0.00.666.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.666.132 I llm_load_print_meta: n_embd           = 2048
0.00.666.132 I llm_load_print_meta: n_layer          = 18
0.00.666.198 I llm_load_print_meta: n_head           = 8
0.00.666.205 I llm_load_print_meta: n_head_kv        = 1
0.00.666.206 I llm_load_print_meta: n_rot            = 256
0.00.666.206 I llm_load_print_meta: n_swa            = 0
0.00.666.206 I llm_load_print_meta: n_embd_head_k    = 256
0.00.666.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.666.211 I llm_load_print_meta: n_gqa            = 8
0.00.666.216 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.666.221 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.666.222 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.666.224 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.666.224 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.666.224 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.666.225 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.666.229 I llm_load_print_meta: n_ff             = 16384
0.00.666.230 I llm_load_print_meta: n_expert         = 0
0.00.666.230 I llm_load_print_meta: n_expert_used    = 0
0.00.666.231 I llm_load_print_meta: causal attn      = 1
0.00.666.231 I llm_load_print_meta: pooling type     = 0
0.00.666.231 I llm_load_print_meta: rope type        = 2
0.00.666.232 I llm_load_print_meta: rope scaling     = linear
0.00.666.233 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.666.234 I llm_load_print_meta: freq_scale_train = 1
0.00.666.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.666.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.666.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.666.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.666.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.666.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.666.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.666.237 I llm_load_print_meta: model type       = 2B
0.00.666.237 I llm_load_print_meta: model ftype      = Q8_0
0.00.666.238 I llm_load_print_meta: model params     = 2.51 B
0.00.666.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.666.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.666.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.666.250 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.666.252 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.666.253 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.666.253 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.666.253 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.666.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.666.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.666.262 I llm_load_print_meta: max token length = 93
0.00.761.115 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.767.106 I llama_new_context_with_model: n_seq_max     = 1
0.00.767.114 I llama_new_context_with_model: n_ctx         = 4096
0.00.767.114 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.767.115 I llama_new_context_with_model: n_batch       = 2048
0.00.767.115 I llama_new_context_with_model: n_ubatch      = 512
0.00.767.115 I llama_new_context_with_model: flash_attn    = 0
0.00.767.118 I llama_new_context_with_model: freq_base     = 10000.0
0.00.767.120 I llama_new_context_with_model: freq_scale    = 1
0.00.767.120 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.782.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.782.460 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.782.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.785.109 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.785.113 I llama_new_context_with_model: graph nodes  = 601
0.00.785.114 I llama_new_context_with_model: graph splits = 1
0.00.785.137 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.394.958 I main: llama threadpool init, n_threads = 4
0.01.394.972 I 
0.01.395.081 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.395.084 I 
0.01.395.316 I sampler seed: 740019608
0.01.395.328 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.395.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.395.338 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.395.338 I 
 increably. 

The first step is to understand the context and purpose of the document. This includes identifying the main points, identifying any supporting evidence, and

0.14.935.085 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.49 tokens per second)
0.14.935.089 I llama_perf_context_print:        load time =    1393.99 ms
0.14.935.091 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.935.093 I llama_perf_context_print:        eval time =   13450.16 ms /    32 runs   (  420.32 ms per token,     2.38 tokens per second)
0.14.935.094 I llama_perf_context_print:       total time =   13540.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.706 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.023.821 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.833 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.968 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.970 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.971 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.745 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.886 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.065 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.067 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.075 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.076 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.078 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.086 I llama_model_loader: - type  f32:   37 tensors
0.00.271.089 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.253 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.280 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.414 I llm_load_vocab: special tokens cache size = 5
0.00.653.006 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.653.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.653.080 I llm_load_print_meta: arch             = gemma
0.00.653.081 I llm_load_print_meta: vocab type       = SPM
0.00.653.082 I llm_load_print_meta: n_vocab          = 256000
0.00.653.085 I llm_load_print_meta: n_merges         = 0
0.00.653.085 I llm_load_print_meta: vocab_only       = 0
0.00.653.086 I llm_load_print_meta: n_ctx_train      = 8192
0.00.653.086 I llm_load_print_meta: n_embd           = 2048
0.00.653.086 I llm_load_print_meta: n_layer          = 18
0.00.653.151 I llm_load_print_meta: n_head           = 8
0.00.653.158 I llm_load_print_meta: n_head_kv        = 1
0.00.653.159 I llm_load_print_meta: n_rot            = 256
0.00.653.159 I llm_load_print_meta: n_swa            = 0
0.00.653.160 I llm_load_print_meta: n_embd_head_k    = 256
0.00.653.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.653.165 I llm_load_print_meta: n_gqa            = 8
0.00.653.170 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.653.176 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.653.178 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.653.198 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.653.199 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.653.200 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.653.201 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.653.206 I llm_load_print_meta: n_ff             = 16384
0.00.653.214 I llm_load_print_meta: n_expert         = 0
0.00.653.215 I llm_load_print_meta: n_expert_used    = 0
0.00.653.216 I llm_load_print_meta: causal attn      = 1
0.00.653.216 I llm_load_print_meta: pooling type     = 0
0.00.653.217 I llm_load_print_meta: rope type        = 2
0.00.653.217 I llm_load_print_meta: rope scaling     = linear
0.00.653.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.653.219 I llm_load_print_meta: freq_scale_train = 1
0.00.653.227 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.653.227 I llm_load_print_meta: rope_finetuned   = unknown
0.00.653.228 I llm_load_print_meta: ssm_d_conv       = 0
0.00.653.229 I llm_load_print_meta: ssm_d_inner      = 0
0.00.653.229 I llm_load_print_meta: ssm_d_state      = 0
0.00.653.229 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.653.230 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.653.231 I llm_load_print_meta: model type       = 2B
0.00.653.232 I llm_load_print_meta: model ftype      = Q8_0
0.00.653.233 I llm_load_print_meta: model params     = 2.51 B
0.00.653.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.653.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.653.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.653.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.653.251 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.653.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.653.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.653.253 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.653.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.653.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.653.261 I llm_load_print_meta: max token length = 93
0.00.728.027 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.728.038 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.728.039 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.728.040 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.728.041 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.728.041 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.734.029 I llama_new_context_with_model: n_seq_max     = 1
0.00.734.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.734.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.734.038 I llama_new_context_with_model: n_batch       = 2048
0.00.734.039 I llama_new_context_with_model: n_ubatch      = 512
0.00.734.039 I llama_new_context_with_model: flash_attn    = 0
0.00.734.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.734.043 I llama_new_context_with_model: freq_scale    = 1
0.00.734.044 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.749.559 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.749.613 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.749.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.294 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.753.300 I llama_new_context_with_model: graph nodes  = 601
0.00.753.300 I llama_new_context_with_model: graph splits = 1
0.00.753.328 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.960 I main: llama threadpool init, n_threads = 4
0.01.378.976 I 
0.01.379.085 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.379.088 I 
0.01.379.319 I sampler seed: 1868083219
0.01.379.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.338 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.379.341 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.342 I 
 increasities from the Greek philosophers. [end of text]


0.04.747.939 I llama_perf_sampler_print:    sampling time =      12.37 ms /     9 runs   (    1.37 ms per token,   727.57 tokens per second)
0.04.747.942 I llama_perf_context_print:        load time =    1377.94 ms
0.04.747.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.747.957 I llama_perf_context_print:        eval time =    3345.44 ms /     8 runs   (  418.18 ms per token,     2.39 tokens per second)
0.04.747.958 I llama_perf_context_print:       total time =    3368.99 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.585 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.595 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.690 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.702 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.710 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.715 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.716 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.730 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.732 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.733 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.734 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.358 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.499 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.500 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.512 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.514 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.522 I llama_model_loader: - type  f32:   37 tensors
0.00.270.524 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.540 I llm_load_vocab: special tokens cache size = 5
0.00.646.856 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.928 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.929 I llm_load_print_meta: arch             = gemma
0.00.646.930 I llm_load_print_meta: vocab type       = SPM
0.00.646.931 I llm_load_print_meta: n_vocab          = 256000
0.00.646.934 I llm_load_print_meta: n_merges         = 0
0.00.646.934 I llm_load_print_meta: vocab_only       = 0
0.00.646.934 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.935 I llm_load_print_meta: n_embd           = 2048
0.00.646.935 I llm_load_print_meta: n_layer          = 18
0.00.647.004 I llm_load_print_meta: n_head           = 8
0.00.647.011 I llm_load_print_meta: n_head_kv        = 1
0.00.647.012 I llm_load_print_meta: n_rot            = 256
0.00.647.012 I llm_load_print_meta: n_swa            = 0
0.00.647.013 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.013 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.017 I llm_load_print_meta: n_gqa            = 8
0.00.647.022 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.031 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.032 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.032 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.032 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.038 I llm_load_print_meta: n_ff             = 16384
0.00.647.038 I llm_load_print_meta: n_expert         = 0
0.00.647.039 I llm_load_print_meta: n_expert_used    = 0
0.00.647.039 I llm_load_print_meta: causal attn      = 1
0.00.647.040 I llm_load_print_meta: pooling type     = 0
0.00.647.040 I llm_load_print_meta: rope type        = 2
0.00.647.040 I llm_load_print_meta: rope scaling     = linear
0.00.647.042 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.042 I llm_load_print_meta: freq_scale_train = 1
0.00.647.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.045 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.045 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.047 I llm_load_print_meta: model type       = 2B
0.00.647.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.647.049 I llm_load_print_meta: model params     = 2.51 B
0.00.647.058 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.647.058 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.059 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.059 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.060 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.060 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.061 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.065 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.083 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.086 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.086 I llm_load_print_meta: max token length = 93
0.00.720.114 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.720.125 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.726.071 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.081 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.081 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.082 I llama_new_context_with_model: n_batch       = 2048
0.00.726.082 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.083 I llama_new_context_with_model: flash_attn    = 0
0.00.726.086 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.087 I llama_new_context_with_model: freq_scale    = 1
0.00.726.088 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.656 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.703 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.837 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.454 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.458 I llama_new_context_with_model: graph nodes  = 601
0.00.744.459 I llama_new_context_with_model: graph splits = 1
0.00.744.484 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.743 I main: llama threadpool init, n_threads = 4
0.01.354.758 I 
0.01.354.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.880 I 
0.01.355.113 I sampler seed: 3368734473
0.01.355.126 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.134 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.134 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.135 I 
 increasels, but the trolls are not amused.

**Question:** What is the central theme of the poem?

**Options:**

A. The power

0.14.795.559 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.23 tokens per second)
0.14.795.563 I llama_perf_context_print:        load time =    1353.82 ms
0.14.795.565 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.795.567 I llama_perf_context_print:        eval time =   13350.86 ms /    32 runs   (  417.21 ms per token,     2.40 tokens per second)
0.14.795.568 I llama_perf_context_print:       total time =   13440.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.580s
user	2m37.908s
sys	0m9.532s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4150 (a5e47592)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187022.50 ms
main:    total time = 187022.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.734 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.954 I main: llama backend init
0.00.000.964 I main: load the model and apply lora adapter, if any
0.00.023.798 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.809 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.919 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.946 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.951 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.953 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.959 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.978 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.982 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.997 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.007 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.008 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.009 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.010 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.012 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.013 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.031 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.037 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.038 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.047 I llama_model_loader: - type  f32:   37 tensors
0.00.272.050 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.051 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.809 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.803 I llm_load_vocab: special tokens cache size = 5
0.00.616.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.239 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.243 I llm_load_print_meta: arch             = gemma
0.00.616.244 I llm_load_print_meta: vocab type       = SPM
0.00.616.245 I llm_load_print_meta: n_vocab          = 256000
0.00.616.248 I llm_load_print_meta: n_merges         = 0
0.00.616.248 I llm_load_print_meta: vocab_only       = 0
0.00.616.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.249 I llm_load_print_meta: n_embd           = 2048
0.00.616.249 I llm_load_print_meta: n_layer          = 18
0.00.616.313 I llm_load_print_meta: n_head           = 8
0.00.616.323 I llm_load_print_meta: n_head_kv        = 1
0.00.616.325 I llm_load_print_meta: n_rot            = 256
0.00.616.325 I llm_load_print_meta: n_swa            = 0
0.00.616.325 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.326 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.331 I llm_load_print_meta: n_gqa            = 8
0.00.616.336 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.341 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.344 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.344 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.354 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.359 I llm_load_print_meta: n_ff             = 16384
0.00.616.360 I llm_load_print_meta: n_expert         = 0
0.00.616.361 I llm_load_print_meta: n_expert_used    = 0
0.00.616.361 I llm_load_print_meta: causal attn      = 1
0.00.616.361 I llm_load_print_meta: pooling type     = 0
0.00.616.361 I llm_load_print_meta: rope type        = 2
0.00.616.362 I llm_load_print_meta: rope scaling     = linear
0.00.616.363 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.375 I llm_load_print_meta: freq_scale_train = 1
0.00.616.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.390 I llm_load_print_meta: model type       = 2B
0.00.616.391 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.392 I llm_load_print_meta: model params     = 2.51 B
0.00.616.400 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.401 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.402 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.402 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.403 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.403 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.404 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.418 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.420 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.420 I llm_load_print_meta: max token length = 93
0.00.677.746 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.677.756 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.677.757 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.677.758 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.677.758 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.677.759 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.683.802 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.808 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.809 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.809 I llama_new_context_with_model: n_batch       = 2048
0.00.683.810 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.810 I llama_new_context_with_model: flash_attn    = 0
0.00.683.813 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.814 I llama_new_context_with_model: freq_scale    = 1
0.00.683.814 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.698.267 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.698.309 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.034 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.701.038 I llama_new_context_with_model: graph nodes  = 601
0.00.701.038 I llama_new_context_with_model: graph splits = 1
0.00.701.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.995 I main: llama threadpool init, n_threads = 4
0.01.285.010 I 
0.01.285.118 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.121 I 
0.01.285.351 I sampler seed: 1272016983
0.01.285.363 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.379 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.380 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.381 I 
 strick from her new home.

**Assistant**
I cannot access personal or sensitive information. I am unable to provide responses that may violate privacy or personal data

0.12.433.605 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.45 tokens per second)
0.12.433.608 I llama_perf_context_print:        load time =    1283.91 ms
0.12.433.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.433.613 I llama_perf_context_print:        eval time =   11058.15 ms /    32 runs   (  345.57 ms per token,     2.89 tokens per second)
0.12.433.614 I llama_perf_context_print:       total time =   11148.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4150 (a5e47592)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186209.49 ms
main:    total time = 186209.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4150 (a5e47592) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.184 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.302 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.307 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.316 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.319 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.329 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.330 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.331 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.332 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.333 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.671 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.005 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.116 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.117 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.118 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.151 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.162 I llama_model_loader: - type  f32:   37 tensors
0.00.269.165 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.166 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.809 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.723 I llm_load_vocab: special tokens cache size = 5
0.00.637.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.363 I llm_load_print_meta: arch             = gemma
0.00.637.364 I llm_load_print_meta: vocab type       = SPM
0.00.637.365 I llm_load_print_meta: n_vocab          = 256000
0.00.637.367 I llm_load_print_meta: n_merges         = 0
0.00.637.368 I llm_load_print_meta: vocab_only       = 0
0.00.637.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.369 I llm_load_print_meta: n_embd           = 2048
0.00.637.369 I llm_load_print_meta: n_layer          = 18
0.00.637.436 I llm_load_print_meta: n_head           = 8
0.00.637.443 I llm_load_print_meta: n_head_kv        = 1
0.00.637.444 I llm_load_print_meta: n_rot            = 256
0.00.637.444 I llm_load_print_meta: n_swa            = 0
0.00.637.444 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.450 I llm_load_print_meta: n_gqa            = 8
0.00.637.455 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.464 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.470 I llm_load_print_meta: n_ff             = 16384
0.00.637.471 I llm_load_print_meta: n_expert         = 0
0.00.637.471 I llm_load_print_meta: n_expert_used    = 0
0.00.637.476 I llm_load_print_meta: causal attn      = 1
0.00.637.477 I llm_load_print_meta: pooling type     = 0
0.00.637.477 I llm_load_print_meta: rope type        = 2
0.00.637.478 I llm_load_print_meta: rope scaling     = linear
0.00.637.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.480 I llm_load_print_meta: freq_scale_train = 1
0.00.637.480 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.482 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.482 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.482 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.494 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.495 I llm_load_print_meta: model type       = 2B
0.00.637.496 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.637.498 I llm_load_print_meta: model params     = 2.51 B
0.00.637.509 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.637.509 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.513 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.514 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.520 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.522 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.522 I llm_load_print_meta: max token length = 93
0.00.691.937 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.697.663 I llama_new_context_with_model: n_seq_max     = 1
0.00.697.670 I llama_new_context_with_model: n_ctx         = 4096
0.00.697.671 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.697.671 I llama_new_context_with_model: n_batch       = 2048
0.00.697.671 I llama_new_context_with_model: n_ubatch      = 512
0.00.697.672 I llama_new_context_with_model: flash_attn    = 0
0.00.697.674 I llama_new_context_with_model: freq_base     = 10000.0
0.00.697.675 I llama_new_context_with_model: freq_scale    = 1
0.00.697.676 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.713.182 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.713.225 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.968 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.972 I llama_new_context_with_model: graph nodes  = 601
0.00.715.973 I llama_new_context_with_model: graph splits = 1
0.00.715.996 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.286 I main: llama threadpool init, n_threads = 4
0.01.301.301 I 
0.01.301.406 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.407 I 
0.01.301.631 I sampler seed: 3393937647
0.01.301.646 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.653 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.657 I 
 encompate means to:

A. Group people together
B. Divide things into parts
C. Explain something in detail
D. Predict future events



0.12.524.036 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.33 tokens per second)
0.12.524.040 I llama_perf_context_print:        load time =    1300.33 ms
0.12.524.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.524.043 I llama_perf_context_print:        eval time =   11133.94 ms /    32 runs   (  347.94 ms per token,     2.87 tokens per second)
0.12.524.058 I llama_perf_context_print:       total time =   11222.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.063s
user	46m50.533s
sys	0m6.233s
