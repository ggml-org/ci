+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.028 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.054 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.063 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.064 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.064 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.065 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.065 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.071 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.071 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.072 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.073 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.103 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.104 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.105 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.105 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.106 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.107 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.109 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.111 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.112 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.115 I llama_model_loader: - type  f32:   37 tensors
0.00.131.117 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.421 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.132 I llm_load_vocab: special tokens cache size = 5
0.00.272.279 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.299 I llm_load_print_meta: arch             = gemma
0.00.272.300 I llm_load_print_meta: vocab type       = SPM
0.00.272.301 I llm_load_print_meta: n_vocab          = 256000
0.00.272.301 I llm_load_print_meta: n_merges         = 0
0.00.272.301 I llm_load_print_meta: vocab_only       = 0
0.00.272.302 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.302 I llm_load_print_meta: n_embd           = 2048
0.00.272.303 I llm_load_print_meta: n_layer          = 18
0.00.272.315 I llm_load_print_meta: n_head           = 8
0.00.272.316 I llm_load_print_meta: n_head_kv        = 1
0.00.272.317 I llm_load_print_meta: n_rot            = 256
0.00.272.317 I llm_load_print_meta: n_swa            = 0
0.00.272.317 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.318 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.318 I llm_load_print_meta: n_gqa            = 8
0.00.272.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.322 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.324 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.324 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.325 I llm_load_print_meta: n_ff             = 16384
0.00.272.325 I llm_load_print_meta: n_expert         = 0
0.00.272.326 I llm_load_print_meta: n_expert_used    = 0
0.00.272.326 I llm_load_print_meta: causal attn      = 1
0.00.272.326 I llm_load_print_meta: pooling type     = 0
0.00.272.326 I llm_load_print_meta: rope type        = 2
0.00.272.327 I llm_load_print_meta: rope scaling     = linear
0.00.272.328 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.329 I llm_load_print_meta: freq_scale_train = 1
0.00.272.329 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.330 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.330 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.330 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.330 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.331 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.331 I llm_load_print_meta: model type       = 2B
0.00.272.332 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.333 I llm_load_print_meta: model params     = 2.51 B
0.00.272.334 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.334 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.335 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.338 I llm_load_print_meta: max token length = 93
0.00.374.036 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.045 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.046 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.046 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.047 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.047 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.147 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.154 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.155 I llama_new_context_with_model: n_batch       = 2048
0.00.379.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.156 I llama_new_context_with_model: flash_attn    = 0
0.00.379.159 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.160 I llama_new_context_with_model: freq_scale    = 1
0.00.379.161 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.554 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.667 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.869 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.876 I llama_new_context_with_model: graph nodes  = 601
0.00.394.876 I llama_new_context_with_model: graph splits = 1
0.00.394.878 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.945 I main: llama threadpool init, n_threads = 4
0.00.481.962 I 
0.00.482.038 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.482.041 I 
0.00.482.084 I sampler seed: 456072730
0.00.482.095 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.100 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.100 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.100 I 
 increably.

I am unable to generate a response as I am unable to access external websites or specific data. [end of text]


0.02.203.065 I llama_perf_sampler_print:    sampling time =       3.50 ms /    25 runs   (    0.14 ms per token,  7132.67 tokens per second)
0.02.203.067 I llama_perf_context_print:        load time =     481.17 ms
0.02.203.068 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.203.070 I llama_perf_context_print:        eval time =    1706.38 ms /    24 runs   (   71.10 ms per token,    14.06 tokens per second)
0.02.203.070 I llama_perf_context_print:       total time =    1721.13 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.583 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.021.664 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.678 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.687 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.693 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.693 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.694 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.695 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.695 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.696 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.701 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.702 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.703 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.525 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.410 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.411 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.411 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.413 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.417 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.418 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.424 I llama_model_loader: - type  f32:   37 tensors
0.00.131.425 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.187 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.776 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.446 I llm_load_vocab: special tokens cache size = 5
0.00.274.855 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.872 I llm_load_print_meta: arch             = gemma
0.00.274.873 I llm_load_print_meta: vocab type       = SPM
0.00.274.874 I llm_load_print_meta: n_vocab          = 256000
0.00.274.874 I llm_load_print_meta: n_merges         = 0
0.00.274.874 I llm_load_print_meta: vocab_only       = 0
0.00.274.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.875 I llm_load_print_meta: n_embd           = 2048
0.00.274.875 I llm_load_print_meta: n_layer          = 18
0.00.274.887 I llm_load_print_meta: n_head           = 8
0.00.274.888 I llm_load_print_meta: n_head_kv        = 1
0.00.274.888 I llm_load_print_meta: n_rot            = 256
0.00.274.888 I llm_load_print_meta: n_swa            = 0
0.00.274.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.888 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.889 I llm_load_print_meta: n_gqa            = 8
0.00.274.890 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.892 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.894 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.894 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.896 I llm_load_print_meta: n_ff             = 16384
0.00.274.896 I llm_load_print_meta: n_expert         = 0
0.00.274.897 I llm_load_print_meta: n_expert_used    = 0
0.00.274.897 I llm_load_print_meta: causal attn      = 1
0.00.274.897 I llm_load_print_meta: pooling type     = 0
0.00.274.897 I llm_load_print_meta: rope type        = 2
0.00.274.898 I llm_load_print_meta: rope scaling     = linear
0.00.274.899 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.900 I llm_load_print_meta: freq_scale_train = 1
0.00.274.900 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.900 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.901 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.904 I llm_load_print_meta: model type       = 2B
0.00.274.904 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.905 I llm_load_print_meta: model params     = 2.51 B
0.00.274.906 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.907 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.909 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.910 I llm_load_print_meta: max token length = 93
0.00.367.798 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.089 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.096 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.097 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.097 I llama_new_context_with_model: n_batch       = 2048
0.00.373.098 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.099 I llama_new_context_with_model: flash_attn    = 0
0.00.373.102 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.103 I llama_new_context_with_model: freq_scale    = 1
0.00.373.104 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.286 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.303 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.423 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.727 I llama_new_context_with_model: graph nodes  = 601
0.00.390.728 I llama_new_context_with_model: graph splits = 1
0.00.390.730 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.609 I main: llama threadpool init, n_threads = 4
0.00.474.624 I 
0.00.474.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.701 I 
0.00.474.745 I sampler seed: 263118268
0.00.474.756 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.763 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.767 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.767 I 
 increasities and anxieties?

**Answer:**

**The anxieties and insecurities that can accompany narcissistic personality disorder can include:**

* Fear of inadequacy and low self

0.02.686.057 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6423.98 tokens per second)
0.02.686.060 I llama_perf_context_print:        load time =     473.81 ms
0.02.686.061 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.686.062 I llama_perf_context_print:        eval time =    2191.36 ms /    32 runs   (   68.48 ms per token,    14.60 tokens per second)
0.02.686.063 I llama_perf_context_print:       total time =    2211.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.626 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.884 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.024.900 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.912 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.926 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.931 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.932 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.933 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.348 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.351 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.142.352 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.142.356 I llama_model_loader: - type  f32:   37 tensors
0.00.142.358 I llama_model_loader: - type q8_0:  127 tensors
0.00.235.702 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.284.771 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.285.387 I llm_load_vocab: special tokens cache size = 5
0.00.311.097 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.311.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.311.117 I llm_load_print_meta: arch             = gemma
0.00.311.117 I llm_load_print_meta: vocab type       = SPM
0.00.311.118 I llm_load_print_meta: n_vocab          = 256000
0.00.311.119 I llm_load_print_meta: n_merges         = 0
0.00.311.119 I llm_load_print_meta: vocab_only       = 0
0.00.311.120 I llm_load_print_meta: n_ctx_train      = 8192
0.00.311.120 I llm_load_print_meta: n_embd           = 2048
0.00.311.121 I llm_load_print_meta: n_layer          = 18
0.00.311.133 I llm_load_print_meta: n_head           = 8
0.00.311.134 I llm_load_print_meta: n_head_kv        = 1
0.00.311.134 I llm_load_print_meta: n_rot            = 256
0.00.311.135 I llm_load_print_meta: n_swa            = 0
0.00.311.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.311.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.311.136 I llm_load_print_meta: n_gqa            = 8
0.00.311.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.311.138 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.311.139 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.311.140 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.311.141 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.311.141 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.311.142 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.311.143 I llm_load_print_meta: n_ff             = 16384
0.00.311.143 I llm_load_print_meta: n_expert         = 0
0.00.311.144 I llm_load_print_meta: n_expert_used    = 0
0.00.311.145 I llm_load_print_meta: causal attn      = 1
0.00.311.145 I llm_load_print_meta: pooling type     = 0
0.00.311.145 I llm_load_print_meta: rope type        = 2
0.00.311.146 I llm_load_print_meta: rope scaling     = linear
0.00.311.147 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.311.147 I llm_load_print_meta: freq_scale_train = 1
0.00.311.148 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.311.148 I llm_load_print_meta: rope_finetuned   = unknown
0.00.311.149 I llm_load_print_meta: ssm_d_conv       = 0
0.00.311.149 I llm_load_print_meta: ssm_d_inner      = 0
0.00.311.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.311.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.311.150 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.311.151 I llm_load_print_meta: model type       = 2B
0.00.311.152 I llm_load_print_meta: model ftype      = Q8_0
0.00.311.152 I llm_load_print_meta: model params     = 2.51 B
0.00.311.153 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.311.153 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.311.154 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.311.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.311.158 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.311.159 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.311.159 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.311.159 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.311.160 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.311.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.311.160 I llm_load_print_meta: max token length = 93
0.00.386.891 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.386.897 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.386.897 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.386.898 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.386.899 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.386.899 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.392.147 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.154 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.155 I llama_new_context_with_model: n_batch       = 2048
0.00.392.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.156 I llama_new_context_with_model: flash_attn    = 0
0.00.392.158 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.159 I llama_new_context_with_model: freq_scale    = 1
0.00.392.160 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.181 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.198 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.407.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.031 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.039 I llama_new_context_with_model: graph nodes  = 601
0.00.409.039 I llama_new_context_with_model: graph splits = 1
0.00.409.042 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.339 I main: llama threadpool init, n_threads = 4
0.00.495.354 I 
0.00.495.429 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.495.433 I 
0.00.495.488 I sampler seed: 162212480
0.00.495.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.511 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.512 I 
 increasities with the current trending meme, making it the most relatable and engaging meme challenge.

This meme challenge would encourage users to create memes that combine the current

0.02.829.032 I llama_perf_sampler_print:    sampling time =       5.94 ms /    33 runs   (    0.18 ms per token,  5554.62 tokens per second)
0.02.829.035 I llama_perf_context_print:        load time =     494.43 ms
0.02.829.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.829.037 I llama_perf_context_print:        eval time =    2312.89 ms /    32 runs   (   72.28 ms per token,    13.84 tokens per second)
0.02.829.038 I llama_perf_context_print:       total time =    2333.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.267 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.486 I main: llama backend init
0.00.000.494 I main: load the model and apply lora adapter, if any
0.00.021.272 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.286 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.293 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.303 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.311 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.549 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.488 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.489 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.490 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.494 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.494 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.495 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.501 I llama_model_loader: - type  f32:   37 tensors
0.00.132.502 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.461 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.651 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.303 I llm_load_vocab: special tokens cache size = 5
0.00.280.118 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.136 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.137 I llm_load_print_meta: arch             = gemma
0.00.280.137 I llm_load_print_meta: vocab type       = SPM
0.00.280.138 I llm_load_print_meta: n_vocab          = 256000
0.00.280.139 I llm_load_print_meta: n_merges         = 0
0.00.280.139 I llm_load_print_meta: vocab_only       = 0
0.00.280.139 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.140 I llm_load_print_meta: n_embd           = 2048
0.00.280.140 I llm_load_print_meta: n_layer          = 18
0.00.280.152 I llm_load_print_meta: n_head           = 8
0.00.280.153 I llm_load_print_meta: n_head_kv        = 1
0.00.280.153 I llm_load_print_meta: n_rot            = 256
0.00.280.153 I llm_load_print_meta: n_swa            = 0
0.00.280.154 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.154 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.155 I llm_load_print_meta: n_gqa            = 8
0.00.280.156 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.157 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.160 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.161 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.161 I llm_load_print_meta: n_ff             = 16384
0.00.280.162 I llm_load_print_meta: n_expert         = 0
0.00.280.162 I llm_load_print_meta: n_expert_used    = 0
0.00.280.163 I llm_load_print_meta: causal attn      = 1
0.00.280.163 I llm_load_print_meta: pooling type     = 0
0.00.280.163 I llm_load_print_meta: rope type        = 2
0.00.280.163 I llm_load_print_meta: rope scaling     = linear
0.00.280.165 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.165 I llm_load_print_meta: freq_scale_train = 1
0.00.280.166 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.166 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.166 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.167 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.167 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.167 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.168 I llm_load_print_meta: model type       = 2B
0.00.280.169 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.169 I llm_load_print_meta: model params     = 2.51 B
0.00.280.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.174 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.175 I llm_load_print_meta: max token length = 93
0.00.350.990 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.998 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.143 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.149 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.150 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.150 I llama_new_context_with_model: n_batch       = 2048
0.00.356.151 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.151 I llama_new_context_with_model: flash_attn    = 0
0.00.356.155 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.156 I llama_new_context_with_model: freq_scale    = 1
0.00.356.157 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.708 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.822 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.124 I llama_new_context_with_model: graph nodes  = 601
0.00.372.125 I llama_new_context_with_model: graph splits = 1
0.00.372.127 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.149 I main: llama threadpool init, n_threads = 4
0.00.460.166 I 
0.00.460.237 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.240 I 
0.00.460.280 I sampler seed: 3152948252
0.00.460.292 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.294 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.295 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.295 I 
 increasities with a healthy dose of irony.

I cannot generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.208.335 I llama_perf_sampler_print:    sampling time =       3.57 ms /    24 runs   (    0.15 ms per token,  6717.04 tokens per second)
0.02.208.337 I llama_perf_context_print:        load time =     459.63 ms
0.02.208.338 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.208.340 I llama_perf_context_print:        eval time =    1733.41 ms /    23 runs   (   75.37 ms per token,    13.27 tokens per second)
0.02.208.341 I llama_perf_context_print:       total time =    1748.20 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.908s
user	0m34.988s
sys	0m9.518s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4256 (a5a915b5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40247.16 ms
main:    total time = 40247.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.179 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.654 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.664 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.673 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.679 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.680 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.686 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.686 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.687 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.691 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.694 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.695 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.910 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.833 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.725 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.731 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.732 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.734 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.737 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.737 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.738 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.738 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.739 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.744 I llama_model_loader: - type  f32:   37 tensors
0.00.129.745 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.745 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.354 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.632 I llm_load_vocab: special tokens cache size = 5
0.00.272.517 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.536 I llm_load_print_meta: arch             = gemma
0.00.272.537 I llm_load_print_meta: vocab type       = SPM
0.00.272.538 I llm_load_print_meta: n_vocab          = 256000
0.00.272.538 I llm_load_print_meta: n_merges         = 0
0.00.272.538 I llm_load_print_meta: vocab_only       = 0
0.00.272.550 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.551 I llm_load_print_meta: n_embd           = 2048
0.00.272.551 I llm_load_print_meta: n_layer          = 18
0.00.272.565 I llm_load_print_meta: n_head           = 8
0.00.272.567 I llm_load_print_meta: n_head_kv        = 1
0.00.272.567 I llm_load_print_meta: n_rot            = 256
0.00.272.567 I llm_load_print_meta: n_swa            = 0
0.00.272.568 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.569 I llm_load_print_meta: n_gqa            = 8
0.00.272.570 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.574 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.575 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.575 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.576 I llm_load_print_meta: n_ff             = 16384
0.00.272.577 I llm_load_print_meta: n_expert         = 0
0.00.272.577 I llm_load_print_meta: n_expert_used    = 0
0.00.272.577 I llm_load_print_meta: causal attn      = 1
0.00.272.577 I llm_load_print_meta: pooling type     = 0
0.00.272.578 I llm_load_print_meta: rope type        = 2
0.00.272.578 I llm_load_print_meta: rope scaling     = linear
0.00.272.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.580 I llm_load_print_meta: freq_scale_train = 1
0.00.272.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.582 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.583 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.584 I llm_load_print_meta: model type       = 2B
0.00.272.584 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.585 I llm_load_print_meta: model params     = 2.51 B
0.00.272.586 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.586 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.587 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.588 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.589 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.593 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.593 I llm_load_print_meta: max token length = 93
0.00.332.352 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.361 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.361 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.362 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.363 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.363 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.543 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.550 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.550 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.551 I llama_new_context_with_model: n_batch       = 2048
0.00.337.551 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.552 I llama_new_context_with_model: flash_attn    = 0
0.00.337.554 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.555 I llama_new_context_with_model: freq_scale    = 1
0.00.337.556 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.955 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.969 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.057 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.262 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.266 I llama_new_context_with_model: graph nodes  = 601
0.00.353.266 I llama_new_context_with_model: graph splits = 1
0.00.353.269 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.178 I main: llama threadpool init, n_threads = 4
0.00.429.196 I 
0.00.429.293 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.296 I 
0.00.429.341 I sampler seed: 3076535841
0.00.429.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.355 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.364 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.366 I 
 increamically.

I'm having a hard time understanding the difference between these two sentences:

"The man was excited to go on a trip" and

0.02.071.757 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6627.84 tokens per second)
0.02.071.760 I llama_perf_context_print:        load time =     428.79 ms
0.02.071.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.071.764 I llama_perf_context_print:        eval time =    1622.83 ms /    32 runs   (   50.71 ms per token,    19.72 tokens per second)
0.02.071.765 I llama_perf_context_print:       total time =    1642.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4256 (a5a915b5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40219.20 ms
main:    total time = 40219.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4256 (a5a915b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.026 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.042 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.048 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.049 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.053 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.059 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.060 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.061 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.483 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.814 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.815 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.815 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.816 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.820 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.820 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.823 I llama_model_loader: - type  f32:   37 tensors
0.00.131.824 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.824 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.300 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.062 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.676 I llm_load_vocab: special tokens cache size = 5
0.00.274.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.029 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.030 I llm_load_print_meta: arch             = gemma
0.00.274.031 I llm_load_print_meta: vocab type       = SPM
0.00.274.032 I llm_load_print_meta: n_vocab          = 256000
0.00.274.032 I llm_load_print_meta: n_merges         = 0
0.00.274.032 I llm_load_print_meta: vocab_only       = 0
0.00.274.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.033 I llm_load_print_meta: n_embd           = 2048
0.00.274.034 I llm_load_print_meta: n_layer          = 18
0.00.274.045 I llm_load_print_meta: n_head           = 8
0.00.274.046 I llm_load_print_meta: n_head_kv        = 1
0.00.274.047 I llm_load_print_meta: n_rot            = 256
0.00.274.047 I llm_load_print_meta: n_swa            = 0
0.00.274.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.048 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.048 I llm_load_print_meta: n_gqa            = 8
0.00.274.050 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.054 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.055 I llm_load_print_meta: n_ff             = 16384
0.00.274.056 I llm_load_print_meta: n_expert         = 0
0.00.274.056 I llm_load_print_meta: n_expert_used    = 0
0.00.274.056 I llm_load_print_meta: causal attn      = 1
0.00.274.056 I llm_load_print_meta: pooling type     = 0
0.00.274.057 I llm_load_print_meta: rope type        = 2
0.00.274.057 I llm_load_print_meta: rope scaling     = linear
0.00.274.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.059 I llm_load_print_meta: freq_scale_train = 1
0.00.274.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.061 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.061 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.061 I llm_load_print_meta: model type       = 2B
0.00.274.062 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.063 I llm_load_print_meta: model params     = 2.51 B
0.00.274.063 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.064 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.064 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.066 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.067 I llm_load_print_meta: max token length = 93
0.00.330.612 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.694 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.701 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.701 I llama_new_context_with_model: n_batch       = 2048
0.00.335.702 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.703 I llama_new_context_with_model: flash_attn    = 0
0.00.335.705 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.706 I llama_new_context_with_model: freq_scale    = 1
0.00.335.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.741 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.756 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.849 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.110 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.117 I llama_new_context_with_model: graph nodes  = 601
0.00.352.117 I llama_new_context_with_model: graph splits = 1
0.00.352.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.043 I main: llama threadpool init, n_threads = 4
0.00.427.059 I 
0.00.427.132 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.427.135 I 
0.00.427.179 I sampler seed: 2052827198
0.00.427.191 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.194 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.205 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.206 I 
 seconded "I'm glad I found you" to her.

The girl smiled, but her eyes held a flicker of sadness. "I'm

0.02.044.053 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6729.20 tokens per second)
0.02.044.055 I llama_perf_context_print:        load time =     426.30 ms
0.02.044.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.044.057 I llama_perf_context_print:        eval time =    1598.20 ms /    32 runs   (   49.94 ms per token,    20.02 tokens per second)
0.02.044.058 I llama_perf_context_print:       total time =    1617.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.424s
user	10m24.404s
sys	0m7.141s
