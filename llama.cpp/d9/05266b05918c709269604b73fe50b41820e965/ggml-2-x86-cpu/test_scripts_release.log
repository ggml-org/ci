+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.487 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.495 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.503 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.509 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.514 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.515 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.516 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.521 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.523 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.524 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.525 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.005 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.567 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.466 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.467 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.468 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.469 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.469 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.472 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.473 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.479 I llama_model_loader: - type  f32:   37 tensors
0.00.131.480 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.881 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.439 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.287 I llm_load_vocab: special tokens cache size = 5
0.00.280.643 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.662 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.663 I llm_load_print_meta: arch             = gemma
0.00.280.663 I llm_load_print_meta: vocab type       = SPM
0.00.280.664 I llm_load_print_meta: n_vocab          = 256000
0.00.280.664 I llm_load_print_meta: n_merges         = 0
0.00.280.665 I llm_load_print_meta: vocab_only       = 0
0.00.280.665 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.665 I llm_load_print_meta: n_embd           = 2048
0.00.280.665 I llm_load_print_meta: n_layer          = 18
0.00.280.678 I llm_load_print_meta: n_head           = 8
0.00.280.679 I llm_load_print_meta: n_head_kv        = 1
0.00.280.680 I llm_load_print_meta: n_rot            = 256
0.00.280.680 I llm_load_print_meta: n_swa            = 0
0.00.280.680 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.680 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.681 I llm_load_print_meta: n_gqa            = 8
0.00.280.682 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.683 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.684 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.685 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.685 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.686 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.686 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.687 I llm_load_print_meta: n_ff             = 16384
0.00.280.688 I llm_load_print_meta: n_expert         = 0
0.00.280.688 I llm_load_print_meta: n_expert_used    = 0
0.00.280.688 I llm_load_print_meta: causal attn      = 1
0.00.280.688 I llm_load_print_meta: pooling type     = 0
0.00.280.689 I llm_load_print_meta: rope type        = 2
0.00.280.689 I llm_load_print_meta: rope scaling     = linear
0.00.280.690 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.690 I llm_load_print_meta: freq_scale_train = 1
0.00.280.691 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.691 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.691 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.691 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.692 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.692 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.692 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.693 I llm_load_print_meta: model type       = 2B
0.00.280.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.694 I llm_load_print_meta: model params     = 2.51 B
0.00.280.695 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.695 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.696 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.696 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.696 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.696 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.697 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.697 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.697 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.698 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.698 I llm_load_print_meta: max token length = 93
0.00.380.215 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.224 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.225 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.225 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.226 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.226 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.543 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.550 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.550 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.551 I llama_new_context_with_model: n_batch       = 2048
0.00.385.551 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.552 I llama_new_context_with_model: flash_attn    = 0
0.00.385.554 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.555 I llama_new_context_with_model: freq_scale    = 1
0.00.385.556 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.400.108 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.122 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.213 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.436 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.441 I llama_new_context_with_model: graph nodes  = 601
0.00.401.441 I llama_new_context_with_model: graph splits = 1
0.00.401.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.850 I main: llama threadpool init, n_threads = 4
0.00.486.864 I 
0.00.486.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.939 I 
0.00.486.983 I sampler seed: 3727398021
0.00.486.994 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.996 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.997 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.997 I 
 increably with the elegance of a ballerina.

This is what the muse whispered to me, a symphony of poetry and motion captured in a single, exquisite phrase

0.02.727.048 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.02.727.052 I llama_perf_context_print:        load time =     486.07 ms
0.02.727.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.055 I llama_perf_context_print:        eval time =    2220.66 ms /    32 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.727.056 I llama_perf_context_print:       total time =    2240.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.564 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.144 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.150 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.150 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.150 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.151 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.154 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.155 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.156 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.887 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.914 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.753 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.760 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.761 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.762 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.764 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.766 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.769 I llama_model_loader: - type  f32:   37 tensors
0.00.129.770 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.130 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.623 I llm_load_vocab: special tokens cache size = 5
0.00.258.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.817 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.818 I llm_load_print_meta: arch             = gemma
0.00.258.818 I llm_load_print_meta: vocab type       = SPM
0.00.258.819 I llm_load_print_meta: n_vocab          = 256000
0.00.258.819 I llm_load_print_meta: n_merges         = 0
0.00.258.819 I llm_load_print_meta: vocab_only       = 0
0.00.258.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.820 I llm_load_print_meta: n_embd           = 2048
0.00.258.821 I llm_load_print_meta: n_layer          = 18
0.00.258.831 I llm_load_print_meta: n_head           = 8
0.00.258.832 I llm_load_print_meta: n_head_kv        = 1
0.00.258.833 I llm_load_print_meta: n_rot            = 256
0.00.258.833 I llm_load_print_meta: n_swa            = 0
0.00.258.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.834 I llm_load_print_meta: n_gqa            = 8
0.00.258.836 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.837 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.837 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.840 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.841 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.842 I llm_load_print_meta: n_ff             = 16384
0.00.258.842 I llm_load_print_meta: n_expert         = 0
0.00.258.842 I llm_load_print_meta: n_expert_used    = 0
0.00.258.843 I llm_load_print_meta: causal attn      = 1
0.00.258.843 I llm_load_print_meta: pooling type     = 0
0.00.258.843 I llm_load_print_meta: rope type        = 2
0.00.258.844 I llm_load_print_meta: rope scaling     = linear
0.00.258.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.845 I llm_load_print_meta: freq_scale_train = 1
0.00.258.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.848 I llm_load_print_meta: model type       = 2B
0.00.258.848 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.849 I llm_load_print_meta: model params     = 2.51 B
0.00.258.850 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.851 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.852 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.853 I llm_load_print_meta: max token length = 93
0.00.352.518 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.357.674 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.681 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.681 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.682 I llama_new_context_with_model: n_batch       = 2048
0.00.357.683 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.683 I llama_new_context_with_model: flash_attn    = 0
0.00.357.685 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.686 I llama_new_context_with_model: freq_scale    = 1
0.00.357.687 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.075 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.088 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.170 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.333 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.340 I llama_new_context_with_model: graph nodes  = 601
0.00.373.340 I llama_new_context_with_model: graph splits = 1
0.00.373.342 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.658 I main: llama threadpool init, n_threads = 4
0.00.453.670 I 
0.00.453.747 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.751 I 
0.00.453.792 I sampler seed: 3342096312
0.00.453.803 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.806 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.815 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.818 I 
 increably. [end of text]


0.00.723.558 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7886.44 tokens per second)
0.00.723.560 I llama_perf_context_print:        load time =     452.87 ms
0.00.723.562 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.723.563 I llama_perf_context_print:        eval time =     266.46 ms /     4 runs   (   66.61 ms per token,    15.01 tokens per second)
0.00.723.564 I llama_perf_context_print:       total time =     269.91 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.541 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.130 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.139 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.150 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.151 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.154 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.155 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.157 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.941 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.534 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.414 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.424 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.429 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.430 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.433 I llama_model_loader: - type  f32:   37 tensors
0.00.131.434 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.149 I llm_load_vocab: special tokens cache size = 5
0.00.275.050 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.070 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.071 I llm_load_print_meta: arch             = gemma
0.00.275.071 I llm_load_print_meta: vocab type       = SPM
0.00.275.072 I llm_load_print_meta: n_vocab          = 256000
0.00.275.073 I llm_load_print_meta: n_merges         = 0
0.00.275.073 I llm_load_print_meta: vocab_only       = 0
0.00.275.073 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.074 I llm_load_print_meta: n_embd           = 2048
0.00.275.074 I llm_load_print_meta: n_layer          = 18
0.00.275.086 I llm_load_print_meta: n_head           = 8
0.00.275.087 I llm_load_print_meta: n_head_kv        = 1
0.00.275.087 I llm_load_print_meta: n_rot            = 256
0.00.275.088 I llm_load_print_meta: n_swa            = 0
0.00.275.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.089 I llm_load_print_meta: n_gqa            = 8
0.00.275.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.092 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.095 I llm_load_print_meta: n_ff             = 16384
0.00.275.096 I llm_load_print_meta: n_expert         = 0
0.00.275.096 I llm_load_print_meta: n_expert_used    = 0
0.00.275.097 I llm_load_print_meta: causal attn      = 1
0.00.275.097 I llm_load_print_meta: pooling type     = 0
0.00.275.097 I llm_load_print_meta: rope type        = 2
0.00.275.098 I llm_load_print_meta: rope scaling     = linear
0.00.275.099 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.099 I llm_load_print_meta: freq_scale_train = 1
0.00.275.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.100 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.100 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.101 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.101 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.101 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.102 I llm_load_print_meta: model type       = 2B
0.00.275.102 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.103 I llm_load_print_meta: model params     = 2.51 B
0.00.275.104 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.104 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.105 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.106 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.107 I llm_load_print_meta: max token length = 93
0.00.351.302 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.309 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.310 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.311 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.311 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.312 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.646 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.652 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.653 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.653 I llama_new_context_with_model: n_batch       = 2048
0.00.356.654 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.654 I llama_new_context_with_model: flash_attn    = 0
0.00.356.657 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.658 I llama_new_context_with_model: freq_scale    = 1
0.00.356.659 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.327 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.342 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.431 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.726 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.731 I llama_new_context_with_model: graph nodes  = 601
0.00.372.732 I llama_new_context_with_model: graph splits = 1
0.00.372.734 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.625 I main: llama threadpool init, n_threads = 4
0.00.459.640 I 
0.00.459.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.725 I 
0.00.459.775 I sampler seed: 3374938296
0.00.459.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.790 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.791 I 
 increasively.

I am so tired,
I can barely stand to breathe.
I need a nap,
But I can't find the time

0.02.724.151 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6886.48 tokens per second)
0.02.724.154 I llama_perf_context_print:        load time =     458.86 ms
0.02.724.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.724.156 I llama_perf_context_print:        eval time =    2245.09 ms /    32 runs   (   70.16 ms per token,    14.25 tokens per second)
0.02.724.157 I llama_perf_context_print:       total time =    2264.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.562 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.021.409 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.432 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.433 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.442 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.451 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.452 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.453 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.454 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.455 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.134 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.345 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.345 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.346 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.347 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.347 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.348 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.350 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.352 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.353 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.353 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.359 I llama_model_loader: - type  f32:   37 tensors
0.00.131.361 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.257 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.978 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.544 I llm_load_vocab: special tokens cache size = 5
0.00.262.439 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.456 I llm_load_print_meta: arch             = gemma
0.00.262.457 I llm_load_print_meta: vocab type       = SPM
0.00.262.475 I llm_load_print_meta: n_vocab          = 256000
0.00.262.477 I llm_load_print_meta: n_merges         = 0
0.00.262.477 I llm_load_print_meta: vocab_only       = 0
0.00.262.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.479 I llm_load_print_meta: n_embd           = 2048
0.00.262.480 I llm_load_print_meta: n_layer          = 18
0.00.262.495 I llm_load_print_meta: n_head           = 8
0.00.262.496 I llm_load_print_meta: n_head_kv        = 1
0.00.262.497 I llm_load_print_meta: n_rot            = 256
0.00.262.498 I llm_load_print_meta: n_swa            = 0
0.00.262.498 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.499 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.500 I llm_load_print_meta: n_gqa            = 8
0.00.262.502 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.504 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.506 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.508 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.510 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.512 I llm_load_print_meta: n_ff             = 16384
0.00.262.513 I llm_load_print_meta: n_expert         = 0
0.00.262.513 I llm_load_print_meta: n_expert_used    = 0
0.00.262.514 I llm_load_print_meta: causal attn      = 1
0.00.262.515 I llm_load_print_meta: pooling type     = 0
0.00.262.518 I llm_load_print_meta: rope type        = 2
0.00.262.519 I llm_load_print_meta: rope scaling     = linear
0.00.262.521 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.522 I llm_load_print_meta: freq_scale_train = 1
0.00.262.522 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.523 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.525 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.526 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.527 I llm_load_print_meta: model type       = 2B
0.00.262.528 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.529 I llm_load_print_meta: model params     = 2.51 B
0.00.262.530 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.531 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.538 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.539 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.540 I llm_load_print_meta: max token length = 93
0.00.333.600 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.333.606 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.097 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.104 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.104 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.105 I llama_new_context_with_model: n_batch       = 2048
0.00.339.105 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.105 I llama_new_context_with_model: flash_attn    = 0
0.00.339.107 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.108 I llama_new_context_with_model: freq_scale    = 1
0.00.339.109 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.341 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.354 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.697 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.704 I llama_new_context_with_model: graph nodes  = 601
0.00.354.704 I llama_new_context_with_model: graph splits = 1
0.00.354.706 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.393 I main: llama threadpool init, n_threads = 4
0.00.443.406 I 
0.00.443.493 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.496 I 
0.00.443.543 I sampler seed: 1241946803
0.00.443.554 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.557 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.558 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.559 I 
 seconary.

A step-by-step guide on how to prepare for a career fair.

**Step 1: Research and Identify Target Employers**

0.02.863.921 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6916.79 tokens per second)
0.02.863.924 I llama_perf_context_print:        load time =     442.59 ms
0.02.863.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.863.929 I llama_perf_context_print:        eval time =    2401.48 ms /    32 runs   (   75.05 ms per token,    13.33 tokens per second)
0.02.863.930 I llama_perf_context_print:       total time =    2420.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.777s
user	0m31.591s
sys	0m9.398s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4170 (d905266b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40207.28 ms
main:    total time = 40207.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.705 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.717 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.725 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.733 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.735 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.740 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.741 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.742 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.743 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.746 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.747 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.748 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.749 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.979 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.866 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.718 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.724 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.725 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.725 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.726 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.727 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.733 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.738 I llama_model_loader: - type  f32:   37 tensors
0.00.131.739 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.739 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.984 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.838 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.504 I llm_load_vocab: special tokens cache size = 5
0.00.278.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.694 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.694 I llm_load_print_meta: arch             = gemma
0.00.278.695 I llm_load_print_meta: vocab type       = SPM
0.00.278.696 I llm_load_print_meta: n_vocab          = 256000
0.00.278.697 I llm_load_print_meta: n_merges         = 0
0.00.278.697 I llm_load_print_meta: vocab_only       = 0
0.00.278.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.698 I llm_load_print_meta: n_embd           = 2048
0.00.278.698 I llm_load_print_meta: n_layer          = 18
0.00.278.710 I llm_load_print_meta: n_head           = 8
0.00.278.711 I llm_load_print_meta: n_head_kv        = 1
0.00.278.712 I llm_load_print_meta: n_rot            = 256
0.00.278.712 I llm_load_print_meta: n_swa            = 0
0.00.278.712 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.713 I llm_load_print_meta: n_gqa            = 8
0.00.278.714 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.716 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.717 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.718 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.718 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.718 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.719 I llm_load_print_meta: n_ff             = 16384
0.00.278.720 I llm_load_print_meta: n_expert         = 0
0.00.278.720 I llm_load_print_meta: n_expert_used    = 0
0.00.278.720 I llm_load_print_meta: causal attn      = 1
0.00.278.721 I llm_load_print_meta: pooling type     = 0
0.00.278.721 I llm_load_print_meta: rope type        = 2
0.00.278.721 I llm_load_print_meta: rope scaling     = linear
0.00.278.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.723 I llm_load_print_meta: freq_scale_train = 1
0.00.278.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.724 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.724 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.725 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.725 I llm_load_print_meta: model type       = 2B
0.00.278.726 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.727 I llm_load_print_meta: model params     = 2.51 B
0.00.278.728 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.728 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.729 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.729 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.729 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.730 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.730 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.731 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.731 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.732 I llm_load_print_meta: max token length = 93
0.00.337.486 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.495 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.495 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.496 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.496 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.497 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.766 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.772 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.773 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.773 I llama_new_context_with_model: n_batch       = 2048
0.00.342.774 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.774 I llama_new_context_with_model: flash_attn    = 0
0.00.342.777 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.778 I llama_new_context_with_model: freq_scale    = 1
0.00.342.779 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.184 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.200 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.291 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.520 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.526 I llama_new_context_with_model: graph nodes  = 601
0.00.358.527 I llama_new_context_with_model: graph splits = 1
0.00.358.529 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.961 I main: llama threadpool init, n_threads = 4
0.00.432.975 I 
0.00.433.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.062 I 
0.00.433.118 I sampler seed: 3273504380
0.00.433.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.137 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.138 I 
 seconally. The following day, the same news was reported in a different way, highlighting the inconsistencies in the information.

This pattern of inconsistency suggests that:

0.02.017.007 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6387.92 tokens per second)
0.02.017.009 I llama_perf_context_print:        load time =     432.18 ms
0.02.017.011 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.012 I llama_perf_context_print:        eval time =    1564.69 ms /    32 runs   (   48.90 ms per token,    20.45 tokens per second)
0.02.017.013 I llama_perf_context_print:       total time =    1584.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4170 (d905266b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40169.42 ms
main:    total time = 40169.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.490 I build: 4170 (d905266b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.683 I main: llama backend init
0.00.000.689 I main: load the model and apply lora adapter, if any
0.00.021.571 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.592 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.593 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.600 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.601 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.604 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.604 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.605 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.038 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.703 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.556 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.562 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.564 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.565 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.571 I llama_model_loader: - type  f32:   37 tensors
0.00.130.572 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.572 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.327 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.956 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.399 I llm_load_vocab: special tokens cache size = 5
0.00.257.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.975 I llm_load_print_meta: arch             = gemma
0.00.257.976 I llm_load_print_meta: vocab type       = SPM
0.00.257.976 I llm_load_print_meta: n_vocab          = 256000
0.00.257.976 I llm_load_print_meta: n_merges         = 0
0.00.257.977 I llm_load_print_meta: vocab_only       = 0
0.00.257.977 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.977 I llm_load_print_meta: n_embd           = 2048
0.00.257.978 I llm_load_print_meta: n_layer          = 18
0.00.257.989 I llm_load_print_meta: n_head           = 8
0.00.257.990 I llm_load_print_meta: n_head_kv        = 1
0.00.257.991 I llm_load_print_meta: n_rot            = 256
0.00.257.991 I llm_load_print_meta: n_swa            = 0
0.00.257.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.257.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.257.993 I llm_load_print_meta: n_gqa            = 8
0.00.257.994 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.257.995 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.257.996 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.257.997 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.257.998 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.257.998 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.257.999 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.000 I llm_load_print_meta: n_ff             = 16384
0.00.258.001 I llm_load_print_meta: n_expert         = 0
0.00.258.001 I llm_load_print_meta: n_expert_used    = 0
0.00.258.001 I llm_load_print_meta: causal attn      = 1
0.00.258.002 I llm_load_print_meta: pooling type     = 0
0.00.258.002 I llm_load_print_meta: rope type        = 2
0.00.258.003 I llm_load_print_meta: rope scaling     = linear
0.00.258.005 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.006 I llm_load_print_meta: freq_scale_train = 1
0.00.258.006 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.006 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.007 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.007 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.007 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.008 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.008 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.008 I llm_load_print_meta: model type       = 2B
0.00.258.009 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.010 I llm_load_print_meta: model params     = 2.51 B
0.00.258.011 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.011 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.012 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.012 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.015 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.016 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.017 I llm_load_print_meta: max token length = 93
0.00.313.007 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.318.133 I llama_new_context_with_model: n_seq_max     = 1
0.00.318.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.318.139 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.318.140 I llama_new_context_with_model: n_batch       = 2048
0.00.318.140 I llama_new_context_with_model: n_ubatch      = 512
0.00.318.141 I llama_new_context_with_model: flash_attn    = 0
0.00.318.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.318.143 I llama_new_context_with_model: freq_scale    = 1
0.00.318.144 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.099 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.333.112 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.333.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.334.484 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.334.491 I llama_new_context_with_model: graph nodes  = 601
0.00.334.491 I llama_new_context_with_model: graph splits = 1
0.00.334.493 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.408.423 I main: llama threadpool init, n_threads = 4
0.00.408.439 I 
0.00.408.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.408.515 I 
0.00.408.561 I sampler seed: 393050251
0.00.408.572 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.408.575 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.408.575 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.408.575 I 
 encompates various features that cater to both individual and business users.

**Features for Individual Users:**

- Customizable profile
- Goal setting and tracking
-

0.01.970.597 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6780.36 tokens per second)
0.01.970.599 I llama_perf_context_print:        load time =     407.72 ms
0.01.970.601 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.970.603 I llama_perf_context_print:        eval time =    1543.30 ms /    32 runs   (   48.23 ms per token,    20.73 tokens per second)
0.01.970.604 I llama_perf_context_print:       total time =    1562.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.159s
user	10m24.009s
sys	0m6.865s
