+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.085.618 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.629 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.753 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.761 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.763 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.765 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.766 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.770 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.778 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.779 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.784 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.311.052 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.412.788 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.437.131 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.437.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.437.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.437.149 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.437.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.437.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.437.155 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.437.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.437.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.437.163 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.437.165 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.437.167 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.437.175 I llama_model_loader: - type  f32:   37 tensors
0.00.437.178 I llama_model_loader: - type q8_0:  127 tensors
0.00.709.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.842.066 I llm_load_vocab: special tokens cache size = 5
0.01.063.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.063.861 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.063.866 I llm_load_print_meta: arch             = gemma
0.01.063.867 I llm_load_print_meta: vocab type       = SPM
0.01.063.868 I llm_load_print_meta: n_vocab          = 256000
0.01.063.870 I llm_load_print_meta: n_merges         = 0
0.01.063.870 I llm_load_print_meta: vocab_only       = 0
0.01.063.871 I llm_load_print_meta: n_ctx_train      = 8192
0.01.063.871 I llm_load_print_meta: n_embd           = 2048
0.01.063.872 I llm_load_print_meta: n_layer          = 18
0.01.063.952 I llm_load_print_meta: n_head           = 8
0.01.063.962 I llm_load_print_meta: n_head_kv        = 1
0.01.063.963 I llm_load_print_meta: n_rot            = 256
0.01.063.963 I llm_load_print_meta: n_swa            = 0
0.01.063.963 I llm_load_print_meta: n_embd_head_k    = 256
0.01.063.964 I llm_load_print_meta: n_embd_head_v    = 256
0.01.063.969 I llm_load_print_meta: n_gqa            = 8
0.01.063.974 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.063.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.063.980 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.063.982 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.063.982 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.063.983 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.063.984 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.063.989 I llm_load_print_meta: n_ff             = 16384
0.01.063.989 I llm_load_print_meta: n_expert         = 0
0.01.063.990 I llm_load_print_meta: n_expert_used    = 0
0.01.063.990 I llm_load_print_meta: causal attn      = 1
0.01.063.990 I llm_load_print_meta: pooling type     = 0
0.01.063.991 I llm_load_print_meta: rope type        = 2
0.01.063.992 I llm_load_print_meta: rope scaling     = linear
0.01.063.993 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.063.994 I llm_load_print_meta: freq_scale_train = 1
0.01.063.995 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.063.995 I llm_load_print_meta: rope_finetuned   = unknown
0.01.063.995 I llm_load_print_meta: ssm_d_conv       = 0
0.01.063.996 I llm_load_print_meta: ssm_d_inner      = 0
0.01.063.999 I llm_load_print_meta: ssm_d_state      = 0
0.01.063.999 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.064.000 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.064.002 I llm_load_print_meta: model type       = 2B
0.01.064.004 I llm_load_print_meta: model ftype      = Q8_0
0.01.064.005 I llm_load_print_meta: model params     = 2.51 B
0.01.064.005 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.064.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.064.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.064.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.064.008 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.064.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.064.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.064.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.064.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.064.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.064.017 I llm_load_print_meta: max token length = 93
0.01.165.485 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.165.496 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.165.497 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.165.498 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.165.498 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.165.499 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.172.535 I llama_new_context_with_model: n_seq_max     = 1
0.01.172.541 I llama_new_context_with_model: n_ctx         = 4096
0.01.172.541 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.172.542 I llama_new_context_with_model: n_batch       = 2048
0.01.172.542 I llama_new_context_with_model: n_ubatch      = 512
0.01.172.543 I llama_new_context_with_model: flash_attn    = 0
0.01.172.545 I llama_new_context_with_model: freq_base     = 10000.0
0.01.172.546 I llama_new_context_with_model: freq_scale    = 1
0.01.172.547 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.172.628 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.187.067 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.187.112 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.187.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.190.814 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.190.818 I llama_new_context_with_model: graph nodes  = 601
0.01.190.819 I llama_new_context_with_model: graph splits = 1
0.01.190.843 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.190.846 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.801.708 I main: llama threadpool init, n_threads = 4
0.01.801.725 I 
0.01.801.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.801.850 I 
0.01.802.081 I sampler seed: 1535279611
0.01.802.095 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.802.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.802.108 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.802.108 I 
 increasively.

**Assistant**

I understand. I will ensure to provide you with the necessary information and context to answer your questions accurately and comprehensively. [end of text]


0.15.270.451 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.85 tokens per second)
0.15.270.454 I llama_perf_context_print:        load time =    1800.79 ms
0.15.270.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.270.458 I llama_perf_context_print:        eval time =   13381.47 ms /    32 runs   (  418.17 ms per token,     2.39 tokens per second)
0.15.270.459 I llama_perf_context_print:       total time =   13468.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.087.152 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.087.260 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.292 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.295 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.301 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.308 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.319 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.325 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.330 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.755 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.757 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.761 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.765 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.767 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.769 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.771 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.772 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.417.782 I llama_model_loader: - type  f32:   37 tensors
0.00.417.785 I llama_model_loader: - type q8_0:  127 tensors
0.00.682.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.813.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.814.158 I llm_load_vocab: special tokens cache size = 5
0.01.030.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.030.926 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.030.931 I llm_load_print_meta: arch             = gemma
0.01.030.931 I llm_load_print_meta: vocab type       = SPM
0.01.030.933 I llm_load_print_meta: n_vocab          = 256000
0.01.030.935 I llm_load_print_meta: n_merges         = 0
0.01.030.935 I llm_load_print_meta: vocab_only       = 0
0.01.030.936 I llm_load_print_meta: n_ctx_train      = 8192
0.01.030.936 I llm_load_print_meta: n_embd           = 2048
0.01.030.937 I llm_load_print_meta: n_layer          = 18
0.01.031.024 I llm_load_print_meta: n_head           = 8
0.01.031.038 I llm_load_print_meta: n_head_kv        = 1
0.01.031.039 I llm_load_print_meta: n_rot            = 256
0.01.031.040 I llm_load_print_meta: n_swa            = 0
0.01.031.041 I llm_load_print_meta: n_embd_head_k    = 256
0.01.031.043 I llm_load_print_meta: n_embd_head_v    = 256
0.01.031.051 I llm_load_print_meta: n_gqa            = 8
0.01.031.058 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.031.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.031.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.031.083 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.031.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.031.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.031.088 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.031.097 I llm_load_print_meta: n_ff             = 16384
0.01.031.098 I llm_load_print_meta: n_expert         = 0
0.01.031.098 I llm_load_print_meta: n_expert_used    = 0
0.01.031.099 I llm_load_print_meta: causal attn      = 1
0.01.031.100 I llm_load_print_meta: pooling type     = 0
0.01.031.101 I llm_load_print_meta: rope type        = 2
0.01.031.102 I llm_load_print_meta: rope scaling     = linear
0.01.031.104 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.031.105 I llm_load_print_meta: freq_scale_train = 1
0.01.031.106 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.031.106 I llm_load_print_meta: rope_finetuned   = unknown
0.01.031.108 I llm_load_print_meta: ssm_d_conv       = 0
0.01.031.109 I llm_load_print_meta: ssm_d_inner      = 0
0.01.031.109 I llm_load_print_meta: ssm_d_state      = 0
0.01.031.110 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.031.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.031.115 I llm_load_print_meta: model type       = 2B
0.01.031.118 I llm_load_print_meta: model ftype      = Q8_0
0.01.031.119 I llm_load_print_meta: model params     = 2.51 B
0.01.031.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.031.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.031.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.031.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.031.127 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.031.127 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.031.128 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.031.129 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.031.137 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.031.139 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.031.140 I llm_load_print_meta: max token length = 93
0.01.125.694 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.133.157 I llama_new_context_with_model: n_seq_max     = 1
0.01.133.165 I llama_new_context_with_model: n_ctx         = 4096
0.01.133.166 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.133.166 I llama_new_context_with_model: n_batch       = 2048
0.01.133.166 I llama_new_context_with_model: n_ubatch      = 512
0.01.133.167 I llama_new_context_with_model: flash_attn    = 0
0.01.133.171 I llama_new_context_with_model: freq_base     = 10000.0
0.01.133.171 I llama_new_context_with_model: freq_scale    = 1
0.01.133.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.133.268 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.148.770 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.148.814 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.148.935 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.152.228 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.152.233 I llama_new_context_with_model: graph nodes  = 601
0.01.152.233 I llama_new_context_with_model: graph splits = 1
0.01.152.261 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.152.265 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.827.783 I main: llama threadpool init, n_threads = 4
0.01.827.800 I 
0.01.827.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.827.935 I 
0.01.828.178 I sampler seed: 352566998
0.01.828.192 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.828.205 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.828.209 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.828.209 I 
 increasities, and other forms of inappropriate behavior can occur in various settings, including workplaces, schools, and online platforms.

**What are the potential consequences of

0.15.406.185 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.48 tokens per second)
0.15.406.188 I llama_perf_context_print:        load time =    1826.85 ms
0.15.406.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.406.191 I llama_perf_context_print:        eval time =   13492.94 ms /    32 runs   (  421.65 ms per token,     2.37 tokens per second)
0.15.406.205 I llama_perf_context_print:       total time =   13578.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.690 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.086.037 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.047 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.147 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.182 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.185 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.189 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.191 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.201 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.208 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.001 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.007 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.022 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.027 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.030 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.032 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.034 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.417.045 I llama_model_loader: - type  f32:   37 tensors
0.00.417.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.691.563 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.821.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.822.804 I llm_load_vocab: special tokens cache size = 5
0.01.043.844 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.043.925 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.043.931 I llm_load_print_meta: arch             = gemma
0.01.043.931 I llm_load_print_meta: vocab type       = SPM
0.01.043.932 I llm_load_print_meta: n_vocab          = 256000
0.01.043.934 I llm_load_print_meta: n_merges         = 0
0.01.043.935 I llm_load_print_meta: vocab_only       = 0
0.01.043.935 I llm_load_print_meta: n_ctx_train      = 8192
0.01.043.936 I llm_load_print_meta: n_embd           = 2048
0.01.043.936 I llm_load_print_meta: n_layer          = 18
0.01.044.017 I llm_load_print_meta: n_head           = 8
0.01.044.028 I llm_load_print_meta: n_head_kv        = 1
0.01.044.029 I llm_load_print_meta: n_rot            = 256
0.01.044.045 I llm_load_print_meta: n_swa            = 0
0.01.044.049 I llm_load_print_meta: n_embd_head_k    = 256
0.01.044.049 I llm_load_print_meta: n_embd_head_v    = 256
0.01.044.054 I llm_load_print_meta: n_gqa            = 8
0.01.044.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.044.064 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.044.066 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.044.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.044.070 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.044.070 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.044.071 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.044.076 I llm_load_print_meta: n_ff             = 16384
0.01.044.077 I llm_load_print_meta: n_expert         = 0
0.01.044.077 I llm_load_print_meta: n_expert_used    = 0
0.01.044.078 I llm_load_print_meta: causal attn      = 1
0.01.044.078 I llm_load_print_meta: pooling type     = 0
0.01.044.079 I llm_load_print_meta: rope type        = 2
0.01.044.080 I llm_load_print_meta: rope scaling     = linear
0.01.044.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.044.083 I llm_load_print_meta: freq_scale_train = 1
0.01.044.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.044.084 I llm_load_print_meta: rope_finetuned   = unknown
0.01.044.085 I llm_load_print_meta: ssm_d_conv       = 0
0.01.044.086 I llm_load_print_meta: ssm_d_inner      = 0
0.01.044.086 I llm_load_print_meta: ssm_d_state      = 0
0.01.044.086 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.044.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.044.090 I llm_load_print_meta: model type       = 2B
0.01.044.092 I llm_load_print_meta: model ftype      = Q8_0
0.01.044.093 I llm_load_print_meta: model params     = 2.51 B
0.01.044.094 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.044.094 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.044.095 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.044.095 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.044.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.044.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.044.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.044.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.044.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.044.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.044.107 I llm_load_print_meta: max token length = 93
0.01.121.941 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.121.950 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.121.951 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.121.951 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.121.952 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.121.953 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.129.004 I llama_new_context_with_model: n_seq_max     = 1
0.01.129.009 I llama_new_context_with_model: n_ctx         = 4096
0.01.129.010 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.129.010 I llama_new_context_with_model: n_batch       = 2048
0.01.129.011 I llama_new_context_with_model: n_ubatch      = 512
0.01.129.011 I llama_new_context_with_model: flash_attn    = 0
0.01.129.014 I llama_new_context_with_model: freq_base     = 10000.0
0.01.129.014 I llama_new_context_with_model: freq_scale    = 1
0.01.129.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.129.095 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.143.559 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.143.602 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.143.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.147.029 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.147.033 I llama_new_context_with_model: graph nodes  = 601
0.01.147.034 I llama_new_context_with_model: graph splits = 1
0.01.147.059 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.147.062 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.761.370 I main: llama threadpool init, n_threads = 4
0.01.761.387 I 
0.01.761.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.761.511 I 
0.01.761.761 I sampler seed: 1230795501
0.01.761.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.761.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.761.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.761.787 I 
 increasities in the realm of music production.

**1. Automation and Sampling:**

* Automating complex rhythmic patterns and melodies.
* Sampling existing sounds

0.15.403.549 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.52 tokens per second)
0.15.403.552 I llama_perf_context_print:        load time =    1760.38 ms
0.15.403.554 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.403.577 I llama_perf_context_print:        eval time =   13556.27 ms /    32 runs   (  423.63 ms per token,     2.36 tokens per second)
0.15.403.579 I llama_perf_context_print:       total time =   13642.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.085.474 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.485 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.583 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.607 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.611 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.617 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.620 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.622 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.624 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.627 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.629 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.636 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.638 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.640 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.644 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.646 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.298.941 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.400.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.395 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.413 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.419 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.420 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.425 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.427 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.424.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.424.430 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.424.432 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.424.442 I llama_model_loader: - type  f32:   37 tensors
0.00.424.444 I llama_model_loader: - type q8_0:  127 tensors
0.00.704.903 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.836.062 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.837.122 I llm_load_vocab: special tokens cache size = 5
0.01.060.184 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.060.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.060.271 I llm_load_print_meta: arch             = gemma
0.01.060.272 I llm_load_print_meta: vocab type       = SPM
0.01.060.273 I llm_load_print_meta: n_vocab          = 256000
0.01.060.275 I llm_load_print_meta: n_merges         = 0
0.01.060.276 I llm_load_print_meta: vocab_only       = 0
0.01.060.276 I llm_load_print_meta: n_ctx_train      = 8192
0.01.060.276 I llm_load_print_meta: n_embd           = 2048
0.01.060.277 I llm_load_print_meta: n_layer          = 18
0.01.060.356 I llm_load_print_meta: n_head           = 8
0.01.060.364 I llm_load_print_meta: n_head_kv        = 1
0.01.060.365 I llm_load_print_meta: n_rot            = 256
0.01.060.365 I llm_load_print_meta: n_swa            = 0
0.01.060.366 I llm_load_print_meta: n_embd_head_k    = 256
0.01.060.366 I llm_load_print_meta: n_embd_head_v    = 256
0.01.060.371 I llm_load_print_meta: n_gqa            = 8
0.01.060.375 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.060.381 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.060.385 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.060.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.060.387 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.060.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.060.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.060.394 I llm_load_print_meta: n_ff             = 16384
0.01.060.395 I llm_load_print_meta: n_expert         = 0
0.01.060.395 I llm_load_print_meta: n_expert_used    = 0
0.01.060.395 I llm_load_print_meta: causal attn      = 1
0.01.060.396 I llm_load_print_meta: pooling type     = 0
0.01.060.396 I llm_load_print_meta: rope type        = 2
0.01.060.397 I llm_load_print_meta: rope scaling     = linear
0.01.060.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.060.400 I llm_load_print_meta: freq_scale_train = 1
0.01.060.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.060.401 I llm_load_print_meta: rope_finetuned   = unknown
0.01.060.402 I llm_load_print_meta: ssm_d_conv       = 0
0.01.060.402 I llm_load_print_meta: ssm_d_inner      = 0
0.01.060.402 I llm_load_print_meta: ssm_d_state      = 0
0.01.060.403 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.060.427 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.060.431 I llm_load_print_meta: model type       = 2B
0.01.060.433 I llm_load_print_meta: model ftype      = Q8_0
0.01.060.434 I llm_load_print_meta: model params     = 2.51 B
0.01.060.435 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.060.436 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.060.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.060.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.060.438 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.060.438 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.060.439 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.060.440 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.060.446 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.060.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.060.449 I llm_load_print_meta: max token length = 93
0.01.134.534 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.134.545 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.141.866 I llama_new_context_with_model: n_seq_max     = 1
0.01.141.873 I llama_new_context_with_model: n_ctx         = 4096
0.01.141.873 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.141.874 I llama_new_context_with_model: n_batch       = 2048
0.01.141.874 I llama_new_context_with_model: n_ubatch      = 512
0.01.141.875 I llama_new_context_with_model: flash_attn    = 0
0.01.141.877 I llama_new_context_with_model: freq_base     = 10000.0
0.01.141.878 I llama_new_context_with_model: freq_scale    = 1
0.01.141.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.141.969 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.156.563 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.156.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.156.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.160.407 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.160.411 I llama_new_context_with_model: graph nodes  = 601
0.01.160.412 I llama_new_context_with_model: graph splits = 1
0.01.160.438 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.160.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.774.618 I main: llama threadpool init, n_threads = 4
0.01.774.636 I 
0.01.774.771 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.774.775 I 
0.01.775.017 I sampler seed: 1722196351
0.01.775.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.775.045 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.775.050 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.775.050 I 
 increasities with a sassy and sassy attitude.

**Verse 1:**
Woke up this mornin', sun peekin' through the blinds
Legs

0.15.400.739 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.85 tokens per second)
0.15.400.742 I llama_perf_context_print:        load time =    1773.65 ms
0.15.400.743 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.400.760 I llama_perf_context_print:        eval time =   13540.97 ms /    32 runs   (  423.16 ms per token,     2.36 tokens per second)
0.15.400.761 I llama_perf_context_print:       total time =   13626.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m12.889s
user	3m53.509s
sys	0m9.394s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4451 (d9feae1c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186830.21 ms
main:    total time = 186830.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.085.897 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.913 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.017 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.039 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.042 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.049 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.051 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.058 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.081 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.088 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.090 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.092 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.676 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.187 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.568 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.581 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.583 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.585 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.587 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.607 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.610 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.616 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.618 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.416.620 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.416.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.624 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.416.627 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.416.636 I llama_model_loader: - type  f32:   37 tensors
0.00.416.640 I llama_model_loader: - type q4_K:  108 tensors
0.00.416.641 I llama_model_loader: - type q6_K:   19 tensors
0.00.679.314 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.799.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.800.536 I llm_load_vocab: special tokens cache size = 5
0.01.023.776 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.023.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.023.863 I llm_load_print_meta: arch             = gemma
0.01.023.864 I llm_load_print_meta: vocab type       = SPM
0.01.023.865 I llm_load_print_meta: n_vocab          = 256000
0.01.023.867 I llm_load_print_meta: n_merges         = 0
0.01.023.868 I llm_load_print_meta: vocab_only       = 0
0.01.023.869 I llm_load_print_meta: n_ctx_train      = 8192
0.01.023.869 I llm_load_print_meta: n_embd           = 2048
0.01.023.869 I llm_load_print_meta: n_layer          = 18
0.01.023.953 I llm_load_print_meta: n_head           = 8
0.01.023.961 I llm_load_print_meta: n_head_kv        = 1
0.01.023.963 I llm_load_print_meta: n_rot            = 256
0.01.023.963 I llm_load_print_meta: n_swa            = 0
0.01.023.964 I llm_load_print_meta: n_embd_head_k    = 256
0.01.023.964 I llm_load_print_meta: n_embd_head_v    = 256
0.01.023.969 I llm_load_print_meta: n_gqa            = 8
0.01.023.974 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.023.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.023.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.023.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.023.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.023.984 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.023.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.023.990 I llm_load_print_meta: n_ff             = 16384
0.01.023.991 I llm_load_print_meta: n_expert         = 0
0.01.023.991 I llm_load_print_meta: n_expert_used    = 0
0.01.023.993 I llm_load_print_meta: causal attn      = 1
0.01.023.993 I llm_load_print_meta: pooling type     = 0
0.01.023.994 I llm_load_print_meta: rope type        = 2
0.01.023.995 I llm_load_print_meta: rope scaling     = linear
0.01.023.997 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.023.997 I llm_load_print_meta: freq_scale_train = 1
0.01.023.998 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.023.999 I llm_load_print_meta: rope_finetuned   = unknown
0.01.023.999 I llm_load_print_meta: ssm_d_conv       = 0
0.01.024.000 I llm_load_print_meta: ssm_d_inner      = 0
0.01.024.001 I llm_load_print_meta: ssm_d_state      = 0
0.01.024.002 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.024.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.024.006 I llm_load_print_meta: model type       = 2B
0.01.024.011 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.024.011 I llm_load_print_meta: model params     = 2.51 B
0.01.024.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.024.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.024.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.024.014 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.024.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.024.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.024.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.024.017 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.024.023 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.024.024 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.024.025 I llm_load_print_meta: max token length = 93
0.01.085.656 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.085.669 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.085.670 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.085.671 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.085.672 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.085.673 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.092.710 I llama_new_context_with_model: n_seq_max     = 1
0.01.092.716 I llama_new_context_with_model: n_ctx         = 4096
0.01.092.717 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.092.717 I llama_new_context_with_model: n_batch       = 2048
0.01.092.718 I llama_new_context_with_model: n_ubatch      = 512
0.01.092.719 I llama_new_context_with_model: flash_attn    = 0
0.01.092.722 I llama_new_context_with_model: freq_base     = 10000.0
0.01.092.723 I llama_new_context_with_model: freq_scale    = 1
0.01.092.724 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.092.813 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.108.216 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.108.258 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.108.377 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.111.945 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.111.950 I llama_new_context_with_model: graph nodes  = 601
0.01.111.951 I llama_new_context_with_model: graph splits = 1
0.01.111.977 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.111.981 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.693.865 I main: llama threadpool init, n_threads = 4
0.01.693.882 I 
0.01.694.007 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.694.011 I 
0.01.694.237 I sampler seed: 1196645237
0.01.694.251 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.694.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.694.265 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.694.266 I 
 seconally after a person's name. 

For example:
- John Smith
- Jane Doe
- Bill Jones

This is often used in

0.12.744.845 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.51 tokens per second)
0.12.744.849 I llama_perf_context_print:        load time =    1692.95 ms
0.12.744.860 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.744.863 I llama_perf_context_print:        eval time =   10965.76 ms /    32 runs   (  342.68 ms per token,     2.92 tokens per second)
0.12.744.864 I llama_perf_context_print:       total time =   11050.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4451 (d9feae1c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186379.53 ms
main:    total time = 186379.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4451 (d9feae1c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.085.424 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.589 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.590 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.596 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.604 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.608 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.610 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.611 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.299.301 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.400.572 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.883 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.894 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.897 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.898 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.900 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.902 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.904 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.909 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.911 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.424.912 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.424.920 I llama_model_loader: - type  f32:   37 tensors
0.00.424.922 I llama_model_loader: - type q4_K:  108 tensors
0.00.424.923 I llama_model_loader: - type q6_K:   19 tensors
0.00.692.345 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.813.714 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.814.641 I llm_load_vocab: special tokens cache size = 5
0.01.034.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.034.702 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.034.707 I llm_load_print_meta: arch             = gemma
0.01.034.708 I llm_load_print_meta: vocab type       = SPM
0.01.034.709 I llm_load_print_meta: n_vocab          = 256000
0.01.034.711 I llm_load_print_meta: n_merges         = 0
0.01.034.712 I llm_load_print_meta: vocab_only       = 0
0.01.034.712 I llm_load_print_meta: n_ctx_train      = 8192
0.01.034.712 I llm_load_print_meta: n_embd           = 2048
0.01.034.713 I llm_load_print_meta: n_layer          = 18
0.01.034.791 I llm_load_print_meta: n_head           = 8
0.01.034.802 I llm_load_print_meta: n_head_kv        = 1
0.01.034.802 I llm_load_print_meta: n_rot            = 256
0.01.034.803 I llm_load_print_meta: n_swa            = 0
0.01.034.803 I llm_load_print_meta: n_embd_head_k    = 256
0.01.034.803 I llm_load_print_meta: n_embd_head_v    = 256
0.01.034.808 I llm_load_print_meta: n_gqa            = 8
0.01.034.813 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.034.819 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.034.820 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.034.822 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.034.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.034.824 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.034.826 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.034.831 I llm_load_print_meta: n_ff             = 16384
0.01.034.832 I llm_load_print_meta: n_expert         = 0
0.01.034.832 I llm_load_print_meta: n_expert_used    = 0
0.01.034.832 I llm_load_print_meta: causal attn      = 1
0.01.034.833 I llm_load_print_meta: pooling type     = 0
0.01.034.833 I llm_load_print_meta: rope type        = 2
0.01.034.833 I llm_load_print_meta: rope scaling     = linear
0.01.034.835 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.034.836 I llm_load_print_meta: freq_scale_train = 1
0.01.034.836 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.034.837 I llm_load_print_meta: rope_finetuned   = unknown
0.01.034.837 I llm_load_print_meta: ssm_d_conv       = 0
0.01.034.837 I llm_load_print_meta: ssm_d_inner      = 0
0.01.034.837 I llm_load_print_meta: ssm_d_state      = 0
0.01.034.838 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.034.839 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.034.842 I llm_load_print_meta: model type       = 2B
0.01.034.843 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.034.844 I llm_load_print_meta: model params     = 2.51 B
0.01.034.845 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.034.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.034.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.034.850 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.034.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.034.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.034.851 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.034.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.034.858 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.034.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.034.860 I llm_load_print_meta: max token length = 93
0.01.094.888 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.101.916 I llama_new_context_with_model: n_seq_max     = 1
0.01.101.922 I llama_new_context_with_model: n_ctx         = 4096
0.01.101.923 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.101.923 I llama_new_context_with_model: n_batch       = 2048
0.01.101.924 I llama_new_context_with_model: n_ubatch      = 512
0.01.101.924 I llama_new_context_with_model: flash_attn    = 0
0.01.101.928 I llama_new_context_with_model: freq_base     = 10000.0
0.01.101.928 I llama_new_context_with_model: freq_scale    = 1
0.01.101.929 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.102.018 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.117.641 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.117.685 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.117.811 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.121.431 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.121.436 I llama_new_context_with_model: graph nodes  = 601
0.01.121.436 I llama_new_context_with_model: graph splits = 1
0.01.121.463 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.121.466 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.702.731 I main: llama threadpool init, n_threads = 4
0.01.702.748 I 
0.01.702.867 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.702.871 I 
0.01.703.096 I sampler seed: 3476804399
0.01.703.110 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.703.119 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.703.122 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.703.122 I 
 encompases. The narrator tells the reader, "I am a man of simple pleasures and profound thoughts."

**Questions:**

1. What is the main

0.12.839.918 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.10 tokens per second)
0.12.839.921 I llama_perf_context_print:        load time =    1701.81 ms
0.12.839.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.839.945 I llama_perf_context_print:        eval time =   11052.60 ms /    32 runs   (  345.39 ms per token,     2.90 tokens per second)
0.12.839.945 I llama_perf_context_print:       total time =   11137.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.117s
user	46m44.818s
sys	0m6.261s
