+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.350 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.361 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.369 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.377 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.379 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.383 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.384 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.385 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.386 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.386 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.391 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.392 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.144 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.524 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.531 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.532 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.533 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.534 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.537 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.538 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.538 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.539 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.542 I llama_model_loader: - type  f32:   37 tensors
0.00.132.543 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.635 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.868 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.446 I llm_load_vocab: special tokens cache size = 5
0.00.294.436 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.457 I llm_load_print_meta: arch             = gemma
0.00.294.457 I llm_load_print_meta: vocab type       = SPM
0.00.294.458 I llm_load_print_meta: n_vocab          = 256000
0.00.294.458 I llm_load_print_meta: n_merges         = 0
0.00.294.459 I llm_load_print_meta: vocab_only       = 0
0.00.294.459 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.459 I llm_load_print_meta: n_embd           = 2048
0.00.294.460 I llm_load_print_meta: n_layer          = 18
0.00.294.471 I llm_load_print_meta: n_head           = 8
0.00.294.472 I llm_load_print_meta: n_head_kv        = 1
0.00.294.473 I llm_load_print_meta: n_rot            = 256
0.00.294.473 I llm_load_print_meta: n_swa            = 0
0.00.294.473 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.475 I llm_load_print_meta: n_gqa            = 8
0.00.294.476 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.477 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.478 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.479 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.479 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.480 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.480 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.481 I llm_load_print_meta: n_ff             = 16384
0.00.294.481 I llm_load_print_meta: n_expert         = 0
0.00.294.481 I llm_load_print_meta: n_expert_used    = 0
0.00.294.482 I llm_load_print_meta: causal attn      = 1
0.00.294.482 I llm_load_print_meta: pooling type     = 0
0.00.294.483 I llm_load_print_meta: rope type        = 2
0.00.294.483 I llm_load_print_meta: rope scaling     = linear
0.00.294.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.485 I llm_load_print_meta: freq_scale_train = 1
0.00.294.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.486 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.487 I llm_load_print_meta: model type       = 2B
0.00.294.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.488 I llm_load_print_meta: model params     = 2.51 B
0.00.294.489 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.490 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.491 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.491 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.492 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.492 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.493 I llm_load_print_meta: max token length = 93
0.00.398.790 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.398.799 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.398.800 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.398.802 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.398.803 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.398.804 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.404.444 I llama_new_context_with_model: n_seq_max     = 1
0.00.404.448 I llama_new_context_with_model: n_ctx         = 4096
0.00.404.449 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.404.449 I llama_new_context_with_model: n_batch       = 2048
0.00.404.450 I llama_new_context_with_model: n_ubatch      = 512
0.00.404.450 I llama_new_context_with_model: flash_attn    = 0
0.00.404.453 I llama_new_context_with_model: freq_base     = 10000.0
0.00.404.454 I llama_new_context_with_model: freq_scale    = 1
0.00.404.455 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.419.585 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.419.600 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.419.688 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.866 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.420.871 I llama_new_context_with_model: graph nodes  = 601
0.00.420.872 I llama_new_context_with_model: graph splits = 1
0.00.420.873 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.314 I main: llama threadpool init, n_threads = 4
0.00.506.330 I 
0.00.506.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.411 I 
0.00.506.452 I sampler seed: 1282719579
0.00.506.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.468 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.469 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.469 I 
 seconary rule is
a) 2n+1
b) 2n
c) n+1
d) n-1

Answer

0.02.782.837 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7115.14 tokens per second)
0.02.782.840 I llama_perf_context_print:        load time =     505.43 ms
0.02.782.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.782.842 I llama_perf_context_print:        eval time =    2257.82 ms /    32 runs   (   70.56 ms per token,    14.17 tokens per second)
0.02.782.843 I llama_perf_context_print:       total time =    2276.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.555 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.575 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.583 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.587 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.588 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.589 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.589 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.283 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.056 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.907 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.915 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.916 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.917 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.918 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.921 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.921 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.923 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.928 I llama_model_loader: - type  f32:   37 tensors
0.00.131.929 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.970 I llm_load_vocab: special tokens cache size = 5
0.00.276.992 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.013 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.014 I llm_load_print_meta: arch             = gemma
0.00.277.015 I llm_load_print_meta: vocab type       = SPM
0.00.277.016 I llm_load_print_meta: n_vocab          = 256000
0.00.277.016 I llm_load_print_meta: n_merges         = 0
0.00.277.016 I llm_load_print_meta: vocab_only       = 0
0.00.277.017 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.017 I llm_load_print_meta: n_embd           = 2048
0.00.277.017 I llm_load_print_meta: n_layer          = 18
0.00.277.029 I llm_load_print_meta: n_head           = 8
0.00.277.030 I llm_load_print_meta: n_head_kv        = 1
0.00.277.031 I llm_load_print_meta: n_rot            = 256
0.00.277.031 I llm_load_print_meta: n_swa            = 0
0.00.277.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.032 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.033 I llm_load_print_meta: n_gqa            = 8
0.00.277.034 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.035 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.037 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.037 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.038 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.039 I llm_load_print_meta: n_ff             = 16384
0.00.277.039 I llm_load_print_meta: n_expert         = 0
0.00.277.040 I llm_load_print_meta: n_expert_used    = 0
0.00.277.040 I llm_load_print_meta: causal attn      = 1
0.00.277.040 I llm_load_print_meta: pooling type     = 0
0.00.277.041 I llm_load_print_meta: rope type        = 2
0.00.277.041 I llm_load_print_meta: rope scaling     = linear
0.00.277.043 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.043 I llm_load_print_meta: freq_scale_train = 1
0.00.277.044 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.045 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.045 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.045 I llm_load_print_meta: model type       = 2B
0.00.277.046 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.047 I llm_load_print_meta: model params     = 2.51 B
0.00.277.048 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.048 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.049 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.049 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.050 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.050 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.051 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.051 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.052 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.052 I llm_load_print_meta: max token length = 93
0.00.374.088 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.379.455 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.462 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.462 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.463 I llama_new_context_with_model: n_batch       = 2048
0.00.379.463 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.464 I llama_new_context_with_model: flash_attn    = 0
0.00.379.468 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.469 I llama_new_context_with_model: freq_scale    = 1
0.00.379.470 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.432 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.523 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.762 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.768 I llama_new_context_with_model: graph nodes  = 601
0.00.397.769 I llama_new_context_with_model: graph splits = 1
0.00.397.770 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.383 I main: llama threadpool init, n_threads = 4
0.00.482.398 I 
0.00.482.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.476 I 
0.00.482.517 I sampler seed: 516427307
0.00.482.529 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.531 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.532 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.534 I 
 increasels in a playful and engaging way.

## Playful and Engaging Crescendos for Digital Storytelling

**Concept:**

These crescendos encourage digital storytelling by

0.02.741.039 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6487.12 tokens per second)
0.02.741.042 I llama_perf_context_print:        load time =     481.47 ms
0.02.741.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.741.044 I llama_perf_context_print:        eval time =    2238.49 ms /    32 runs   (   69.95 ms per token,    14.30 tokens per second)
0.02.741.045 I llama_perf_context_print:       total time =    2258.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.585 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.912 I main: load the model and apply lora adapter, if any
0.00.021.397 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.406 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.414 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.418 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.419 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.423 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.424 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.425 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.425 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.426 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.427 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.434 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.367 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.380 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.381 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.382 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.386 I llama_model_loader: - type  f32:   37 tensors
0.00.132.387 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.477 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.964 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.591 I llm_load_vocab: special tokens cache size = 5
0.00.275.386 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.404 I llm_load_print_meta: arch             = gemma
0.00.275.404 I llm_load_print_meta: vocab type       = SPM
0.00.275.405 I llm_load_print_meta: n_vocab          = 256000
0.00.275.405 I llm_load_print_meta: n_merges         = 0
0.00.275.405 I llm_load_print_meta: vocab_only       = 0
0.00.275.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.406 I llm_load_print_meta: n_embd           = 2048
0.00.275.406 I llm_load_print_meta: n_layer          = 18
0.00.275.417 I llm_load_print_meta: n_head           = 8
0.00.275.418 I llm_load_print_meta: n_head_kv        = 1
0.00.275.419 I llm_load_print_meta: n_rot            = 256
0.00.275.419 I llm_load_print_meta: n_swa            = 0
0.00.275.419 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.421 I llm_load_print_meta: n_gqa            = 8
0.00.275.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.427 I llm_load_print_meta: n_ff             = 16384
0.00.275.427 I llm_load_print_meta: n_expert         = 0
0.00.275.427 I llm_load_print_meta: n_expert_used    = 0
0.00.275.428 I llm_load_print_meta: causal attn      = 1
0.00.275.428 I llm_load_print_meta: pooling type     = 0
0.00.275.428 I llm_load_print_meta: rope type        = 2
0.00.275.429 I llm_load_print_meta: rope scaling     = linear
0.00.275.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.431 I llm_load_print_meta: freq_scale_train = 1
0.00.275.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.434 I llm_load_print_meta: model type       = 2B
0.00.275.434 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.435 I llm_load_print_meta: model params     = 2.51 B
0.00.275.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.436 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.438 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.438 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.439 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.439 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.439 I llm_load_print_meta: max token length = 93
0.00.365.989 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.365.996 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.365.997 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.365.998 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.365.999 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.366.000 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.371.272 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.278 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.278 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.279 I llama_new_context_with_model: n_batch       = 2048
0.00.371.279 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.280 I llama_new_context_with_model: flash_attn    = 0
0.00.371.283 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.284 I llama_new_context_with_model: freq_scale    = 1
0.00.371.285 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.382 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.397 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.491 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.718 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.726 I llama_new_context_with_model: graph nodes  = 601
0.00.388.726 I llama_new_context_with_model: graph splits = 1
0.00.388.728 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.669 I main: llama threadpool init, n_threads = 4
0.00.480.684 I 
0.00.480.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.770 I 
0.00.480.814 I sampler seed: 495477154
0.00.480.825 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.828 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.828 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.828 I 
 increadibly. [end of text]


0.00.753.376 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8130.08 tokens per second)
0.00.753.379 I llama_perf_context_print:        load time =     479.74 ms
0.00.753.380 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.753.382 I llama_perf_context_print:        eval time =     269.39 ms /     4 runs   (   67.35 ms per token,    14.85 tokens per second)
0.00.753.383 I llama_perf_context_print:       total time =     272.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.648 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.865 I main: llama backend init
0.00.001.010 I main: load the model and apply lora adapter, if any
0.00.021.480 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.491 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.499 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.504 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.509 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.509 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.510 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.510 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.511 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.517 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.518 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.118 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.993 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.994 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.998 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.000 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.001 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.001 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.006 I llama_model_loader: - type  f32:   37 tensors
0.00.132.007 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.348 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.049 I llm_load_vocab: special tokens cache size = 5
0.00.285.427 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.447 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.448 I llm_load_print_meta: arch             = gemma
0.00.285.448 I llm_load_print_meta: vocab type       = SPM
0.00.285.449 I llm_load_print_meta: n_vocab          = 256000
0.00.285.450 I llm_load_print_meta: n_merges         = 0
0.00.285.450 I llm_load_print_meta: vocab_only       = 0
0.00.285.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.451 I llm_load_print_meta: n_embd           = 2048
0.00.285.451 I llm_load_print_meta: n_layer          = 18
0.00.285.462 I llm_load_print_meta: n_head           = 8
0.00.285.463 I llm_load_print_meta: n_head_kv        = 1
0.00.285.463 I llm_load_print_meta: n_rot            = 256
0.00.285.464 I llm_load_print_meta: n_swa            = 0
0.00.285.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.464 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.465 I llm_load_print_meta: n_gqa            = 8
0.00.285.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.470 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.470 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.470 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.471 I llm_load_print_meta: n_ff             = 16384
0.00.285.471 I llm_load_print_meta: n_expert         = 0
0.00.285.472 I llm_load_print_meta: n_expert_used    = 0
0.00.285.472 I llm_load_print_meta: causal attn      = 1
0.00.285.472 I llm_load_print_meta: pooling type     = 0
0.00.285.473 I llm_load_print_meta: rope type        = 2
0.00.285.473 I llm_load_print_meta: rope scaling     = linear
0.00.285.475 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.475 I llm_load_print_meta: freq_scale_train = 1
0.00.285.475 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.476 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.476 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.477 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.478 I llm_load_print_meta: model type       = 2B
0.00.285.478 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.479 I llm_load_print_meta: model params     = 2.51 B
0.00.285.480 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.481 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.483 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.484 I llm_load_print_meta: max token length = 93
0.00.356.485 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.356.491 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.819 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.824 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.825 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.825 I llama_new_context_with_model: n_batch       = 2048
0.00.361.826 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.826 I llama_new_context_with_model: flash_attn    = 0
0.00.361.829 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.829 I llama_new_context_with_model: freq_scale    = 1
0.00.361.830 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.075 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.087 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.446 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.453 I llama_new_context_with_model: graph nodes  = 601
0.00.378.453 I llama_new_context_with_model: graph splits = 1
0.00.378.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.408 I main: llama threadpool init, n_threads = 4
0.00.465.421 I 
0.00.465.503 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.507 I 
0.00.465.568 I sampler seed: 1074356603
0.00.465.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.582 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.583 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.584 I 
 increably.

I am unable to generate the requested response as it contains inappropriate content. [end of text]


0.01.883.819 I llama_perf_sampler_print:    sampling time =       3.03 ms /    20 runs   (    0.15 ms per token,  6598.48 tokens per second)
0.01.883.822 I llama_perf_context_print:        load time =     464.37 ms
0.01.883.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.883.824 I llama_perf_context_print:        eval time =    1405.87 ms /    19 runs   (   73.99 ms per token,    13.51 tokens per second)
0.01.883.825 I llama_perf_context_print:       total time =    1418.42 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.774s
user	0m27.860s
sys	0m9.534s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4035 (d92e0fab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32039.15 ms
main:    total time = 32039.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.810 I main: llama backend init
0.00.000.947 I main: load the model and apply lora adapter, if any
0.00.021.869 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.880 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.894 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.899 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.899 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.900 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.901 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.901 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.901 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.908 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.909 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.659 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.540 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.547 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.549 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.549 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.550 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.551 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.555 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.555 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.556 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.557 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.561 I llama_model_loader: - type  f32:   37 tensors
0.00.133.562 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.160 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.752 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.423 I llm_load_vocab: special tokens cache size = 5
0.00.282.528 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.549 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.550 I llm_load_print_meta: arch             = gemma
0.00.282.550 I llm_load_print_meta: vocab type       = SPM
0.00.282.551 I llm_load_print_meta: n_vocab          = 256000
0.00.282.552 I llm_load_print_meta: n_merges         = 0
0.00.282.552 I llm_load_print_meta: vocab_only       = 0
0.00.282.552 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.553 I llm_load_print_meta: n_embd           = 2048
0.00.282.553 I llm_load_print_meta: n_layer          = 18
0.00.282.565 I llm_load_print_meta: n_head           = 8
0.00.282.566 I llm_load_print_meta: n_head_kv        = 1
0.00.282.567 I llm_load_print_meta: n_rot            = 256
0.00.282.567 I llm_load_print_meta: n_swa            = 0
0.00.282.567 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.569 I llm_load_print_meta: n_gqa            = 8
0.00.282.570 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.570 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.571 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.573 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.573 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.575 I llm_load_print_meta: n_ff             = 16384
0.00.282.575 I llm_load_print_meta: n_expert         = 0
0.00.282.575 I llm_load_print_meta: n_expert_used    = 0
0.00.282.576 I llm_load_print_meta: causal attn      = 1
0.00.282.576 I llm_load_print_meta: pooling type     = 0
0.00.282.576 I llm_load_print_meta: rope type        = 2
0.00.282.577 I llm_load_print_meta: rope scaling     = linear
0.00.282.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.579 I llm_load_print_meta: freq_scale_train = 1
0.00.282.579 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.579 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.579 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.580 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.580 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.580 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.580 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.581 I llm_load_print_meta: model type       = 2B
0.00.282.581 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.582 I llm_load_print_meta: model params     = 2.51 B
0.00.282.583 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.584 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.585 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.585 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.585 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.586 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.586 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.587 I llm_load_print_meta: max token length = 93
0.00.343.426 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.343.435 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.343.436 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.343.436 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.343.437 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.343.438 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.348.737 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.744 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.745 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.745 I llama_new_context_with_model: n_batch       = 2048
0.00.348.746 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.746 I llama_new_context_with_model: flash_attn    = 0
0.00.348.749 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.750 I llama_new_context_with_model: freq_scale    = 1
0.00.348.751 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.855 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.872 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.966 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.228 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.236 I llama_new_context_with_model: graph nodes  = 601
0.00.366.236 I llama_new_context_with_model: graph splits = 1
0.00.366.238 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.427 I main: llama threadpool init, n_threads = 4
0.00.445.442 I 
0.00.445.534 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.543 I 
0.00.445.593 I sampler seed: 3125017027
0.00.445.604 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.609 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.610 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.610 I 
 encompassing the elements of the question:

**1. Background:**

- The history of the concept of mental illness.
- The evolution of diagnostic criteria

0.02.159.306 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6567.16 tokens per second)
0.02.159.308 I llama_perf_context_print:        load time =     444.46 ms
0.02.159.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.159.310 I llama_perf_context_print:        eval time =    1694.57 ms /    32 runs   (   52.96 ms per token,    18.88 tokens per second)
0.02.159.311 I llama_perf_context_print:       total time =    1713.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4035 (d92e0fab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32097.15 ms
main:    total time = 32097.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.546 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.021.938 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.968 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.971 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.977 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.978 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.979 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.936 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.017 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.879 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.880 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.881 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.886 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.890 I llama_model_loader: - type  f32:   37 tensors
0.00.133.891 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.891 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.138 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.253 I llm_load_vocab: special tokens cache size = 5
0.00.283.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.607 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.608 I llm_load_print_meta: arch             = gemma
0.00.283.608 I llm_load_print_meta: vocab type       = SPM
0.00.283.609 I llm_load_print_meta: n_vocab          = 256000
0.00.283.610 I llm_load_print_meta: n_merges         = 0
0.00.283.610 I llm_load_print_meta: vocab_only       = 0
0.00.283.610 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.611 I llm_load_print_meta: n_embd           = 2048
0.00.283.611 I llm_load_print_meta: n_layer          = 18
0.00.283.623 I llm_load_print_meta: n_head           = 8
0.00.283.624 I llm_load_print_meta: n_head_kv        = 1
0.00.283.625 I llm_load_print_meta: n_rot            = 256
0.00.283.625 I llm_load_print_meta: n_swa            = 0
0.00.283.625 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.627 I llm_load_print_meta: n_gqa            = 8
0.00.283.628 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.629 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.631 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.633 I llm_load_print_meta: n_ff             = 16384
0.00.283.633 I llm_load_print_meta: n_expert         = 0
0.00.283.633 I llm_load_print_meta: n_expert_used    = 0
0.00.283.633 I llm_load_print_meta: causal attn      = 1
0.00.283.634 I llm_load_print_meta: pooling type     = 0
0.00.283.634 I llm_load_print_meta: rope type        = 2
0.00.283.634 I llm_load_print_meta: rope scaling     = linear
0.00.283.636 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.636 I llm_load_print_meta: freq_scale_train = 1
0.00.283.637 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.638 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.639 I llm_load_print_meta: model type       = 2B
0.00.283.640 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.641 I llm_load_print_meta: model params     = 2.51 B
0.00.283.642 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.642 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.643 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.643 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.644 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.645 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.647 I llm_load_print_meta: max token length = 93
0.00.972.999 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.978.259 I llama_new_context_with_model: n_seq_max     = 1
0.00.978.266 I llama_new_context_with_model: n_ctx         = 4096
0.00.978.266 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.978.267 I llama_new_context_with_model: n_batch       = 2048
0.00.978.267 I llama_new_context_with_model: n_ubatch      = 512
0.00.978.268 I llama_new_context_with_model: flash_attn    = 0
0.00.978.270 I llama_new_context_with_model: freq_base     = 10000.0
0.00.978.271 I llama_new_context_with_model: freq_scale    = 1
0.00.978.272 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.994.226 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.994.241 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.994.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.995.651 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.995.658 I llama_new_context_with_model: graph nodes  = 601
0.00.995.658 I llama_new_context_with_model: graph splits = 1
0.00.995.660 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.072.147 I main: llama threadpool init, n_threads = 4
0.01.072.162 I 
0.01.072.255 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.072.259 I 
0.01.072.307 I sampler seed: 1797463535
0.01.072.319 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.072.323 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.072.324 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.072.325 I 
 seconded data from various sources into a central repository for further analysis.

**Questions:**

1. What are the benefits of centralizing data?
2

0.02.702.587 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6621.19 tokens per second)
0.02.702.589 I llama_perf_context_print:        load time =    1071.25 ms
0.02.702.590 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.591 I llama_perf_context_print:        eval time =    1611.11 ms /    32 runs   (   50.35 ms per token,    19.86 tokens per second)
0.02.702.592 I llama_perf_context_print:       total time =    1630.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.862s
user	8m15.154s
sys	0m7.180s
