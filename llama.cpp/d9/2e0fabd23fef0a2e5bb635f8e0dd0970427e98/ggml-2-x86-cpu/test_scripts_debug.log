+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.713 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.001.187 I main: load the model and apply lora adapter, if any
0.00.026.967 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.981 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.122 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.129 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.139 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.151 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.163 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.164 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.165 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.166 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.168 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.357 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.800 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.812 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.813 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.814 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.818 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.821 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.822 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.823 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.824 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.826 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.834 I llama_model_loader: - type  f32:   37 tensors
0.00.269.836 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.990 I llm_load_vocab: special tokens cache size = 5
0.00.645.097 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.645.170 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.645.171 I llm_load_print_meta: arch             = gemma
0.00.645.172 I llm_load_print_meta: vocab type       = SPM
0.00.645.173 I llm_load_print_meta: n_vocab          = 256000
0.00.645.176 I llm_load_print_meta: n_merges         = 0
0.00.645.176 I llm_load_print_meta: vocab_only       = 0
0.00.645.177 I llm_load_print_meta: n_ctx_train      = 8192
0.00.645.177 I llm_load_print_meta: n_embd           = 2048
0.00.645.178 I llm_load_print_meta: n_layer          = 18
0.00.645.241 I llm_load_print_meta: n_head           = 8
0.00.645.248 I llm_load_print_meta: n_head_kv        = 1
0.00.645.249 I llm_load_print_meta: n_rot            = 256
0.00.645.249 I llm_load_print_meta: n_swa            = 0
0.00.645.250 I llm_load_print_meta: n_embd_head_k    = 256
0.00.645.250 I llm_load_print_meta: n_embd_head_v    = 256
0.00.645.255 I llm_load_print_meta: n_gqa            = 8
0.00.645.260 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.645.265 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.645.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.645.267 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.645.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.645.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.645.268 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.645.273 I llm_load_print_meta: n_ff             = 16384
0.00.645.274 I llm_load_print_meta: n_expert         = 0
0.00.645.274 I llm_load_print_meta: n_expert_used    = 0
0.00.645.274 I llm_load_print_meta: causal attn      = 1
0.00.645.275 I llm_load_print_meta: pooling type     = 0
0.00.645.275 I llm_load_print_meta: rope type        = 2
0.00.645.276 I llm_load_print_meta: rope scaling     = linear
0.00.645.277 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.645.278 I llm_load_print_meta: freq_scale_train = 1
0.00.645.278 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.645.279 I llm_load_print_meta: rope_finetuned   = unknown
0.00.645.279 I llm_load_print_meta: ssm_d_conv       = 0
0.00.645.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.645.279 I llm_load_print_meta: ssm_d_state      = 0
0.00.645.280 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.645.280 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.645.280 I llm_load_print_meta: model type       = 2B
0.00.645.281 I llm_load_print_meta: model ftype      = Q8_0
0.00.645.282 I llm_load_print_meta: model params     = 2.51 B
0.00.645.293 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.645.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.645.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.645.294 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.645.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.645.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.645.296 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.645.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.645.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.645.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.645.304 I llm_load_print_meta: max token length = 93
0.00.745.945 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.745.957 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.745.958 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.745.959 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.745.960 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.745.960 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.752.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.752.067 I llama_new_context_with_model: n_ctx         = 4096
0.00.752.068 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.752.068 I llama_new_context_with_model: n_batch       = 2048
0.00.752.069 I llama_new_context_with_model: n_ubatch      = 512
0.00.752.069 I llama_new_context_with_model: flash_attn    = 0
0.00.752.072 I llama_new_context_with_model: freq_base     = 10000.0
0.00.752.073 I llama_new_context_with_model: freq_scale    = 1
0.00.752.074 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.769.507 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.769.549 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.769.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.772.253 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.772.257 I llama_new_context_with_model: graph nodes  = 601
0.00.772.258 I llama_new_context_with_model: graph splits = 1
0.00.772.283 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.035 I main: llama threadpool init, n_threads = 4
0.01.378.049 I 
0.01.378.160 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.164 I 
0.01.378.398 I sampler seed: 1906172417
0.01.378.411 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.378.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.421 I 
 increadibly, a strong and clear voice that can be heard over a distance. [end of text]


0.08.609.225 I llama_perf_sampler_print:    sampling time =      26.25 ms /    18 runs   (    1.46 ms per token,   685.84 tokens per second)
0.08.609.228 I llama_perf_context_print:        load time =    1376.73 ms
0.08.609.251 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.609.253 I llama_perf_context_print:        eval time =    7181.97 ms /    17 runs   (  422.47 ms per token,     2.37 tokens per second)
0.08.609.254 I llama_perf_context_print:       total time =    7231.20 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.023.814 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.954 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.957 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.977 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.982 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.984 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.986 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.721 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.205 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.561 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.562 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.570 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.571 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.580 I llama_model_loader: - type  f32:   37 tensors
0.00.265.583 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.827 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.555.695 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.556.751 I llm_load_vocab: special tokens cache size = 5
0.00.652.471 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.545 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.546 I llm_load_print_meta: arch             = gemma
0.00.652.547 I llm_load_print_meta: vocab type       = SPM
0.00.652.548 I llm_load_print_meta: n_vocab          = 256000
0.00.652.551 I llm_load_print_meta: n_merges         = 0
0.00.652.551 I llm_load_print_meta: vocab_only       = 0
0.00.652.552 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.552 I llm_load_print_meta: n_embd           = 2048
0.00.652.552 I llm_load_print_meta: n_layer          = 18
0.00.652.617 I llm_load_print_meta: n_head           = 8
0.00.652.624 I llm_load_print_meta: n_head_kv        = 1
0.00.652.625 I llm_load_print_meta: n_rot            = 256
0.00.652.625 I llm_load_print_meta: n_swa            = 0
0.00.652.626 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.631 I llm_load_print_meta: n_gqa            = 8
0.00.652.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.643 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.644 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.644 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.644 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.674 I llm_load_print_meta: n_ff             = 16384
0.00.652.675 I llm_load_print_meta: n_expert         = 0
0.00.652.676 I llm_load_print_meta: n_expert_used    = 0
0.00.652.676 I llm_load_print_meta: causal attn      = 1
0.00.652.676 I llm_load_print_meta: pooling type     = 0
0.00.652.677 I llm_load_print_meta: rope type        = 2
0.00.652.677 I llm_load_print_meta: rope scaling     = linear
0.00.652.678 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.679 I llm_load_print_meta: freq_scale_train = 1
0.00.652.679 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.680 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.688 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.691 I llm_load_print_meta: model type       = 2B
0.00.652.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.652.694 I llm_load_print_meta: model params     = 2.51 B
0.00.652.705 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.652.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.714 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.715 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.652.716 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.652.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.652.717 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.652.723 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.652.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.652.726 I llm_load_print_meta: max token length = 93
0.00.751.491 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.757.666 I llama_new_context_with_model: n_seq_max     = 1
0.00.757.674 I llama_new_context_with_model: n_ctx         = 4096
0.00.757.674 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.757.674 I llama_new_context_with_model: n_batch       = 2048
0.00.757.675 I llama_new_context_with_model: n_ubatch      = 512
0.00.757.675 I llama_new_context_with_model: flash_attn    = 0
0.00.757.678 I llama_new_context_with_model: freq_base     = 10000.0
0.00.757.678 I llama_new_context_with_model: freq_scale    = 1
0.00.757.679 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.774.699 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.774.741 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.774.869 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.777.354 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.777.358 I llama_new_context_with_model: graph nodes  = 601
0.00.777.358 I llama_new_context_with_model: graph splits = 1
0.00.777.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.384.809 I main: llama threadpool init, n_threads = 4
0.01.384.823 I 
0.01.384.944 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.384.948 I 
0.01.385.196 I sampler seed: 1654709774
0.01.385.209 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.385.215 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.385.219 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.385.219 I 
 increasities by neglecting any counterfactual evidence and resorting to anecdotal reports. [end of text]


0.08.194.073 I llama_perf_sampler_print:    sampling time =      24.77 ms /    17 runs   (    1.46 ms per token,   686.31 tokens per second)
0.08.194.076 I llama_perf_context_print:        load time =    1383.60 ms
0.08.194.077 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.194.091 I llama_perf_context_print:        eval time =    6762.98 ms /    16 runs   (  422.69 ms per token,     2.37 tokens per second)
0.08.194.093 I llama_perf_context_print:       total time =    6809.27 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.730 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.938 I main: llama backend init
0.00.001.205 I main: load the model and apply lora adapter, if any
0.00.024.522 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.537 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.637 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.649 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.662 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.672 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.478 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.062 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.428 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.429 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.430 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.434 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.440 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.441 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.450 I llama_model_loader: - type  f32:   37 tensors
0.00.266.453 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.269 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.765 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.749 I llm_load_vocab: special tokens cache size = 5
0.00.627.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.328 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.329 I llm_load_print_meta: arch             = gemma
0.00.627.330 I llm_load_print_meta: vocab type       = SPM
0.00.627.331 I llm_load_print_meta: n_vocab          = 256000
0.00.627.333 I llm_load_print_meta: n_merges         = 0
0.00.627.333 I llm_load_print_meta: vocab_only       = 0
0.00.627.334 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.334 I llm_load_print_meta: n_embd           = 2048
0.00.627.334 I llm_load_print_meta: n_layer          = 18
0.00.627.400 I llm_load_print_meta: n_head           = 8
0.00.627.407 I llm_load_print_meta: n_head_kv        = 1
0.00.627.408 I llm_load_print_meta: n_rot            = 256
0.00.627.408 I llm_load_print_meta: n_swa            = 0
0.00.627.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.414 I llm_load_print_meta: n_gqa            = 8
0.00.627.418 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.426 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.433 I llm_load_print_meta: n_ff             = 16384
0.00.627.434 I llm_load_print_meta: n_expert         = 0
0.00.627.446 I llm_load_print_meta: n_expert_used    = 0
0.00.627.447 I llm_load_print_meta: causal attn      = 1
0.00.627.448 I llm_load_print_meta: pooling type     = 0
0.00.627.448 I llm_load_print_meta: rope type        = 2
0.00.627.449 I llm_load_print_meta: rope scaling     = linear
0.00.627.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.463 I llm_load_print_meta: freq_scale_train = 1
0.00.627.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.465 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.466 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.474 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.478 I llm_load_print_meta: model type       = 2B
0.00.627.479 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.480 I llm_load_print_meta: model params     = 2.51 B
0.00.627.489 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.506 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.507 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.516 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.525 I llm_load_print_meta: max token length = 93
0.00.722.405 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.722.414 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.722.415 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.722.416 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.722.417 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.722.417 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.728.403 I llama_new_context_with_model: n_seq_max     = 1
0.00.728.412 I llama_new_context_with_model: n_ctx         = 4096
0.00.728.412 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.728.413 I llama_new_context_with_model: n_batch       = 2048
0.00.728.413 I llama_new_context_with_model: n_ubatch      = 512
0.00.728.414 I llama_new_context_with_model: flash_attn    = 0
0.00.728.417 I llama_new_context_with_model: freq_base     = 10000.0
0.00.728.418 I llama_new_context_with_model: freq_scale    = 1
0.00.728.419 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.746.055 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.746.094 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.746.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.748.724 I llama_new_context_with_model: graph nodes  = 601
0.00.748.724 I llama_new_context_with_model: graph splits = 1
0.00.748.749 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.395.343 I main: llama threadpool init, n_threads = 4
0.01.395.358 I 
0.01.395.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.395.476 I 
0.01.395.705 I sampler seed: 633829934
0.01.395.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.395.724 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.395.725 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.395.725 I 
 seconally.

I am unable to answer the question as I am unable to access personal information, including social security numbers, financial information, or personal contact details

0.14.985.148 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.14.985.152 I llama_perf_context_print:        load time =    1394.03 ms
0.14.985.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.985.155 I llama_perf_context_print:        eval time =   13498.91 ms /    32 runs   (  421.84 ms per token,     2.37 tokens per second)
0.14.985.167 I llama_perf_context_print:       total time =   13589.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.001.187 I main: load the model and apply lora adapter, if any
0.00.023.653 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.770 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.783 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.805 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.811 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.812 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.815 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.826 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.831 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.839 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.612 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.751 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.762 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.767 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.772 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.773 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.774 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.776 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.784 I llama_model_loader: - type  f32:   37 tensors
0.00.265.786 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.665 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.679 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.682 I llm_load_vocab: special tokens cache size = 5
0.00.636.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.490 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.491 I llm_load_print_meta: arch             = gemma
0.00.636.492 I llm_load_print_meta: vocab type       = SPM
0.00.636.493 I llm_load_print_meta: n_vocab          = 256000
0.00.636.496 I llm_load_print_meta: n_merges         = 0
0.00.636.496 I llm_load_print_meta: vocab_only       = 0
0.00.636.497 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.497 I llm_load_print_meta: n_embd           = 2048
0.00.636.498 I llm_load_print_meta: n_layer          = 18
0.00.636.562 I llm_load_print_meta: n_head           = 8
0.00.636.569 I llm_load_print_meta: n_head_kv        = 1
0.00.636.570 I llm_load_print_meta: n_rot            = 256
0.00.636.570 I llm_load_print_meta: n_swa            = 0
0.00.636.571 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.572 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.577 I llm_load_print_meta: n_gqa            = 8
0.00.636.590 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.596 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.597 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.599 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.599 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.600 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.600 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.605 I llm_load_print_meta: n_ff             = 16384
0.00.636.606 I llm_load_print_meta: n_expert         = 0
0.00.636.606 I llm_load_print_meta: n_expert_used    = 0
0.00.636.607 I llm_load_print_meta: causal attn      = 1
0.00.636.608 I llm_load_print_meta: pooling type     = 0
0.00.636.608 I llm_load_print_meta: rope type        = 2
0.00.636.608 I llm_load_print_meta: rope scaling     = linear
0.00.636.610 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.610 I llm_load_print_meta: freq_scale_train = 1
0.00.636.623 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.632 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.633 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.640 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.649 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.650 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.651 I llm_load_print_meta: model type       = 2B
0.00.636.652 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.653 I llm_load_print_meta: model params     = 2.51 B
0.00.636.662 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.663 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.664 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.664 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.665 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.675 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.675 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.684 I llm_load_print_meta: max token length = 93
0.00.709.605 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.709.616 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.715.699 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.707 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.707 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.708 I llama_new_context_with_model: n_batch       = 2048
0.00.715.708 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.709 I llama_new_context_with_model: flash_attn    = 0
0.00.715.712 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.713 I llama_new_context_with_model: freq_scale    = 1
0.00.715.714 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.616 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.655 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.393 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.398 I llama_new_context_with_model: graph nodes  = 601
0.00.735.398 I llama_new_context_with_model: graph splits = 1
0.00.735.422 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.589 I main: llama threadpool init, n_threads = 4
0.01.341.603 I 
0.01.341.723 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.727 I 
0.01.341.970 I sampler seed: 1515775177
0.01.341.982 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.991 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.991 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.992 I 
 increably and with a twinkle in her eye.

"My dearest darling, don't let the shadows steal the light from our love. Let's

0.14.877.157 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.44 tokens per second)
0.14.877.160 I llama_perf_context_print:        load time =    1340.30 ms
0.14.877.161 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.163 I llama_perf_context_print:        eval time =   13443.46 ms /    32 runs   (  420.11 ms per token,     2.38 tokens per second)
0.14.877.178 I llama_perf_context_print:       total time =   13535.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.650s
user	2m57.701s
sys	0m9.615s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4035 (d92e0fab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199785.63 ms
main:    total time = 199785.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.001.169 I main: load the model and apply lora adapter, if any
0.00.023.488 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.502 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.610 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.613 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.622 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.623 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.624 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.625 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.633 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.639 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.842 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.229 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.230 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.232 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.233 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.234 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.235 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.258 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.262 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.264 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.265 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.266 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.274 I llama_model_loader: - type  f32:   37 tensors
0.00.265.277 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.277 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.767 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.514 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.480 I llm_load_vocab: special tokens cache size = 5
0.00.639.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.135 I llm_load_print_meta: arch             = gemma
0.00.639.135 I llm_load_print_meta: vocab type       = SPM
0.00.639.136 I llm_load_print_meta: n_vocab          = 256000
0.00.639.138 I llm_load_print_meta: n_merges         = 0
0.00.639.139 I llm_load_print_meta: vocab_only       = 0
0.00.639.139 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.140 I llm_load_print_meta: n_embd           = 2048
0.00.639.140 I llm_load_print_meta: n_layer          = 18
0.00.639.205 I llm_load_print_meta: n_head           = 8
0.00.639.212 I llm_load_print_meta: n_head_kv        = 1
0.00.639.212 I llm_load_print_meta: n_rot            = 256
0.00.639.213 I llm_load_print_meta: n_swa            = 0
0.00.639.213 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.213 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.218 I llm_load_print_meta: n_gqa            = 8
0.00.639.222 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.227 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.228 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.229 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.230 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.230 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.231 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.235 I llm_load_print_meta: n_ff             = 16384
0.00.639.236 I llm_load_print_meta: n_expert         = 0
0.00.639.236 I llm_load_print_meta: n_expert_used    = 0
0.00.639.237 I llm_load_print_meta: causal attn      = 1
0.00.639.237 I llm_load_print_meta: pooling type     = 0
0.00.639.237 I llm_load_print_meta: rope type        = 2
0.00.639.238 I llm_load_print_meta: rope scaling     = linear
0.00.639.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.240 I llm_load_print_meta: freq_scale_train = 1
0.00.639.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.241 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.242 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.243 I llm_load_print_meta: model type       = 2B
0.00.639.244 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.639.244 I llm_load_print_meta: model params     = 2.51 B
0.00.639.254 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.639.254 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.257 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.264 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.264 I llm_load_print_meta: max token length = 93
0.00.702.839 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.702.851 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.702.852 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.702.852 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.702.853 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.702.854 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.708.599 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.606 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.607 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.607 I llama_new_context_with_model: n_batch       = 2048
0.00.708.607 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.608 I llama_new_context_with_model: flash_attn    = 0
0.00.708.611 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.612 I llama_new_context_with_model: freq_scale    = 1
0.00.708.612 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.030 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.073 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.200 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.722 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.727 I llama_new_context_with_model: graph nodes  = 601
0.00.727.727 I llama_new_context_with_model: graph splits = 1
0.00.727.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.735 I main: llama threadpool init, n_threads = 4
0.01.300.745 I 
0.01.300.849 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.853 I 
0.01.301.089 I sampler seed: 1206445524
0.01.301.101 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.107 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.110 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.111 I 
 squaRED frog, perched on a mossy toadstool, serenades a gathering of fireflies with a haunting melody.

This idyllic scene encapsulates the essence of

0.12.217.462 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.85 tokens per second)
0.12.217.465 I llama_perf_context_print:        load time =    1299.45 ms
0.12.217.466 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.468 I llama_perf_context_print:        eval time =   10827.18 ms /    32 runs   (  338.35 ms per token,     2.96 tokens per second)
0.12.217.490 I llama_perf_context_print:       total time =   10916.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4035 (d92e0fab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199407.63 ms
main:    total time = 199407.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4035 (d92e0fab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.001.095 I main: load the model and apply lora adapter, if any
0.00.026.191 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.300 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.321 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.325 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.327 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.328 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.337 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.338 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.339 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.340 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.336 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.672 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.674 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.675 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.676 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.677 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.683 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.684 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.692 I llama_model_loader: - type  f32:   37 tensors
0.00.267.695 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.695 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.473 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.497 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.466 I llm_load_vocab: special tokens cache size = 5
0.00.627.195 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.275 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.276 I llm_load_print_meta: arch             = gemma
0.00.627.277 I llm_load_print_meta: vocab type       = SPM
0.00.627.277 I llm_load_print_meta: n_vocab          = 256000
0.00.627.280 I llm_load_print_meta: n_merges         = 0
0.00.627.280 I llm_load_print_meta: vocab_only       = 0
0.00.627.281 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.281 I llm_load_print_meta: n_embd           = 2048
0.00.627.281 I llm_load_print_meta: n_layer          = 18
0.00.627.363 I llm_load_print_meta: n_head           = 8
0.00.627.371 I llm_load_print_meta: n_head_kv        = 1
0.00.627.380 I llm_load_print_meta: n_rot            = 256
0.00.627.381 I llm_load_print_meta: n_swa            = 0
0.00.627.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.388 I llm_load_print_meta: n_gqa            = 8
0.00.627.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.398 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.403 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.404 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.404 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.409 I llm_load_print_meta: n_ff             = 16384
0.00.627.410 I llm_load_print_meta: n_expert         = 0
0.00.627.411 I llm_load_print_meta: n_expert_used    = 0
0.00.627.411 I llm_load_print_meta: causal attn      = 1
0.00.627.411 I llm_load_print_meta: pooling type     = 0
0.00.627.412 I llm_load_print_meta: rope type        = 2
0.00.627.413 I llm_load_print_meta: rope scaling     = linear
0.00.627.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.415 I llm_load_print_meta: freq_scale_train = 1
0.00.627.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.420 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.421 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.422 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.423 I llm_load_print_meta: model type       = 2B
0.00.627.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.425 I llm_load_print_meta: model params     = 2.51 B
0.00.627.435 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.439 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.447 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.449 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.449 I llm_load_print_meta: max token length = 93
0.00.686.964 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.692.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.778 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.779 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.779 I llama_new_context_with_model: n_batch       = 2048
0.00.692.780 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.780 I llama_new_context_with_model: flash_attn    = 0
0.00.692.783 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.784 I llama_new_context_with_model: freq_scale    = 1
0.00.692.784 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.710.067 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.710.111 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.710.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.814 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.818 I llama_new_context_with_model: graph nodes  = 601
0.00.712.819 I llama_new_context_with_model: graph splits = 1
0.00.712.843 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.371 I main: llama threadpool init, n_threads = 4
0.01.284.384 I 
0.01.284.487 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.491 I 
0.01.284.716 I sampler seed: 77671626
0.01.284.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.736 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.740 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.740 I 
 encompates a wide range of topics and encourages users to explore based on their interests.

**Features:**

* **Personalized recommendations:** Based on your past behavior

0.12.193.550 I llama_perf_sampler_print:    sampling time =      48.79 ms /    33 runs   (    1.48 ms per token,   676.35 tokens per second)
0.12.193.553 I llama_perf_context_print:        load time =    1283.18 ms
0.12.193.565 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.193.567 I llama_perf_context_print:        eval time =   10819.22 ms /    32 runs   (  338.10 ms per token,     2.96 tokens per second)
0.12.193.568 I llama_perf_context_print:       total time =   10909.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.615s
user	50m17.818s
sys	0m6.573s
