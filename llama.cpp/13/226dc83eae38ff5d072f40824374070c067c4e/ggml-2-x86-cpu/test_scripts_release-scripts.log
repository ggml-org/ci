+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.861 I main: load the model and apply lora adapter, if any
0.00.022.415 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.466 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.492 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.493 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.494 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.499 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.500 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.878 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.884 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.885 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.886 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.886 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.887 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.890 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.892 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.897 I llama_model_loader: - type  f32:   37 tensors
0.00.134.900 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.313 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.224.091 I llm_load_vocab: special tokens cache size = 5
0.00.242.874 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.242.892 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.242.893 I llm_load_print_meta: arch             = gemma
0.00.242.893 I llm_load_print_meta: vocab type       = SPM
0.00.242.894 I llm_load_print_meta: n_vocab          = 256000
0.00.242.895 I llm_load_print_meta: n_merges         = 0
0.00.242.895 I llm_load_print_meta: vocab_only       = 0
0.00.242.895 I llm_load_print_meta: n_ctx_train      = 8192
0.00.242.896 I llm_load_print_meta: n_embd           = 2048
0.00.242.896 I llm_load_print_meta: n_layer          = 18
0.00.242.911 I llm_load_print_meta: n_head           = 8
0.00.242.912 I llm_load_print_meta: n_head_kv        = 1
0.00.242.912 I llm_load_print_meta: n_rot            = 256
0.00.242.912 I llm_load_print_meta: n_swa            = 0
0.00.242.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.242.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.242.914 I llm_load_print_meta: n_gqa            = 8
0.00.242.915 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.242.916 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.242.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.242.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.242.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.242.919 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.242.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.242.920 I llm_load_print_meta: n_ff             = 16384
0.00.242.920 I llm_load_print_meta: n_expert         = 0
0.00.242.920 I llm_load_print_meta: n_expert_used    = 0
0.00.242.921 I llm_load_print_meta: causal attn      = 1
0.00.242.921 I llm_load_print_meta: pooling type     = 0
0.00.242.922 I llm_load_print_meta: rope type        = 2
0.00.242.922 I llm_load_print_meta: rope scaling     = linear
0.00.242.923 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.242.924 I llm_load_print_meta: freq_scale_train = 1
0.00.242.924 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.242.924 I llm_load_print_meta: rope_finetuned   = unknown
0.00.242.925 I llm_load_print_meta: ssm_d_conv       = 0
0.00.242.925 I llm_load_print_meta: ssm_d_inner      = 0
0.00.242.925 I llm_load_print_meta: ssm_d_state      = 0
0.00.242.925 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.242.925 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.242.926 I llm_load_print_meta: model type       = 2B
0.00.242.926 I llm_load_print_meta: model ftype      = Q8_0
0.00.242.927 I llm_load_print_meta: model params     = 2.51 B
0.00.242.928 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.242.928 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.242.929 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.242.929 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.242.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.242.930 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.242.930 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.242.931 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.242.931 I llm_load_print_meta: max token length = 93
0.00.242.959 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.340.743 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.340.752 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.340.752 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.340.753 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.340.754 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.340.754 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.345.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.345.976 I llama_new_context_with_model: n_batch    = 2048
0.00.345.977 I llama_new_context_with_model: n_ubatch   = 512
0.00.345.978 I llama_new_context_with_model: flash_attn = 0
0.00.345.980 I llama_new_context_with_model: freq_base  = 10000.0
0.00.345.981 I llama_new_context_with_model: freq_scale = 1
0.00.376.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.376.902 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.376.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.859 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.377.866 I llama_new_context_with_model: graph nodes  = 601
0.00.377.867 I llama_new_context_with_model: graph splits = 1
0.00.377.869 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.073 I main: llama threadpool init, n_threads = 4
0.00.472.085 I 
0.00.472.160 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.163 I 
0.00.472.193 I sampler seed: 451725038
0.00.472.201 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.204 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.472.205 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements. [end of text]


0.00.763.401 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8116.88 tokens per second)
0.00.763.404 I llama_perf_context_print:        load time =     470.19 ms
0.00.763.405 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.763.407 I llama_perf_context_print:        eval time =     288.19 ms /     4 runs   (   72.05 ms per token,    13.88 tokens per second)
0.00.763.408 I llama_perf_context_print:       total time =     291.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.649 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.862 I main: llama backend init
0.00.001.954 I main: load the model and apply lora adapter, if any
0.00.022.387 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.402 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.409 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.410 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.414 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.415 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.416 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.416 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.424 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.426 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.363 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.189 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.135 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.139 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.145 I llama_model_loader: - type  f32:   37 tensors
0.00.134.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.051 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.222.861 I llm_load_vocab: special tokens cache size = 5
0.00.241.480 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.241.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.241.497 I llm_load_print_meta: arch             = gemma
0.00.241.498 I llm_load_print_meta: vocab type       = SPM
0.00.241.499 I llm_load_print_meta: n_vocab          = 256000
0.00.241.499 I llm_load_print_meta: n_merges         = 0
0.00.241.499 I llm_load_print_meta: vocab_only       = 0
0.00.241.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.241.500 I llm_load_print_meta: n_embd           = 2048
0.00.241.500 I llm_load_print_meta: n_layer          = 18
0.00.241.513 I llm_load_print_meta: n_head           = 8
0.00.241.514 I llm_load_print_meta: n_head_kv        = 1
0.00.241.514 I llm_load_print_meta: n_rot            = 256
0.00.241.514 I llm_load_print_meta: n_swa            = 0
0.00.241.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.241.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.241.516 I llm_load_print_meta: n_gqa            = 8
0.00.241.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.241.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.241.519 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.241.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.241.521 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.241.521 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.241.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.241.522 I llm_load_print_meta: n_ff             = 16384
0.00.241.522 I llm_load_print_meta: n_expert         = 0
0.00.241.522 I llm_load_print_meta: n_expert_used    = 0
0.00.241.523 I llm_load_print_meta: causal attn      = 1
0.00.241.523 I llm_load_print_meta: pooling type     = 0
0.00.241.523 I llm_load_print_meta: rope type        = 2
0.00.241.524 I llm_load_print_meta: rope scaling     = linear
0.00.241.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.241.526 I llm_load_print_meta: freq_scale_train = 1
0.00.241.526 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.241.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.241.527 I llm_load_print_meta: ssm_d_conv       = 0
0.00.241.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.241.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.241.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.241.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.241.528 I llm_load_print_meta: model type       = 2B
0.00.241.529 I llm_load_print_meta: model ftype      = Q8_0
0.00.241.530 I llm_load_print_meta: model params     = 2.51 B
0.00.241.531 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.241.531 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.241.532 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.241.532 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.241.532 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.241.533 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.241.533 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.241.534 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.241.534 I llm_load_print_meta: max token length = 93
0.00.241.553 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.334.282 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.339.555 I llama_new_context_with_model: n_ctx      = 8192
0.00.339.563 I llama_new_context_with_model: n_batch    = 2048
0.00.339.563 I llama_new_context_with_model: n_ubatch   = 512
0.00.339.564 I llama_new_context_with_model: flash_attn = 0
0.00.339.567 I llama_new_context_with_model: freq_base  = 10000.0
0.00.339.568 I llama_new_context_with_model: freq_scale = 1
0.00.370.244 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.259 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.352 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.220 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.227 I llama_new_context_with_model: graph nodes  = 601
0.00.371.227 I llama_new_context_with_model: graph splits = 1
0.00.371.229 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.187 I main: llama threadpool init, n_threads = 4
0.00.462.198 I 
0.00.462.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.278 I 
0.00.462.315 I sampler seed: 2638909523
0.00.462.325 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.327 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.462.328 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities are a complex set of challenges and opportunities.

**Challenges:**

* **Resource scarcity:** Limited access to skilled personnel, technology, and funding.

0.02.740.294 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6733.32 tokens per second)
0.02.740.296 I llama_perf_context_print:        load time =     460.22 ms
0.02.740.298 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.740.299 I llama_perf_context_print:        eval time =    2258.62 ms /    32 runs   (   70.58 ms per token,    14.17 tokens per second)
0.02.740.300 I llama_perf_context_print:       total time =    2278.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.623 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.864 I main: llama backend init
0.00.002.140 I main: load the model and apply lora adapter, if any
0.00.022.480 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.551 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.558 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.568 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.569 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.429 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.430 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.431 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.431 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.433 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.437 I llama_model_loader: - type  f32:   37 tensors
0.00.134.440 I llama_model_loader: - type q8_0:  127 tensors
0.00.235.257 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.086 I llm_load_vocab: special tokens cache size = 5
0.00.255.237 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.255.257 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.255.257 I llm_load_print_meta: arch             = gemma
0.00.255.258 I llm_load_print_meta: vocab type       = SPM
0.00.255.259 I llm_load_print_meta: n_vocab          = 256000
0.00.255.260 I llm_load_print_meta: n_merges         = 0
0.00.255.260 I llm_load_print_meta: vocab_only       = 0
0.00.255.261 I llm_load_print_meta: n_ctx_train      = 8192
0.00.255.261 I llm_load_print_meta: n_embd           = 2048
0.00.255.261 I llm_load_print_meta: n_layer          = 18
0.00.255.275 I llm_load_print_meta: n_head           = 8
0.00.255.276 I llm_load_print_meta: n_head_kv        = 1
0.00.255.277 I llm_load_print_meta: n_rot            = 256
0.00.255.277 I llm_load_print_meta: n_swa            = 0
0.00.255.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.255.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.255.279 I llm_load_print_meta: n_gqa            = 8
0.00.255.280 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.255.281 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.255.282 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.255.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.255.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.255.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.255.284 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.255.284 I llm_load_print_meta: n_ff             = 16384
0.00.255.285 I llm_load_print_meta: n_expert         = 0
0.00.255.285 I llm_load_print_meta: n_expert_used    = 0
0.00.255.285 I llm_load_print_meta: causal attn      = 1
0.00.255.286 I llm_load_print_meta: pooling type     = 0
0.00.255.286 I llm_load_print_meta: rope type        = 2
0.00.255.286 I llm_load_print_meta: rope scaling     = linear
0.00.255.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.255.288 I llm_load_print_meta: freq_scale_train = 1
0.00.255.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.255.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.255.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.255.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.255.290 I llm_load_print_meta: ssm_d_state      = 0
0.00.255.290 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.255.290 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.255.291 I llm_load_print_meta: model type       = 2B
0.00.255.291 I llm_load_print_meta: model ftype      = Q8_0
0.00.255.292 I llm_load_print_meta: model params     = 2.51 B
0.00.255.293 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.255.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.255.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.255.294 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.255.294 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.255.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.255.295 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.255.296 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.255.296 I llm_load_print_meta: max token length = 93
0.00.255.319 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.985 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.330.992 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.330.993 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.330.994 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.330.994 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.330.995 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.337.200 I llama_new_context_with_model: n_ctx      = 8192
0.00.337.209 I llama_new_context_with_model: n_batch    = 2048
0.00.337.210 I llama_new_context_with_model: n_ubatch   = 512
0.00.337.211 I llama_new_context_with_model: flash_attn = 0
0.00.337.216 I llama_new_context_with_model: freq_base  = 10000.0
0.00.337.217 I llama_new_context_with_model: freq_scale = 1
0.00.371.111 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.371.128 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.371.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.141 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.150 I llama_new_context_with_model: graph nodes  = 601
0.00.372.151 I llama_new_context_with_model: graph splits = 1
0.00.372.153 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.935 I main: llama threadpool init, n_threads = 4
0.00.468.949 I 
0.00.469.038 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.041 I 
0.00.469.074 I sampler seed: 728438025
0.00.469.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.097 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.469.101 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably!

I'm not sure what the best way is to say this, so I'm asking for advice.

**Advice needed:**



0.02.817.550 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6446.57 tokens per second)
0.02.817.552 I llama_perf_context_print:        load time =     466.78 ms
0.02.817.553 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.817.554 I llama_perf_context_print:        eval time =    2329.63 ms /    32 runs   (   72.80 ms per token,    13.74 tokens per second)
0.02.817.555 I llama_perf_context_print:       total time =    2348.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.028 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.095 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.096 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.100 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.101 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.102 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.103 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.103 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.104 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.108 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.728 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.738 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.739 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.740 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.743 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.743 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.744 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.745 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.746 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.749 I llama_model_loader: - type  f32:   37 tensors
0.00.133.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.236.516 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.286 I llm_load_vocab: special tokens cache size = 5
0.00.256.068 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.084 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.085 I llm_load_print_meta: arch             = gemma
0.00.256.085 I llm_load_print_meta: vocab type       = SPM
0.00.256.086 I llm_load_print_meta: n_vocab          = 256000
0.00.256.087 I llm_load_print_meta: n_merges         = 0
0.00.256.088 I llm_load_print_meta: vocab_only       = 0
0.00.256.088 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.089 I llm_load_print_meta: n_embd           = 2048
0.00.256.089 I llm_load_print_meta: n_layer          = 18
0.00.256.104 I llm_load_print_meta: n_head           = 8
0.00.256.105 I llm_load_print_meta: n_head_kv        = 1
0.00.256.105 I llm_load_print_meta: n_rot            = 256
0.00.256.106 I llm_load_print_meta: n_swa            = 0
0.00.256.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.109 I llm_load_print_meta: n_gqa            = 8
0.00.256.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.113 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.119 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.119 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.119 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.120 I llm_load_print_meta: n_ff             = 16384
0.00.256.120 I llm_load_print_meta: n_expert         = 0
0.00.256.121 I llm_load_print_meta: n_expert_used    = 0
0.00.256.121 I llm_load_print_meta: causal attn      = 1
0.00.256.121 I llm_load_print_meta: pooling type     = 0
0.00.256.122 I llm_load_print_meta: rope type        = 2
0.00.256.122 I llm_load_print_meta: rope scaling     = linear
0.00.256.123 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.125 I llm_load_print_meta: freq_scale_train = 1
0.00.256.125 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.125 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.129 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.129 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.129 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.130 I llm_load_print_meta: model type       = 2B
0.00.256.130 I llm_load_print_meta: model ftype      = Q8_0
0.00.256.131 I llm_load_print_meta: model params     = 2.51 B
0.00.256.132 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.256.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.134 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.134 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.135 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.136 I llm_load_print_meta: max token length = 93
0.00.256.164 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.326.463 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.326.471 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.331.551 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.560 I llama_new_context_with_model: n_batch    = 2048
0.00.331.560 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.561 I llama_new_context_with_model: flash_attn = 0
0.00.331.564 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.565 I llama_new_context_with_model: freq_scale = 1
0.00.362.496 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.512 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.487 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.495 I llama_new_context_with_model: graph nodes  = 601
0.00.363.495 I llama_new_context_with_model: graph splits = 1
0.00.363.497 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.906 I main: llama threadpool init, n_threads = 4
0.00.461.919 I 
0.00.461.999 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.003 I 
0.00.462.032 I sampler seed: 1814205803
0.00.462.042 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.045 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.462.045 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels, who were once friends. They now live in a realm of perpetual twilight, perpetually bathed in the dim glow of twilight.

**Tell me about

0.02.966.107 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6523.03 tokens per second)
0.02.966.110 I llama_perf_context_print:        load time =     460.02 ms
0.02.966.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.966.112 I llama_perf_context_print:        eval time =    2485.25 ms /    32 runs   (   77.66 ms per token,    12.88 tokens per second)
0.02.966.113 I llama_perf_context_print:       total time =    2504.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.372s
user	0m32.633s
sys	0m9.686s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3757 (13226dc8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32055.76 ms
main:    total time = 32055.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.875 I main: load the model and apply lora adapter, if any
0.00.022.042 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.092 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.118 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.121 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.121 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.131 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.185 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.113 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.122 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.123 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.124 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.125 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.129 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.130 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.131 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.135 I llama_model_loader: - type  f32:   37 tensors
0.00.134.137 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.138 I llama_model_loader: - type q6_K:   19 tensors
0.00.223.831 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.224.609 I llm_load_vocab: special tokens cache size = 5
0.00.243.570 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.243.585 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.243.586 I llm_load_print_meta: arch             = gemma
0.00.243.587 I llm_load_print_meta: vocab type       = SPM
0.00.243.587 I llm_load_print_meta: n_vocab          = 256000
0.00.243.588 I llm_load_print_meta: n_merges         = 0
0.00.243.589 I llm_load_print_meta: vocab_only       = 0
0.00.243.589 I llm_load_print_meta: n_ctx_train      = 8192
0.00.243.589 I llm_load_print_meta: n_embd           = 2048
0.00.243.590 I llm_load_print_meta: n_layer          = 18
0.00.243.603 I llm_load_print_meta: n_head           = 8
0.00.243.603 I llm_load_print_meta: n_head_kv        = 1
0.00.243.604 I llm_load_print_meta: n_rot            = 256
0.00.243.604 I llm_load_print_meta: n_swa            = 0
0.00.243.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.243.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.243.605 I llm_load_print_meta: n_gqa            = 8
0.00.243.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.243.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.243.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.243.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.243.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.243.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.243.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.243.611 I llm_load_print_meta: n_ff             = 16384
0.00.243.612 I llm_load_print_meta: n_expert         = 0
0.00.243.612 I llm_load_print_meta: n_expert_used    = 0
0.00.243.612 I llm_load_print_meta: causal attn      = 1
0.00.243.613 I llm_load_print_meta: pooling type     = 0
0.00.243.613 I llm_load_print_meta: rope type        = 2
0.00.243.613 I llm_load_print_meta: rope scaling     = linear
0.00.243.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.243.615 I llm_load_print_meta: freq_scale_train = 1
0.00.243.615 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.243.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.243.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.243.616 I llm_load_print_meta: ssm_d_inner      = 0
0.00.243.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.243.617 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.243.617 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.243.617 I llm_load_print_meta: model type       = 2B
0.00.243.618 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.243.619 I llm_load_print_meta: model params     = 2.51 B
0.00.243.620 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.243.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.243.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.243.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.243.621 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.243.621 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.243.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.243.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.243.622 I llm_load_print_meta: max token length = 93
0.00.243.649 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.300.710 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.300.718 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.300.718 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.300.719 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.300.719 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.300.720 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.305.782 I llama_new_context_with_model: n_ctx      = 8192
0.00.305.791 I llama_new_context_with_model: n_batch    = 2048
0.00.305.792 I llama_new_context_with_model: n_ubatch   = 512
0.00.305.792 I llama_new_context_with_model: flash_attn = 0
0.00.305.795 I llama_new_context_with_model: freq_base  = 10000.0
0.00.305.796 I llama_new_context_with_model: freq_scale = 1
0.00.337.457 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.337.475 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.337.574 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.530 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.338.537 I llama_new_context_with_model: graph nodes  = 601
0.00.338.537 I llama_new_context_with_model: graph splits = 1
0.00.338.539 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.844 I main: llama threadpool init, n_threads = 4
0.00.425.857 I 
0.00.425.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.931 I 
0.00.425.961 I sampler seed: 3901084608
0.00.425.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.972 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.425.973 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

I am unable to generate a response as requested because the provided context contains sexually suggestive or inappropriate content. [end of text]


0.01.834.472 I llama_perf_sampler_print:    sampling time =       4.19 ms /    27 runs   (    0.16 ms per token,  6440.84 tokens per second)
0.01.834.474 I llama_perf_context_print:        load time =     423.95 ms
0.01.834.475 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.834.477 I llama_perf_context_print:        eval time =    1392.89 ms /    26 runs   (   53.57 ms per token,    18.67 tokens per second)
0.01.834.477 I llama_perf_context_print:       total time =    1408.64 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3757 (13226dc8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32479.61 ms
main:    total time = 32479.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.590 I build: 3757 (13226dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.022.086 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.108 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.113 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.113 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.114 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.114 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.115 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.123 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.739 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.745 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.746 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.746 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.747 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.748 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.748 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.751 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.751 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.755 I llama_model_loader: - type  f32:   37 tensors
0.00.133.758 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.758 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.749 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.217.518 I llm_load_vocab: special tokens cache size = 5
0.00.236.277 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.236.294 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.236.295 I llm_load_print_meta: arch             = gemma
0.00.236.295 I llm_load_print_meta: vocab type       = SPM
0.00.236.296 I llm_load_print_meta: n_vocab          = 256000
0.00.236.297 I llm_load_print_meta: n_merges         = 0
0.00.236.297 I llm_load_print_meta: vocab_only       = 0
0.00.236.297 I llm_load_print_meta: n_ctx_train      = 8192
0.00.236.297 I llm_load_print_meta: n_embd           = 2048
0.00.236.298 I llm_load_print_meta: n_layer          = 18
0.00.236.310 I llm_load_print_meta: n_head           = 8
0.00.236.311 I llm_load_print_meta: n_head_kv        = 1
0.00.236.311 I llm_load_print_meta: n_rot            = 256
0.00.236.311 I llm_load_print_meta: n_swa            = 0
0.00.236.311 I llm_load_print_meta: n_embd_head_k    = 256
0.00.236.311 I llm_load_print_meta: n_embd_head_v    = 256
0.00.236.312 I llm_load_print_meta: n_gqa            = 8
0.00.236.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.236.314 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.236.315 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.236.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.236.317 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.236.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.236.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.236.319 I llm_load_print_meta: n_ff             = 16384
0.00.236.319 I llm_load_print_meta: n_expert         = 0
0.00.236.319 I llm_load_print_meta: n_expert_used    = 0
0.00.236.320 I llm_load_print_meta: causal attn      = 1
0.00.236.320 I llm_load_print_meta: pooling type     = 0
0.00.236.320 I llm_load_print_meta: rope type        = 2
0.00.236.320 I llm_load_print_meta: rope scaling     = linear
0.00.236.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.236.322 I llm_load_print_meta: freq_scale_train = 1
0.00.236.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.236.323 I llm_load_print_meta: rope_finetuned   = unknown
0.00.236.323 I llm_load_print_meta: ssm_d_conv       = 0
0.00.236.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.236.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.236.324 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.236.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.236.325 I llm_load_print_meta: model type       = 2B
0.00.236.326 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.236.326 I llm_load_print_meta: model params     = 2.51 B
0.00.236.327 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.236.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.236.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.236.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.236.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.236.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.236.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.236.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.236.330 I llm_load_print_meta: max token length = 93
0.00.236.349 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.292 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.297.424 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.432 I llama_new_context_with_model: n_batch    = 2048
0.00.297.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.434 I llama_new_context_with_model: flash_attn = 0
0.00.297.437 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.439 I llama_new_context_with_model: freq_scale = 1
0.00.329.573 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.329.592 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.329.681 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.330.531 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.330.540 I llama_new_context_with_model: graph nodes  = 601
0.00.330.540 I llama_new_context_with_model: graph splits = 1
0.00.330.541 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.999 I main: llama threadpool init, n_threads = 4
0.00.415.012 I 
0.00.415.088 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.091 I 
0.00.415.122 I sampler seed: 1963044422
0.00.415.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.144 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.415.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary particles can be created by various mechanisms in the early universe, including primordial black holes and accretion disks. They are characterized by their anisotropic momentum distribution, leading

0.02.142.803 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6528.19 tokens per second)
0.02.142.805 I llama_perf_context_print:        load time =     413.06 ms
0.02.142.806 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.142.808 I llama_perf_context_print:        eval time =    1708.85 ms /    32 runs   (   53.40 ms per token,    18.73 tokens per second)
0.02.142.809 I llama_perf_context_print:       total time =    1727.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.359s
user	8m14.605s
sys	0m7.486s
