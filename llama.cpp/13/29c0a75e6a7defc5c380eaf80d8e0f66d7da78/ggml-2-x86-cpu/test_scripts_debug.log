+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.710 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.030 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.040 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.043 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.786 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.363 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.155 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.156 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.157 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.158 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.160 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.163 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.163 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.165 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.165 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.167 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.174 I llama_model_loader: - type  f32:   37 tensors
0.00.264.178 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.023 I llm_load_vocab: special tokens cache size = 5
0.00.620.611 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.682 I llm_load_print_meta: arch             = gemma
0.00.620.683 I llm_load_print_meta: vocab type       = SPM
0.00.620.684 I llm_load_print_meta: n_vocab          = 256000
0.00.620.686 I llm_load_print_meta: n_merges         = 0
0.00.620.687 I llm_load_print_meta: vocab_only       = 0
0.00.620.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.688 I llm_load_print_meta: n_embd           = 2048
0.00.620.688 I llm_load_print_meta: n_layer          = 18
0.00.620.752 I llm_load_print_meta: n_head           = 8
0.00.620.759 I llm_load_print_meta: n_head_kv        = 1
0.00.620.760 I llm_load_print_meta: n_rot            = 256
0.00.620.760 I llm_load_print_meta: n_swa            = 0
0.00.620.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.761 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.788 I llm_load_print_meta: n_gqa            = 8
0.00.620.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.799 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.800 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.802 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.803 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.804 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.804 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.809 I llm_load_print_meta: n_ff             = 16384
0.00.620.810 I llm_load_print_meta: n_expert         = 0
0.00.620.814 I llm_load_print_meta: n_expert_used    = 0
0.00.620.815 I llm_load_print_meta: causal attn      = 1
0.00.620.815 I llm_load_print_meta: pooling type     = 0
0.00.620.815 I llm_load_print_meta: rope type        = 2
0.00.620.816 I llm_load_print_meta: rope scaling     = linear
0.00.620.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.818 I llm_load_print_meta: freq_scale_train = 1
0.00.620.818 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.826 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.838 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.838 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.838 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.839 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.840 I llm_load_print_meta: model type       = 2B
0.00.620.841 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.841 I llm_load_print_meta: model params     = 2.51 B
0.00.620.842 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.843 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.843 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.844 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.858 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.861 I llm_load_print_meta: max token length = 93
0.00.732.317 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.732.329 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.732.330 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.732.331 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.732.331 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.732.332 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.738.287 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.296 I llama_new_context_with_model: n_batch    = 2048
0.00.738.297 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.297 I llama_new_context_with_model: flash_attn = 0
0.00.738.301 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.301 I llama_new_context_with_model: freq_scale = 1
0.00.770.603 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.770.640 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.770.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.773.866 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.773.889 I llama_new_context_with_model: graph nodes  = 601
0.00.773.893 I llama_new_context_with_model: graph splits = 1
0.00.773.912 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.383.292 I main: llama threadpool init, n_threads = 4
0.01.383.305 I 
0.01.383.415 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.383.419 I 
0.01.383.646 I sampler seed: 2047368224
0.01.383.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.383.667 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.383.669 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.383.669 I 
 increasities in the ancient world, such as Sparta and Athens, often relied on a centralized government that enforced laws and organized resources. This centralized model proved effective in

0.14.878.552 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.49 tokens per second)
0.14.878.566 I llama_perf_context_print:        load time =    1380.39 ms
0.14.878.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.878.571 I llama_perf_context_print:        eval time =   13401.48 ms /    32 runs   (  418.80 ms per token,     2.39 tokens per second)
0.14.878.572 I llama_perf_context_print:       total time =   13495.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.707 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.024.974 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.073 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.086 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.763 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.817 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.833 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.837 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.838 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.840 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.844 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.852 I llama_model_loader: - type  f32:   37 tensors
0.00.265.857 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.121 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.156 I llm_load_vocab: special tokens cache size = 5
0.00.627.008 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.077 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.080 I llm_load_print_meta: arch             = gemma
0.00.627.081 I llm_load_print_meta: vocab type       = SPM
0.00.627.082 I llm_load_print_meta: n_vocab          = 256000
0.00.627.084 I llm_load_print_meta: n_merges         = 0
0.00.627.085 I llm_load_print_meta: vocab_only       = 0
0.00.627.085 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.085 I llm_load_print_meta: n_embd           = 2048
0.00.627.086 I llm_load_print_meta: n_layer          = 18
0.00.627.149 I llm_load_print_meta: n_head           = 8
0.00.627.158 I llm_load_print_meta: n_head_kv        = 1
0.00.627.159 I llm_load_print_meta: n_rot            = 256
0.00.627.159 I llm_load_print_meta: n_swa            = 0
0.00.627.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.161 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.166 I llm_load_print_meta: n_gqa            = 8
0.00.627.172 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.182 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.184 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.190 I llm_load_print_meta: n_ff             = 16384
0.00.627.190 I llm_load_print_meta: n_expert         = 0
0.00.627.191 I llm_load_print_meta: n_expert_used    = 0
0.00.627.191 I llm_load_print_meta: causal attn      = 1
0.00.627.192 I llm_load_print_meta: pooling type     = 0
0.00.627.192 I llm_load_print_meta: rope type        = 2
0.00.627.192 I llm_load_print_meta: rope scaling     = linear
0.00.627.194 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.195 I llm_load_print_meta: freq_scale_train = 1
0.00.627.196 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.196 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.197 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.198 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.198 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.198 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.199 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.200 I llm_load_print_meta: model type       = 2B
0.00.627.200 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.201 I llm_load_print_meta: model params     = 2.51 B
0.00.627.202 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.202 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.206 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.207 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.207 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.207 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.208 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.216 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.216 I llm_load_print_meta: max token length = 93
0.00.727.270 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.733.008 I llama_new_context_with_model: n_ctx      = 8192
0.00.733.017 I llama_new_context_with_model: n_batch    = 2048
0.00.733.017 I llama_new_context_with_model: n_ubatch   = 512
0.00.733.018 I llama_new_context_with_model: flash_attn = 0
0.00.733.022 I llama_new_context_with_model: freq_base  = 10000.0
0.00.733.022 I llama_new_context_with_model: freq_scale = 1
0.00.764.725 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.764.767 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.764.887 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.145 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.768.150 I llama_new_context_with_model: graph nodes  = 601
0.00.768.150 I llama_new_context_with_model: graph splits = 1
0.00.768.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.381.669 I main: llama threadpool init, n_threads = 4
0.01.381.681 I 
0.01.381.787 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.381.791 I 
0.01.382.020 I sampler seed: 2836157078
0.01.382.031 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.382.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.382.040 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.382.040 I 
 increamically.

A train travels 240 km in 4 hours. What is its average speed in km/h?

**Answer:** 

0.14.891.889 I llama_perf_sampler_print:    sampling time =      48.03 ms /    33 runs   (    1.46 ms per token,   687.11 tokens per second)
0.14.891.892 I llama_perf_context_print:        load time =    1378.72 ms
0.14.891.894 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.891.897 I llama_perf_context_print:        eval time =   13416.75 ms /    32 runs   (  419.27 ms per token,     2.39 tokens per second)
0.14.891.899 I llama_perf_context_print:       total time =   13510.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.709 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.858 I main: load the model and apply lora adapter, if any
0.00.024.913 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.129 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.235 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.237 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.241 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.246 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.330 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.747 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.568 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.583 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.586 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.587 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.588 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.589 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.590 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.598 I llama_model_loader: - type  f32:   37 tensors
0.00.277.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.330 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.273 I llm_load_vocab: special tokens cache size = 5
0.00.614.005 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.078 I llm_load_print_meta: arch             = gemma
0.00.614.078 I llm_load_print_meta: vocab type       = SPM
0.00.614.079 I llm_load_print_meta: n_vocab          = 256000
0.00.614.081 I llm_load_print_meta: n_merges         = 0
0.00.614.082 I llm_load_print_meta: vocab_only       = 0
0.00.614.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.083 I llm_load_print_meta: n_embd           = 2048
0.00.614.083 I llm_load_print_meta: n_layer          = 18
0.00.614.145 I llm_load_print_meta: n_head           = 8
0.00.614.155 I llm_load_print_meta: n_head_kv        = 1
0.00.614.156 I llm_load_print_meta: n_rot            = 256
0.00.614.156 I llm_load_print_meta: n_swa            = 0
0.00.614.156 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.161 I llm_load_print_meta: n_gqa            = 8
0.00.614.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.172 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.174 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.176 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.177 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.178 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.183 I llm_load_print_meta: n_ff             = 16384
0.00.614.183 I llm_load_print_meta: n_expert         = 0
0.00.614.184 I llm_load_print_meta: n_expert_used    = 0
0.00.614.185 I llm_load_print_meta: causal attn      = 1
0.00.614.195 I llm_load_print_meta: pooling type     = 0
0.00.614.196 I llm_load_print_meta: rope type        = 2
0.00.614.196 I llm_load_print_meta: rope scaling     = linear
0.00.614.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.198 I llm_load_print_meta: freq_scale_train = 1
0.00.614.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.201 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.202 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.216 I llm_load_print_meta: model type       = 2B
0.00.614.220 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.221 I llm_load_print_meta: model params     = 2.51 B
0.00.614.222 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.223 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.226 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.227 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.227 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.235 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.244 I llm_load_print_meta: max token length = 93
0.00.712.882 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.712.891 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.712.892 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.712.893 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.712.893 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.712.894 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.718.556 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.562 I llama_new_context_with_model: n_batch    = 2048
0.00.718.562 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.563 I llama_new_context_with_model: flash_attn = 0
0.00.718.565 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.566 I llama_new_context_with_model: freq_scale = 1
0.00.748.488 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.524 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.742 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.746 I llama_new_context_with_model: graph nodes  = 601
0.00.751.746 I llama_new_context_with_model: graph splits = 1
0.00.751.763 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.459 I main: llama threadpool init, n_threads = 4
0.01.366.472 I 
0.01.366.583 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.587 I 
0.01.366.815 I sampler seed: 1613238454
0.01.366.829 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.842 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.845 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.845 I 
 increasities.

I cannot find the requested information in the provided context. Therefore, I am unable to answer this question. [end of text]


0.12.348.888 I llama_perf_sampler_print:    sampling time =      38.87 ms /    27 runs   (    1.44 ms per token,   694.69 tokens per second)
0.12.348.890 I llama_perf_context_print:        load time =    1363.50 ms
0.12.348.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.348.893 I llama_perf_context_print:        eval time =   10906.18 ms /    26 runs   (  419.47 ms per token,     2.38 tokens per second)
0.12.348.894 I llama_perf_context_print:       total time =   10982.44 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.603 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.810 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.901 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.911 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.918 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.919 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.932 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.950 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.955 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.957 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.075 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.581 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.333 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.341 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.342 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.343 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.344 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.345 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.350 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.351 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.352 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.353 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.362 I llama_model_loader: - type  f32:   37 tensors
0.00.265.366 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.927 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.908 I llm_load_vocab: special tokens cache size = 5
0.00.598.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.946 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.947 I llm_load_print_meta: arch             = gemma
0.00.598.948 I llm_load_print_meta: vocab type       = SPM
0.00.598.948 I llm_load_print_meta: n_vocab          = 256000
0.00.598.951 I llm_load_print_meta: n_merges         = 0
0.00.598.951 I llm_load_print_meta: vocab_only       = 0
0.00.598.952 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.952 I llm_load_print_meta: n_embd           = 2048
0.00.598.953 I llm_load_print_meta: n_layer          = 18
0.00.599.018 I llm_load_print_meta: n_head           = 8
0.00.599.024 I llm_load_print_meta: n_head_kv        = 1
0.00.599.025 I llm_load_print_meta: n_rot            = 256
0.00.599.025 I llm_load_print_meta: n_swa            = 0
0.00.599.026 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.026 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.032 I llm_load_print_meta: n_gqa            = 8
0.00.599.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.043 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.045 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.045 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.045 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.046 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.051 I llm_load_print_meta: n_ff             = 16384
0.00.599.051 I llm_load_print_meta: n_expert         = 0
0.00.599.052 I llm_load_print_meta: n_expert_used    = 0
0.00.599.053 I llm_load_print_meta: causal attn      = 1
0.00.599.053 I llm_load_print_meta: pooling type     = 0
0.00.599.053 I llm_load_print_meta: rope type        = 2
0.00.599.054 I llm_load_print_meta: rope scaling     = linear
0.00.599.056 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.056 I llm_load_print_meta: freq_scale_train = 1
0.00.599.057 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.057 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.059 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.069 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.073 I llm_load_print_meta: model type       = 2B
0.00.599.075 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.076 I llm_load_print_meta: model params     = 2.51 B
0.00.599.090 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.091 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.095 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.095 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.096 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.097 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.107 I llm_load_print_meta: max token length = 93
0.00.688.315 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.688.324 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.693.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.840 I llama_new_context_with_model: n_batch    = 2048
0.00.693.840 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.841 I llama_new_context_with_model: flash_attn = 0
0.00.693.843 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.843 I llama_new_context_with_model: freq_scale = 1
0.00.722.290 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.327 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.529 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.725.533 I llama_new_context_with_model: graph nodes  = 601
0.00.725.534 I llama_new_context_with_model: graph splits = 1
0.00.725.549 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.494 I main: llama threadpool init, n_threads = 4
0.01.333.507 I 
0.01.333.627 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.631 I 
0.01.333.865 I sampler seed: 1621371266
0.01.333.880 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.886 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.888 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.888 I 
 increably. 

The sentence is grammatically incorrect because it contains a misplaced modifier.

**Rewritten sentence:**

"The woman with the bright eyes

0.14.849.712 I llama_perf_sampler_print:    sampling time =      48.24 ms /    33 runs   (    1.46 ms per token,   684.08 tokens per second)
0.14.849.717 I llama_perf_context_print:        load time =    1330.62 ms
0.14.849.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.849.720 I llama_perf_context_print:        eval time =   13421.99 ms /    32 runs   (  419.44 ms per token,     2.38 tokens per second)
0.14.849.722 I llama_perf_context_print:       total time =   13516.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.805s
user	3m38.742s
sys	0m9.618s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3996 (1329c0a7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200188.09 ms
main:    total time = 200188.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.619 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.930 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.945 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.442 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.595 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.605 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.607 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.611 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.612 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.613 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.613 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.614 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.622 I llama_model_loader: - type  f32:   37 tensors
0.00.264.626 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.628 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.822 I llm_load_vocab: special tokens cache size = 5
0.00.608.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.384 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.388 I llm_load_print_meta: arch             = gemma
0.00.608.389 I llm_load_print_meta: vocab type       = SPM
0.00.608.389 I llm_load_print_meta: n_vocab          = 256000
0.00.608.391 I llm_load_print_meta: n_merges         = 0
0.00.608.392 I llm_load_print_meta: vocab_only       = 0
0.00.608.392 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.393 I llm_load_print_meta: n_embd           = 2048
0.00.608.393 I llm_load_print_meta: n_layer          = 18
0.00.608.454 I llm_load_print_meta: n_head           = 8
0.00.608.464 I llm_load_print_meta: n_head_kv        = 1
0.00.608.467 I llm_load_print_meta: n_rot            = 256
0.00.608.467 I llm_load_print_meta: n_swa            = 0
0.00.608.467 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.473 I llm_load_print_meta: n_gqa            = 8
0.00.608.478 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.504 I llm_load_print_meta: n_ff             = 16384
0.00.608.504 I llm_load_print_meta: n_expert         = 0
0.00.608.505 I llm_load_print_meta: n_expert_used    = 0
0.00.608.506 I llm_load_print_meta: causal attn      = 1
0.00.608.506 I llm_load_print_meta: pooling type     = 0
0.00.608.507 I llm_load_print_meta: rope type        = 2
0.00.608.509 I llm_load_print_meta: rope scaling     = linear
0.00.608.511 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.512 I llm_load_print_meta: freq_scale_train = 1
0.00.608.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.512 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.512 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.513 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.514 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.515 I llm_load_print_meta: model type       = 2B
0.00.608.516 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.517 I llm_load_print_meta: model params     = 2.51 B
0.00.608.518 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.520 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.527 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.529 I llm_load_print_meta: max token length = 93
0.00.672.198 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.672.208 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.672.209 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.672.210 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.672.210 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.672.211 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.677.871 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.876 I llama_new_context_with_model: n_batch    = 2048
0.00.677.877 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.877 I llama_new_context_with_model: flash_attn = 0
0.00.677.879 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.880 I llama_new_context_with_model: freq_scale = 1
0.00.707.061 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.099 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.377 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.381 I llama_new_context_with_model: graph nodes  = 601
0.00.710.381 I llama_new_context_with_model: graph splits = 1
0.00.710.398 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.812 I main: llama threadpool init, n_threads = 4
0.01.285.824 I 
0.01.285.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.931 I 
0.01.286.161 I sampler seed: 3820989889
0.01.286.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.181 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.184 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.185 I 
 increasities, and other forms of deception.

**Answer:**

**Ethics and Integrity in Research**

**Definition:**

Ethics and integrity in research refer

0.12.122.196 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.45 tokens per second)
0.12.122.199 I llama_perf_context_print:        load time =    1282.89 ms
0.12.122.200 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.122.215 I llama_perf_context_print:        eval time =   10743.45 ms /    32 runs   (  335.73 ms per token,     2.98 tokens per second)
0.12.122.216 I llama_perf_context_print:       total time =   10836.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3996 (1329c0a7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199622.47 ms
main:    total time = 199622.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3996 (1329c0a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.789 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.896 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.913 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.924 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.926 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.945 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.040 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.194 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.205 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.206 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.207 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.219 I llama_model_loader: - type  f32:   37 tensors
0.00.265.224 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.225 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.782 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.271 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.255 I llm_load_vocab: special tokens cache size = 5
0.00.610.926 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.992 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.993 I llm_load_print_meta: arch             = gemma
0.00.610.993 I llm_load_print_meta: vocab type       = SPM
0.00.610.994 I llm_load_print_meta: n_vocab          = 256000
0.00.610.996 I llm_load_print_meta: n_merges         = 0
0.00.610.997 I llm_load_print_meta: vocab_only       = 0
0.00.610.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.997 I llm_load_print_meta: n_embd           = 2048
0.00.610.998 I llm_load_print_meta: n_layer          = 18
0.00.611.064 I llm_load_print_meta: n_head           = 8
0.00.611.071 I llm_load_print_meta: n_head_kv        = 1
0.00.611.072 I llm_load_print_meta: n_rot            = 256
0.00.611.073 I llm_load_print_meta: n_swa            = 0
0.00.611.074 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.074 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.079 I llm_load_print_meta: n_gqa            = 8
0.00.611.093 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.105 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.110 I llm_load_print_meta: n_ff             = 16384
0.00.611.111 I llm_load_print_meta: n_expert         = 0
0.00.611.112 I llm_load_print_meta: n_expert_used    = 0
0.00.611.112 I llm_load_print_meta: causal attn      = 1
0.00.611.112 I llm_load_print_meta: pooling type     = 0
0.00.611.113 I llm_load_print_meta: rope type        = 2
0.00.611.114 I llm_load_print_meta: rope scaling     = linear
0.00.611.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.116 I llm_load_print_meta: freq_scale_train = 1
0.00.611.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.118 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.119 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.121 I llm_load_print_meta: model type       = 2B
0.00.611.122 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.123 I llm_load_print_meta: model params     = 2.51 B
0.00.611.124 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.125 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.126 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.127 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.127 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.128 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.129 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.135 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.136 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.137 I llm_load_print_meta: max token length = 93
0.00.673.584 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.679.084 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.091 I llama_new_context_with_model: n_batch    = 2048
0.00.679.091 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.092 I llama_new_context_with_model: flash_attn = 0
0.00.679.093 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.094 I llama_new_context_with_model: freq_scale = 1
0.00.707.946 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.987 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.708.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.150 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.154 I llama_new_context_with_model: graph nodes  = 601
0.00.711.155 I llama_new_context_with_model: graph splits = 1
0.00.711.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.104 I main: llama threadpool init, n_threads = 4
0.01.288.117 I 
0.01.288.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.223 I 
0.01.288.450 I sampler seed: 1575212141
0.01.288.462 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.471 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.472 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.472 I 
 increasities of the 19th century.

**Answer:**

The provided text does not contain any information regarding the specifics of the increasities of the

0.12.195.022 I llama_perf_sampler_print:    sampling time =      48.21 ms /    33 runs   (    1.46 ms per token,   684.55 tokens per second)
0.12.195.025 I llama_perf_context_print:        load time =    1285.21 ms
0.12.195.027 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.195.029 I llama_perf_context_print:        eval time =   10813.18 ms /    32 runs   (  337.91 ms per token,     2.96 tokens per second)
0.12.195.031 I llama_perf_context_print:       total time =   10906.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.066s
user	50m16.074s
sys	0m6.369s
