+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.642 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.861 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.180 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.190 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.191 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.198 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.199 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.201 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.202 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.203 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.640 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.375 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.382 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.384 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.385 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.387 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.388 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.392 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.393 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.394 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.395 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.396 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.404 I llama_model_loader: - type  f32:   37 tensors
0.00.270.408 I llama_model_loader: - type q8_0:  127 tensors
0.00.428.090 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.451.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.452.244 I llm_load_vocab: special tokens cache size = 5
0.00.553.936 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.997 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.000 I llm_load_print_meta: arch             = gemma
0.00.554.001 I llm_load_print_meta: vocab type       = SPM
0.00.554.002 I llm_load_print_meta: n_vocab          = 256000
0.00.554.004 I llm_load_print_meta: n_merges         = 0
0.00.554.005 I llm_load_print_meta: vocab_only       = 0
0.00.554.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.005 I llm_load_print_meta: n_embd           = 2048
0.00.554.006 I llm_load_print_meta: n_layer          = 18
0.00.554.070 I llm_load_print_meta: n_head           = 8
0.00.554.077 I llm_load_print_meta: n_head_kv        = 1
0.00.554.078 I llm_load_print_meta: n_rot            = 256
0.00.554.080 I llm_load_print_meta: n_swa            = 0
0.00.554.080 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.095 I llm_load_print_meta: n_gqa            = 8
0.00.554.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.106 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.117 I llm_load_print_meta: n_ff             = 16384
0.00.554.117 I llm_load_print_meta: n_expert         = 0
0.00.554.118 I llm_load_print_meta: n_expert_used    = 0
0.00.554.122 I llm_load_print_meta: causal attn      = 1
0.00.554.122 I llm_load_print_meta: pooling type     = 0
0.00.554.123 I llm_load_print_meta: rope type        = 2
0.00.554.123 I llm_load_print_meta: rope scaling     = linear
0.00.554.124 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.125 I llm_load_print_meta: freq_scale_train = 1
0.00.554.125 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.125 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.131 I llm_load_print_meta: model type       = 2B
0.00.554.140 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.140 I llm_load_print_meta: model params     = 2.51 B
0.00.554.141 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.142 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.143 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.144 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.146 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.153 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.554.155 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.554.156 I llm_load_print_meta: max token length = 93
0.00.554.321 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.273 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.653.283 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.653.284 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.653.285 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.653.286 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.653.286 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.658.992 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.999 I llama_new_context_with_model: n_batch    = 2048
0.00.659.000 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.001 I llama_new_context_with_model: flash_attn = 0
0.00.659.003 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.004 I llama_new_context_with_model: freq_scale = 1
0.00.688.680 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.726 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.690.254 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.261 I llama_new_context_with_model: graph nodes  = 601
0.00.690.262 I llama_new_context_with_model: graph splits = 1
0.00.690.277 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.692 I main: llama threadpool init, n_threads = 4
0.01.301.703 I 
0.01.301.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.815 I 
0.01.301.977 I sampler seed: 2329082706
0.01.301.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.992 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.993 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.993 I 
 increasities. 

This is a parody of a song by The Beatles.

(Verse 1)
The sun was settin' low, the

0.14.804.450 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.05 tokens per second)
0.14.804.462 I llama_perf_context_print:        load time =    1298.70 ms
0.14.804.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.804.466 I llama_perf_context_print:        eval time =   13420.90 ms /    32 runs   (  419.40 ms per token,     2.38 tokens per second)
0.14.804.467 I llama_perf_context_print:       total time =   13502.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.658 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.305 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.395 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.409 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.416 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.418 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.419 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.420 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.427 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.431 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.533 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.540 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.545 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.550 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.551 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.553 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.562 I llama_model_loader: - type  f32:   37 tensors
0.00.270.566 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.096 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.701 I llm_load_vocab: special tokens cache size = 5
0.00.568.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.465 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.466 I llm_load_print_meta: arch             = gemma
0.00.568.467 I llm_load_print_meta: vocab type       = SPM
0.00.568.467 I llm_load_print_meta: n_vocab          = 256000
0.00.568.470 I llm_load_print_meta: n_merges         = 0
0.00.568.471 I llm_load_print_meta: vocab_only       = 0
0.00.568.471 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.471 I llm_load_print_meta: n_embd           = 2048
0.00.568.472 I llm_load_print_meta: n_layer          = 18
0.00.568.538 I llm_load_print_meta: n_head           = 8
0.00.568.545 I llm_load_print_meta: n_head_kv        = 1
0.00.568.546 I llm_load_print_meta: n_rot            = 256
0.00.568.546 I llm_load_print_meta: n_swa            = 0
0.00.568.548 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.548 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.562 I llm_load_print_meta: n_gqa            = 8
0.00.568.567 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.572 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.583 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.588 I llm_load_print_meta: n_ff             = 16384
0.00.568.589 I llm_load_print_meta: n_expert         = 0
0.00.568.589 I llm_load_print_meta: n_expert_used    = 0
0.00.568.589 I llm_load_print_meta: causal attn      = 1
0.00.568.589 I llm_load_print_meta: pooling type     = 0
0.00.568.590 I llm_load_print_meta: rope type        = 2
0.00.568.590 I llm_load_print_meta: rope scaling     = linear
0.00.568.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.593 I llm_load_print_meta: freq_scale_train = 1
0.00.568.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.595 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.595 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.601 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.602 I llm_load_print_meta: model type       = 2B
0.00.568.611 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.611 I llm_load_print_meta: model params     = 2.51 B
0.00.568.612 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.613 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.614 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.614 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.627 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.628 I llm_load_print_meta: max token length = 93
0.00.568.794 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.015 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.668.633 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.639 I llama_new_context_with_model: n_batch    = 2048
0.00.668.640 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.640 I llama_new_context_with_model: flash_attn = 0
0.00.668.642 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.643 I llama_new_context_with_model: freq_scale = 1
0.00.697.772 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.815 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.699.294 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.699.301 I llama_new_context_with_model: graph nodes  = 601
0.00.699.301 I llama_new_context_with_model: graph splits = 1
0.00.699.318 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.713 I main: llama threadpool init, n_threads = 4
0.01.309.724 I 
0.01.309.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.832 I 
0.01.309.995 I sampler seed: 3916041273
0.01.310.005 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.011 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.310.023 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.024 I 
 seconded numbers

$$2,4,6,8,10,12,14,16,18$$

Find the next

0.14.879.820 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.30 tokens per second)
0.14.879.824 I llama_perf_context_print:        load time =    1306.74 ms
0.14.879.836 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.839 I llama_perf_context_print:        eval time =   13485.72 ms /    32 runs   (  421.43 ms per token,     2.37 tokens per second)
0.14.879.841 I llama_perf_context_print:       total time =   13570.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.661 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.600 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.808 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.897 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.908 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.910 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.914 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.917 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.918 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.920 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.921 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.686 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.818 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.831 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.835 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.836 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.837 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.838 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.840 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.849 I llama_model_loader: - type  f32:   37 tensors
0.00.269.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.429.106 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.452.346 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.453.372 I llm_load_vocab: special tokens cache size = 5
0.00.559.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.202 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.203 I llm_load_print_meta: arch             = gemma
0.00.559.204 I llm_load_print_meta: vocab type       = SPM
0.00.559.205 I llm_load_print_meta: n_vocab          = 256000
0.00.559.207 I llm_load_print_meta: n_merges         = 0
0.00.559.208 I llm_load_print_meta: vocab_only       = 0
0.00.559.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.209 I llm_load_print_meta: n_embd           = 2048
0.00.559.209 I llm_load_print_meta: n_layer          = 18
0.00.559.273 I llm_load_print_meta: n_head           = 8
0.00.559.280 I llm_load_print_meta: n_head_kv        = 1
0.00.559.282 I llm_load_print_meta: n_rot            = 256
0.00.559.301 I llm_load_print_meta: n_swa            = 0
0.00.559.302 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.307 I llm_load_print_meta: n_gqa            = 8
0.00.559.312 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.318 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.320 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.321 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.322 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.322 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.328 I llm_load_print_meta: n_ff             = 16384
0.00.559.329 I llm_load_print_meta: n_expert         = 0
0.00.559.330 I llm_load_print_meta: n_expert_used    = 0
0.00.559.330 I llm_load_print_meta: causal attn      = 1
0.00.559.330 I llm_load_print_meta: pooling type     = 0
0.00.559.338 I llm_load_print_meta: rope type        = 2
0.00.559.339 I llm_load_print_meta: rope scaling     = linear
0.00.559.340 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.341 I llm_load_print_meta: freq_scale_train = 1
0.00.559.342 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.342 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.343 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.343 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.344 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.344 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.345 I llm_load_print_meta: model type       = 2B
0.00.559.355 I llm_load_print_meta: model ftype      = Q8_0
0.00.559.355 I llm_load_print_meta: model params     = 2.51 B
0.00.559.357 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.559.357 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.365 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.366 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.366 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.367 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.559.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.559.376 I llm_load_print_meta: max token length = 93
0.00.559.542 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.794 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.635.804 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.805 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.635.805 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.635.806 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.807 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.641.374 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.381 I llama_new_context_with_model: n_batch    = 2048
0.00.641.381 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.382 I llama_new_context_with_model: flash_attn = 0
0.00.641.384 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.385 I llama_new_context_with_model: freq_scale = 1
0.00.669.794 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.839 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.669.951 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.292 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.299 I llama_new_context_with_model: graph nodes  = 601
0.00.671.299 I llama_new_context_with_model: graph splits = 1
0.00.671.315 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.016 I main: llama threadpool init, n_threads = 4
0.01.282.028 I 
0.01.282.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.135 I 
0.01.282.297 I sampler seed: 3572610836
0.01.282.308 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.314 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.315 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.315 I 
 increasities on social media and the resulting psychological effects on users.

## Psychological Effects of Social Media Decadence:

**1. Anxiety and Depression:**

0.14.784.095 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.70 tokens per second)
0.14.784.098 I llama_perf_context_print:        load time =    1279.04 ms
0.14.784.100 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.784.101 I llama_perf_context_print:        eval time =   13420.85 ms /    32 runs   (  419.40 ms per token,     2.38 tokens per second)
0.14.784.102 I llama_perf_context_print:       total time =   13502.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.629 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.662 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.856 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.941 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.951 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.952 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.972 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.973 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.974 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.980 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.104 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.617 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.258 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.259 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.260 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.261 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.263 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.264 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.270 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.271 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.272 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.280 I llama_model_loader: - type  f32:   37 tensors
0.00.270.284 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.242 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.567 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.460.577 I llm_load_vocab: special tokens cache size = 5
0.00.556.265 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.322 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.323 I llm_load_print_meta: arch             = gemma
0.00.556.324 I llm_load_print_meta: vocab type       = SPM
0.00.556.325 I llm_load_print_meta: n_vocab          = 256000
0.00.556.327 I llm_load_print_meta: n_merges         = 0
0.00.556.328 I llm_load_print_meta: vocab_only       = 0
0.00.556.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.328 I llm_load_print_meta: n_embd           = 2048
0.00.556.329 I llm_load_print_meta: n_layer          = 18
0.00.556.394 I llm_load_print_meta: n_head           = 8
0.00.556.401 I llm_load_print_meta: n_head_kv        = 1
0.00.556.402 I llm_load_print_meta: n_rot            = 256
0.00.556.402 I llm_load_print_meta: n_swa            = 0
0.00.556.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.407 I llm_load_print_meta: n_gqa            = 8
0.00.556.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.417 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.419 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.420 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.420 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.420 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.426 I llm_load_print_meta: n_ff             = 16384
0.00.556.426 I llm_load_print_meta: n_expert         = 0
0.00.556.427 I llm_load_print_meta: n_expert_used    = 0
0.00.556.427 I llm_load_print_meta: causal attn      = 1
0.00.556.427 I llm_load_print_meta: pooling type     = 0
0.00.556.428 I llm_load_print_meta: rope type        = 2
0.00.556.429 I llm_load_print_meta: rope scaling     = linear
0.00.556.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.431 I llm_load_print_meta: freq_scale_train = 1
0.00.556.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.431 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.432 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.435 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.435 I llm_load_print_meta: model type       = 2B
0.00.556.445 I llm_load_print_meta: model ftype      = Q8_0
0.00.556.445 I llm_load_print_meta: model params     = 2.51 B
0.00.556.447 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.556.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.449 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.475 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.478 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.556.487 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.556.487 I llm_load_print_meta: max token length = 93
0.00.556.656 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.627.639 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.627.649 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.633.260 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.268 I llama_new_context_with_model: n_batch    = 2048
0.00.633.268 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.269 I llama_new_context_with_model: flash_attn = 0
0.00.633.272 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.273 I llama_new_context_with_model: freq_scale = 1
0.00.661.740 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.661.780 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.661.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.663.276 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.663.282 I llama_new_context_with_model: graph nodes  = 601
0.00.663.283 I llama_new_context_with_model: graph splits = 1
0.00.663.298 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.155 I main: llama threadpool init, n_threads = 4
0.01.276.167 I 
0.01.276.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.279 I 
0.01.276.437 I sampler seed: 488383787
0.01.276.446 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.276.452 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.276.453 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.276.453 I 
 increamically.

A man is walking his dog. The dog runs away from him, leaving the man alone. The man continues walking, oblivious to the situation

0.14.799.491 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.00 tokens per second)
0.14.799.495 I llama_perf_context_print:        load time =    1273.20 ms
0.14.799.497 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.799.499 I llama_perf_context_print:        eval time =   13441.39 ms /    32 runs   (  420.04 ms per token,     2.38 tokens per second)
0.14.799.499 I llama_perf_context_print:       total time =   13523.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.292s
user	3m48.842s
sys	0m9.412s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3879 (133c7b46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200009.94 ms
main:    total time = 200009.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.658 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.648 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.853 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.959 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.206 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.270.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.289.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.289.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.289.538 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.289.539 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.289.540 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.289.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.289.543 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.289.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.289.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.289.566 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.289.568 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.289.569 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.289.577 I llama_model_loader: - type  f32:   37 tensors
0.00.289.581 I llama_model_loader: - type q4_K:  108 tensors
0.00.289.582 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.548 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.579 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.470.649 I llm_load_vocab: special tokens cache size = 5
0.00.582.638 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.696 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.697 I llm_load_print_meta: arch             = gemma
0.00.582.698 I llm_load_print_meta: vocab type       = SPM
0.00.582.699 I llm_load_print_meta: n_vocab          = 256000
0.00.582.701 I llm_load_print_meta: n_merges         = 0
0.00.582.702 I llm_load_print_meta: vocab_only       = 0
0.00.582.702 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.703 I llm_load_print_meta: n_embd           = 2048
0.00.582.703 I llm_load_print_meta: n_layer          = 18
0.00.582.766 I llm_load_print_meta: n_head           = 8
0.00.582.774 I llm_load_print_meta: n_head_kv        = 1
0.00.582.774 I llm_load_print_meta: n_rot            = 256
0.00.582.775 I llm_load_print_meta: n_swa            = 0
0.00.582.775 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.781 I llm_load_print_meta: n_gqa            = 8
0.00.582.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.792 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.797 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.803 I llm_load_print_meta: n_ff             = 16384
0.00.582.804 I llm_load_print_meta: n_expert         = 0
0.00.582.808 I llm_load_print_meta: n_expert_used    = 0
0.00.582.808 I llm_load_print_meta: causal attn      = 1
0.00.582.809 I llm_load_print_meta: pooling type     = 0
0.00.582.809 I llm_load_print_meta: rope type        = 2
0.00.582.810 I llm_load_print_meta: rope scaling     = linear
0.00.582.811 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.812 I llm_load_print_meta: freq_scale_train = 1
0.00.582.812 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.816 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.816 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.817 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.817 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.818 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.819 I llm_load_print_meta: model type       = 2B
0.00.582.829 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.582.830 I llm_load_print_meta: model params     = 2.51 B
0.00.582.832 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.582.833 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.834 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.835 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.835 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.836 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.836 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.837 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.844 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.844 I llm_load_print_meta: max token length = 93
0.00.583.013 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.642.448 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.642.456 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.642.457 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.642.458 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.642.458 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.642.459 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.648.025 I llama_new_context_with_model: n_ctx      = 8192
0.00.648.032 I llama_new_context_with_model: n_batch    = 2048
0.00.648.032 I llama_new_context_with_model: n_ubatch   = 512
0.00.648.033 I llama_new_context_with_model: flash_attn = 0
0.00.648.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.648.035 I llama_new_context_with_model: freq_scale = 1
0.00.677.229 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.272 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.383 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.783 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.789 I llama_new_context_with_model: graph nodes  = 601
0.00.678.789 I llama_new_context_with_model: graph splits = 1
0.00.678.805 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.063 I main: llama threadpool init, n_threads = 4
0.01.257.074 I 
0.01.257.180 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.185 I 
0.01.257.349 I sampler seed: 2562993336
0.01.257.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.367 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.257.368 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.368 I 
 squaRELLA, a leading provider of AI-powered workforce optimization solutions, has partnered with leading logistics company UPS to implement its AI-powered workforce optimization platform.

0.12.218.703 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.10 tokens per second)
0.12.218.719 I llama_perf_context_print:        load time =    1254.08 ms
0.12.218.721 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.218.723 I llama_perf_context_print:        eval time =   10880.37 ms /    32 runs   (  340.01 ms per token,     2.94 tokens per second)
0.12.218.724 I llama_perf_context_print:       total time =   10961.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3879 (133c7b46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 201674.88 ms
main:    total time = 201674.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.636 I build: 3879 (133c7b46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.745 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.856 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.858 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.862 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.866 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.868 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.881 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.882 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.656 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.379 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.388 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.390 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.391 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.398 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.407 I llama_model_loader: - type  f32:   37 tensors
0.00.278.412 I llama_model_loader: - type q4_K:  108 tensors
0.00.278.412 I llama_model_loader: - type q6_K:   19 tensors
0.00.433.964 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.455.612 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.456.615 I llm_load_vocab: special tokens cache size = 5
0.00.553.557 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.618 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.619 I llm_load_print_meta: arch             = gemma
0.00.553.620 I llm_load_print_meta: vocab type       = SPM
0.00.553.621 I llm_load_print_meta: n_vocab          = 256000
0.00.553.623 I llm_load_print_meta: n_merges         = 0
0.00.553.624 I llm_load_print_meta: vocab_only       = 0
0.00.553.624 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.624 I llm_load_print_meta: n_embd           = 2048
0.00.553.625 I llm_load_print_meta: n_layer          = 18
0.00.553.691 I llm_load_print_meta: n_head           = 8
0.00.553.698 I llm_load_print_meta: n_head_kv        = 1
0.00.553.698 I llm_load_print_meta: n_rot            = 256
0.00.553.699 I llm_load_print_meta: n_swa            = 0
0.00.553.699 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.705 I llm_load_print_meta: n_gqa            = 8
0.00.553.710 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.716 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.717 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.718 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.719 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.720 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.725 I llm_load_print_meta: n_ff             = 16384
0.00.553.726 I llm_load_print_meta: n_expert         = 0
0.00.553.727 I llm_load_print_meta: n_expert_used    = 0
0.00.553.727 I llm_load_print_meta: causal attn      = 1
0.00.553.727 I llm_load_print_meta: pooling type     = 0
0.00.553.728 I llm_load_print_meta: rope type        = 2
0.00.553.729 I llm_load_print_meta: rope scaling     = linear
0.00.553.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.732 I llm_load_print_meta: freq_scale_train = 1
0.00.553.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.743 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.744 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.744 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.750 I llm_load_print_meta: model type       = 2B
0.00.553.760 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.553.761 I llm_load_print_meta: model params     = 2.51 B
0.00.553.762 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.553.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.778 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.779 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.783 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.784 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.792 I llm_load_print_meta: max token length = 93
0.00.553.974 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.361 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.616.986 I llama_new_context_with_model: n_ctx      = 8192
0.00.616.993 I llama_new_context_with_model: n_batch    = 2048
0.00.616.994 I llama_new_context_with_model: n_ubatch   = 512
0.00.616.995 I llama_new_context_with_model: flash_attn = 0
0.00.616.997 I llama_new_context_with_model: freq_base  = 10000.0
0.00.616.998 I llama_new_context_with_model: freq_scale = 1
0.00.648.345 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.648.393 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.648.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.649.871 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.649.878 I llama_new_context_with_model: graph nodes  = 601
0.00.649.879 I llama_new_context_with_model: graph splits = 1
0.00.649.898 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.229.112 I main: llama threadpool init, n_threads = 4
0.01.229.125 I 
0.01.229.248 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.229.269 I 
0.01.229.452 I sampler seed: 113365436
0.01.229.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.229.470 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.229.472 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.229.473 I 
 seconded and corrupted data, which led to inefficient and unreliable data access.

**Solution:**

**1. Data Discovery and Assessment:**

* Conduct thorough

0.12.158.694 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.64 tokens per second)
0.12.158.699 I llama_perf_context_print:        load time =    1226.15 ms
0.12.158.701 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.158.703 I llama_perf_context_print:        eval time =   10847.79 ms /    32 runs   (  338.99 ms per token,     2.95 tokens per second)
0.12.158.704 I llama_perf_context_print:       total time =   10929.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m8.897s
user	50m33.296s
sys	0m6.397s
