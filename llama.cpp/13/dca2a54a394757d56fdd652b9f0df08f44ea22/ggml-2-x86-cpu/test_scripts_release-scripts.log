+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.808 I main: load the model and apply lora adapter, if any
0.00.021.922 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.970 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.983 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.988 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.989 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.990 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.990 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.994 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.995 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.359 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.674 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.675 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.676 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.683 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.684 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.685 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.688 I llama_model_loader: - type  f32:   37 tensors
0.00.132.691 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.801 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.234.829 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.237.958 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.244.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.941 I llm_load_vocab: special tokens cache size = 5
0.00.266.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.426 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.426 I llm_load_print_meta: arch             = gemma
0.00.266.427 I llm_load_print_meta: vocab type       = SPM
0.00.266.427 I llm_load_print_meta: n_vocab          = 256000
0.00.266.428 I llm_load_print_meta: n_merges         = 0
0.00.266.428 I llm_load_print_meta: vocab_only       = 0
0.00.266.428 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.429 I llm_load_print_meta: n_embd           = 2048
0.00.266.429 I llm_load_print_meta: n_layer          = 18
0.00.266.441 I llm_load_print_meta: n_head           = 8
0.00.266.442 I llm_load_print_meta: n_head_kv        = 1
0.00.266.442 I llm_load_print_meta: n_rot            = 256
0.00.266.443 I llm_load_print_meta: n_swa            = 0
0.00.266.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.445 I llm_load_print_meta: n_gqa            = 8
0.00.266.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.446 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.447 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.449 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.451 I llm_load_print_meta: n_ff             = 16384
0.00.266.451 I llm_load_print_meta: n_expert         = 0
0.00.266.451 I llm_load_print_meta: n_expert_used    = 0
0.00.266.452 I llm_load_print_meta: causal attn      = 1
0.00.266.452 I llm_load_print_meta: pooling type     = 0
0.00.266.452 I llm_load_print_meta: rope type        = 2
0.00.266.453 I llm_load_print_meta: rope scaling     = linear
0.00.266.455 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.455 I llm_load_print_meta: freq_scale_train = 1
0.00.266.456 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.457 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.458 I llm_load_print_meta: model type       = 2B
0.00.266.458 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.459 I llm_load_print_meta: model params     = 2.51 B
0.00.266.460 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.461 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.461 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.462 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.462 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.463 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.464 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.464 I llm_load_print_meta: max token length = 93
0.00.266.487 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.367.946 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.367.954 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.367.955 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.367.956 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.367.956 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.367.957 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.373.082 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.089 I llama_new_context_with_model: n_batch    = 2048
0.00.373.089 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.090 I llama_new_context_with_model: flash_attn = 0
0.00.373.092 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.093 I llama_new_context_with_model: freq_scale = 1
0.00.401.362 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.401.377 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.322 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.402.331 I llama_new_context_with_model: graph nodes  = 601
0.00.402.331 I llama_new_context_with_model: graph splits = 1
0.00.402.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.675 I main: llama threadpool init, n_threads = 4
0.00.492.686 I 
0.00.492.763 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.766 I 
0.00.492.804 I sampler seed: 2856852231
0.00.492.814 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.816 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.492.817 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.817 I 
 increamically.

I am a vast sea of knowledge,
A boundless ocean of words.
I hold within me countless stories,
And endless wisdom beyond

0.02.745.945 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6931.32 tokens per second)
0.02.745.947 I llama_perf_context_print:        load time =     490.84 ms
0.02.745.949 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.951 I llama_perf_context_print:        eval time =    2234.65 ms /    32 runs   (   69.83 ms per token,    14.32 tokens per second)
0.02.745.952 I llama_perf_context_print:       total time =    2253.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.529 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.831 I main: load the model and apply lora adapter, if any
0.00.021.698 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.709 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.715 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.720 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.722 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.729 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.912 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.913 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.916 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.917 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.919 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.919 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.922 I llama_model_loader: - type  f32:   37 tensors
0.00.131.924 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.099 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.616 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.736 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.091 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.805 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.295 I llm_load_vocab: special tokens cache size = 5
0.00.269.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.425 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.425 I llm_load_print_meta: arch             = gemma
0.00.269.426 I llm_load_print_meta: vocab type       = SPM
0.00.269.426 I llm_load_print_meta: n_vocab          = 256000
0.00.269.427 I llm_load_print_meta: n_merges         = 0
0.00.269.427 I llm_load_print_meta: vocab_only       = 0
0.00.269.427 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.428 I llm_load_print_meta: n_embd           = 2048
0.00.269.428 I llm_load_print_meta: n_layer          = 18
0.00.269.440 I llm_load_print_meta: n_head           = 8
0.00.269.441 I llm_load_print_meta: n_head_kv        = 1
0.00.269.442 I llm_load_print_meta: n_rot            = 256
0.00.269.442 I llm_load_print_meta: n_swa            = 0
0.00.269.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.442 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.443 I llm_load_print_meta: n_gqa            = 8
0.00.269.444 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.445 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.446 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.447 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.448 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.448 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.449 I llm_load_print_meta: n_ff             = 16384
0.00.269.449 I llm_load_print_meta: n_expert         = 0
0.00.269.450 I llm_load_print_meta: n_expert_used    = 0
0.00.269.450 I llm_load_print_meta: causal attn      = 1
0.00.269.450 I llm_load_print_meta: pooling type     = 0
0.00.269.451 I llm_load_print_meta: rope type        = 2
0.00.269.451 I llm_load_print_meta: rope scaling     = linear
0.00.269.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.453 I llm_load_print_meta: freq_scale_train = 1
0.00.269.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.455 I llm_load_print_meta: model type       = 2B
0.00.269.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.457 I llm_load_print_meta: model params     = 2.51 B
0.00.269.457 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.458 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.458 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.459 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.459 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.459 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.460 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.460 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.461 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.461 I llm_load_print_meta: max token length = 93
0.00.269.486 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.202 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.369.243 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.250 I llama_new_context_with_model: n_batch    = 2048
0.00.369.250 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.250 I llama_new_context_with_model: flash_attn = 0
0.00.369.252 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.253 I llama_new_context_with_model: freq_scale = 1
0.00.397.513 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.526 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.488 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.398.496 I llama_new_context_with_model: graph nodes  = 601
0.00.398.496 I llama_new_context_with_model: graph splits = 1
0.00.398.498 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.215 I main: llama threadpool init, n_threads = 4
0.00.485.227 I 
0.00.485.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.305 I 
0.00.485.339 I sampler seed: 1660860915
0.00.485.348 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.350 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.485.351 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.351 I 
 increably. [end of text]


0.00.755.522 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8038.59 tokens per second)
0.00.755.525 I llama_perf_context_print:        load time =     483.36 ms
0.00.755.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.755.528 I llama_perf_context_print:        eval time =     267.03 ms /     4 runs   (   66.76 ms per token,    14.98 tokens per second)
0.00.755.529 I llama_perf_context_print:       total time =     270.31 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.819 I main: load the model and apply lora adapter, if any
0.00.021.787 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.842 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.848 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.849 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.853 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.854 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.855 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.855 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.860 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.861 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.861 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.760 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.767 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.767 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.768 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.769 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.770 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.773 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.774 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.775 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.775 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.776 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.780 I llama_model_loader: - type  f32:   37 tensors
0.00.133.783 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.882 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.145 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.242.453 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.246.678 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.256.317 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.958 I llm_load_vocab: special tokens cache size = 5
0.00.278.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.147 I llm_load_print_meta: arch             = gemma
0.00.278.147 I llm_load_print_meta: vocab type       = SPM
0.00.278.148 I llm_load_print_meta: n_vocab          = 256000
0.00.278.148 I llm_load_print_meta: n_merges         = 0
0.00.278.149 I llm_load_print_meta: vocab_only       = 0
0.00.278.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.149 I llm_load_print_meta: n_embd           = 2048
0.00.278.150 I llm_load_print_meta: n_layer          = 18
0.00.278.162 I llm_load_print_meta: n_head           = 8
0.00.278.163 I llm_load_print_meta: n_head_kv        = 1
0.00.278.163 I llm_load_print_meta: n_rot            = 256
0.00.278.164 I llm_load_print_meta: n_swa            = 0
0.00.278.164 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.165 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.166 I llm_load_print_meta: n_gqa            = 8
0.00.278.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.168 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.169 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.170 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.170 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.170 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.171 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.171 I llm_load_print_meta: n_ff             = 16384
0.00.278.172 I llm_load_print_meta: n_expert         = 0
0.00.278.172 I llm_load_print_meta: n_expert_used    = 0
0.00.278.172 I llm_load_print_meta: causal attn      = 1
0.00.278.173 I llm_load_print_meta: pooling type     = 0
0.00.278.173 I llm_load_print_meta: rope type        = 2
0.00.278.174 I llm_load_print_meta: rope scaling     = linear
0.00.278.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.184 I llm_load_print_meta: freq_scale_train = 1
0.00.278.185 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.185 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.186 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.186 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.186 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.187 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.189 I llm_load_print_meta: model type       = 2B
0.00.278.189 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.190 I llm_load_print_meta: model params     = 2.51 B
0.00.278.191 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.202 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.204 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.207 I llm_load_print_meta: max token length = 93
0.00.278.231 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.355.075 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.355.082 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.355.083 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.355.084 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.355.084 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.355.085 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.359.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.360.004 I llama_new_context_with_model: n_batch    = 2048
0.00.360.004 I llama_new_context_with_model: n_ubatch   = 512
0.00.360.005 I llama_new_context_with_model: flash_attn = 0
0.00.360.007 I llama_new_context_with_model: freq_base  = 10000.0
0.00.360.007 I llama_new_context_with_model: freq_scale = 1
0.00.389.245 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.389.261 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.389.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.208 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.216 I llama_new_context_with_model: graph nodes  = 601
0.00.390.217 I llama_new_context_with_model: graph splits = 1
0.00.390.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.850 I main: llama threadpool init, n_threads = 4
0.00.482.864 I 
0.00.482.941 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.944 I 
0.00.482.981 I sampler seed: 2035214325
0.00.482.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.996 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.482.997 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.997 I 
 increasities? [end of text]


0.00.768.997 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7824.73 tokens per second)
0.00.768.999 I llama_perf_context_print:        load time =     481.01 ms
0.00.769.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.769.002 I llama_perf_context_print:        eval time =     283.01 ms /     4 runs   (   70.75 ms per token,    14.13 tokens per second)
0.00.769.002 I llama_perf_context_print:       total time =     286.16 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.544 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.021.694 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.769 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.775 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.780 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.784 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.785 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.786 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.787 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.789 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.789 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.796 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.798 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.799 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.126 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.577 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.439 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.440 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.441 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.442 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.445 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.446 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.447 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.451 I llama_model_loader: - type  f32:   37 tensors
0.00.132.455 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.665 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.957 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.305 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.468 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.252.654 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.237 I llm_load_vocab: special tokens cache size = 5
0.00.274.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.087 I llm_load_print_meta: arch             = gemma
0.00.274.087 I llm_load_print_meta: vocab type       = SPM
0.00.274.088 I llm_load_print_meta: n_vocab          = 256000
0.00.274.088 I llm_load_print_meta: n_merges         = 0
0.00.274.089 I llm_load_print_meta: vocab_only       = 0
0.00.274.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.089 I llm_load_print_meta: n_embd           = 2048
0.00.274.090 I llm_load_print_meta: n_layer          = 18
0.00.274.104 I llm_load_print_meta: n_head           = 8
0.00.274.106 I llm_load_print_meta: n_head_kv        = 1
0.00.274.106 I llm_load_print_meta: n_rot            = 256
0.00.274.107 I llm_load_print_meta: n_swa            = 0
0.00.274.108 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.110 I llm_load_print_meta: n_gqa            = 8
0.00.274.112 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.113 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.115 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.118 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.118 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.119 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.120 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.121 I llm_load_print_meta: n_ff             = 16384
0.00.274.122 I llm_load_print_meta: n_expert         = 0
0.00.274.123 I llm_load_print_meta: n_expert_used    = 0
0.00.274.124 I llm_load_print_meta: causal attn      = 1
0.00.274.124 I llm_load_print_meta: pooling type     = 0
0.00.274.125 I llm_load_print_meta: rope type        = 2
0.00.274.126 I llm_load_print_meta: rope scaling     = linear
0.00.274.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.129 I llm_load_print_meta: freq_scale_train = 1
0.00.274.133 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.133 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.134 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.135 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.135 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.136 I llm_load_print_meta: model type       = 2B
0.00.274.137 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.143 I llm_load_print_meta: model params     = 2.51 B
0.00.274.145 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.145 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.146 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.147 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.149 I llm_load_print_meta: max token length = 93
0.00.274.177 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.344.303 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.344.310 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.349.365 I llama_new_context_with_model: n_ctx      = 8192
0.00.349.371 I llama_new_context_with_model: n_batch    = 2048
0.00.349.371 I llama_new_context_with_model: n_ubatch   = 512
0.00.349.372 I llama_new_context_with_model: flash_attn = 0
0.00.349.374 I llama_new_context_with_model: freq_base  = 10000.0
0.00.349.375 I llama_new_context_with_model: freq_scale = 1
0.00.377.357 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.372 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.473 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.331 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.339 I llama_new_context_with_model: graph nodes  = 601
0.00.378.340 I llama_new_context_with_model: graph splits = 1
0.00.378.342 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.340 I main: llama threadpool init, n_threads = 4
0.00.472.352 I 
0.00.472.441 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.444 I 
0.00.472.489 I sampler seed: 2746624077
0.00.472.498 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.506 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.472.507 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.507 I 
 increasities?

I cannot find the requested information in the provided context. [end of text]


0.01.670.823 I llama_perf_sampler_print:    sampling time =       2.54 ms /    17 runs   (    0.15 ms per token,  6687.65 tokens per second)
0.01.670.826 I llama_perf_context_print:        load time =     470.46 ms
0.01.670.827 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.670.829 I llama_perf_context_print:        eval time =    1189.00 ms /    16 runs   (   74.31 ms per token,    13.46 tokens per second)
0.01.670.829 I llama_perf_context_print:       total time =    1198.49 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.398s
user	0m18.931s
sys	0m9.411s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3916 (13dca2a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31999.01 ms
main:    total time = 31999.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.908 I main: load the model and apply lora adapter, if any
0.00.023.328 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.402 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.418 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.419 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.425 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.426 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.427 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.429 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.430 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.804 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.048 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.049 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.049 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.050 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.051 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.054 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.055 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.056 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.056 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.136.057 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.061 I llama_model_loader: - type  f32:   37 tensors
0.00.136.063 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.064 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.598 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.803 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.251.092 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.254.937 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.262.963 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.573 I llm_load_vocab: special tokens cache size = 5
0.00.284.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.463 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.464 I llm_load_print_meta: arch             = gemma
0.00.284.464 I llm_load_print_meta: vocab type       = SPM
0.00.284.465 I llm_load_print_meta: n_vocab          = 256000
0.00.284.465 I llm_load_print_meta: n_merges         = 0
0.00.284.465 I llm_load_print_meta: vocab_only       = 0
0.00.284.466 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.466 I llm_load_print_meta: n_embd           = 2048
0.00.284.466 I llm_load_print_meta: n_layer          = 18
0.00.284.479 I llm_load_print_meta: n_head           = 8
0.00.284.480 I llm_load_print_meta: n_head_kv        = 1
0.00.284.480 I llm_load_print_meta: n_rot            = 256
0.00.284.480 I llm_load_print_meta: n_swa            = 0
0.00.284.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.481 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.482 I llm_load_print_meta: n_gqa            = 8
0.00.284.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.485 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.486 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.486 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.487 I llm_load_print_meta: n_ff             = 16384
0.00.284.488 I llm_load_print_meta: n_expert         = 0
0.00.284.488 I llm_load_print_meta: n_expert_used    = 0
0.00.284.488 I llm_load_print_meta: causal attn      = 1
0.00.284.489 I llm_load_print_meta: pooling type     = 0
0.00.284.489 I llm_load_print_meta: rope type        = 2
0.00.284.490 I llm_load_print_meta: rope scaling     = linear
0.00.284.491 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.491 I llm_load_print_meta: freq_scale_train = 1
0.00.284.492 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.492 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.492 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.492 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.493 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.494 I llm_load_print_meta: model type       = 2B
0.00.284.494 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.495 I llm_load_print_meta: model params     = 2.51 B
0.00.284.496 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.497 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.497 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.498 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.499 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.500 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.500 I llm_load_print_meta: max token length = 93
0.00.284.521 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.653 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.346.660 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.346.661 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.346.661 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.346.662 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.346.662 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.351.749 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.755 I llama_new_context_with_model: n_batch    = 2048
0.00.351.756 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.756 I llama_new_context_with_model: flash_attn = 0
0.00.351.759 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.759 I llama_new_context_with_model: freq_scale = 1
0.00.379.717 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.379.731 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.379.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.728 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.736 I llama_new_context_with_model: graph nodes  = 601
0.00.380.737 I llama_new_context_with_model: graph splits = 1
0.00.380.739 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.791 I main: llama threadpool init, n_threads = 4
0.00.475.804 I 
0.00.475.884 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.887 I 
0.00.475.926 I sampler seed: 4164997198
0.00.475.934 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.941 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.475.942 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.942 I 
 seconally in my quest for knowledge. 

I am particularly interested in the concept of "metacognition."

**Metacognition** is the ability to reflect

0.02.093.130 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6379.28 tokens per second)
0.02.093.132 I llama_perf_context_print:        load time =     473.86 ms
0.02.093.133 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.093.135 I llama_perf_context_print:        eval time =    1599.20 ms /    32 runs   (   49.98 ms per token,    20.01 tokens per second)
0.02.093.136 I llama_perf_context_print:       total time =    1617.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3916 (13dca2a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32064.99 ms
main:    total time = 32064.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.584 I build: 3916 (13dca2a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.175 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.190 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.206 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.207 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.213 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.877 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.882 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.885 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.888 I llama_model_loader: - type  f32:   37 tensors
0.00.132.891 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.891 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.634 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.206 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.247.442 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.251.086 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.258.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.679 I llm_load_vocab: special tokens cache size = 5
0.00.279.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.761 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.761 I llm_load_print_meta: arch             = gemma
0.00.279.762 I llm_load_print_meta: vocab type       = SPM
0.00.279.763 I llm_load_print_meta: n_vocab          = 256000
0.00.279.763 I llm_load_print_meta: n_merges         = 0
0.00.279.763 I llm_load_print_meta: vocab_only       = 0
0.00.279.764 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.764 I llm_load_print_meta: n_embd           = 2048
0.00.279.764 I llm_load_print_meta: n_layer          = 18
0.00.279.775 I llm_load_print_meta: n_head           = 8
0.00.279.776 I llm_load_print_meta: n_head_kv        = 1
0.00.279.776 I llm_load_print_meta: n_rot            = 256
0.00.279.777 I llm_load_print_meta: n_swa            = 0
0.00.279.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.778 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.779 I llm_load_print_meta: n_gqa            = 8
0.00.279.780 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.782 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.784 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.786 I llm_load_print_meta: n_ff             = 16384
0.00.279.786 I llm_load_print_meta: n_expert         = 0
0.00.279.787 I llm_load_print_meta: n_expert_used    = 0
0.00.279.787 I llm_load_print_meta: causal attn      = 1
0.00.279.788 I llm_load_print_meta: pooling type     = 0
0.00.279.788 I llm_load_print_meta: rope type        = 2
0.00.279.789 I llm_load_print_meta: rope scaling     = linear
0.00.279.790 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.791 I llm_load_print_meta: freq_scale_train = 1
0.00.279.792 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.793 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.793 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.793 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.793 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.794 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.794 I llm_load_print_meta: model type       = 2B
0.00.279.795 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.796 I llm_load_print_meta: model params     = 2.51 B
0.00.279.796 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.797 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.799 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.800 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.802 I llm_load_print_meta: max token length = 93
0.00.279.820 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.339.904 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.344.993 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.999 I llama_new_context_with_model: n_batch    = 2048
0.00.345.000 I llama_new_context_with_model: n_ubatch   = 512
0.00.345.000 I llama_new_context_with_model: flash_attn = 0
0.00.345.003 I llama_new_context_with_model: freq_base  = 10000.0
0.00.345.004 I llama_new_context_with_model: freq_scale = 1
0.00.375.696 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.375.713 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.375.809 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.687 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.376.694 I llama_new_context_with_model: graph nodes  = 601
0.00.376.694 I llama_new_context_with_model: graph splits = 1
0.00.376.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.136 I main: llama threadpool init, n_threads = 4
0.00.465.147 I 
0.00.465.222 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.226 I 
0.00.465.261 I sampler seed: 1381741022
0.00.465.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.272 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.465.273 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.273 I 
 increasities, and other forms of pseudoscience are dangerous because they mislead people about the nature of reality and the meaning of life. These ideas can have devastating consequences

0.02.061.301 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6289.31 tokens per second)
0.02.061.303 I llama_perf_context_print:        load time =     463.25 ms
0.02.061.304 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.061.306 I llama_perf_context_print:        eval time =    1577.53 ms /    32 runs   (   49.30 ms per token,    20.28 tokens per second)
0.02.061.306 I llama_perf_context_print:       total time =    1596.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.995s
user	8m14.949s
sys	0m6.949s
