+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.632 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.960 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.171 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.271 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.272 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.281 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.282 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.283 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.284 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.285 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.296 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.331 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.273.152 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.291.915 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.291.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.291.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.291.926 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.291.927 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.291.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.291.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.291.933 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.291.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.291.935 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.291.936 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.291.937 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.291.946 I llama_model_loader: - type  f32:   37 tensors
0.00.291.950 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.901 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.765 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.475.805 I llm_load_vocab: special tokens cache size = 5
0.00.589.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.446 I llm_load_print_meta: arch             = gemma
0.00.589.447 I llm_load_print_meta: vocab type       = SPM
0.00.589.448 I llm_load_print_meta: n_vocab          = 256000
0.00.589.450 I llm_load_print_meta: n_merges         = 0
0.00.589.450 I llm_load_print_meta: vocab_only       = 0
0.00.589.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.451 I llm_load_print_meta: n_embd           = 2048
0.00.589.451 I llm_load_print_meta: n_layer          = 18
0.00.589.516 I llm_load_print_meta: n_head           = 8
0.00.589.522 I llm_load_print_meta: n_head_kv        = 1
0.00.589.523 I llm_load_print_meta: n_rot            = 256
0.00.589.523 I llm_load_print_meta: n_swa            = 0
0.00.589.524 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.524 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.528 I llm_load_print_meta: n_gqa            = 8
0.00.589.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.540 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.541 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.542 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.543 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.548 I llm_load_print_meta: n_ff             = 16384
0.00.589.548 I llm_load_print_meta: n_expert         = 0
0.00.589.548 I llm_load_print_meta: n_expert_used    = 0
0.00.589.550 I llm_load_print_meta: causal attn      = 1
0.00.589.550 I llm_load_print_meta: pooling type     = 0
0.00.589.551 I llm_load_print_meta: rope type        = 2
0.00.589.563 I llm_load_print_meta: rope scaling     = linear
0.00.589.569 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.569 I llm_load_print_meta: freq_scale_train = 1
0.00.589.570 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.571 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.572 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.572 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.572 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.573 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.573 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.574 I llm_load_print_meta: model type       = 2B
0.00.589.583 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.584 I llm_load_print_meta: model params     = 2.51 B
0.00.589.585 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.587 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.591 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.592 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.601 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.602 I llm_load_print_meta: max token length = 93
0.00.589.770 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.193 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.689.204 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.689.205 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.689.206 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.689.206 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.689.207 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.694.841 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.848 I llama_new_context_with_model: n_batch    = 2048
0.00.694.848 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.849 I llama_new_context_with_model: flash_attn = 0
0.00.694.851 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.852 I llama_new_context_with_model: freq_scale = 1
0.00.723.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.813 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.725.319 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.725.325 I llama_new_context_with_model: graph nodes  = 601
0.00.725.326 I llama_new_context_with_model: graph splits = 1
0.00.725.342 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.680 I main: llama threadpool init, n_threads = 4
0.01.337.692 I 
0.01.337.794 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.795 I 
0.01.337.954 I sampler seed: 1579602586
0.01.337.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.972 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.337.972 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.973 I 
 increasively.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.09.388.569 I llama_perf_sampler_print:    sampling time =      29.29 ms /    20 runs   (    1.46 ms per token,   682.87 tokens per second)
0.09.388.572 I llama_perf_context_print:        load time =    1334.71 ms
0.09.388.573 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.388.587 I llama_perf_context_print:        eval time =    8001.91 ms /    19 runs   (  421.15 ms per token,     2.37 tokens per second)
0.09.388.588 I llama_perf_context_print:       total time =    8050.90 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.668 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.127 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.241 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.245 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.262 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.263 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.264 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.416 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.831 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.536 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.544 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.546 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.554 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.555 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.557 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.287.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.566 I llama_model_loader: - type  f32:   37 tensors
0.00.287.571 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.880 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.747 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.470.756 I llm_load_vocab: special tokens cache size = 5
0.00.580.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.021 I llm_load_print_meta: arch             = gemma
0.00.581.022 I llm_load_print_meta: vocab type       = SPM
0.00.581.023 I llm_load_print_meta: n_vocab          = 256000
0.00.581.025 I llm_load_print_meta: n_merges         = 0
0.00.581.025 I llm_load_print_meta: vocab_only       = 0
0.00.581.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.026 I llm_load_print_meta: n_embd           = 2048
0.00.581.026 I llm_load_print_meta: n_layer          = 18
0.00.581.092 I llm_load_print_meta: n_head           = 8
0.00.581.099 I llm_load_print_meta: n_head_kv        = 1
0.00.581.100 I llm_load_print_meta: n_rot            = 256
0.00.581.100 I llm_load_print_meta: n_swa            = 0
0.00.581.101 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.101 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.106 I llm_load_print_meta: n_gqa            = 8
0.00.581.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.115 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.117 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.119 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.120 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.151 I llm_load_print_meta: n_ff             = 16384
0.00.581.152 I llm_load_print_meta: n_expert         = 0
0.00.581.152 I llm_load_print_meta: n_expert_used    = 0
0.00.581.153 I llm_load_print_meta: causal attn      = 1
0.00.581.153 I llm_load_print_meta: pooling type     = 0
0.00.581.153 I llm_load_print_meta: rope type        = 2
0.00.581.154 I llm_load_print_meta: rope scaling     = linear
0.00.581.155 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.156 I llm_load_print_meta: freq_scale_train = 1
0.00.581.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.157 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.158 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.159 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.159 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.160 I llm_load_print_meta: model type       = 2B
0.00.581.170 I llm_load_print_meta: model ftype      = Q8_0
0.00.581.171 I llm_load_print_meta: model params     = 2.51 B
0.00.581.172 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.581.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.174 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.175 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.187 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.190 I llm_load_print_meta: max token length = 93
0.00.581.358 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.118 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.681.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.790 I llama_new_context_with_model: n_batch    = 2048
0.00.681.790 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.791 I llama_new_context_with_model: flash_attn = 0
0.00.681.794 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.795 I llama_new_context_with_model: freq_scale = 1
0.00.711.222 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.263 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.377 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.712.758 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.764 I llama_new_context_with_model: graph nodes  = 601
0.00.712.765 I llama_new_context_with_model: graph splits = 1
0.00.712.781 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.642 I main: llama threadpool init, n_threads = 4
0.01.323.653 I 
0.01.323.755 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.759 I 
0.01.323.928 I sampler seed: 609511930
0.01.323.941 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.323.947 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.323.948 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.323.948 I 
 increadibly. I was wondering if you could help me understand what is meant by "discernment"?

**Definition:**

* The ability to make decisions

0.14.882.716 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.29 tokens per second)
0.14.882.719 I llama_perf_context_print:        load time =    1320.64 ms
0.14.882.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.744 I llama_perf_context_print:        eval time =   13476.89 ms /    32 runs   (  421.15 ms per token,     2.37 tokens per second)
0.14.882.745 I llama_perf_context_print:       total time =   13559.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.643 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.725 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.946 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.041 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.055 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.060 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.065 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.307 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.117 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.118 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.119 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.120 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.127 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.127 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.129 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.137 I llama_model_loader: - type  f32:   37 tensors
0.00.272.142 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.420 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.134 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.473.266 I llm_load_vocab: special tokens cache size = 5
0.00.586.751 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.821 I llm_load_print_meta: arch             = gemma
0.00.586.822 I llm_load_print_meta: vocab type       = SPM
0.00.586.823 I llm_load_print_meta: n_vocab          = 256000
0.00.586.826 I llm_load_print_meta: n_merges         = 0
0.00.586.827 I llm_load_print_meta: vocab_only       = 0
0.00.586.828 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.829 I llm_load_print_meta: n_embd           = 2048
0.00.586.830 I llm_load_print_meta: n_layer          = 18
0.00.586.896 I llm_load_print_meta: n_head           = 8
0.00.586.906 I llm_load_print_meta: n_head_kv        = 1
0.00.586.907 I llm_load_print_meta: n_rot            = 256
0.00.586.907 I llm_load_print_meta: n_swa            = 0
0.00.586.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.908 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.914 I llm_load_print_meta: n_gqa            = 8
0.00.586.922 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.931 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.937 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.939 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.939 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.947 I llm_load_print_meta: n_ff             = 16384
0.00.586.949 I llm_load_print_meta: n_expert         = 0
0.00.586.949 I llm_load_print_meta: n_expert_used    = 0
0.00.586.950 I llm_load_print_meta: causal attn      = 1
0.00.586.950 I llm_load_print_meta: pooling type     = 0
0.00.586.951 I llm_load_print_meta: rope type        = 2
0.00.586.952 I llm_load_print_meta: rope scaling     = linear
0.00.586.954 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.955 I llm_load_print_meta: freq_scale_train = 1
0.00.586.955 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.956 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.957 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.957 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.961 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.962 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.962 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.963 I llm_load_print_meta: model type       = 2B
0.00.586.976 I llm_load_print_meta: model ftype      = Q8_0
0.00.586.980 I llm_load_print_meta: model params     = 2.51 B
0.00.586.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.586.982 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.986 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.987 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.989 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.996 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.998 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.000 I llm_load_print_meta: max token length = 93
0.00.587.177 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.702 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.664.713 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.664.714 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.664.715 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.664.715 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.664.716 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.670.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.643 I llama_new_context_with_model: n_batch    = 2048
0.00.670.644 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.644 I llama_new_context_with_model: flash_attn = 0
0.00.670.648 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.649 I llama_new_context_with_model: freq_scale = 1
0.00.700.963 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.005 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.117 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.484 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.491 I llama_new_context_with_model: graph nodes  = 601
0.00.702.492 I llama_new_context_with_model: graph splits = 1
0.00.702.509 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.045 I main: llama threadpool init, n_threads = 4
0.01.315.057 I 
0.01.315.181 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.185 I 
0.01.315.355 I sampler seed: 1470120147
0.01.315.366 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.372 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.389 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.393 I 
 increasities to the following questions.

A. What is the relationship between the mean, median, and mode of a dataset?

B. How does the

0.14.858.607 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.62 tokens per second)
0.14.858.631 I llama_perf_context_print:        load time =    1312.02 ms
0.14.858.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.858.635 I llama_perf_context_print:        eval time =   13461.78 ms /    32 runs   (  420.68 ms per token,     2.38 tokens per second)
0.14.858.636 I llama_perf_context_print:       total time =   13543.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.627 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.702 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.915 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.012 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.030 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.034 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.035 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.036 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.038 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.045 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.047 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.048 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.647 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.925 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.630 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.632 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.636 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.639 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.640 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.641 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.650 I llama_model_loader: - type  f32:   37 tensors
0.00.270.653 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.140 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.467.253 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.468.299 I llm_load_vocab: special tokens cache size = 5
0.00.564.037 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.098 I llm_load_print_meta: arch             = gemma
0.00.564.099 I llm_load_print_meta: vocab type       = SPM
0.00.564.099 I llm_load_print_meta: n_vocab          = 256000
0.00.564.102 I llm_load_print_meta: n_merges         = 0
0.00.564.102 I llm_load_print_meta: vocab_only       = 0
0.00.564.103 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.103 I llm_load_print_meta: n_embd           = 2048
0.00.564.104 I llm_load_print_meta: n_layer          = 18
0.00.564.170 I llm_load_print_meta: n_head           = 8
0.00.564.179 I llm_load_print_meta: n_head_kv        = 1
0.00.564.180 I llm_load_print_meta: n_rot            = 256
0.00.564.180 I llm_load_print_meta: n_swa            = 0
0.00.564.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.182 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.187 I llm_load_print_meta: n_gqa            = 8
0.00.564.192 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.201 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.210 I llm_load_print_meta: n_ff             = 16384
0.00.564.211 I llm_load_print_meta: n_expert         = 0
0.00.564.212 I llm_load_print_meta: n_expert_used    = 0
0.00.564.212 I llm_load_print_meta: causal attn      = 1
0.00.564.213 I llm_load_print_meta: pooling type     = 0
0.00.564.213 I llm_load_print_meta: rope type        = 2
0.00.564.214 I llm_load_print_meta: rope scaling     = linear
0.00.564.216 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.217 I llm_load_print_meta: freq_scale_train = 1
0.00.564.217 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.218 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.218 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.219 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.220 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.221 I llm_load_print_meta: model type       = 2B
0.00.564.231 I llm_load_print_meta: model ftype      = Q8_0
0.00.564.232 I llm_load_print_meta: model params     = 2.51 B
0.00.564.233 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.564.234 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.235 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.236 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.236 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.236 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.237 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.238 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.564.245 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.564.245 I llm_load_print_meta: max token length = 93
0.00.564.409 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.476 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.635.486 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.641.113 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.120 I llama_new_context_with_model: n_batch    = 2048
0.00.641.121 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.121 I llama_new_context_with_model: flash_attn = 0
0.00.641.123 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.124 I llama_new_context_with_model: freq_scale = 1
0.00.670.218 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.670.259 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.373 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.738 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.744 I llama_new_context_with_model: graph nodes  = 601
0.00.671.745 I llama_new_context_with_model: graph splits = 1
0.00.671.762 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.945 I main: llama threadpool init, n_threads = 4
0.01.283.958 I 
0.01.284.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.067 I 
0.01.284.229 I sampler seed: 3512879794
0.01.284.240 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.247 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.248 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.249 I 
 increasities

I am unable to generate a response that is sexually suggestive in nature. My purpose is to assist with tasks and questions that are within the boundaries of

0.14.801.843 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.29 tokens per second)
0.14.801.847 I llama_perf_context_print:        load time =    1280.99 ms
0.14.801.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.801.850 I llama_perf_context_print:        eval time =   13436.31 ms /    32 runs   (  419.88 ms per token,     2.38 tokens per second)
0.14.801.851 I llama_perf_context_print:       total time =   13517.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.966s
user	3m27.259s
sys	0m9.534s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3884 (71967c2a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199906.57 ms
main:    total time = 199906.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.654 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.537 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.750 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.855 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.857 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.862 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.866 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.868 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.878 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.880 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.881 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.269.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.288.164 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.288.171 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.288.172 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.288.173 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.288.174 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.288.176 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.288.177 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.288.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.288.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.288.183 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.288.184 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.288.185 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.288.193 I llama_model_loader: - type  f32:   37 tensors
0.00.288.196 I llama_model_loader: - type q4_K:  108 tensors
0.00.288.197 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.747 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.494 I llm_load_vocab: special tokens cache size = 5
0.00.591.796 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.853 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.854 I llm_load_print_meta: arch             = gemma
0.00.591.855 I llm_load_print_meta: vocab type       = SPM
0.00.591.856 I llm_load_print_meta: n_vocab          = 256000
0.00.591.858 I llm_load_print_meta: n_merges         = 0
0.00.591.858 I llm_load_print_meta: vocab_only       = 0
0.00.591.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.859 I llm_load_print_meta: n_embd           = 2048
0.00.591.859 I llm_load_print_meta: n_layer          = 18
0.00.591.923 I llm_load_print_meta: n_head           = 8
0.00.591.930 I llm_load_print_meta: n_head_kv        = 1
0.00.591.931 I llm_load_print_meta: n_rot            = 256
0.00.591.931 I llm_load_print_meta: n_swa            = 0
0.00.591.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.936 I llm_load_print_meta: n_gqa            = 8
0.00.591.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.948 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.950 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.950 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.951 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.956 I llm_load_print_meta: n_ff             = 16384
0.00.591.956 I llm_load_print_meta: n_expert         = 0
0.00.591.957 I llm_load_print_meta: n_expert_used    = 0
0.00.591.957 I llm_load_print_meta: causal attn      = 1
0.00.591.957 I llm_load_print_meta: pooling type     = 0
0.00.591.957 I llm_load_print_meta: rope type        = 2
0.00.591.958 I llm_load_print_meta: rope scaling     = linear
0.00.591.960 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.961 I llm_load_print_meta: freq_scale_train = 1
0.00.591.961 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.962 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.965 I llm_load_print_meta: model type       = 2B
0.00.591.974 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.974 I llm_load_print_meta: model params     = 2.51 B
0.00.591.975 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.987 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.995 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.002 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.003 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.004 I llm_load_print_meta: max token length = 93
0.00.592.169 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.189 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.651.200 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.651.201 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.651.201 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.651.202 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.651.202 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.656.697 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.704 I llama_new_context_with_model: n_batch    = 2048
0.00.656.705 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.705 I llama_new_context_with_model: flash_attn = 0
0.00.656.708 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.709 I llama_new_context_with_model: freq_scale = 1
0.00.686.566 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.611 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.688.186 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.688.192 I llama_new_context_with_model: graph nodes  = 601
0.00.688.192 I llama_new_context_with_model: graph splits = 1
0.00.688.209 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.435 I main: llama threadpool init, n_threads = 4
0.01.269.449 I 
0.01.269.564 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.567 I 
0.01.269.734 I sampler seed: 3259692489
0.01.269.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.752 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.755 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.269.756 I 
 maneupher.

**Answer:**

I am unable to provide an answer as the provided context does not contain any information regarding a maneupher. [end of text]


0.11.525.403 I llama_perf_sampler_print:    sampling time =      46.24 ms /    31 runs   (    1.49 ms per token,   670.34 tokens per second)
0.11.525.406 I llama_perf_context_print:        load time =    1266.45 ms
0.11.525.407 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.525.409 I llama_perf_context_print:        eval time =   10178.95 ms /    30 runs   (  339.30 ms per token,     2.95 tokens per second)
0.11.525.423 I llama_perf_context_print:       total time =   10255.98 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3884 (71967c2a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200763.01 ms
main:    total time = 200763.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.733 I build: 3884 (71967c2a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.933 I main: llama backend init
0.00.002.870 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.850 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.947 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.961 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.967 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.972 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.976 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.986 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.997 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.713 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.717 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.719 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.745 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.756 I llama_model_loader: - type  f32:   37 tensors
0.00.270.760 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.761 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.835 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.337 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.356 I llm_load_vocab: special tokens cache size = 5
0.00.584.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.584.384 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.584.385 I llm_load_print_meta: arch             = gemma
0.00.584.386 I llm_load_print_meta: vocab type       = SPM
0.00.584.387 I llm_load_print_meta: n_vocab          = 256000
0.00.584.389 I llm_load_print_meta: n_merges         = 0
0.00.584.390 I llm_load_print_meta: vocab_only       = 0
0.00.584.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.584.390 I llm_load_print_meta: n_embd           = 2048
0.00.584.391 I llm_load_print_meta: n_layer          = 18
0.00.584.456 I llm_load_print_meta: n_head           = 8
0.00.584.463 I llm_load_print_meta: n_head_kv        = 1
0.00.584.464 I llm_load_print_meta: n_rot            = 256
0.00.584.464 I llm_load_print_meta: n_swa            = 0
0.00.584.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.584.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.584.470 I llm_load_print_meta: n_gqa            = 8
0.00.584.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.584.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.584.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.584.482 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.584.482 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.584.483 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.584.483 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.584.488 I llm_load_print_meta: n_ff             = 16384
0.00.584.488 I llm_load_print_meta: n_expert         = 0
0.00.584.489 I llm_load_print_meta: n_expert_used    = 0
0.00.584.489 I llm_load_print_meta: causal attn      = 1
0.00.584.489 I llm_load_print_meta: pooling type     = 0
0.00.584.490 I llm_load_print_meta: rope type        = 2
0.00.584.490 I llm_load_print_meta: rope scaling     = linear
0.00.584.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.584.492 I llm_load_print_meta: freq_scale_train = 1
0.00.584.493 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.584.493 I llm_load_print_meta: rope_finetuned   = unknown
0.00.584.493 I llm_load_print_meta: ssm_d_conv       = 0
0.00.584.494 I llm_load_print_meta: ssm_d_inner      = 0
0.00.584.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.584.507 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.584.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.584.508 I llm_load_print_meta: model type       = 2B
0.00.584.518 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.584.519 I llm_load_print_meta: model params     = 2.51 B
0.00.584.520 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.584.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.584.522 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.584.523 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.584.523 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.584.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.584.542 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.584.543 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.584.557 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.584.559 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.584.560 I llm_load_print_meta: max token length = 93
0.00.584.728 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.818 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.647.337 I llama_new_context_with_model: n_ctx      = 8192
0.00.647.343 I llama_new_context_with_model: n_batch    = 2048
0.00.647.344 I llama_new_context_with_model: n_ubatch   = 512
0.00.647.345 I llama_new_context_with_model: flash_attn = 0
0.00.647.349 I llama_new_context_with_model: freq_base  = 10000.0
0.00.647.349 I llama_new_context_with_model: freq_scale = 1
0.00.677.740 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.785 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.899 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.679.266 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.273 I llama_new_context_with_model: graph nodes  = 601
0.00.679.273 I llama_new_context_with_model: graph splits = 1
0.00.679.289 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.069 I main: llama threadpool init, n_threads = 4
0.01.257.081 I 
0.01.257.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.194 I 
0.01.257.361 I sampler seed: 2673377327
0.01.257.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.378 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.257.379 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.379 I 
 increasities in the story by highlighting the irony and unintended consequences of these actions.

**Irony and Unintended Consequences in "The Little Prince"**



0.12.199.203 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.20 tokens per second)
0.12.199.205 I llama_perf_context_print:        load time =    1254.02 ms
0.12.199.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.199.208 I llama_perf_context_print:        eval time =   10859.82 ms /    32 runs   (  339.37 ms per token,     2.95 tokens per second)
0.12.199.209 I llama_perf_context_print:       total time =   10942.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.362s
user	50m24.203s
sys	0m6.390s
