+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.491 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.523 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.524 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.526 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.526 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.531 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.531 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.211 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.237 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.243 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.244 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.245 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.253 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.254 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.255 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.257 I llama_model_loader: - type  f32:   37 tensors
0.00.131.258 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.019 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.171 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.623 I llm_load_vocab: special tokens cache size = 5
0.00.262.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.306 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.306 I llm_load_print_meta: arch             = gemma
0.00.262.307 I llm_load_print_meta: vocab type       = SPM
0.00.262.307 I llm_load_print_meta: n_vocab          = 256000
0.00.262.308 I llm_load_print_meta: n_merges         = 0
0.00.262.308 I llm_load_print_meta: vocab_only       = 0
0.00.262.308 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.309 I llm_load_print_meta: n_embd           = 2048
0.00.262.309 I llm_load_print_meta: n_layer          = 18
0.00.262.319 I llm_load_print_meta: n_head           = 8
0.00.262.320 I llm_load_print_meta: n_head_kv        = 1
0.00.262.321 I llm_load_print_meta: n_rot            = 256
0.00.262.321 I llm_load_print_meta: n_swa            = 0
0.00.262.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.322 I llm_load_print_meta: n_gqa            = 8
0.00.262.323 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.325 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.326 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.327 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.327 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.328 I llm_load_print_meta: n_ff             = 16384
0.00.262.328 I llm_load_print_meta: n_expert         = 0
0.00.262.329 I llm_load_print_meta: n_expert_used    = 0
0.00.262.329 I llm_load_print_meta: causal attn      = 1
0.00.262.329 I llm_load_print_meta: pooling type     = 0
0.00.262.329 I llm_load_print_meta: rope type        = 2
0.00.262.330 I llm_load_print_meta: rope scaling     = linear
0.00.262.331 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.332 I llm_load_print_meta: freq_scale_train = 1
0.00.262.332 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.332 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.333 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.333 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.334 I llm_load_print_meta: model type       = 2B
0.00.262.335 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.336 I llm_load_print_meta: model params     = 2.51 B
0.00.262.337 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.337 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.338 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.339 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.339 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.340 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.340 I llm_load_print_meta: max token length = 93
0.00.364.099 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.105 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.106 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.106 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.107 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.108 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.391 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.398 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.398 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.398 I llama_new_context_with_model: n_batch       = 2048
0.00.369.399 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.400 I llama_new_context_with_model: flash_attn    = 0
0.00.369.402 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.403 I llama_new_context_with_model: freq_scale    = 1
0.00.369.404 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.422 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.383.457 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.469 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.857 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.862 I llama_new_context_with_model: graph nodes  = 601
0.00.384.862 I llama_new_context_with_model: graph splits = 1
0.00.384.864 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.865 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.100 I main: llama threadpool init, n_threads = 4
0.00.472.117 I 
0.00.472.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.198 I 
0.00.472.245 I sampler seed: 2358177573
0.00.472.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.277 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.277 I 
 increasively:

a. The Earth's atmosphere is composed of nitrogen and oxygen gases.
b. Plants absorb carbon dioxide from the atmosphere.
c

0.02.708.602 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7138.22 tokens per second)
0.02.708.604 I llama_perf_context_print:        load time =     471.32 ms
0.02.708.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.606 I llama_perf_context_print:        eval time =    2218.50 ms /    32 runs   (   69.33 ms per token,    14.42 tokens per second)
0.02.708.607 I llama_perf_context_print:       total time =    2236.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.539 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.020.999 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.013 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.023 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.030 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.031 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.031 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.033 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.033 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.040 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.037 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.041 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.042 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.045 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.046 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.048 I llama_model_loader: - type  f32:   37 tensors
0.00.130.049 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.794 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.649 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.186 I llm_load_vocab: special tokens cache size = 5
0.00.263.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.915 I llm_load_print_meta: arch             = gemma
0.00.263.916 I llm_load_print_meta: vocab type       = SPM
0.00.263.916 I llm_load_print_meta: n_vocab          = 256000
0.00.263.917 I llm_load_print_meta: n_merges         = 0
0.00.263.917 I llm_load_print_meta: vocab_only       = 0
0.00.263.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.918 I llm_load_print_meta: n_embd           = 2048
0.00.263.918 I llm_load_print_meta: n_layer          = 18
0.00.263.930 I llm_load_print_meta: n_head           = 8
0.00.263.931 I llm_load_print_meta: n_head_kv        = 1
0.00.263.931 I llm_load_print_meta: n_rot            = 256
0.00.263.932 I llm_load_print_meta: n_swa            = 0
0.00.263.932 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.933 I llm_load_print_meta: n_gqa            = 8
0.00.263.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.935 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.936 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.937 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.938 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.938 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.939 I llm_load_print_meta: n_ff             = 16384
0.00.263.939 I llm_load_print_meta: n_expert         = 0
0.00.263.940 I llm_load_print_meta: n_expert_used    = 0
0.00.263.940 I llm_load_print_meta: causal attn      = 1
0.00.263.940 I llm_load_print_meta: pooling type     = 0
0.00.263.941 I llm_load_print_meta: rope type        = 2
0.00.263.941 I llm_load_print_meta: rope scaling     = linear
0.00.263.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.943 I llm_load_print_meta: freq_scale_train = 1
0.00.263.943 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.944 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.944 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.945 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.945 I llm_load_print_meta: model type       = 2B
0.00.263.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.947 I llm_load_print_meta: model params     = 2.51 B
0.00.263.947 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.948 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.949 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.950 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.951 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.951 I llm_load_print_meta: max token length = 93
0.00.359.407 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.750 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.757 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.757 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.758 I llama_new_context_with_model: n_batch       = 2048
0.00.364.758 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.759 I llama_new_context_with_model: flash_attn    = 0
0.00.364.761 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.762 I llama_new_context_with_model: freq_scale    = 1
0.00.364.763 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.783 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.379.385 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.399 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.745 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.752 I llama_new_context_with_model: graph nodes  = 601
0.00.380.752 I llama_new_context_with_model: graph splits = 1
0.00.380.754 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.755 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.375 I main: llama threadpool init, n_threads = 4
0.00.462.390 I 
0.00.462.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.478 I 
0.00.462.532 I sampler seed: 8515381
0.00.462.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.554 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.558 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.559 I 
 increably. [end of text]


0.00.737.780 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7911.39 tokens per second)
0.00.737.783 I llama_perf_context_print:        load time =     461.58 ms
0.00.737.784 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.737.785 I llama_perf_context_print:        eval time =     271.90 ms /     4 runs   (   67.97 ms per token,    14.71 tokens per second)
0.00.737.785 I llama_perf_context_print:       total time =     275.41 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.020.990 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.999 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.010 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.026 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.027 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.028 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.029 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.499 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.889 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.899 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.902 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.902 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.903 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.904 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.904 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.908 I llama_model_loader: - type  f32:   37 tensors
0.00.130.909 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.567 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.067 I llm_load_vocab: special tokens cache size = 5
0.00.266.675 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.690 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.691 I llm_load_print_meta: arch             = gemma
0.00.266.691 I llm_load_print_meta: vocab type       = SPM
0.00.266.692 I llm_load_print_meta: n_vocab          = 256000
0.00.266.692 I llm_load_print_meta: n_merges         = 0
0.00.266.692 I llm_load_print_meta: vocab_only       = 0
0.00.266.693 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.693 I llm_load_print_meta: n_embd           = 2048
0.00.266.693 I llm_load_print_meta: n_layer          = 18
0.00.266.704 I llm_load_print_meta: n_head           = 8
0.00.266.705 I llm_load_print_meta: n_head_kv        = 1
0.00.266.706 I llm_load_print_meta: n_rot            = 256
0.00.266.706 I llm_load_print_meta: n_swa            = 0
0.00.266.706 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.706 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.707 I llm_load_print_meta: n_gqa            = 8
0.00.266.708 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.709 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.710 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.712 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.712 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.712 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.713 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.714 I llm_load_print_meta: n_ff             = 16384
0.00.266.714 I llm_load_print_meta: n_expert         = 0
0.00.266.714 I llm_load_print_meta: n_expert_used    = 0
0.00.266.715 I llm_load_print_meta: causal attn      = 1
0.00.266.715 I llm_load_print_meta: pooling type     = 0
0.00.266.715 I llm_load_print_meta: rope type        = 2
0.00.266.715 I llm_load_print_meta: rope scaling     = linear
0.00.266.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.717 I llm_load_print_meta: freq_scale_train = 1
0.00.266.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.718 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.718 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.719 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.719 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.719 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.719 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.720 I llm_load_print_meta: model type       = 2B
0.00.266.721 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.722 I llm_load_print_meta: model params     = 2.51 B
0.00.266.723 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.723 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.724 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.724 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.724 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.725 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.725 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.726 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.726 I llm_load_print_meta: max token length = 93
0.00.345.021 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.026 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.027 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.027 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.028 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.029 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.218 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.224 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.225 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.225 I llama_new_context_with_model: n_batch       = 2048
0.00.350.225 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.226 I llama_new_context_with_model: flash_attn    = 0
0.00.350.228 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.229 I llama_new_context_with_model: freq_scale    = 1
0.00.350.230 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.248 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.364.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.682 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.772 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.031 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.037 I llama_new_context_with_model: graph nodes  = 601
0.00.366.038 I llama_new_context_with_model: graph splits = 1
0.00.366.040 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.040 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.074 I main: llama threadpool init, n_threads = 4
0.00.450.091 I 
0.00.450.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.169 I 
0.00.450.209 I sampler seed: 1078399537
0.00.450.220 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.232 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.236 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.236 I 
 increasities. [end of text]


0.00.734.751 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8319.47 tokens per second)
0.00.734.755 I llama_perf_context_print:        load time =     449.30 ms
0.00.734.757 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.734.759 I llama_perf_context_print:        eval time =     281.27 ms /     4 runs   (   70.32 ms per token,    14.22 tokens per second)
0.00.734.760 I llama_perf_context_print:       total time =     284.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.184 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.709 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.719 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.734 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.735 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.739 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.740 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.740 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.741 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.745 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.745 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.747 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.747 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.748 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.392 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.690 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.502 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.508 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.508 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.509 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.510 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.513 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.514 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.515 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.516 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.519 I llama_model_loader: - type  f32:   37 tensors
0.00.130.519 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.931 I llm_load_vocab: special tokens cache size = 5
0.00.291.803 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.821 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.821 I llm_load_print_meta: arch             = gemma
0.00.291.822 I llm_load_print_meta: vocab type       = SPM
0.00.291.823 I llm_load_print_meta: n_vocab          = 256000
0.00.291.823 I llm_load_print_meta: n_merges         = 0
0.00.291.823 I llm_load_print_meta: vocab_only       = 0
0.00.291.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.824 I llm_load_print_meta: n_embd           = 2048
0.00.291.824 I llm_load_print_meta: n_layer          = 18
0.00.291.835 I llm_load_print_meta: n_head           = 8
0.00.291.836 I llm_load_print_meta: n_head_kv        = 1
0.00.291.836 I llm_load_print_meta: n_rot            = 256
0.00.291.837 I llm_load_print_meta: n_swa            = 0
0.00.291.837 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.838 I llm_load_print_meta: n_gqa            = 8
0.00.291.839 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.840 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.843 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.845 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.847 I llm_load_print_meta: n_ff             = 16384
0.00.291.848 I llm_load_print_meta: n_expert         = 0
0.00.291.848 I llm_load_print_meta: n_expert_used    = 0
0.00.291.849 I llm_load_print_meta: causal attn      = 1
0.00.291.849 I llm_load_print_meta: pooling type     = 0
0.00.291.849 I llm_load_print_meta: rope type        = 2
0.00.291.850 I llm_load_print_meta: rope scaling     = linear
0.00.291.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.852 I llm_load_print_meta: freq_scale_train = 1
0.00.291.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.853 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.854 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.855 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.855 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.855 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.855 I llm_load_print_meta: model type       = 2B
0.00.291.856 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.857 I llm_load_print_meta: model params     = 2.51 B
0.00.291.858 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.859 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.859 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.860 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.860 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.860 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.861 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.863 I llm_load_print_meta: max token length = 93
0.00.362.975 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.362.982 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.368.012 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.019 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.019 I llama_new_context_with_model: n_batch       = 2048
0.00.368.020 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.021 I llama_new_context_with_model: flash_attn    = 0
0.00.368.023 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.024 I llama_new_context_with_model: freq_scale    = 1
0.00.368.025 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.044 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.383.026 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.038 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.133 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.390 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.396 I llama_new_context_with_model: graph nodes  = 601
0.00.384.397 I llama_new_context_with_model: graph splits = 1
0.00.384.399 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.400 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.895 I main: llama threadpool init, n_threads = 4
0.00.471.911 I 
0.00.471.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.987 I 
0.00.472.028 I sampler seed: 3666963743
0.00.472.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.041 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.041 I 
 increasively in complexity as the number of variables increases.

True or False.

**True.**

**Explanation:**

As the number of variables increases,

0.02.867.888 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6474.40 tokens per second)
0.02.867.891 I llama_perf_context_print:        load time =     471.50 ms
0.02.867.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.867.894 I llama_perf_context_print:        eval time =    2376.46 ms /    32 runs   (   74.26 ms per token,    13.47 tokens per second)
0.02.867.895 I llama_perf_context_print:       total time =    2396.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.443s
user	0m23.651s
sys	0m9.281s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4399 (716bd6de)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40257.00 ms
main:    total time = 40257.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.586 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.616 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.627 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.637 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.646 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.648 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.651 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.652 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.653 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.653 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.653 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.658 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.659 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.660 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.661 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.661 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.954 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.802 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.808 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.810 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.810 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.811 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.812 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.814 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.815 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.816 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.818 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.822 I llama_model_loader: - type  f32:   37 tensors
0.00.131.823 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.823 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.915 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.417 I llm_load_vocab: special tokens cache size = 5
0.00.264.031 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.049 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.049 I llm_load_print_meta: arch             = gemma
0.00.264.050 I llm_load_print_meta: vocab type       = SPM
0.00.264.050 I llm_load_print_meta: n_vocab          = 256000
0.00.264.051 I llm_load_print_meta: n_merges         = 0
0.00.264.051 I llm_load_print_meta: vocab_only       = 0
0.00.264.051 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.052 I llm_load_print_meta: n_embd           = 2048
0.00.264.052 I llm_load_print_meta: n_layer          = 18
0.00.264.063 I llm_load_print_meta: n_head           = 8
0.00.264.064 I llm_load_print_meta: n_head_kv        = 1
0.00.264.065 I llm_load_print_meta: n_rot            = 256
0.00.264.065 I llm_load_print_meta: n_swa            = 0
0.00.264.066 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.066 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.067 I llm_load_print_meta: n_gqa            = 8
0.00.264.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.069 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.073 I llm_load_print_meta: n_ff             = 16384
0.00.264.073 I llm_load_print_meta: n_expert         = 0
0.00.264.074 I llm_load_print_meta: n_expert_used    = 0
0.00.264.074 I llm_load_print_meta: causal attn      = 1
0.00.264.075 I llm_load_print_meta: pooling type     = 0
0.00.264.075 I llm_load_print_meta: rope type        = 2
0.00.264.075 I llm_load_print_meta: rope scaling     = linear
0.00.264.077 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.077 I llm_load_print_meta: freq_scale_train = 1
0.00.264.077 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.078 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.078 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.078 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.079 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.079 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.079 I llm_load_print_meta: model type       = 2B
0.00.264.080 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.081 I llm_load_print_meta: model params     = 2.51 B
0.00.264.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.083 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.083 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.084 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.084 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.085 I llm_load_print_meta: max token length = 93
0.00.326.235 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.243 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.244 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.245 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.245 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.246 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.475 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.482 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.482 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.483 I llama_new_context_with_model: n_batch       = 2048
0.00.331.483 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.484 I llama_new_context_with_model: flash_attn    = 0
0.00.331.486 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.487 I llama_new_context_with_model: freq_scale    = 1
0.00.331.488 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.508 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.345.780 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.794 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.884 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.205 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.212 I llama_new_context_with_model: graph nodes  = 601
0.00.347.212 I llama_new_context_with_model: graph splits = 1
0.00.347.214 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.214 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.469 I main: llama threadpool init, n_threads = 4
0.00.423.487 I 
0.00.423.560 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.563 I 
0.00.423.607 I sampler seed: 2555134635
0.00.423.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.620 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.620 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.621 I 
 increamically.

I am unable to generate the requested response because it would involve generating potentially harmful or inappropriate content. [end of text]


0.01.608.927 I llama_perf_sampler_print:    sampling time =       3.82 ms /    25 runs   (    0.15 ms per token,  6541.08 tokens per second)
0.01.608.929 I llama_perf_context_print:        load time =     422.67 ms
0.01.608.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.608.931 I llama_perf_context_print:        eval time =    1171.12 ms /    24 runs   (   48.80 ms per token,    20.49 tokens per second)
0.01.608.932 I llama_perf_context_print:       total time =    1185.47 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4399 (716bd6de)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40220.20 ms
main:    total time = 40220.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.558 I build: 4399 (716bd6de) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.378 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.397 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.403 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.404 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.407 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.407 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.408 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.409 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.410 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.411 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.414 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.415 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.415 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.416 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.417 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.691 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.660 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.426 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.433 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.435 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.438 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.441 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.444 I llama_model_loader: - type  f32:   37 tensors
0.00.130.445 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.446 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.497 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.963 I llm_load_vocab: special tokens cache size = 5
0.00.264.826 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.841 I llm_load_print_meta: arch             = gemma
0.00.264.842 I llm_load_print_meta: vocab type       = SPM
0.00.264.842 I llm_load_print_meta: n_vocab          = 256000
0.00.264.843 I llm_load_print_meta: n_merges         = 0
0.00.264.843 I llm_load_print_meta: vocab_only       = 0
0.00.264.843 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.844 I llm_load_print_meta: n_embd           = 2048
0.00.264.844 I llm_load_print_meta: n_layer          = 18
0.00.264.854 I llm_load_print_meta: n_head           = 8
0.00.264.854 I llm_load_print_meta: n_head_kv        = 1
0.00.264.855 I llm_load_print_meta: n_rot            = 256
0.00.264.855 I llm_load_print_meta: n_swa            = 0
0.00.264.855 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.856 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.856 I llm_load_print_meta: n_gqa            = 8
0.00.264.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.861 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.861 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.863 I llm_load_print_meta: n_ff             = 16384
0.00.264.863 I llm_load_print_meta: n_expert         = 0
0.00.264.864 I llm_load_print_meta: n_expert_used    = 0
0.00.264.864 I llm_load_print_meta: causal attn      = 1
0.00.264.864 I llm_load_print_meta: pooling type     = 0
0.00.264.865 I llm_load_print_meta: rope type        = 2
0.00.264.865 I llm_load_print_meta: rope scaling     = linear
0.00.264.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.867 I llm_load_print_meta: freq_scale_train = 1
0.00.264.868 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.868 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.868 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.869 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.870 I llm_load_print_meta: model type       = 2B
0.00.264.870 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.871 I llm_load_print_meta: model params     = 2.51 B
0.00.264.872 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.872 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.873 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.873 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.873 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.874 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.874 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.874 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.875 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.875 I llm_load_print_meta: max token length = 93
0.00.322.729 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.828 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.834 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.835 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.835 I llama_new_context_with_model: n_batch       = 2048
0.00.327.836 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.836 I llama_new_context_with_model: flash_attn    = 0
0.00.327.838 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.839 I llama_new_context_with_model: freq_scale    = 1
0.00.327.839 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.858 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.272 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.374 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.591 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.597 I llama_new_context_with_model: graph nodes  = 601
0.00.343.598 I llama_new_context_with_model: graph splits = 1
0.00.343.600 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.081 I main: llama threadpool init, n_threads = 4
0.00.419.097 I 
0.00.419.170 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.173 I 
0.00.419.214 I sampler seed: 3315627757
0.00.419.225 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.231 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.232 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.232 I 
 seconally in the sentence: "The man whose name was John was tall and handsome."

In this sentence, the conjunction is used to connect two independent clauses

0.01.963.324 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6699.15 tokens per second)
0.01.963.326 I llama_perf_context_print:        load time =     418.28 ms
0.01.963.327 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.963.328 I llama_perf_context_print:        eval time =    1525.37 ms /    32 runs   (   47.67 ms per token,    20.98 tokens per second)
0.01.963.329 I llama_perf_context_print:       total time =    1544.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.924s
user	10m22.058s
sys	0m7.102s
