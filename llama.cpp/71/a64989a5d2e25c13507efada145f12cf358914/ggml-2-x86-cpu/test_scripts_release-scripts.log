+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.175 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.732 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.741 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.749 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.754 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.758 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.759 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.759 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.760 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.761 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.764 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.765 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.356 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.523 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.424 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.433 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.435 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.436 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.440 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.441 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.442 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.445 I llama_model_loader: - type  f32:   37 tensors
0.00.131.446 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.137 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.723 I llm_load_vocab: special tokens cache size = 5
0.00.263.114 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.131 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.131 I llm_load_print_meta: arch             = gemma
0.00.263.132 I llm_load_print_meta: vocab type       = SPM
0.00.263.133 I llm_load_print_meta: n_vocab          = 256000
0.00.263.133 I llm_load_print_meta: n_merges         = 0
0.00.263.134 I llm_load_print_meta: vocab_only       = 0
0.00.263.134 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.134 I llm_load_print_meta: n_embd           = 2048
0.00.263.134 I llm_load_print_meta: n_layer          = 18
0.00.263.145 I llm_load_print_meta: n_head           = 8
0.00.263.146 I llm_load_print_meta: n_head_kv        = 1
0.00.263.147 I llm_load_print_meta: n_rot            = 256
0.00.263.147 I llm_load_print_meta: n_swa            = 0
0.00.263.147 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.147 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.148 I llm_load_print_meta: n_gqa            = 8
0.00.263.150 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.151 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.151 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.153 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.153 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.154 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.154 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.155 I llm_load_print_meta: n_ff             = 16384
0.00.263.155 I llm_load_print_meta: n_expert         = 0
0.00.263.155 I llm_load_print_meta: n_expert_used    = 0
0.00.263.156 I llm_load_print_meta: causal attn      = 1
0.00.263.156 I llm_load_print_meta: pooling type     = 0
0.00.263.156 I llm_load_print_meta: rope type        = 2
0.00.263.156 I llm_load_print_meta: rope scaling     = linear
0.00.263.158 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.159 I llm_load_print_meta: freq_scale_train = 1
0.00.263.159 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.160 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.160 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.160 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.160 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.161 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.161 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.161 I llm_load_print_meta: model type       = 2B
0.00.263.162 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.163 I llm_load_print_meta: model params     = 2.51 B
0.00.263.163 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.164 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.165 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.165 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.166 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.167 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.167 I llm_load_print_meta: max token length = 93
0.00.501.071 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.501.080 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.501.081 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.501.082 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.501.082 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.501.083 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.506.216 I llama_new_context_with_model: n_seq_max     = 1
0.00.506.223 I llama_new_context_with_model: n_ctx         = 4096
0.00.506.223 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.506.223 I llama_new_context_with_model: n_batch       = 2048
0.00.506.224 I llama_new_context_with_model: n_ubatch      = 512
0.00.506.224 I llama_new_context_with_model: flash_attn    = 0
0.00.506.227 I llama_new_context_with_model: freq_base     = 10000.0
0.00.506.228 I llama_new_context_with_model: freq_scale    = 1
0.00.506.228 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.520.193 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.520.206 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.520.291 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.521.556 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.521.563 I llama_new_context_with_model: graph nodes  = 601
0.00.521.563 I llama_new_context_with_model: graph splits = 1
0.00.521.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.606.145 I main: llama threadpool init, n_threads = 4
0.00.606.160 I 
0.00.606.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.606.238 I 
0.00.606.280 I sampler seed: 1391829240
0.00.606.291 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.606.294 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.606.295 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.606.295 I 
 increamentalism.

## Declaring a Theory of Mind

**Declaring a Theory of Mind (ToM)** refers to the cognitive ability to attribute mental

0.02.843.982 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7130.51 tokens per second)
0.02.843.985 I llama_perf_context_print:        load time =     605.75 ms
0.02.843.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.843.989 I llama_perf_context_print:        eval time =    2219.45 ms /    32 runs   (   69.36 ms per token,    14.42 tokens per second)
0.02.843.990 I llama_perf_context_print:       total time =    2237.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.548 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.020.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.960 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.961 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.965 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.965 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.966 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.967 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.971 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.409 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.414 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.415 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.416 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.422 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.426 I llama_model_loader: - type  f32:   37 tensors
0.00.131.427 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.917 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.612 I llm_load_vocab: special tokens cache size = 5
0.00.262.461 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.476 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.477 I llm_load_print_meta: arch             = gemma
0.00.262.477 I llm_load_print_meta: vocab type       = SPM
0.00.262.478 I llm_load_print_meta: n_vocab          = 256000
0.00.262.478 I llm_load_print_meta: n_merges         = 0
0.00.262.479 I llm_load_print_meta: vocab_only       = 0
0.00.262.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.479 I llm_load_print_meta: n_embd           = 2048
0.00.262.480 I llm_load_print_meta: n_layer          = 18
0.00.262.497 I llm_load_print_meta: n_head           = 8
0.00.262.498 I llm_load_print_meta: n_head_kv        = 1
0.00.262.499 I llm_load_print_meta: n_rot            = 256
0.00.262.499 I llm_load_print_meta: n_swa            = 0
0.00.262.499 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.500 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.501 I llm_load_print_meta: n_gqa            = 8
0.00.262.502 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.503 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.503 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.506 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.506 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.507 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.508 I llm_load_print_meta: n_ff             = 16384
0.00.262.508 I llm_load_print_meta: n_expert         = 0
0.00.262.508 I llm_load_print_meta: n_expert_used    = 0
0.00.262.509 I llm_load_print_meta: causal attn      = 1
0.00.262.509 I llm_load_print_meta: pooling type     = 0
0.00.262.509 I llm_load_print_meta: rope type        = 2
0.00.262.509 I llm_load_print_meta: rope scaling     = linear
0.00.262.511 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.511 I llm_load_print_meta: freq_scale_train = 1
0.00.262.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.512 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.512 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.513 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.514 I llm_load_print_meta: model type       = 2B
0.00.262.514 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.515 I llm_load_print_meta: model params     = 2.51 B
0.00.262.516 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.517 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.517 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.518 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.519 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.519 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.519 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.520 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.520 I llm_load_print_meta: max token length = 93
0.00.359.234 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.424 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.430 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.431 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.431 I llama_new_context_with_model: n_batch       = 2048
0.00.364.432 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.432 I llama_new_context_with_model: flash_attn    = 0
0.00.364.434 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.435 I llama_new_context_with_model: freq_scale    = 1
0.00.364.436 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.039 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.053 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.138 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.389 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.395 I llama_new_context_with_model: graph nodes  = 601
0.00.380.396 I llama_new_context_with_model: graph splits = 1
0.00.380.398 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.770 I main: llama threadpool init, n_threads = 4
0.00.460.787 I 
0.00.460.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.862 I 
0.00.460.905 I sampler seed: 895384851
0.00.460.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.931 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.935 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.935 I 
 increasities. 

I am unable to generate text that is sexually suggestive or contains inappropriate content. [end of text]


0.01.915.547 I llama_perf_sampler_print:    sampling time =       3.76 ms /    22 runs   (    0.17 ms per token,  5844.85 tokens per second)
0.01.915.549 I llama_perf_context_print:        load time =     460.01 ms
0.01.915.550 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.915.552 I llama_perf_context_print:        eval time =    1440.95 ms /    21 runs   (   68.62 ms per token,    14.57 tokens per second)
0.01.915.553 I llama_perf_context_print:       total time =    1454.78 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.564 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.109 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.118 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.134 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.134 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.135 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.135 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.136 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.141 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.142 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.778 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.933 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.935 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.936 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.941 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.942 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.942 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.947 I llama_model_loader: - type  f32:   37 tensors
0.00.131.948 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.678 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.409 I llm_load_vocab: special tokens cache size = 5
0.00.267.504 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.521 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.521 I llm_load_print_meta: arch             = gemma
0.00.267.522 I llm_load_print_meta: vocab type       = SPM
0.00.267.522 I llm_load_print_meta: n_vocab          = 256000
0.00.267.523 I llm_load_print_meta: n_merges         = 0
0.00.267.523 I llm_load_print_meta: vocab_only       = 0
0.00.267.523 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.524 I llm_load_print_meta: n_embd           = 2048
0.00.267.524 I llm_load_print_meta: n_layer          = 18
0.00.267.535 I llm_load_print_meta: n_head           = 8
0.00.267.536 I llm_load_print_meta: n_head_kv        = 1
0.00.267.537 I llm_load_print_meta: n_rot            = 256
0.00.267.537 I llm_load_print_meta: n_swa            = 0
0.00.267.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.539 I llm_load_print_meta: n_gqa            = 8
0.00.267.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.542 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.544 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.545 I llm_load_print_meta: n_ff             = 16384
0.00.267.546 I llm_load_print_meta: n_expert         = 0
0.00.267.546 I llm_load_print_meta: n_expert_used    = 0
0.00.267.546 I llm_load_print_meta: causal attn      = 1
0.00.267.547 I llm_load_print_meta: pooling type     = 0
0.00.267.547 I llm_load_print_meta: rope type        = 2
0.00.267.547 I llm_load_print_meta: rope scaling     = linear
0.00.267.549 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.550 I llm_load_print_meta: freq_scale_train = 1
0.00.267.550 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.550 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.551 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.551 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.551 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.551 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.552 I llm_load_print_meta: model type       = 2B
0.00.267.552 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.553 I llm_load_print_meta: model params     = 2.51 B
0.00.267.554 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.554 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.555 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.556 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.557 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.557 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.558 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.558 I llm_load_print_meta: max token length = 93
0.00.343.122 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.129 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.130 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.130 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.131 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.131 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.215 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.221 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.221 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.221 I llama_new_context_with_model: n_batch       = 2048
0.00.348.222 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.222 I llama_new_context_with_model: flash_attn    = 0
0.00.348.224 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.225 I llama_new_context_with_model: freq_scale    = 1
0.00.348.226 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.254 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.267 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.586 I llama_new_context_with_model: graph nodes  = 601
0.00.363.586 I llama_new_context_with_model: graph splits = 1
0.00.363.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.709 I main: llama threadpool init, n_threads = 4
0.00.446.725 I 
0.00.446.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.800 I 
0.00.446.843 I sampler seed: 2424861672
0.00.446.854 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.861 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.865 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.865 I 
 increably and gracefully, defying expectations and shattering boundaries. [end of text]


0.01.294.445 I llama_perf_sampler_print:    sampling time =       1.81 ms /    13 runs   (    0.14 ms per token,  7162.53 tokens per second)
0.01.294.447 I llama_perf_context_print:        load time =     445.92 ms
0.01.294.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.294.450 I llama_perf_context_print:        eval time =     839.61 ms /    12 runs   (   69.97 ms per token,    14.29 tokens per second)
0.01.294.451 I llama_perf_context_print:       total time =     847.74 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.564 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.020.973 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.983 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.991 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.999 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.000 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.004 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.005 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.006 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.007 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.013 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.014 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.024 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.401 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.407 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.408 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.409 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.409 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.410 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.411 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.413 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.415 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.416 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.417 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.418 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.421 I llama_model_loader: - type  f32:   37 tensors
0.00.132.422 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.023 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.544 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.104 I llm_load_vocab: special tokens cache size = 5
0.00.265.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.237 I llm_load_print_meta: arch             = gemma
0.00.265.238 I llm_load_print_meta: vocab type       = SPM
0.00.265.239 I llm_load_print_meta: n_vocab          = 256000
0.00.265.239 I llm_load_print_meta: n_merges         = 0
0.00.265.239 I llm_load_print_meta: vocab_only       = 0
0.00.265.240 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.240 I llm_load_print_meta: n_embd           = 2048
0.00.265.240 I llm_load_print_meta: n_layer          = 18
0.00.265.252 I llm_load_print_meta: n_head           = 8
0.00.265.253 I llm_load_print_meta: n_head_kv        = 1
0.00.265.253 I llm_load_print_meta: n_rot            = 256
0.00.265.253 I llm_load_print_meta: n_swa            = 0
0.00.265.254 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.254 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.255 I llm_load_print_meta: n_gqa            = 8
0.00.265.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.258 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.259 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.261 I llm_load_print_meta: n_ff             = 16384
0.00.265.262 I llm_load_print_meta: n_expert         = 0
0.00.265.262 I llm_load_print_meta: n_expert_used    = 0
0.00.265.262 I llm_load_print_meta: causal attn      = 1
0.00.265.262 I llm_load_print_meta: pooling type     = 0
0.00.265.263 I llm_load_print_meta: rope type        = 2
0.00.265.263 I llm_load_print_meta: rope scaling     = linear
0.00.265.264 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.265 I llm_load_print_meta: freq_scale_train = 1
0.00.265.265 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.265 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.266 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.266 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.266 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.266 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.267 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.267 I llm_load_print_meta: model type       = 2B
0.00.265.268 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.269 I llm_load_print_meta: model params     = 2.51 B
0.00.265.269 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.270 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.271 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.271 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.272 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.274 I llm_load_print_meta: max token length = 93
0.00.337.249 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.255 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.305 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.311 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.311 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.312 I llama_new_context_with_model: n_batch       = 2048
0.00.342.312 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.312 I llama_new_context_with_model: flash_attn    = 0
0.00.342.314 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.315 I llama_new_context_with_model: freq_scale    = 1
0.00.342.316 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.433 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.448 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.537 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.854 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.860 I llama_new_context_with_model: graph nodes  = 601
0.00.357.860 I llama_new_context_with_model: graph splits = 1
0.00.357.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.271 I main: llama threadpool init, n_threads = 4
0.00.448.286 I 
0.00.448.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.359 I 
0.00.448.402 I sampler seed: 929163276
0.00.448.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.415 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.416 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.416 I 
 increasities, and other forms of sexual harassment. [end of text]


0.01.269.381 I llama_perf_sampler_print:    sampling time =       1.65 ms /    12 runs   (    0.14 ms per token,  7272.73 tokens per second)
0.01.269.383 I llama_perf_context_print:        load time =     447.48 ms
0.01.269.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.269.386 I llama_perf_context_print:        eval time =     813.79 ms /    11 runs   (   73.98 ms per token,    13.52 tokens per second)
0.01.269.387 I llama_perf_context_print:       total time =     821.12 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.875s
user	0m24.287s
sys	0m9.356s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4193 (71a64989)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40182.49 ms
main:    total time = 40182.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.181 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.961 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.973 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.982 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.992 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.997 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.007 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.008 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.087 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.181 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.181 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.182 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.183 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.185 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.187 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.188 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.190 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.191 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.194 I llama_model_loader: - type  f32:   37 tensors
0.00.132.195 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.195 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.894 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.786 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.337 I llm_load_vocab: special tokens cache size = 5
0.00.262.442 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.457 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.458 I llm_load_print_meta: arch             = gemma
0.00.262.458 I llm_load_print_meta: vocab type       = SPM
0.00.262.459 I llm_load_print_meta: n_vocab          = 256000
0.00.262.460 I llm_load_print_meta: n_merges         = 0
0.00.262.460 I llm_load_print_meta: vocab_only       = 0
0.00.262.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.460 I llm_load_print_meta: n_embd           = 2048
0.00.262.461 I llm_load_print_meta: n_layer          = 18
0.00.262.473 I llm_load_print_meta: n_head           = 8
0.00.262.474 I llm_load_print_meta: n_head_kv        = 1
0.00.262.474 I llm_load_print_meta: n_rot            = 256
0.00.262.475 I llm_load_print_meta: n_swa            = 0
0.00.262.475 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.475 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.476 I llm_load_print_meta: n_gqa            = 8
0.00.262.477 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.478 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.479 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.480 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.481 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.481 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.481 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.482 I llm_load_print_meta: n_ff             = 16384
0.00.262.482 I llm_load_print_meta: n_expert         = 0
0.00.262.482 I llm_load_print_meta: n_expert_used    = 0
0.00.262.483 I llm_load_print_meta: causal attn      = 1
0.00.262.483 I llm_load_print_meta: pooling type     = 0
0.00.262.483 I llm_load_print_meta: rope type        = 2
0.00.262.484 I llm_load_print_meta: rope scaling     = linear
0.00.262.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.486 I llm_load_print_meta: freq_scale_train = 1
0.00.262.486 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.488 I llm_load_print_meta: model type       = 2B
0.00.262.489 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.490 I llm_load_print_meta: model params     = 2.51 B
0.00.262.490 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.491 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.492 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.493 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.494 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.494 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.494 I llm_load_print_meta: max token length = 93
0.00.321.819 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.823 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.824 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.825 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.825 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.826 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.864 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.864 I llama_new_context_with_model: n_batch       = 2048
0.00.326.865 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.865 I llama_new_context_with_model: flash_attn    = 0
0.00.326.867 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.868 I llama_new_context_with_model: freq_scale    = 1
0.00.326.869 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.411 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.431 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.840 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.846 I llama_new_context_with_model: graph nodes  = 601
0.00.342.846 I llama_new_context_with_model: graph splits = 1
0.00.342.849 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.604 I main: llama threadpool init, n_threads = 4
0.00.418.620 I 
0.00.418.694 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.698 I 
0.00.418.744 I sampler seed: 1279705348
0.00.418.754 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.758 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.758 I 
 fufilling stories about a mischievous gnome and a clumsy unicorn.

Once upon a time, in a magical realm known as Fantasia, there lived an mischievous gnome named

0.01.977.168 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6379.28 tokens per second)
0.01.977.171 I llama_perf_context_print:        load time =     418.21 ms
0.01.977.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.977.174 I llama_perf_context_print:        eval time =    1539.39 ms /    32 runs   (   48.11 ms per token,    20.79 tokens per second)
0.01.977.174 I llama_perf_context_print:       total time =    1558.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4193 (71a64989)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40155.58 ms
main:    total time = 40155.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4193 (71a64989) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.235 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.251 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.271 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.272 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.273 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.277 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.197 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.138 I llama_model_loader: - type  f32:   37 tensors
0.00.132.139 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.140 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.802 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.774 I llm_load_vocab: special tokens cache size = 5
0.00.270.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.975 I llm_load_print_meta: arch             = gemma
0.00.270.975 I llm_load_print_meta: vocab type       = SPM
0.00.270.976 I llm_load_print_meta: n_vocab          = 256000
0.00.270.976 I llm_load_print_meta: n_merges         = 0
0.00.270.977 I llm_load_print_meta: vocab_only       = 0
0.00.270.977 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.977 I llm_load_print_meta: n_embd           = 2048
0.00.270.978 I llm_load_print_meta: n_layer          = 18
0.00.270.988 I llm_load_print_meta: n_head           = 8
0.00.270.989 I llm_load_print_meta: n_head_kv        = 1
0.00.270.990 I llm_load_print_meta: n_rot            = 256
0.00.270.990 I llm_load_print_meta: n_swa            = 0
0.00.270.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.991 I llm_load_print_meta: n_gqa            = 8
0.00.270.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.996 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.998 I llm_load_print_meta: n_ff             = 16384
0.00.270.998 I llm_load_print_meta: n_expert         = 0
0.00.270.998 I llm_load_print_meta: n_expert_used    = 0
0.00.270.998 I llm_load_print_meta: causal attn      = 1
0.00.270.999 I llm_load_print_meta: pooling type     = 0
0.00.270.999 I llm_load_print_meta: rope type        = 2
0.00.270.999 I llm_load_print_meta: rope scaling     = linear
0.00.271.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.001 I llm_load_print_meta: freq_scale_train = 1
0.00.271.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.003 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.004 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.005 I llm_load_print_meta: model type       = 2B
0.00.271.005 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.006 I llm_load_print_meta: model params     = 2.51 B
0.00.271.006 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.007 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.008 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.010 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.010 I llm_load_print_meta: max token length = 93
0.00.327.809 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.009 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.016 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.016 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.017 I llama_new_context_with_model: n_batch       = 2048
0.00.333.017 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.018 I llama_new_context_with_model: flash_attn    = 0
0.00.333.020 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.021 I llama_new_context_with_model: freq_scale    = 1
0.00.333.022 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.210 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.225 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.561 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.568 I llama_new_context_with_model: graph nodes  = 601
0.00.349.568 I llama_new_context_with_model: graph splits = 1
0.00.349.570 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.719 I main: llama threadpool init, n_threads = 4
0.00.423.734 I 
0.00.423.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.423.809 I 
0.00.423.854 I sampler seed: 3986246646
0.00.423.866 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.878 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.882 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.882 I 
 seconally!

I'm having trouble understanding the concept of "self-reflection" as it relates to personal growth and development.

**Self-reflection

0.01.992.149 I llama_perf_sampler_print:    sampling time =       5.72 ms /    33 runs   (    0.17 ms per token,  5772.26 tokens per second)
0.01.992.151 I llama_perf_context_print:        load time =     422.98 ms
0.01.992.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.154 I llama_perf_context_print:        eval time =    1547.95 ms /    32 runs   (   48.37 ms per token,    20.67 tokens per second)
0.01.992.155 I llama_perf_context_print:       total time =    1568.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.089s
user	10m23.825s
sys	0m6.794s
