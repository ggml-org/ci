+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.646 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.806 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.007 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.122 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.123 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.123 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.132 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.133 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.134 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.136 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.778 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.463 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.464 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.465 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.473 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.475 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.475 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.476 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.486 I llama_model_loader: - type  f32:   37 tensors
0.00.195.490 I llama_model_loader: - type q8_0:  127 tensors
0.00.374.208 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.406.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.407.530 I llm_load_vocab: special tokens cache size = 5
0.00.466.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.466.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.466.540 I llm_load_print_meta: arch             = gemma
0.00.466.541 I llm_load_print_meta: vocab type       = SPM
0.00.466.542 I llm_load_print_meta: n_vocab          = 256000
0.00.466.545 I llm_load_print_meta: n_merges         = 0
0.00.466.545 I llm_load_print_meta: vocab_only       = 0
0.00.466.545 I llm_load_print_meta: n_ctx_train      = 8192
0.00.466.546 I llm_load_print_meta: n_embd           = 2048
0.00.466.546 I llm_load_print_meta: n_layer          = 18
0.00.466.615 I llm_load_print_meta: n_head           = 8
0.00.466.639 I llm_load_print_meta: n_head_kv        = 1
0.00.466.640 I llm_load_print_meta: n_rot            = 256
0.00.466.641 I llm_load_print_meta: n_swa            = 0
0.00.466.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.466.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.466.646 I llm_load_print_meta: n_gqa            = 8
0.00.466.650 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.466.655 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.466.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.466.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.466.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.466.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.466.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.466.669 I llm_load_print_meta: n_ff             = 16384
0.00.466.670 I llm_load_print_meta: n_expert         = 0
0.00.466.670 I llm_load_print_meta: n_expert_used    = 0
0.00.466.671 I llm_load_print_meta: causal attn      = 1
0.00.466.672 I llm_load_print_meta: pooling type     = 0
0.00.466.673 I llm_load_print_meta: rope type        = 2
0.00.466.673 I llm_load_print_meta: rope scaling     = linear
0.00.466.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.466.675 I llm_load_print_meta: freq_scale_train = 1
0.00.466.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.466.679 I llm_load_print_meta: rope_finetuned   = unknown
0.00.466.680 I llm_load_print_meta: ssm_d_conv       = 0
0.00.466.680 I llm_load_print_meta: ssm_d_inner      = 0
0.00.466.680 I llm_load_print_meta: ssm_d_state      = 0
0.00.466.681 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.466.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.466.681 I llm_load_print_meta: model type       = 2B
0.00.466.682 I llm_load_print_meta: model ftype      = Q8_0
0.00.466.683 I llm_load_print_meta: model params     = 2.51 B
0.00.466.684 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.466.684 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.466.685 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.466.685 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.466.686 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.466.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.466.687 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.466.687 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.466.693 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.466.694 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.466.695 I llm_load_print_meta: max token length = 93
0.00.466.872 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.567.763 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.567.793 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.567.794 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.567.795 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.567.795 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.567.796 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.573.675 I llama_new_context_with_model: n_ctx      = 8192
0.00.573.686 I llama_new_context_with_model: n_batch    = 2048
0.00.573.686 I llama_new_context_with_model: n_ubatch   = 512
0.00.573.687 I llama_new_context_with_model: flash_attn = 0
0.00.573.691 I llama_new_context_with_model: freq_base  = 10000.0
0.00.573.691 I llama_new_context_with_model: freq_scale = 1
0.00.605.521 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.605.562 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.605.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.607.166 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.607.173 I llama_new_context_with_model: graph nodes  = 601
0.00.607.173 I llama_new_context_with_model: graph splits = 1
0.00.607.191 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.220.466 I main: llama threadpool init, n_threads = 4
0.01.220.477 I 
0.01.220.570 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.220.573 I 
0.01.220.743 I sampler seed: 1565297643
0.01.220.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.220.759 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.220.760 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.220.760 I 
 increasities and the potential for increased reporting of sexual misconduct. [end of text]


0.06.667.876 I llama_perf_sampler_print:    sampling time =      20.12 ms /    14 runs   (    1.44 ms per token,   695.79 tokens per second)
0.06.667.879 I llama_perf_context_print:        load time =    1217.60 ms
0.06.667.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.667.882 I llama_perf_context_print:        eval time =    5412.66 ms /    13 runs   (  416.36 ms per token,     2.40 tokens per second)
0.06.667.895 I llama_perf_context_print:       total time =    5447.42 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.652 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.025.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.452 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.456 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.887 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.500 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.560 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.562 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.563 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.566 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.568 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.569 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.195.570 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.578 I llama_model_loader: - type  f32:   37 tensors
0.00.195.583 I llama_model_loader: - type q8_0:  127 tensors
0.00.354.153 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.382.437 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.383.548 I llm_load_vocab: special tokens cache size = 5
0.00.442.186 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.442.250 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.442.251 I llm_load_print_meta: arch             = gemma
0.00.442.252 I llm_load_print_meta: vocab type       = SPM
0.00.442.253 I llm_load_print_meta: n_vocab          = 256000
0.00.442.255 I llm_load_print_meta: n_merges         = 0
0.00.442.256 I llm_load_print_meta: vocab_only       = 0
0.00.442.256 I llm_load_print_meta: n_ctx_train      = 8192
0.00.442.256 I llm_load_print_meta: n_embd           = 2048
0.00.442.257 I llm_load_print_meta: n_layer          = 18
0.00.442.321 I llm_load_print_meta: n_head           = 8
0.00.442.327 I llm_load_print_meta: n_head_kv        = 1
0.00.442.328 I llm_load_print_meta: n_rot            = 256
0.00.442.328 I llm_load_print_meta: n_swa            = 0
0.00.442.329 I llm_load_print_meta: n_embd_head_k    = 256
0.00.442.329 I llm_load_print_meta: n_embd_head_v    = 256
0.00.442.333 I llm_load_print_meta: n_gqa            = 8
0.00.442.338 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.442.342 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.442.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.442.345 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.442.345 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.442.346 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.442.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.442.371 I llm_load_print_meta: n_ff             = 16384
0.00.442.371 I llm_load_print_meta: n_expert         = 0
0.00.442.372 I llm_load_print_meta: n_expert_used    = 0
0.00.442.372 I llm_load_print_meta: causal attn      = 1
0.00.442.372 I llm_load_print_meta: pooling type     = 0
0.00.442.373 I llm_load_print_meta: rope type        = 2
0.00.442.373 I llm_load_print_meta: rope scaling     = linear
0.00.442.374 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.442.375 I llm_load_print_meta: freq_scale_train = 1
0.00.442.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.442.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.442.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.442.393 I llm_load_print_meta: ssm_d_inner      = 0
0.00.442.398 I llm_load_print_meta: ssm_d_state      = 0
0.00.442.398 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.442.398 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.442.399 I llm_load_print_meta: model type       = 2B
0.00.442.400 I llm_load_print_meta: model ftype      = Q8_0
0.00.442.401 I llm_load_print_meta: model params     = 2.51 B
0.00.442.402 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.442.402 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.442.403 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.442.405 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.442.405 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.442.406 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.442.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.442.407 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.442.414 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.442.415 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.442.415 I llm_load_print_meta: max token length = 93
0.00.442.589 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.538.050 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.543.754 I llama_new_context_with_model: n_ctx      = 8192
0.00.543.762 I llama_new_context_with_model: n_batch    = 2048
0.00.543.763 I llama_new_context_with_model: n_ubatch   = 512
0.00.543.763 I llama_new_context_with_model: flash_attn = 0
0.00.543.767 I llama_new_context_with_model: freq_base  = 10000.0
0.00.543.768 I llama_new_context_with_model: freq_scale = 1
0.00.574.148 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.574.192 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.574.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.575.706 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.575.711 I llama_new_context_with_model: graph nodes  = 601
0.00.575.711 I llama_new_context_with_model: graph splits = 1
0.00.575.728 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.189.480 I main: llama threadpool init, n_threads = 4
0.01.189.493 I 
0.01.189.590 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.189.594 I 
0.01.189.762 I sampler seed: 3035366526
0.01.189.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.189.779 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.189.780 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.189.780 I 
 increably.

I am unable to generate a response because the provided context does not contain any information regarding the capabilities or limitations of the AI assistant. [end of text]


0.14.493.279 I llama_perf_sampler_print:    sampling time =      47.71 ms /    32 runs   (    1.49 ms per token,   670.66 tokens per second)
0.14.493.282 I llama_perf_context_print:        load time =    1186.58 ms
0.14.493.295 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.493.297 I llama_perf_context_print:        eval time =   13224.02 ms /    31 runs   (  426.58 ms per token,     2.34 tokens per second)
0.14.493.299 I llama_perf_context_print:       total time =   13303.81 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.643 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.025.290 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.481 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.572 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.584 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.599 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.600 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.601 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.611 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.619 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.620 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.621 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.622 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.554 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.565 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.566 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.567 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.567 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.576 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.586 I llama_model_loader: - type  f32:   37 tensors
0.00.196.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.373.692 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.404.522 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.405.639 I llm_load_vocab: special tokens cache size = 5
0.00.464.011 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.464.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.464.074 I llm_load_print_meta: arch             = gemma
0.00.464.075 I llm_load_print_meta: vocab type       = SPM
0.00.464.076 I llm_load_print_meta: n_vocab          = 256000
0.00.464.078 I llm_load_print_meta: n_merges         = 0
0.00.464.079 I llm_load_print_meta: vocab_only       = 0
0.00.464.079 I llm_load_print_meta: n_ctx_train      = 8192
0.00.464.080 I llm_load_print_meta: n_embd           = 2048
0.00.464.080 I llm_load_print_meta: n_layer          = 18
0.00.464.140 I llm_load_print_meta: n_head           = 8
0.00.464.147 I llm_load_print_meta: n_head_kv        = 1
0.00.464.147 I llm_load_print_meta: n_rot            = 256
0.00.464.148 I llm_load_print_meta: n_swa            = 0
0.00.464.148 I llm_load_print_meta: n_embd_head_k    = 256
0.00.464.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.464.153 I llm_load_print_meta: n_gqa            = 8
0.00.464.157 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.464.162 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.464.163 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.464.164 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.464.164 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.464.165 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.464.165 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.464.170 I llm_load_print_meta: n_ff             = 16384
0.00.464.171 I llm_load_print_meta: n_expert         = 0
0.00.464.171 I llm_load_print_meta: n_expert_used    = 0
0.00.464.171 I llm_load_print_meta: causal attn      = 1
0.00.464.172 I llm_load_print_meta: pooling type     = 0
0.00.464.172 I llm_load_print_meta: rope type        = 2
0.00.464.173 I llm_load_print_meta: rope scaling     = linear
0.00.464.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.464.175 I llm_load_print_meta: freq_scale_train = 1
0.00.464.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.464.176 I llm_load_print_meta: rope_finetuned   = unknown
0.00.464.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.464.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.464.177 I llm_load_print_meta: ssm_d_state      = 0
0.00.464.177 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.464.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.464.178 I llm_load_print_meta: model type       = 2B
0.00.464.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.464.179 I llm_load_print_meta: model params     = 2.51 B
0.00.464.180 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.464.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.464.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.464.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.464.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.464.183 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.464.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.464.184 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.464.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.464.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.464.190 I llm_load_print_meta: max token length = 93
0.00.464.371 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.542.628 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.542.640 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.542.641 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.542.642 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.542.643 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.542.643 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.548.472 I llama_new_context_with_model: n_ctx      = 8192
0.00.548.479 I llama_new_context_with_model: n_batch    = 2048
0.00.548.480 I llama_new_context_with_model: n_ubatch   = 512
0.00.548.480 I llama_new_context_with_model: flash_attn = 0
0.00.548.483 I llama_new_context_with_model: freq_base  = 10000.0
0.00.548.484 I llama_new_context_with_model: freq_scale = 1
0.00.578.776 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.578.821 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.578.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.580.365 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.580.371 I llama_new_context_with_model: graph nodes  = 601
0.00.580.371 I llama_new_context_with_model: graph splits = 1
0.00.580.388 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.197.234 I main: llama threadpool init, n_threads = 4
0.01.197.248 I 
0.01.197.351 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.197.355 I 
0.01.197.534 I sampler seed: 3308862053
0.01.197.545 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.197.552 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.197.553 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.197.553 I 
 increasities and anxieties, anxieties that arise from the fear of failure and the pressure to perform. [end of text]


0.09.649.551 I llama_perf_sampler_print:    sampling time =      30.84 ms /    21 runs   (    1.47 ms per token,   680.96 tokens per second)
0.09.649.554 I llama_perf_context_print:        load time =    1194.36 ms
0.09.649.555 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.649.571 I llama_perf_context_print:        eval time =    8400.50 ms /    20 runs   (  420.03 ms per token,     2.38 tokens per second)
0.09.649.572 I llama_perf_context_print:       total time =    8452.33 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.592 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.803 I main: llama backend init
0.00.002.739 I main: load the model and apply lora adapter, if any
0.00.024.673 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.864 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.969 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.974 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.977 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.978 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.979 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.980 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.980 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.988 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.989 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.991 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.434 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.906 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.926 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.927 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.928 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.931 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.934 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.935 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.936 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.937 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.946 I llama_model_loader: - type  f32:   37 tensors
0.00.194.950 I llama_model_loader: - type q8_0:  127 tensors
0.00.354.911 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.379.191 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.380.195 I llm_load_vocab: special tokens cache size = 5
0.00.438.544 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.438.605 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.438.606 I llm_load_print_meta: arch             = gemma
0.00.438.607 I llm_load_print_meta: vocab type       = SPM
0.00.438.608 I llm_load_print_meta: n_vocab          = 256000
0.00.438.610 I llm_load_print_meta: n_merges         = 0
0.00.438.611 I llm_load_print_meta: vocab_only       = 0
0.00.438.611 I llm_load_print_meta: n_ctx_train      = 8192
0.00.438.612 I llm_load_print_meta: n_embd           = 2048
0.00.438.612 I llm_load_print_meta: n_layer          = 18
0.00.438.678 I llm_load_print_meta: n_head           = 8
0.00.438.685 I llm_load_print_meta: n_head_kv        = 1
0.00.438.685 I llm_load_print_meta: n_rot            = 256
0.00.438.686 I llm_load_print_meta: n_swa            = 0
0.00.438.686 I llm_load_print_meta: n_embd_head_k    = 256
0.00.438.686 I llm_load_print_meta: n_embd_head_v    = 256
0.00.438.691 I llm_load_print_meta: n_gqa            = 8
0.00.438.695 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.438.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.438.701 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.438.703 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.438.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.438.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.438.704 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.438.709 I llm_load_print_meta: n_ff             = 16384
0.00.438.709 I llm_load_print_meta: n_expert         = 0
0.00.438.710 I llm_load_print_meta: n_expert_used    = 0
0.00.438.710 I llm_load_print_meta: causal attn      = 1
0.00.438.711 I llm_load_print_meta: pooling type     = 0
0.00.438.711 I llm_load_print_meta: rope type        = 2
0.00.438.712 I llm_load_print_meta: rope scaling     = linear
0.00.438.713 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.438.714 I llm_load_print_meta: freq_scale_train = 1
0.00.438.715 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.438.716 I llm_load_print_meta: rope_finetuned   = unknown
0.00.438.716 I llm_load_print_meta: ssm_d_conv       = 0
0.00.438.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.438.722 I llm_load_print_meta: ssm_d_state      = 0
0.00.438.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.438.723 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.438.723 I llm_load_print_meta: model type       = 2B
0.00.438.724 I llm_load_print_meta: model ftype      = Q8_0
0.00.438.725 I llm_load_print_meta: model params     = 2.51 B
0.00.438.725 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.438.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.438.727 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.438.728 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.438.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.438.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.438.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.438.730 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.438.736 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.438.738 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.438.738 I llm_load_print_meta: max token length = 93
0.00.438.913 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.510.138 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.510.151 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.515.773 I llama_new_context_with_model: n_ctx      = 8192
0.00.515.783 I llama_new_context_with_model: n_batch    = 2048
0.00.515.783 I llama_new_context_with_model: n_ubatch   = 512
0.00.515.784 I llama_new_context_with_model: flash_attn = 0
0.00.515.788 I llama_new_context_with_model: freq_base  = 10000.0
0.00.515.789 I llama_new_context_with_model: freq_scale = 1
0.00.547.378 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.547.422 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.547.541 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.548.916 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.548.922 I llama_new_context_with_model: graph nodes  = 601
0.00.548.923 I llama_new_context_with_model: graph splits = 1
0.00.548.939 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.160.311 I main: llama threadpool init, n_threads = 4
0.01.160.323 I 
0.01.160.418 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.160.421 I 
0.01.160.580 I sampler seed: 3147290623
0.01.160.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.160.596 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.160.597 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.160.597 I 
 increasities into a beautiful tapestry of meaning.

This passage uses imagery and figurative language to convey its message. The imagery evokes the beauty and complexity of the universe

0.14.644.765 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.14.644.768 I llama_perf_context_print:        load time =    1157.49 ms
0.14.644.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.644.784 I llama_perf_context_print:        eval time =   13401.86 ms /    32 runs   (  418.81 ms per token,     2.39 tokens per second)
0.14.644.786 I llama_perf_context_print:       total time =   13484.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.609s
user	2m54.851s
sys	0m9.648s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3853 (7166ad41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199466.65 ms
main:    total time = 199466.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.679 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.017 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.210 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.318 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.338 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.342 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.869 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.349 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.350 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.359 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.360 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.368 I llama_model_loader: - type  f32:   37 tensors
0.00.196.372 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.372 I llama_model_loader: - type q6_K:   19 tensors
0.00.369.826 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.401.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.402.186 I llm_load_vocab: special tokens cache size = 5
0.00.460.796 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.460.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.460.859 I llm_load_print_meta: arch             = gemma
0.00.460.860 I llm_load_print_meta: vocab type       = SPM
0.00.460.860 I llm_load_print_meta: n_vocab          = 256000
0.00.460.863 I llm_load_print_meta: n_merges         = 0
0.00.460.863 I llm_load_print_meta: vocab_only       = 0
0.00.460.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.460.864 I llm_load_print_meta: n_embd           = 2048
0.00.460.864 I llm_load_print_meta: n_layer          = 18
0.00.460.928 I llm_load_print_meta: n_head           = 8
0.00.460.934 I llm_load_print_meta: n_head_kv        = 1
0.00.460.935 I llm_load_print_meta: n_rot            = 256
0.00.460.935 I llm_load_print_meta: n_swa            = 0
0.00.460.936 I llm_load_print_meta: n_embd_head_k    = 256
0.00.460.936 I llm_load_print_meta: n_embd_head_v    = 256
0.00.460.940 I llm_load_print_meta: n_gqa            = 8
0.00.460.945 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.460.949 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.460.950 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.460.951 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.460.952 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.460.952 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.460.953 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.460.957 I llm_load_print_meta: n_ff             = 16384
0.00.460.958 I llm_load_print_meta: n_expert         = 0
0.00.460.958 I llm_load_print_meta: n_expert_used    = 0
0.00.460.958 I llm_load_print_meta: causal attn      = 1
0.00.460.959 I llm_load_print_meta: pooling type     = 0
0.00.460.959 I llm_load_print_meta: rope type        = 2
0.00.460.960 I llm_load_print_meta: rope scaling     = linear
0.00.460.961 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.460.961 I llm_load_print_meta: freq_scale_train = 1
0.00.460.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.460.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.460.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.460.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.460.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.460.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.460.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.460.964 I llm_load_print_meta: model type       = 2B
0.00.460.965 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.460.966 I llm_load_print_meta: model params     = 2.51 B
0.00.460.967 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.460.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.460.968 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.460.968 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.460.968 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.460.969 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.460.969 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.460.970 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.460.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.460.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.460.976 I llm_load_print_meta: max token length = 93
0.00.461.144 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.520.122 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.520.137 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.520.138 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.520.139 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.520.139 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.520.140 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.527.068 I llama_new_context_with_model: n_ctx      = 8192
0.00.527.079 I llama_new_context_with_model: n_batch    = 2048
0.00.527.080 I llama_new_context_with_model: n_ubatch   = 512
0.00.527.081 I llama_new_context_with_model: flash_attn = 0
0.00.527.085 I llama_new_context_with_model: freq_base  = 10000.0
0.00.527.086 I llama_new_context_with_model: freq_scale = 1
0.00.558.766 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.558.809 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.558.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.560.343 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.560.350 I llama_new_context_with_model: graph nodes  = 601
0.00.560.351 I llama_new_context_with_model: graph splits = 1
0.00.560.367 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.141.943 I main: llama threadpool init, n_threads = 4
0.01.141.956 I 
0.01.142.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.142.052 I 
0.01.142.217 I sampler seed: 1311721530
0.01.142.228 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.142.233 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.142.234 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.142.234 I 
 increasities from the 1960s to the 1980s.

## The Rise of the Erotic Film: A Historical Perspective

0.12.082.302 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.13 tokens per second)
0.12.082.307 I llama_perf_context_print:        load time =    1139.03 ms
0.12.082.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.082.311 I llama_perf_context_print:        eval time =   10858.25 ms /    32 runs   (  339.32 ms per token,     2.95 tokens per second)
0.12.082.312 I llama_perf_context_print:       total time =   10940.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3853 (7166ad41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199127.24 ms
main:    total time = 199127.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.666 I build: 3853 (7166ad41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.916 I main: load the model and apply lora adapter, if any
0.00.025.006 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.126 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.135 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.136 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.139 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.140 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.141 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.148 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.149 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.149 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.150 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.151 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.780 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.237 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.495 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.505 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.507 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.508 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.509 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.512 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.521 I llama_model_loader: - type  f32:   37 tensors
0.00.195.525 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.526 I llama_model_loader: - type q6_K:   19 tensors
0.00.367.304 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.395.994 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.397.000 I llm_load_vocab: special tokens cache size = 5
0.00.455.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.455.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.455.806 I llm_load_print_meta: arch             = gemma
0.00.455.807 I llm_load_print_meta: vocab type       = SPM
0.00.455.808 I llm_load_print_meta: n_vocab          = 256000
0.00.455.810 I llm_load_print_meta: n_merges         = 0
0.00.455.811 I llm_load_print_meta: vocab_only       = 0
0.00.455.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.455.811 I llm_load_print_meta: n_embd           = 2048
0.00.455.812 I llm_load_print_meta: n_layer          = 18
0.00.455.875 I llm_load_print_meta: n_head           = 8
0.00.455.882 I llm_load_print_meta: n_head_kv        = 1
0.00.455.883 I llm_load_print_meta: n_rot            = 256
0.00.455.883 I llm_load_print_meta: n_swa            = 0
0.00.455.883 I llm_load_print_meta: n_embd_head_k    = 256
0.00.455.884 I llm_load_print_meta: n_embd_head_v    = 256
0.00.455.888 I llm_load_print_meta: n_gqa            = 8
0.00.455.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.455.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.455.900 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.455.901 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.455.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.455.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.455.921 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.455.927 I llm_load_print_meta: n_ff             = 16384
0.00.455.927 I llm_load_print_meta: n_expert         = 0
0.00.455.928 I llm_load_print_meta: n_expert_used    = 0
0.00.455.928 I llm_load_print_meta: causal attn      = 1
0.00.455.929 I llm_load_print_meta: pooling type     = 0
0.00.455.930 I llm_load_print_meta: rope type        = 2
0.00.455.930 I llm_load_print_meta: rope scaling     = linear
0.00.455.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.455.933 I llm_load_print_meta: freq_scale_train = 1
0.00.455.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.455.934 I llm_load_print_meta: rope_finetuned   = unknown
0.00.455.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.455.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.455.935 I llm_load_print_meta: ssm_d_state      = 0
0.00.455.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.455.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.455.936 I llm_load_print_meta: model type       = 2B
0.00.455.937 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.455.938 I llm_load_print_meta: model params     = 2.51 B
0.00.455.939 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.455.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.455.940 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.455.941 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.455.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.455.942 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.455.945 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.455.946 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.455.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.455.954 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.455.954 I llm_load_print_meta: max token length = 93
0.00.456.127 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.513.612 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.520.431 I llama_new_context_with_model: n_ctx      = 8192
0.00.520.439 I llama_new_context_with_model: n_batch    = 2048
0.00.520.439 I llama_new_context_with_model: n_ubatch   = 512
0.00.520.440 I llama_new_context_with_model: flash_attn = 0
0.00.520.444 I llama_new_context_with_model: freq_base  = 10000.0
0.00.520.445 I llama_new_context_with_model: freq_scale = 1
0.00.552.218 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.552.261 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.552.378 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.553.812 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.553.819 I llama_new_context_with_model: graph nodes  = 601
0.00.553.820 I llama_new_context_with_model: graph splits = 1
0.00.553.835 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.135.173 I main: llama threadpool init, n_threads = 4
0.01.135.185 I 
0.01.135.281 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.135.285 I 
0.01.135.454 I sampler seed: 2498415822
0.01.135.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.135.470 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.135.470 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.135.471 I 
 seconally:

a) Identify the independent and dependent variables in the given scenario.
b) State the purpose of the study.

**Answer:**



0.12.117.152 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.70 tokens per second)
0.12.117.156 I llama_perf_context_print:        load time =    1132.15 ms
0.12.117.167 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.117.169 I llama_perf_context_print:        eval time =   10898.61 ms /    32 runs   (  340.58 ms per token,     2.94 tokens per second)
0.12.117.170 I llama_perf_context_print:       total time =   10981.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.745s
user	50m13.693s
sys	0m6.670s
