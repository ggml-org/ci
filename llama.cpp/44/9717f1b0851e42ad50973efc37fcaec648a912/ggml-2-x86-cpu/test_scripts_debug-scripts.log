+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.865 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.194 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.195 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.196 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.197 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.361 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.095 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.325 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.326 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.327 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.334 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.335 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.336 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.337 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.338 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.346 I llama_model_loader: - type  f32:   37 tensors
0.00.270.350 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.781 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.578 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.525 I llm_load_vocab: special tokens cache size = 5
0.00.600.577 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.649 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.653 I llm_load_print_meta: arch             = gemma
0.00.600.654 I llm_load_print_meta: vocab type       = SPM
0.00.600.654 I llm_load_print_meta: n_vocab          = 256000
0.00.600.656 I llm_load_print_meta: n_merges         = 0
0.00.600.657 I llm_load_print_meta: vocab_only       = 0
0.00.600.658 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.658 I llm_load_print_meta: n_embd           = 2048
0.00.600.658 I llm_load_print_meta: n_layer          = 18
0.00.600.720 I llm_load_print_meta: n_head           = 8
0.00.600.730 I llm_load_print_meta: n_head_kv        = 1
0.00.600.731 I llm_load_print_meta: n_rot            = 256
0.00.600.731 I llm_load_print_meta: n_swa            = 0
0.00.600.732 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.732 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.736 I llm_load_print_meta: n_gqa            = 8
0.00.600.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.750 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.752 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.769 I llm_load_print_meta: n_ff             = 16384
0.00.600.771 I llm_load_print_meta: n_expert         = 0
0.00.600.771 I llm_load_print_meta: n_expert_used    = 0
0.00.600.772 I llm_load_print_meta: causal attn      = 1
0.00.600.772 I llm_load_print_meta: pooling type     = 0
0.00.600.772 I llm_load_print_meta: rope type        = 2
0.00.600.773 I llm_load_print_meta: rope scaling     = linear
0.00.600.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.774 I llm_load_print_meta: freq_scale_train = 1
0.00.600.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.778 I llm_load_print_meta: model type       = 2B
0.00.600.779 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.780 I llm_load_print_meta: model params     = 2.51 B
0.00.600.781 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.784 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.785 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.791 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.793 I llm_load_print_meta: max token length = 93
0.00.600.959 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.892 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.702.900 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.702.901 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.702.901 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.702.902 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.702.903 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.708.559 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.567 I llama_new_context_with_model: n_batch    = 2048
0.00.708.567 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.568 I llama_new_context_with_model: flash_attn = 0
0.00.708.570 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.571 I llama_new_context_with_model: freq_scale = 1
0.00.737.247 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.737.295 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.406 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.814 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.819 I llama_new_context_with_model: graph nodes  = 601
0.00.738.819 I llama_new_context_with_model: graph splits = 1
0.00.738.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.397 I main: llama threadpool init, n_threads = 4
0.01.348.409 I 
0.01.348.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.521 I 
0.01.348.701 I sampler seed: 994383500
0.01.348.712 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.720 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.721 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.721 I 
 seconally.

I'm not sure what you're trying to ask. Could you please rephrase your question? [end of text]


0.12.306.028 I llama_perf_sampler_print:    sampling time =      43.25 ms /    27 runs   (    1.60 ms per token,   624.31 tokens per second)
0.12.306.031 I llama_perf_context_print:        load time =    1345.51 ms
0.12.306.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.306.050 I llama_perf_context_print:        eval time =   10877.35 ms /    26 runs   (  418.36 ms per token,     2.39 tokens per second)
0.12.306.051 I llama_perf_context_print:       total time =   10957.64 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.050 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.056 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.066 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.067 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.087 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.091 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.093 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.094 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.095 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.099 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.395 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.396 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.397 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.398 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.402 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.403 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.404 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.405 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.407 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.415 I llama_model_loader: - type  f32:   37 tensors
0.00.270.419 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.320 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.173 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.167 I llm_load_vocab: special tokens cache size = 5
0.00.589.154 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.228 I llm_load_print_meta: arch             = gemma
0.00.589.229 I llm_load_print_meta: vocab type       = SPM
0.00.589.229 I llm_load_print_meta: n_vocab          = 256000
0.00.589.232 I llm_load_print_meta: n_merges         = 0
0.00.589.232 I llm_load_print_meta: vocab_only       = 0
0.00.589.233 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.233 I llm_load_print_meta: n_embd           = 2048
0.00.589.234 I llm_load_print_meta: n_layer          = 18
0.00.589.298 I llm_load_print_meta: n_head           = 8
0.00.589.308 I llm_load_print_meta: n_head_kv        = 1
0.00.589.308 I llm_load_print_meta: n_rot            = 256
0.00.589.310 I llm_load_print_meta: n_swa            = 0
0.00.589.310 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.310 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.315 I llm_load_print_meta: n_gqa            = 8
0.00.589.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.325 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.328 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.336 I llm_load_print_meta: n_ff             = 16384
0.00.589.337 I llm_load_print_meta: n_expert         = 0
0.00.589.338 I llm_load_print_meta: n_expert_used    = 0
0.00.589.338 I llm_load_print_meta: causal attn      = 1
0.00.589.339 I llm_load_print_meta: pooling type     = 0
0.00.589.340 I llm_load_print_meta: rope type        = 2
0.00.589.340 I llm_load_print_meta: rope scaling     = linear
0.00.589.342 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.342 I llm_load_print_meta: freq_scale_train = 1
0.00.589.343 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.345 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.345 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.346 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.347 I llm_load_print_meta: model type       = 2B
0.00.589.348 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.349 I llm_load_print_meta: model params     = 2.51 B
0.00.589.350 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.350 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.351 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.360 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.362 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.363 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.363 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.364 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.370 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.372 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.372 I llm_load_print_meta: max token length = 93
0.00.589.542 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.318 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.690.101 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.108 I llama_new_context_with_model: n_batch    = 2048
0.00.690.108 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.109 I llama_new_context_with_model: flash_attn = 0
0.00.690.111 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.112 I llama_new_context_with_model: freq_scale = 1
0.00.719.229 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.276 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.772 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.776 I llama_new_context_with_model: graph nodes  = 601
0.00.720.777 I llama_new_context_with_model: graph splits = 1
0.00.720.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.746 I main: llama threadpool init, n_threads = 4
0.01.331.760 I 
0.01.331.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.872 I 
0.01.332.054 I sampler seed: 3300000714
0.01.332.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.072 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.075 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.075 I 
 increamental.

**Step 1: Identify the subject of the sentence.**
The subject is "the sky."

**Step 2: Determine the

0.14.960.417 I llama_perf_sampler_print:    sampling time =      50.66 ms /    33 runs   (    1.54 ms per token,   651.45 tokens per second)
0.14.960.420 I llama_perf_context_print:        load time =    1328.87 ms
0.14.960.421 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.423 I llama_perf_context_print:        eval time =   13532.66 ms /    32 runs   (  422.90 ms per token,     2.36 tokens per second)
0.14.960.423 I llama_perf_context_print:       total time =   13628.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.679 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.991 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.992 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.993 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.994 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.001 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.002 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.011 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.027 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.578 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.586 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.588 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.589 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.590 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.594 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.595 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.596 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.597 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.598 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.606 I llama_model_loader: - type  f32:   37 tensors
0.00.269.610 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.760 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.967 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.915 I llm_load_vocab: special tokens cache size = 5
0.00.610.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.942 I llm_load_print_meta: arch             = gemma
0.00.610.943 I llm_load_print_meta: vocab type       = SPM
0.00.610.944 I llm_load_print_meta: n_vocab          = 256000
0.00.610.946 I llm_load_print_meta: n_merges         = 0
0.00.610.946 I llm_load_print_meta: vocab_only       = 0
0.00.610.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.947 I llm_load_print_meta: n_embd           = 2048
0.00.610.948 I llm_load_print_meta: n_layer          = 18
0.00.611.013 I llm_load_print_meta: n_head           = 8
0.00.611.021 I llm_load_print_meta: n_head_kv        = 1
0.00.611.022 I llm_load_print_meta: n_rot            = 256
0.00.611.022 I llm_load_print_meta: n_swa            = 0
0.00.611.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.028 I llm_load_print_meta: n_gqa            = 8
0.00.611.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.042 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.042 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.043 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.048 I llm_load_print_meta: n_ff             = 16384
0.00.611.048 I llm_load_print_meta: n_expert         = 0
0.00.611.049 I llm_load_print_meta: n_expert_used    = 0
0.00.611.049 I llm_load_print_meta: causal attn      = 1
0.00.611.050 I llm_load_print_meta: pooling type     = 0
0.00.611.051 I llm_load_print_meta: rope type        = 2
0.00.611.051 I llm_load_print_meta: rope scaling     = linear
0.00.611.053 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.055 I llm_load_print_meta: freq_scale_train = 1
0.00.611.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.055 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.056 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.056 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.058 I llm_load_print_meta: model type       = 2B
0.00.611.059 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.059 I llm_load_print_meta: model params     = 2.51 B
0.00.611.060 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.061 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.074 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.079 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.079 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.080 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.087 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.089 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.089 I llm_load_print_meta: max token length = 93
0.00.611.262 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.021 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.691.033 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.034 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.691.034 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.691.035 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.036 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.696.909 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.917 I llama_new_context_with_model: n_batch    = 2048
0.00.696.917 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.918 I llama_new_context_with_model: flash_attn = 0
0.00.696.923 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.923 I llama_new_context_with_model: freq_scale = 1
0.00.726.518 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.563 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.180 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.185 I llama_new_context_with_model: graph nodes  = 601
0.00.728.185 I llama_new_context_with_model: graph splits = 1
0.00.728.202 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.982 I main: llama threadpool init, n_threads = 4
0.01.339.995 I 
0.01.340.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.105 I 
0.01.340.294 I sampler seed: 1362934368
0.01.340.305 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.319 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.321 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.321 I 
 increasities and the psychological mechanisms underlying them.

**Keywords:**
- Interpersonal conflict
- Psychological mechanisms
- Social cognition
- Emotion
- Narcissism

0.14.843.823 I llama_perf_sampler_print:    sampling time =      50.20 ms /    33 runs   (    1.52 ms per token,   657.32 tokens per second)
0.14.843.828 I llama_perf_context_print:        load time =    1337.12 ms
0.14.843.830 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.843.832 I llama_perf_context_print:        eval time =   13408.73 ms /    32 runs   (  419.02 ms per token,     2.39 tokens per second)
0.14.843.833 I llama_perf_context_print:       total time =   13503.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.713 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.925 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.033 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.037 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.051 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.053 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.063 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.741 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.753 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.754 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.755 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.760 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.761 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.762 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.763 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.764 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.775 I llama_model_loader: - type  f32:   37 tensors
0.00.273.778 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.259 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.231 I llm_load_vocab: special tokens cache size = 5
0.00.614.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.844 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.845 I llm_load_print_meta: arch             = gemma
0.00.614.845 I llm_load_print_meta: vocab type       = SPM
0.00.614.846 I llm_load_print_meta: n_vocab          = 256000
0.00.614.848 I llm_load_print_meta: n_merges         = 0
0.00.614.849 I llm_load_print_meta: vocab_only       = 0
0.00.614.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.850 I llm_load_print_meta: n_embd           = 2048
0.00.614.850 I llm_load_print_meta: n_layer          = 18
0.00.614.912 I llm_load_print_meta: n_head           = 8
0.00.614.919 I llm_load_print_meta: n_head_kv        = 1
0.00.614.919 I llm_load_print_meta: n_rot            = 256
0.00.614.920 I llm_load_print_meta: n_swa            = 0
0.00.614.920 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.922 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.927 I llm_load_print_meta: n_gqa            = 8
0.00.614.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.936 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.937 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.939 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.939 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.939 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.940 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.944 I llm_load_print_meta: n_ff             = 16384
0.00.614.945 I llm_load_print_meta: n_expert         = 0
0.00.614.945 I llm_load_print_meta: n_expert_used    = 0
0.00.614.946 I llm_load_print_meta: causal attn      = 1
0.00.614.947 I llm_load_print_meta: pooling type     = 0
0.00.614.948 I llm_load_print_meta: rope type        = 2
0.00.614.948 I llm_load_print_meta: rope scaling     = linear
0.00.614.970 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.976 I llm_load_print_meta: freq_scale_train = 1
0.00.614.976 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.977 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.986 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.993 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.999 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.000 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.001 I llm_load_print_meta: model type       = 2B
0.00.615.002 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.010 I llm_load_print_meta: model params     = 2.51 B
0.00.615.011 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.022 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.029 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.031 I llm_load_print_meta: max token length = 93
0.00.615.203 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.590 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.686.601 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.692.262 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.270 I llama_new_context_with_model: n_batch    = 2048
0.00.692.270 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.271 I llama_new_context_with_model: flash_attn = 0
0.00.692.273 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.274 I llama_new_context_with_model: freq_scale = 1
0.00.720.764 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.816 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.276 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.280 I llama_new_context_with_model: graph nodes  = 601
0.00.722.281 I llama_new_context_with_model: graph splits = 1
0.00.722.298 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.947 I main: llama threadpool init, n_threads = 4
0.01.337.960 I 
0.01.338.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.070 I 
0.01.338.250 I sampler seed: 1507202323
0.01.338.261 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.268 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.338.269 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.269 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive content that is not appropriate for me to provide. [end of text]


0.12.684.955 I llama_perf_sampler_print:    sampling time =      44.78 ms /    28 runs   (    1.60 ms per token,   625.34 tokens per second)
0.12.684.958 I llama_perf_context_print:        load time =    1335.08 ms
0.12.684.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.684.983 I llama_perf_context_print:        eval time =   11263.87 ms /    27 runs   (  417.18 ms per token,     2.40 tokens per second)
0.12.684.985 I llama_perf_context_print:       total time =   11347.02 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.471s
user	3m30.384s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3976 (449717f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199127.04 ms
main:    total time = 199127.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.027.862 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.028.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.028.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.179 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.194 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.201 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.028.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.990 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.117 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.126 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.127 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.133 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.142 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.152 I llama_model_loader: - type  f32:   37 tensors
0.00.273.156 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.157 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.534 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.615 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.558 I llm_load_vocab: special tokens cache size = 5
0.00.611.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.960 I llm_load_print_meta: arch             = gemma
0.00.611.961 I llm_load_print_meta: vocab type       = SPM
0.00.611.962 I llm_load_print_meta: n_vocab          = 256000
0.00.611.964 I llm_load_print_meta: n_merges         = 0
0.00.611.964 I llm_load_print_meta: vocab_only       = 0
0.00.611.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.965 I llm_load_print_meta: n_embd           = 2048
0.00.611.966 I llm_load_print_meta: n_layer          = 18
0.00.612.028 I llm_load_print_meta: n_head           = 8
0.00.612.035 I llm_load_print_meta: n_head_kv        = 1
0.00.612.035 I llm_load_print_meta: n_rot            = 256
0.00.612.037 I llm_load_print_meta: n_swa            = 0
0.00.612.038 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.038 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.054 I llm_load_print_meta: n_gqa            = 8
0.00.612.061 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.078 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.084 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.084 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.085 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.086 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.091 I llm_load_print_meta: n_ff             = 16384
0.00.612.092 I llm_load_print_meta: n_expert         = 0
0.00.612.092 I llm_load_print_meta: n_expert_used    = 0
0.00.612.093 I llm_load_print_meta: causal attn      = 1
0.00.612.093 I llm_load_print_meta: pooling type     = 0
0.00.612.093 I llm_load_print_meta: rope type        = 2
0.00.612.094 I llm_load_print_meta: rope scaling     = linear
0.00.612.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.096 I llm_load_print_meta: freq_scale_train = 1
0.00.612.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.100 I llm_load_print_meta: model type       = 2B
0.00.612.101 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.612.102 I llm_load_print_meta: model params     = 2.51 B
0.00.612.103 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.612.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.106 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.113 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.125 I llm_load_print_meta: max token length = 93
0.00.612.296 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.517 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.672.526 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.672.527 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.672.528 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.672.528 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.672.529 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.678.182 I llama_new_context_with_model: n_ctx      = 8192
0.00.678.188 I llama_new_context_with_model: n_batch    = 2048
0.00.678.189 I llama_new_context_with_model: n_ubatch   = 512
0.00.678.189 I llama_new_context_with_model: flash_attn = 0
0.00.678.192 I llama_new_context_with_model: freq_base  = 10000.0
0.00.678.193 I llama_new_context_with_model: freq_scale = 1
0.00.707.053 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.098 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.208 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.602 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.607 I llama_new_context_with_model: graph nodes  = 601
0.00.708.607 I llama_new_context_with_model: graph splits = 1
0.00.708.622 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.285 I main: llama threadpool init, n_threads = 4
0.01.289.299 I 
0.01.289.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.412 I 
0.01.289.592 I sampler seed: 2585120488
0.01.289.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.609 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.610 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.613 I 
 increamically!

I apologize for the typo. I am unable to generate responses that contain offensive or inappropriate language. [end of text]


0.09.461.770 I llama_perf_sampler_print:    sampling time =      37.21 ms /    25 runs   (    1.49 ms per token,   671.83 tokens per second)
0.09.461.785 I llama_perf_context_print:        load time =    1286.41 ms
0.09.461.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.461.788 I llama_perf_context_print:        eval time =    8101.20 ms /    24 runs   (  337.55 ms per token,     2.96 tokens per second)
0.09.461.789 I llama_perf_context_print:       total time =    8172.50 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3976 (449717f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199416.37 ms
main:    total time = 199416.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.810 I main: llama backend init
0.00.002.751 I main: load the model and apply lora adapter, if any
0.00.024.652 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.764 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.768 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.769 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.770 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.780 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.781 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.784 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.786 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.081 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.088 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.089 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.091 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.092 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.093 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.094 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.098 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.099 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.107 I llama_model_loader: - type  f32:   37 tensors
0.00.270.111 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.909 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.838 I llm_load_vocab: special tokens cache size = 5
0.00.615.315 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.381 I llm_load_print_meta: arch             = gemma
0.00.615.381 I llm_load_print_meta: vocab type       = SPM
0.00.615.382 I llm_load_print_meta: n_vocab          = 256000
0.00.615.384 I llm_load_print_meta: n_merges         = 0
0.00.615.385 I llm_load_print_meta: vocab_only       = 0
0.00.615.385 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.386 I llm_load_print_meta: n_embd           = 2048
0.00.615.386 I llm_load_print_meta: n_layer          = 18
0.00.615.453 I llm_load_print_meta: n_head           = 8
0.00.615.461 I llm_load_print_meta: n_head_kv        = 1
0.00.615.461 I llm_load_print_meta: n_rot            = 256
0.00.615.462 I llm_load_print_meta: n_swa            = 0
0.00.615.463 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.464 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.469 I llm_load_print_meta: n_gqa            = 8
0.00.615.484 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.491 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.492 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.495 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.495 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.500 I llm_load_print_meta: n_ff             = 16384
0.00.615.501 I llm_load_print_meta: n_expert         = 0
0.00.615.502 I llm_load_print_meta: n_expert_used    = 0
0.00.615.506 I llm_load_print_meta: causal attn      = 1
0.00.615.506 I llm_load_print_meta: pooling type     = 0
0.00.615.507 I llm_load_print_meta: rope type        = 2
0.00.615.507 I llm_load_print_meta: rope scaling     = linear
0.00.615.508 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.509 I llm_load_print_meta: freq_scale_train = 1
0.00.615.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.532 I llm_load_print_meta: model type       = 2B
0.00.615.536 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.536 I llm_load_print_meta: model params     = 2.51 B
0.00.615.537 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.538 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.540 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.540 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.541 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.548 I llm_load_print_meta: max token length = 93
0.00.615.725 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.126 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.679.639 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.646 I llama_new_context_with_model: n_batch    = 2048
0.00.679.646 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.647 I llama_new_context_with_model: flash_attn = 0
0.00.679.650 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.650 I llama_new_context_with_model: freq_scale = 1
0.00.708.992 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.040 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.149 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.482 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.488 I llama_new_context_with_model: graph nodes  = 601
0.00.710.488 I llama_new_context_with_model: graph splits = 1
0.00.710.503 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.783 I main: llama threadpool init, n_threads = 4
0.01.290.797 I 
0.01.290.909 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.913 I 
0.01.291.093 I sampler seed: 3149174489
0.01.291.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.110 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.111 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.112 I 
 encompate the following sentence: "The key to effective communication lies in understanding the recipient's perspective and tailoring communication accordingly".

**Explanation:**

The sentence

0.12.220.445 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.33 tokens per second)
0.12.220.448 I llama_perf_context_print:        load time =    1287.95 ms
0.12.220.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.220.451 I llama_perf_context_print:        eval time =   10835.68 ms /    32 runs   (  338.61 ms per token,     2.95 tokens per second)
0.12.220.452 I llama_perf_context_print:       total time =   10929.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.102s
user	50m2.667s
sys	0m6.272s
