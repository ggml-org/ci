+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.022.123 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.170 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.188 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.189 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.189 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.190 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.194 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.195 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.195 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.196 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.197 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.593 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.599 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.600 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.600 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.601 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.602 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.602 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.604 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.605 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.606 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.606 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.608 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.611 I llama_model_loader: - type  f32:   37 tensors
0.00.132.614 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.254 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.178 I llm_load_vocab: special tokens cache size = 5
0.00.272.294 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.312 I llm_load_print_meta: arch             = gemma
0.00.272.313 I llm_load_print_meta: vocab type       = SPM
0.00.272.313 I llm_load_print_meta: n_vocab          = 256000
0.00.272.314 I llm_load_print_meta: n_merges         = 0
0.00.272.314 I llm_load_print_meta: vocab_only       = 0
0.00.272.314 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.315 I llm_load_print_meta: n_embd           = 2048
0.00.272.315 I llm_load_print_meta: n_layer          = 18
0.00.272.326 I llm_load_print_meta: n_head           = 8
0.00.272.327 I llm_load_print_meta: n_head_kv        = 1
0.00.272.328 I llm_load_print_meta: n_rot            = 256
0.00.272.328 I llm_load_print_meta: n_swa            = 0
0.00.272.328 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.329 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.330 I llm_load_print_meta: n_gqa            = 8
0.00.272.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.334 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.334 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.335 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.336 I llm_load_print_meta: n_ff             = 16384
0.00.272.336 I llm_load_print_meta: n_expert         = 0
0.00.272.336 I llm_load_print_meta: n_expert_used    = 0
0.00.272.337 I llm_load_print_meta: causal attn      = 1
0.00.272.337 I llm_load_print_meta: pooling type     = 0
0.00.272.337 I llm_load_print_meta: rope type        = 2
0.00.272.338 I llm_load_print_meta: rope scaling     = linear
0.00.272.339 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.340 I llm_load_print_meta: freq_scale_train = 1
0.00.272.341 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.341 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.341 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.341 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.342 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.342 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.343 I llm_load_print_meta: model type       = 2B
0.00.272.343 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.344 I llm_load_print_meta: model params     = 2.51 B
0.00.272.345 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.345 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.346 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.346 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.347 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.347 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.348 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.348 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.349 I llm_load_print_meta: max token length = 93
0.00.272.375 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.548 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.372.556 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.372.557 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.372.558 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.372.558 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.372.559 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.377.770 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.777 I llama_new_context_with_model: n_batch    = 2048
0.00.377.777 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.778 I llama_new_context_with_model: flash_attn = 0
0.00.377.780 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.781 I llama_new_context_with_model: freq_scale = 1
0.00.406.565 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.579 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.666 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.559 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.567 I llama_new_context_with_model: graph nodes  = 601
0.00.407.567 I llama_new_context_with_model: graph splits = 1
0.00.407.569 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.036 I main: llama threadpool init, n_threads = 4
0.00.498.050 I 
0.00.498.126 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.129 I 
0.00.498.167 I sampler seed: 2329612023
0.00.498.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.181 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.181 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.181 I 
 increasively.

I am a computer science student and I am trying to understand how to implement a linked list in C++.

**Implementation:**

```c

0.02.759.449 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6938.60 tokens per second)
0.02.759.452 I llama_perf_context_print:        load time =     496.16 ms
0.02.759.453 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.759.455 I llama_perf_context_print:        eval time =    2241.01 ms /    32 runs   (   70.03 ms per token,    14.28 tokens per second)
0.02.759.458 I llama_perf_context_print:       total time =    2261.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.530 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.021.749 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.763 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.777 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.778 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.782 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.783 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.784 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.785 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.329 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.468 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.281 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.287 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.287 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.288 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.289 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.293 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.294 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.296 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.299 I llama_model_loader: - type  f32:   37 tensors
0.00.132.302 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.952 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.530 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.111 I llm_load_vocab: special tokens cache size = 5
0.00.272.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.949 I llm_load_print_meta: arch             = gemma
0.00.272.949 I llm_load_print_meta: vocab type       = SPM
0.00.272.950 I llm_load_print_meta: n_vocab          = 256000
0.00.272.950 I llm_load_print_meta: n_merges         = 0
0.00.272.951 I llm_load_print_meta: vocab_only       = 0
0.00.272.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.951 I llm_load_print_meta: n_embd           = 2048
0.00.272.952 I llm_load_print_meta: n_layer          = 18
0.00.272.964 I llm_load_print_meta: n_head           = 8
0.00.272.965 I llm_load_print_meta: n_head_kv        = 1
0.00.272.966 I llm_load_print_meta: n_rot            = 256
0.00.272.966 I llm_load_print_meta: n_swa            = 0
0.00.272.967 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.968 I llm_load_print_meta: n_gqa            = 8
0.00.272.969 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.970 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.971 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.973 I llm_load_print_meta: n_ff             = 16384
0.00.272.973 I llm_load_print_meta: n_expert         = 0
0.00.272.974 I llm_load_print_meta: n_expert_used    = 0
0.00.272.974 I llm_load_print_meta: causal attn      = 1
0.00.272.975 I llm_load_print_meta: pooling type     = 0
0.00.272.975 I llm_load_print_meta: rope type        = 2
0.00.272.975 I llm_load_print_meta: rope scaling     = linear
0.00.272.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.978 I llm_load_print_meta: freq_scale_train = 1
0.00.272.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.979 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.980 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.981 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.982 I llm_load_print_meta: model type       = 2B
0.00.272.983 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.983 I llm_load_print_meta: model params     = 2.51 B
0.00.272.984 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.985 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.985 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.986 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.987 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.988 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.988 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.988 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.989 I llm_load_print_meta: max token length = 93
0.00.273.007 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.366.965 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.371.973 I llama_new_context_with_model: n_ctx      = 8192
0.00.371.979 I llama_new_context_with_model: n_batch    = 2048
0.00.371.979 I llama_new_context_with_model: n_ubatch   = 512
0.00.371.980 I llama_new_context_with_model: flash_attn = 0
0.00.371.982 I llama_new_context_with_model: freq_base  = 10000.0
0.00.371.983 I llama_new_context_with_model: freq_scale = 1
0.00.400.934 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.400.951 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.902 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.910 I llama_new_context_with_model: graph nodes  = 601
0.00.401.910 I llama_new_context_with_model: graph splits = 1
0.00.401.912 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.687 I main: llama threadpool init, n_threads = 4
0.00.488.700 I 
0.00.488.777 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.780 I 
0.00.488.819 I sampler seed: 986917929
0.00.488.829 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.836 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.837 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.837 I 
 increasities!

I am unable to access the provided text as it is not available to me. Please provide me with the text so that I can assist you

0.02.675.122 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6787.33 tokens per second)
0.02.675.126 I llama_perf_context_print:        load time =     486.85 ms
0.02.675.127 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.129 I llama_perf_context_print:        eval time =    2166.42 ms /    32 runs   (   67.70 ms per token,    14.77 tokens per second)
0.02.675.130 I llama_perf_context_print:       total time =    2186.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.027.891 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.971 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.972 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.973 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.974 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.979 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.980 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.981 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.265 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.139.147 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.950 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.956 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.957 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.958 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.958 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.959 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.962 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.965 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.966 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.145.966 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.970 I llama_model_loader: - type  f32:   37 tensors
0.00.145.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.804 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.016 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.523 I llm_load_vocab: special tokens cache size = 5
0.00.286.425 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.441 I llm_load_print_meta: arch             = gemma
0.00.286.442 I llm_load_print_meta: vocab type       = SPM
0.00.286.442 I llm_load_print_meta: n_vocab          = 256000
0.00.286.443 I llm_load_print_meta: n_merges         = 0
0.00.286.443 I llm_load_print_meta: vocab_only       = 0
0.00.286.443 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.444 I llm_load_print_meta: n_embd           = 2048
0.00.286.444 I llm_load_print_meta: n_layer          = 18
0.00.286.454 I llm_load_print_meta: n_head           = 8
0.00.286.455 I llm_load_print_meta: n_head_kv        = 1
0.00.286.456 I llm_load_print_meta: n_rot            = 256
0.00.286.456 I llm_load_print_meta: n_swa            = 0
0.00.286.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.461 I llm_load_print_meta: n_gqa            = 8
0.00.286.462 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.463 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.465 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.466 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.467 I llm_load_print_meta: n_ff             = 16384
0.00.286.467 I llm_load_print_meta: n_expert         = 0
0.00.286.467 I llm_load_print_meta: n_expert_used    = 0
0.00.286.468 I llm_load_print_meta: causal attn      = 1
0.00.286.468 I llm_load_print_meta: pooling type     = 0
0.00.286.470 I llm_load_print_meta: rope type        = 2
0.00.286.470 I llm_load_print_meta: rope scaling     = linear
0.00.286.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.472 I llm_load_print_meta: freq_scale_train = 1
0.00.286.473 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.473 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.474 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.474 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.476 I llm_load_print_meta: model type       = 2B
0.00.286.476 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.477 I llm_load_print_meta: model params     = 2.51 B
0.00.286.478 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.481 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.483 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.484 I llm_load_print_meta: max token length = 93
0.00.286.502 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.372 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.369.378 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.369.379 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.369.379 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.369.380 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.369.380 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.374.422 I llama_new_context_with_model: n_ctx      = 8192
0.00.374.428 I llama_new_context_with_model: n_batch    = 2048
0.00.374.428 I llama_new_context_with_model: n_ubatch   = 512
0.00.374.429 I llama_new_context_with_model: flash_attn = 0
0.00.374.431 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.432 I llama_new_context_with_model: freq_scale = 1
0.00.402.983 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.402.997 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.089 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.003 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.010 I llama_new_context_with_model: graph nodes  = 601
0.00.404.010 I llama_new_context_with_model: graph splits = 1
0.00.404.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.260 I main: llama threadpool init, n_threads = 4
0.00.496.273 I 
0.00.496.351 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.354 I 
0.00.496.397 I sampler seed: 4281017073
0.00.496.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.410 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.411 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.411 I 
 increamentalism, which is an essential component of the liberal worldview, is incompatible with a consistent commitment to social justice.

**Explanation:**

* **Compatibility

0.02.738.029 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7012.32 tokens per second)
0.02.738.031 I llama_perf_context_print:        load time =     494.39 ms
0.02.738.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.738.034 I llama_perf_context_print:        eval time =    2221.22 ms /    32 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.738.035 I llama_perf_context_print:       total time =    2241.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.553 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.021.577 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.624 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.635 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.648 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.649 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.649 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.655 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.656 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.656 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.657 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.658 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.733 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.996 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.804 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.811 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.812 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.813 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.814 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.815 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.818 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.818 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.819 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.819 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.820 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.824 I llama_model_loader: - type  f32:   37 tensors
0.00.132.827 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.718 I llm_load_vocab: special tokens cache size = 5
0.00.272.687 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.703 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.704 I llm_load_print_meta: arch             = gemma
0.00.272.704 I llm_load_print_meta: vocab type       = SPM
0.00.272.705 I llm_load_print_meta: n_vocab          = 256000
0.00.272.705 I llm_load_print_meta: n_merges         = 0
0.00.272.705 I llm_load_print_meta: vocab_only       = 0
0.00.272.706 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.706 I llm_load_print_meta: n_embd           = 2048
0.00.272.706 I llm_load_print_meta: n_layer          = 18
0.00.272.718 I llm_load_print_meta: n_head           = 8
0.00.272.719 I llm_load_print_meta: n_head_kv        = 1
0.00.272.719 I llm_load_print_meta: n_rot            = 256
0.00.272.720 I llm_load_print_meta: n_swa            = 0
0.00.272.720 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.720 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.721 I llm_load_print_meta: n_gqa            = 8
0.00.272.722 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.724 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.726 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.726 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.727 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.729 I llm_load_print_meta: n_ff             = 16384
0.00.272.730 I llm_load_print_meta: n_expert         = 0
0.00.272.731 I llm_load_print_meta: n_expert_used    = 0
0.00.272.731 I llm_load_print_meta: causal attn      = 1
0.00.272.731 I llm_load_print_meta: pooling type     = 0
0.00.272.732 I llm_load_print_meta: rope type        = 2
0.00.272.733 I llm_load_print_meta: rope scaling     = linear
0.00.272.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.736 I llm_load_print_meta: freq_scale_train = 1
0.00.272.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.742 I llm_load_print_meta: model type       = 2B
0.00.272.742 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.743 I llm_load_print_meta: model params     = 2.51 B
0.00.272.744 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.745 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.745 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.746 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.747 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.748 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.748 I llm_load_print_meta: max token length = 93
0.00.272.770 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.342.770 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.342.779 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.347.835 I llama_new_context_with_model: n_ctx      = 8192
0.00.347.843 I llama_new_context_with_model: n_batch    = 2048
0.00.347.843 I llama_new_context_with_model: n_ubatch   = 512
0.00.347.843 I llama_new_context_with_model: flash_attn = 0
0.00.347.846 I llama_new_context_with_model: freq_base  = 10000.0
0.00.347.847 I llama_new_context_with_model: freq_scale = 1
0.00.377.205 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.222 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.173 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.181 I llama_new_context_with_model: graph nodes  = 601
0.00.378.181 I llama_new_context_with_model: graph splits = 1
0.00.378.183 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.433 I main: llama threadpool init, n_threads = 4
0.00.474.446 I 
0.00.474.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.537 I 
0.00.474.585 I sampler seed: 1003799920
0.00.474.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.600 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.600 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.601 I 
 seconally to the following passage:

"...the most common cause of dental problems is poor oral hygiene, which includes inadequate brushing, poor oral habits, and lack

0.02.896.714 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6302.52 tokens per second)
0.02.896.717 I llama_perf_context_print:        load time =     472.56 ms
0.02.896.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.896.719 I llama_perf_context_print:        eval time =    2401.96 ms /    32 runs   (   75.06 ms per token,    13.32 tokens per second)
0.02.896.720 I llama_perf_context_print:       total time =    2422.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.484s
user	0m39.324s
sys	0m9.394s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3976 (449717f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31983.37 ms
main:    total time = 31983.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.075 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.140 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.144 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.147 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.148 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.149 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.150 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.153 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.154 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.155 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.231 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.385 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.391 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.391 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.392 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.396 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.397 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.398 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.400 I llama_model_loader: - type  f32:   37 tensors
0.00.133.403 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.403 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.563 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.673 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.188 I llm_load_vocab: special tokens cache size = 5
0.00.264.170 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.185 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.186 I llm_load_print_meta: arch             = gemma
0.00.264.186 I llm_load_print_meta: vocab type       = SPM
0.00.264.187 I llm_load_print_meta: n_vocab          = 256000
0.00.264.187 I llm_load_print_meta: n_merges         = 0
0.00.264.188 I llm_load_print_meta: vocab_only       = 0
0.00.264.188 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.188 I llm_load_print_meta: n_embd           = 2048
0.00.264.189 I llm_load_print_meta: n_layer          = 18
0.00.264.201 I llm_load_print_meta: n_head           = 8
0.00.264.202 I llm_load_print_meta: n_head_kv        = 1
0.00.264.202 I llm_load_print_meta: n_rot            = 256
0.00.264.202 I llm_load_print_meta: n_swa            = 0
0.00.264.203 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.203 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.204 I llm_load_print_meta: n_gqa            = 8
0.00.264.205 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.206 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.207 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.208 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.209 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.210 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.211 I llm_load_print_meta: n_ff             = 16384
0.00.264.212 I llm_load_print_meta: n_expert         = 0
0.00.264.212 I llm_load_print_meta: n_expert_used    = 0
0.00.264.213 I llm_load_print_meta: causal attn      = 1
0.00.264.214 I llm_load_print_meta: pooling type     = 0
0.00.264.214 I llm_load_print_meta: rope type        = 2
0.00.264.215 I llm_load_print_meta: rope scaling     = linear
0.00.264.216 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.217 I llm_load_print_meta: freq_scale_train = 1
0.00.264.217 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.218 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.218 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.218 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.219 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.219 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.221 I llm_load_print_meta: model type       = 2B
0.00.264.221 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.223 I llm_load_print_meta: model params     = 2.51 B
0.00.264.223 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.224 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.225 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.225 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.227 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.227 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.227 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.227 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.228 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.229 I llm_load_print_meta: max token length = 93
0.00.264.249 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.323.661 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.323.669 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.323.669 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.323.670 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.323.671 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.323.671 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.328.728 I llama_new_context_with_model: n_ctx      = 8192
0.00.328.735 I llama_new_context_with_model: n_batch    = 2048
0.00.328.735 I llama_new_context_with_model: n_ubatch   = 512
0.00.328.736 I llama_new_context_with_model: flash_attn = 0
0.00.328.738 I llama_new_context_with_model: freq_base  = 10000.0
0.00.328.738 I llama_new_context_with_model: freq_scale = 1
0.00.357.207 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.222 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.314 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.167 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.176 I llama_new_context_with_model: graph nodes  = 601
0.00.358.176 I llama_new_context_with_model: graph splits = 1
0.00.358.178 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.983 I main: llama threadpool init, n_threads = 4
0.00.438.997 I 
0.00.439.074 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.077 I 
0.00.439.117 I sampler seed: 1938012547
0.00.439.128 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.132 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.132 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.133 I 
 increamically.

I am unable to answer this question as it contains inappropriate content and violates our safety policies. [end of text]


0.01.595.390 I llama_perf_sampler_print:    sampling time =       3.46 ms /    24 runs   (    0.14 ms per token,  6926.41 tokens per second)
0.01.595.392 I llama_perf_context_print:        load time =     437.11 ms
0.01.595.393 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.595.395 I llama_perf_context_print:        eval time =    1142.56 ms /    23 runs   (   49.68 ms per token,    20.13 tokens per second)
0.01.595.395 I llama_perf_context_print:       total time =    1156.41 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3976 (449717f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32075.87 ms
main:    total time = 32075.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 3976 (449717f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.001.829 I main: load the model and apply lora adapter, if any
0.00.022.016 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.030 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.039 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.044 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.045 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.045 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.046 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.051 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.051 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.052 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.998 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.793 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.799 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.799 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.802 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.809 I llama_model_loader: - type  f32:   37 tensors
0.00.132.811 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.812 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.333 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.717 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.206 I llm_load_vocab: special tokens cache size = 5
0.00.269.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.147 I llm_load_print_meta: arch             = gemma
0.00.269.148 I llm_load_print_meta: vocab type       = SPM
0.00.269.148 I llm_load_print_meta: n_vocab          = 256000
0.00.269.149 I llm_load_print_meta: n_merges         = 0
0.00.269.149 I llm_load_print_meta: vocab_only       = 0
0.00.269.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.149 I llm_load_print_meta: n_embd           = 2048
0.00.269.150 I llm_load_print_meta: n_layer          = 18
0.00.269.161 I llm_load_print_meta: n_head           = 8
0.00.269.162 I llm_load_print_meta: n_head_kv        = 1
0.00.269.162 I llm_load_print_meta: n_rot            = 256
0.00.269.163 I llm_load_print_meta: n_swa            = 0
0.00.269.163 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.163 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.164 I llm_load_print_meta: n_gqa            = 8
0.00.269.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.166 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.168 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.169 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.169 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.170 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.171 I llm_load_print_meta: n_ff             = 16384
0.00.269.171 I llm_load_print_meta: n_expert         = 0
0.00.269.172 I llm_load_print_meta: n_expert_used    = 0
0.00.269.172 I llm_load_print_meta: causal attn      = 1
0.00.269.173 I llm_load_print_meta: pooling type     = 0
0.00.269.174 I llm_load_print_meta: rope type        = 2
0.00.269.174 I llm_load_print_meta: rope scaling     = linear
0.00.269.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.176 I llm_load_print_meta: freq_scale_train = 1
0.00.269.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.177 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.178 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.178 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.178 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.179 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.180 I llm_load_print_meta: model type       = 2B
0.00.269.180 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.181 I llm_load_print_meta: model params     = 2.51 B
0.00.269.182 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.182 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.183 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.184 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.184 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.184 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.184 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.186 I llm_load_print_meta: max token length = 93
0.00.269.204 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.046 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.331.965 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.970 I llama_new_context_with_model: n_batch    = 2048
0.00.331.971 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.971 I llama_new_context_with_model: flash_attn = 0
0.00.331.973 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.974 I llama_new_context_with_model: freq_scale = 1
0.00.361.309 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.327 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.422 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.273 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.280 I llama_new_context_with_model: graph nodes  = 601
0.00.362.281 I llama_new_context_with_model: graph splits = 1
0.00.362.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.878 I main: llama threadpool init, n_threads = 4
0.00.442.889 I 
0.00.442.968 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.971 I 
0.00.443.011 I sampler seed: 2730792501
0.00.443.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.025 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.026 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.026 I 
 squaRED text to create a visual representation.

**Question:** What are the benefits and drawbacks of using artificial intelligence in education?

**Benefits:**

*

0.02.019.396 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7015.31 tokens per second)
0.02.019.398 I llama_perf_context_print:        load time =     441.03 ms
0.02.019.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.019.401 I llama_perf_context_print:        eval time =    1557.29 ms /    32 runs   (   48.67 ms per token,    20.55 tokens per second)
0.02.019.401 I llama_perf_context_print:       total time =    1576.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.650s
user	8m12.417s
sys	0m7.128s
