+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.922 I main: load the model and apply lora adapter, if any
0.00.023.821 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.832 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.925 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.940 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.947 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.981 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.982 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.623 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.426 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.427 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.435 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.436 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.438 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.439 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.441 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.450 I llama_model_loader: - type  f32:   37 tensors
0.00.351.453 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.918 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.665 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.658 I llm_load_vocab: special tokens cache size = 5
0.00.833.037 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.112 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.116 I llm_load_print_meta: arch             = gemma
0.00.833.117 I llm_load_print_meta: vocab type       = SPM
0.00.833.118 I llm_load_print_meta: n_vocab          = 256000
0.00.833.120 I llm_load_print_meta: n_merges         = 0
0.00.833.121 I llm_load_print_meta: vocab_only       = 0
0.00.833.121 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.122 I llm_load_print_meta: n_embd           = 2048
0.00.833.122 I llm_load_print_meta: n_layer          = 18
0.00.833.189 I llm_load_print_meta: n_head           = 8
0.00.833.199 I llm_load_print_meta: n_head_kv        = 1
0.00.833.200 I llm_load_print_meta: n_rot            = 256
0.00.833.201 I llm_load_print_meta: n_swa            = 0
0.00.833.202 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.202 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.208 I llm_load_print_meta: n_gqa            = 8
0.00.833.213 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.218 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.220 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.222 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.222 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.223 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.224 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.229 I llm_load_print_meta: n_ff             = 16384
0.00.833.232 I llm_load_print_meta: n_expert         = 0
0.00.833.232 I llm_load_print_meta: n_expert_used    = 0
0.00.833.232 I llm_load_print_meta: causal attn      = 1
0.00.833.233 I llm_load_print_meta: pooling type     = 0
0.00.833.233 I llm_load_print_meta: rope type        = 2
0.00.833.234 I llm_load_print_meta: rope scaling     = linear
0.00.833.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.236 I llm_load_print_meta: freq_scale_train = 1
0.00.833.236 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.236 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.237 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.237 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.237 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.238 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.238 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.239 I llm_load_print_meta: model type       = 2B
0.00.833.240 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.240 I llm_load_print_meta: model params     = 2.51 B
0.00.833.252 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.253 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.254 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.254 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.255 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.256 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.265 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.265 I llm_load_print_meta: max token length = 93
0.00.935.817 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.935.828 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.935.829 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.935.829 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.935.830 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.935.831 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.941.892 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.900 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.900 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.900 I llama_new_context_with_model: n_batch       = 2048
0.00.941.901 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.901 I llama_new_context_with_model: flash_attn    = 0
0.00.941.904 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.905 I llama_new_context_with_model: freq_scale    = 1
0.00.941.905 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.279 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.322 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.444 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.983 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.988 I llama_new_context_with_model: graph nodes  = 601
0.00.958.988 I llama_new_context_with_model: graph splits = 1
0.00.959.011 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.230 I main: llama threadpool init, n_threads = 4
0.01.568.245 I 
0.01.568.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.568.361 I 
0.01.568.601 I sampler seed: 1877500182
0.01.568.615 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.635 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.636 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.639 I 
 increasities. [end of text]


0.03.260.700 I llama_perf_sampler_print:    sampling time =       6.14 ms /     5 runs   (    1.23 ms per token,   814.60 tokens per second)
0.03.260.704 I llama_perf_context_print:        load time =    1567.21 ms
0.03.260.706 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.260.708 I llama_perf_context_print:        eval time =    1679.24 ms /     4 runs   (  419.81 ms per token,     2.38 tokens per second)
0.03.260.710 I llama_perf_context_print:       total time =    1692.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.023.389 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.500 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.503 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.509 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.513 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.516 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.517 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.518 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.532 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.534 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.165 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.308 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.312 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.314 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.315 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.323 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.324 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.325 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.334 I llama_model_loader: - type  f32:   37 tensors
0.00.350.337 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.039 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.913 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.919 I llm_load_vocab: special tokens cache size = 5
0.00.823.523 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.596 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.597 I llm_load_print_meta: arch             = gemma
0.00.823.598 I llm_load_print_meta: vocab type       = SPM
0.00.823.599 I llm_load_print_meta: n_vocab          = 256000
0.00.823.601 I llm_load_print_meta: n_merges         = 0
0.00.823.602 I llm_load_print_meta: vocab_only       = 0
0.00.823.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.603 I llm_load_print_meta: n_embd           = 2048
0.00.823.603 I llm_load_print_meta: n_layer          = 18
0.00.823.669 I llm_load_print_meta: n_head           = 8
0.00.823.676 I llm_load_print_meta: n_head_kv        = 1
0.00.823.677 I llm_load_print_meta: n_rot            = 256
0.00.823.677 I llm_load_print_meta: n_swa            = 0
0.00.823.678 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.680 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.684 I llm_load_print_meta: n_gqa            = 8
0.00.823.689 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.694 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.698 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.699 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.707 I llm_load_print_meta: n_ff             = 16384
0.00.823.708 I llm_load_print_meta: n_expert         = 0
0.00.823.708 I llm_load_print_meta: n_expert_used    = 0
0.00.823.709 I llm_load_print_meta: causal attn      = 1
0.00.823.709 I llm_load_print_meta: pooling type     = 0
0.00.823.710 I llm_load_print_meta: rope type        = 2
0.00.823.721 I llm_load_print_meta: rope scaling     = linear
0.00.823.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.723 I llm_load_print_meta: freq_scale_train = 1
0.00.823.724 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.724 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.725 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.725 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.726 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.726 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.727 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.728 I llm_load_print_meta: model type       = 2B
0.00.823.729 I llm_load_print_meta: model ftype      = Q8_0
0.00.823.730 I llm_load_print_meta: model params     = 2.51 B
0.00.823.739 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.823.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.740 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.765 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.765 I llm_load_print_meta: max token length = 93
0.00.921.117 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.927.188 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.195 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.195 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.196 I llama_new_context_with_model: n_batch       = 2048
0.00.927.196 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.197 I llama_new_context_with_model: flash_attn    = 0
0.00.927.200 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.200 I llama_new_context_with_model: freq_scale    = 1
0.00.927.201 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.682 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.463 I llama_new_context_with_model: graph nodes  = 601
0.00.945.463 I llama_new_context_with_model: graph splits = 1
0.00.945.487 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.075 I main: llama threadpool init, n_threads = 4
0.01.557.093 I 
0.01.557.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.557.215 I 
0.01.557.470 I sampler seed: 31307821
0.01.557.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.495 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.496 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.496 I 
 increasities and anxieties, and also a sense of alienation from one's community. [end of text]


0.09.225.527 I llama_perf_sampler_print:    sampling time =      27.29 ms /    19 runs   (    1.44 ms per token,   696.15 tokens per second)
0.09.225.531 I llama_perf_context_print:        load time =    1556.08 ms
0.09.225.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.225.544 I llama_perf_context_print:        eval time =    7617.86 ms /    18 runs   (  423.21 ms per token,     2.36 tokens per second)
0.09.225.546 I llama_perf_context_print:       total time =    7668.46 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.702 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.919 I main: llama backend init
0.00.000.928 I main: load the model and apply lora adapter, if any
0.00.027.546 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.737 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.740 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.756 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.758 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.761 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.763 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.765 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.776 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.778 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.785 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.219 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.039 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.892 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.894 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.895 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.896 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.899 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.909 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.910 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.366.912 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.922 I llama_model_loader: - type  f32:   37 tensors
0.00.366.924 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.224 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.142 I llm_load_vocab: special tokens cache size = 5
0.00.870.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.483 I llm_load_print_meta: arch             = gemma
0.00.870.484 I llm_load_print_meta: vocab type       = SPM
0.00.870.485 I llm_load_print_meta: n_vocab          = 256000
0.00.870.487 I llm_load_print_meta: n_merges         = 0
0.00.870.487 I llm_load_print_meta: vocab_only       = 0
0.00.870.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.488 I llm_load_print_meta: n_embd           = 2048
0.00.870.489 I llm_load_print_meta: n_layer          = 18
0.00.870.553 I llm_load_print_meta: n_head           = 8
0.00.870.560 I llm_load_print_meta: n_head_kv        = 1
0.00.870.561 I llm_load_print_meta: n_rot            = 256
0.00.870.561 I llm_load_print_meta: n_swa            = 0
0.00.870.562 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.562 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.566 I llm_load_print_meta: n_gqa            = 8
0.00.870.571 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.577 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.578 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.579 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.580 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.580 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.581 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.585 I llm_load_print_meta: n_ff             = 16384
0.00.870.586 I llm_load_print_meta: n_expert         = 0
0.00.870.586 I llm_load_print_meta: n_expert_used    = 0
0.00.870.586 I llm_load_print_meta: causal attn      = 1
0.00.870.587 I llm_load_print_meta: pooling type     = 0
0.00.870.587 I llm_load_print_meta: rope type        = 2
0.00.870.588 I llm_load_print_meta: rope scaling     = linear
0.00.870.589 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.590 I llm_load_print_meta: freq_scale_train = 1
0.00.870.590 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.870.591 I llm_load_print_meta: rope_finetuned   = unknown
0.00.870.591 I llm_load_print_meta: ssm_d_conv       = 0
0.00.870.592 I llm_load_print_meta: ssm_d_inner      = 0
0.00.870.592 I llm_load_print_meta: ssm_d_state      = 0
0.00.870.592 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.870.593 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.870.593 I llm_load_print_meta: model type       = 2B
0.00.870.594 I llm_load_print_meta: model ftype      = Q8_0
0.00.870.595 I llm_load_print_meta: model params     = 2.51 B
0.00.870.605 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.870.605 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.870.606 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.870.607 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.870.607 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.870.608 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.870.608 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.870.609 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.870.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.870.616 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.870.616 I llm_load_print_meta: max token length = 93
0.00.947.986 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.947.997 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.947.999 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.947.999 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.948.000 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.001 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.954.001 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.009 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.010 I llama_new_context_with_model: n_batch       = 2048
0.00.954.010 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.011 I llama_new_context_with_model: flash_attn    = 0
0.00.954.014 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.015 I llama_new_context_with_model: freq_scale    = 1
0.00.954.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.970.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.417 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.056 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.060 I llama_new_context_with_model: graph nodes  = 601
0.00.973.061 I llama_new_context_with_model: graph splits = 1
0.00.973.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.840 I main: llama threadpool init, n_threads = 4
0.01.583.858 I 
0.01.583.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.583.979 I 
0.01.584.221 I sampler seed: 2147690293
0.01.584.236 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.248 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.248 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.249 I 
 increably.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.09.745.923 I llama_perf_sampler_print:    sampling time =      28.88 ms /    20 runs   (    1.44 ms per token,   692.54 tokens per second)
0.09.745.926 I llama_perf_context_print:        load time =    1582.79 ms
0.09.745.928 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.745.940 I llama_perf_context_print:        eval time =    8109.16 ms /    19 runs   (  426.80 ms per token,     2.34 tokens per second)
0.09.745.941 I llama_perf_context_print:       total time =    8162.09 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.491 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.499 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.599 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.610 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.627 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.629 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.631 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.400 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.408 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.410 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.411 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.414 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.416 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.421 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.422 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.425 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.426 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.435 I llama_model_loader: - type  f32:   37 tensors
0.00.351.438 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.023 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.999 I llm_load_vocab: special tokens cache size = 5
0.00.842.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.521 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.522 I llm_load_print_meta: arch             = gemma
0.00.842.523 I llm_load_print_meta: vocab type       = SPM
0.00.842.523 I llm_load_print_meta: n_vocab          = 256000
0.00.842.526 I llm_load_print_meta: n_merges         = 0
0.00.842.526 I llm_load_print_meta: vocab_only       = 0
0.00.842.527 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.527 I llm_load_print_meta: n_embd           = 2048
0.00.842.528 I llm_load_print_meta: n_layer          = 18
0.00.842.592 I llm_load_print_meta: n_head           = 8
0.00.842.600 I llm_load_print_meta: n_head_kv        = 1
0.00.842.600 I llm_load_print_meta: n_rot            = 256
0.00.842.601 I llm_load_print_meta: n_swa            = 0
0.00.842.601 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.606 I llm_load_print_meta: n_gqa            = 8
0.00.842.612 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.625 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.626 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.628 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.629 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.634 I llm_load_print_meta: n_ff             = 16384
0.00.842.635 I llm_load_print_meta: n_expert         = 0
0.00.842.635 I llm_load_print_meta: n_expert_used    = 0
0.00.842.636 I llm_load_print_meta: causal attn      = 1
0.00.842.636 I llm_load_print_meta: pooling type     = 0
0.00.842.636 I llm_load_print_meta: rope type        = 2
0.00.842.637 I llm_load_print_meta: rope scaling     = linear
0.00.842.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.639 I llm_load_print_meta: freq_scale_train = 1
0.00.842.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.641 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.642 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.642 I llm_load_print_meta: model type       = 2B
0.00.842.643 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.644 I llm_load_print_meta: model params     = 2.51 B
0.00.842.653 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.653 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.669 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.671 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.671 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.672 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.687 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.689 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.689 I llm_load_print_meta: max token length = 93
0.00.915.230 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.915.237 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.921.131 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.140 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.140 I llama_new_context_with_model: n_batch       = 2048
0.00.921.141 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.141 I llama_new_context_with_model: flash_attn    = 0
0.00.921.144 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.145 I llama_new_context_with_model: freq_scale    = 1
0.00.921.146 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.962 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.006 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.141 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.774 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.777 I llama_new_context_with_model: graph nodes  = 601
0.00.938.778 I llama_new_context_with_model: graph splits = 1
0.00.938.800 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.547.145 I main: llama threadpool init, n_threads = 4
0.01.547.161 I 
0.01.547.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.547.281 I 
0.01.547.516 I sampler seed: 646491458
0.01.547.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.547.541 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.547.544 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.547.545 I 
 increasities.

The provided text contains an awkward and incorrect phrase. I need to correct it while maintaining the original meaning.

Please help me with this.

0.15.163.714 I llama_perf_sampler_print:    sampling time =      48.44 ms /    33 runs   (    1.47 ms per token,   681.20 tokens per second)
0.15.163.718 I llama_perf_context_print:        load time =    1546.22 ms
0.15.163.719 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.163.732 I llama_perf_context_print:        eval time =   13528.43 ms /    32 runs   (  422.76 ms per token,     2.37 tokens per second)
0.15.163.734 I llama_perf_context_print:       total time =   13616.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.098s
user	2m18.236s
sys	0m9.416s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4215 (dc223440)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186264.40 ms
main:    total time = 186264.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.937 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.951 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.051 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.078 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.086 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.104 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.454 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.925 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.936 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.939 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.941 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.943 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.952 I llama_model_loader: - type  f32:   37 tensors
0.00.351.954 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.955 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.090 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.074 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.990 I llm_load_vocab: special tokens cache size = 5
0.00.829.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.131 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.135 I llm_load_print_meta: arch             = gemma
0.00.829.136 I llm_load_print_meta: vocab type       = SPM
0.00.829.137 I llm_load_print_meta: n_vocab          = 256000
0.00.829.139 I llm_load_print_meta: n_merges         = 0
0.00.829.139 I llm_load_print_meta: vocab_only       = 0
0.00.829.140 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.140 I llm_load_print_meta: n_embd           = 2048
0.00.829.141 I llm_load_print_meta: n_layer          = 18
0.00.829.205 I llm_load_print_meta: n_head           = 8
0.00.829.215 I llm_load_print_meta: n_head_kv        = 1
0.00.829.216 I llm_load_print_meta: n_rot            = 256
0.00.829.218 I llm_load_print_meta: n_swa            = 0
0.00.829.218 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.223 I llm_load_print_meta: n_gqa            = 8
0.00.829.228 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.236 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.242 I llm_load_print_meta: n_ff             = 16384
0.00.829.243 I llm_load_print_meta: n_expert         = 0
0.00.829.243 I llm_load_print_meta: n_expert_used    = 0
0.00.829.244 I llm_load_print_meta: causal attn      = 1
0.00.829.244 I llm_load_print_meta: pooling type     = 0
0.00.829.245 I llm_load_print_meta: rope type        = 2
0.00.829.245 I llm_load_print_meta: rope scaling     = linear
0.00.829.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.247 I llm_load_print_meta: freq_scale_train = 1
0.00.829.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.249 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.250 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.251 I llm_load_print_meta: model type       = 2B
0.00.829.253 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.829.253 I llm_load_print_meta: model params     = 2.51 B
0.00.829.262 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.829.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.263 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.275 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.275 I llm_load_print_meta: max token length = 93
0.00.891.566 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.891.574 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.891.575 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.891.576 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.891.577 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.891.577 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.897.490 I llama_new_context_with_model: n_seq_max     = 1
0.00.897.497 I llama_new_context_with_model: n_ctx         = 4096
0.00.897.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.897.498 I llama_new_context_with_model: n_batch       = 2048
0.00.897.498 I llama_new_context_with_model: n_ubatch      = 512
0.00.897.499 I llama_new_context_with_model: flash_attn    = 0
0.00.897.501 I llama_new_context_with_model: freq_base     = 10000.0
0.00.897.502 I llama_new_context_with_model: freq_scale    = 1
0.00.897.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.920 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.911.959 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.912.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.914.670 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.914.674 I llama_new_context_with_model: graph nodes  = 601
0.00.914.675 I llama_new_context_with_model: graph splits = 1
0.00.914.698 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.211 I main: llama threadpool init, n_threads = 4
0.01.496.226 I 
0.01.496.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.496.348 I 
0.01.496.580 I sampler seed: 415411003
0.01.496.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.496.604 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.496.607 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.496.608 I 
 increasities! [end of text]


0.02.886.858 I llama_perf_sampler_print:    sampling time =       6.06 ms /     5 runs   (    1.21 ms per token,   825.49 tokens per second)
0.02.886.862 I llama_perf_context_print:        load time =    1495.27 ms
0.02.886.864 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.886.866 I llama_perf_context_print:        eval time =    1378.17 ms /     4 runs   (  344.54 ms per token,     2.90 tokens per second)
0.02.886.867 I llama_perf_context_print:       total time =    1390.66 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4215 (dc223440)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185553.47 ms
main:    total time = 185553.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4215 (dc223440) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.765 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.891 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.892 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.895 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.896 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.904 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.905 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.907 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.908 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.561 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.240 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.968 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.980 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.997 I llama_model_loader: - type  f32:   37 tensors
0.00.351.000 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.000 I llama_model_loader: - type q6_K:   19 tensors
0.00.574.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.321 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.265 I llm_load_vocab: special tokens cache size = 5
0.00.834.440 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.515 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.516 I llm_load_print_meta: arch             = gemma
0.00.834.516 I llm_load_print_meta: vocab type       = SPM
0.00.834.517 I llm_load_print_meta: n_vocab          = 256000
0.00.834.520 I llm_load_print_meta: n_merges         = 0
0.00.834.520 I llm_load_print_meta: vocab_only       = 0
0.00.834.521 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.521 I llm_load_print_meta: n_embd           = 2048
0.00.834.521 I llm_load_print_meta: n_layer          = 18
0.00.834.589 I llm_load_print_meta: n_head           = 8
0.00.834.596 I llm_load_print_meta: n_head_kv        = 1
0.00.834.596 I llm_load_print_meta: n_rot            = 256
0.00.834.597 I llm_load_print_meta: n_swa            = 0
0.00.834.597 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.597 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.602 I llm_load_print_meta: n_gqa            = 8
0.00.834.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.612 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.614 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.616 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.616 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.617 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.617 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.622 I llm_load_print_meta: n_ff             = 16384
0.00.834.622 I llm_load_print_meta: n_expert         = 0
0.00.834.623 I llm_load_print_meta: n_expert_used    = 0
0.00.834.623 I llm_load_print_meta: causal attn      = 1
0.00.834.624 I llm_load_print_meta: pooling type     = 0
0.00.834.624 I llm_load_print_meta: rope type        = 2
0.00.834.625 I llm_load_print_meta: rope scaling     = linear
0.00.834.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.638 I llm_load_print_meta: freq_scale_train = 1
0.00.834.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.639 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.639 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.640 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.645 I llm_load_print_meta: model type       = 2B
0.00.834.658 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.662 I llm_load_print_meta: model params     = 2.51 B
0.00.834.671 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.671 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.672 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.672 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.672 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.673 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.674 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.684 I llm_load_print_meta: max token length = 93
0.00.892.557 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.898.364 I llama_new_context_with_model: n_seq_max     = 1
0.00.898.371 I llama_new_context_with_model: n_ctx         = 4096
0.00.898.372 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.898.372 I llama_new_context_with_model: n_batch       = 2048
0.00.898.372 I llama_new_context_with_model: n_ubatch      = 512
0.00.898.373 I llama_new_context_with_model: flash_attn    = 0
0.00.898.375 I llama_new_context_with_model: freq_base     = 10000.0
0.00.898.376 I llama_new_context_with_model: freq_scale    = 1
0.00.898.377 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.913.091 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.135 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.254 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.915.843 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.915.847 I llama_new_context_with_model: graph nodes  = 601
0.00.915.848 I llama_new_context_with_model: graph splits = 1
0.00.915.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.502.877 I main: llama threadpool init, n_threads = 4
0.01.502.893 I 
0.01.503.008 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.503.009 I 
0.01.503.249 I sampler seed: 398158
0.01.503.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.503.274 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.503.277 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.503.278 I 
 maneutrinously.

I am unable to generate a response that contains offensive or inappropriate content. [end of text]


0.08.436.711 I llama_perf_sampler_print:    sampling time =      30.39 ms /    21 runs   (    1.45 ms per token,   690.95 tokens per second)
0.08.436.714 I llama_perf_context_print:        load time =    1501.94 ms
0.08.436.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.436.731 I llama_perf_context_print:        eval time =    6876.92 ms /    20 runs   (  343.85 ms per token,     2.91 tokens per second)
0.08.436.732 I llama_perf_context_print:       total time =    6933.84 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m25.998s
user	45m52.777s
sys	0m6.325s
