+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.845 I main: load the model and apply lora adapter, if any
0.00.022.268 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.317 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.328 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.334 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.338 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.338 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.340 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.340 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.347 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.570 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.581 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.584 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.585 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.586 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.587 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.591 I llama_model_loader: - type  f32:   37 tensors
0.00.133.594 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.683 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.317 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.414 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.714 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.666 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.220 I llm_load_vocab: special tokens cache size = 5
0.00.269.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.451 I llm_load_print_meta: arch             = gemma
0.00.269.452 I llm_load_print_meta: vocab type       = SPM
0.00.269.452 I llm_load_print_meta: n_vocab          = 256000
0.00.269.453 I llm_load_print_meta: n_merges         = 0
0.00.269.453 I llm_load_print_meta: vocab_only       = 0
0.00.269.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.454 I llm_load_print_meta: n_embd           = 2048
0.00.269.454 I llm_load_print_meta: n_layer          = 18
0.00.269.466 I llm_load_print_meta: n_head           = 8
0.00.269.467 I llm_load_print_meta: n_head_kv        = 1
0.00.269.467 I llm_load_print_meta: n_rot            = 256
0.00.269.467 I llm_load_print_meta: n_swa            = 0
0.00.269.467 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.469 I llm_load_print_meta: n_gqa            = 8
0.00.269.470 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.473 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.474 I llm_load_print_meta: n_ff             = 16384
0.00.269.475 I llm_load_print_meta: n_expert         = 0
0.00.269.475 I llm_load_print_meta: n_expert_used    = 0
0.00.269.475 I llm_load_print_meta: causal attn      = 1
0.00.269.476 I llm_load_print_meta: pooling type     = 0
0.00.269.476 I llm_load_print_meta: rope type        = 2
0.00.269.476 I llm_load_print_meta: rope scaling     = linear
0.00.269.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.478 I llm_load_print_meta: freq_scale_train = 1
0.00.269.478 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.479 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.479 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.479 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.480 I llm_load_print_meta: model type       = 2B
0.00.269.481 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.482 I llm_load_print_meta: model params     = 2.51 B
0.00.269.483 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.485 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.486 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.486 I llm_load_print_meta: max token length = 93
0.00.269.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.660 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.368.667 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.368.667 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.368.668 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.368.669 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.368.669 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.373.757 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.763 I llama_new_context_with_model: n_batch    = 2048
0.00.373.764 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.764 I llama_new_context_with_model: flash_attn = 0
0.00.373.767 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.767 I llama_new_context_with_model: freq_scale = 1
0.00.402.555 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.402.571 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.402.686 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.546 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.552 I llama_new_context_with_model: graph nodes  = 601
0.00.403.553 I llama_new_context_with_model: graph splits = 1
0.00.403.555 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.253 I main: llama threadpool init, n_threads = 4
0.00.496.267 I 
0.00.496.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.347 I 
0.00.496.386 I sampler seed: 1409801008
0.00.496.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.402 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.496.403 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.404 I 
 increasities!

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.835.265 I llama_perf_sampler_print:    sampling time =       2.97 ms /    20 runs   (    0.15 ms per token,  6736.27 tokens per second)
0.01.835.269 I llama_perf_context_print:        load time =     494.39 ms
0.01.835.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.835.272 I llama_perf_context_print:        eval time =    1327.30 ms /    19 runs   (   69.86 ms per token,    14.31 tokens per second)
0.01.835.273 I llama_perf_context_print:       total time =    1339.02 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.568 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.001.909 I main: load the model and apply lora adapter, if any
0.00.022.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.094 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.094 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.095 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.099 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.100 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.101 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.412 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.335 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.184 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.191 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.192 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.193 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.194 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.195 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.196 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.199 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.200 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.200 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.201 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.205 I llama_model_loader: - type  f32:   37 tensors
0.00.134.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.159 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.238.258 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.580 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.248 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.755 I llm_load_vocab: special tokens cache size = 5
0.00.269.507 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.522 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.522 I llm_load_print_meta: arch             = gemma
0.00.269.522 I llm_load_print_meta: vocab type       = SPM
0.00.269.523 I llm_load_print_meta: n_vocab          = 256000
0.00.269.524 I llm_load_print_meta: n_merges         = 0
0.00.269.524 I llm_load_print_meta: vocab_only       = 0
0.00.269.524 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.525 I llm_load_print_meta: n_embd           = 2048
0.00.269.525 I llm_load_print_meta: n_layer          = 18
0.00.269.536 I llm_load_print_meta: n_head           = 8
0.00.269.537 I llm_load_print_meta: n_head_kv        = 1
0.00.269.537 I llm_load_print_meta: n_rot            = 256
0.00.269.537 I llm_load_print_meta: n_swa            = 0
0.00.269.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.539 I llm_load_print_meta: n_gqa            = 8
0.00.269.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.545 I llm_load_print_meta: n_ff             = 16384
0.00.269.545 I llm_load_print_meta: n_expert         = 0
0.00.269.545 I llm_load_print_meta: n_expert_used    = 0
0.00.269.545 I llm_load_print_meta: causal attn      = 1
0.00.269.546 I llm_load_print_meta: pooling type     = 0
0.00.269.547 I llm_load_print_meta: rope type        = 2
0.00.269.547 I llm_load_print_meta: rope scaling     = linear
0.00.269.549 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.549 I llm_load_print_meta: freq_scale_train = 1
0.00.269.550 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.550 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.550 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.551 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.551 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.551 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.552 I llm_load_print_meta: model type       = 2B
0.00.269.552 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.553 I llm_load_print_meta: model params     = 2.51 B
0.00.269.554 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.554 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.555 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.556 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.557 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.557 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.557 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.558 I llm_load_print_meta: max token length = 93
0.00.269.577 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.772 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.369.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.830 I llama_new_context_with_model: n_batch    = 2048
0.00.369.830 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.831 I llama_new_context_with_model: flash_attn = 0
0.00.369.833 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.834 I llama_new_context_with_model: freq_scale = 1
0.00.398.108 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.124 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.097 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.104 I llama_new_context_with_model: graph nodes  = 601
0.00.399.104 I llama_new_context_with_model: graph splits = 1
0.00.399.106 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.825 I main: llama threadpool init, n_threads = 4
0.00.485.838 I 
0.00.485.915 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.918 I 
0.00.485.956 I sampler seed: 251901896
0.00.485.966 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.974 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.485.975 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.975 I 
 increasels!

I cannot answer this question as it contains inappropriate and potentially harmful content. [end of text]


0.01.774.851 I llama_perf_sampler_print:    sampling time =       2.90 ms /    20 runs   (    0.15 ms per token,  6889.42 tokens per second)
0.01.774.853 I llama_perf_context_print:        load time =     483.89 ms
0.01.774.854 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.774.856 I llama_perf_context_print:        eval time =    1277.61 ms /    19 runs   (   67.24 ms per token,    14.87 tokens per second)
0.01.774.856 I llama_perf_context_print:       total time =    1289.03 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.448 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.645 I main: llama backend init
0.00.001.774 I main: load the model and apply lora adapter, if any
0.00.021.911 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.976 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.977 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.981 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.982 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.983 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.984 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.988 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.989 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.990 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.543 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.046 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.047 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.052 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.053 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.054 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.054 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.055 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.059 I llama_model_loader: - type  f32:   37 tensors
0.00.132.062 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.149 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.329 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.469 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.847 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.591 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.072 I llm_load_vocab: special tokens cache size = 5
0.00.269.144 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.161 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.161 I llm_load_print_meta: arch             = gemma
0.00.269.162 I llm_load_print_meta: vocab type       = SPM
0.00.269.163 I llm_load_print_meta: n_vocab          = 256000
0.00.269.163 I llm_load_print_meta: n_merges         = 0
0.00.269.163 I llm_load_print_meta: vocab_only       = 0
0.00.269.164 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.164 I llm_load_print_meta: n_embd           = 2048
0.00.269.164 I llm_load_print_meta: n_layer          = 18
0.00.269.176 I llm_load_print_meta: n_head           = 8
0.00.269.177 I llm_load_print_meta: n_head_kv        = 1
0.00.269.178 I llm_load_print_meta: n_rot            = 256
0.00.269.178 I llm_load_print_meta: n_swa            = 0
0.00.269.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.179 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.180 I llm_load_print_meta: n_gqa            = 8
0.00.269.181 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.184 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.184 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.185 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.185 I llm_load_print_meta: n_ff             = 16384
0.00.269.186 I llm_load_print_meta: n_expert         = 0
0.00.269.186 I llm_load_print_meta: n_expert_used    = 0
0.00.269.186 I llm_load_print_meta: causal attn      = 1
0.00.269.187 I llm_load_print_meta: pooling type     = 0
0.00.269.187 I llm_load_print_meta: rope type        = 2
0.00.269.188 I llm_load_print_meta: rope scaling     = linear
0.00.269.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.190 I llm_load_print_meta: freq_scale_train = 1
0.00.269.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.190 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.192 I llm_load_print_meta: model type       = 2B
0.00.269.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.193 I llm_load_print_meta: model params     = 2.51 B
0.00.269.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.196 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.197 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.198 I llm_load_print_meta: max token length = 93
0.00.269.218 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.202 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.346.209 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.210 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.346.210 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.346.211 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.211 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.351.219 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.226 I llama_new_context_with_model: n_batch    = 2048
0.00.351.226 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.227 I llama_new_context_with_model: flash_attn = 0
0.00.351.229 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.230 I llama_new_context_with_model: freq_scale = 1
0.00.380.011 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.380.025 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.380.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.988 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.997 I llama_new_context_with_model: graph nodes  = 601
0.00.380.998 I llama_new_context_with_model: graph splits = 1
0.00.381.000 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.026 I main: llama threadpool init, n_threads = 4
0.00.473.037 I 
0.00.473.111 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.114 I 
0.00.473.151 I sampler seed: 370517199
0.00.473.161 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.164 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.473.164 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.164 I 
 secon.

The given text contains an error. The correct term is "session".

**Session**

A session is a period of time during which a

0.02.710.896 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6913.89 tokens per second)
0.02.710.900 I llama_perf_context_print:        load time =     471.23 ms
0.02.710.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.903 I llama_perf_context_print:        eval time =    2219.68 ms /    32 runs   (   69.36 ms per token,    14.42 tokens per second)
0.02.710.904 I llama_perf_context_print:       total time =    2237.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.595 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.001.870 I main: load the model and apply lora adapter, if any
0.00.021.996 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.043 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.059 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.619 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.682 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.483 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.490 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.491 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.492 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.494 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.497 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.498 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.498 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.499 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.145.499 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.503 I llama_model_loader: - type  f32:   37 tensors
0.00.145.506 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.247 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.187 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.252.378 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.256.011 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.263.629 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.217 I llm_load_vocab: special tokens cache size = 5
0.00.285.210 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.226 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.227 I llm_load_print_meta: arch             = gemma
0.00.285.227 I llm_load_print_meta: vocab type       = SPM
0.00.285.228 I llm_load_print_meta: n_vocab          = 256000
0.00.285.228 I llm_load_print_meta: n_merges         = 0
0.00.285.228 I llm_load_print_meta: vocab_only       = 0
0.00.285.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.229 I llm_load_print_meta: n_embd           = 2048
0.00.285.229 I llm_load_print_meta: n_layer          = 18
0.00.285.242 I llm_load_print_meta: n_head           = 8
0.00.285.243 I llm_load_print_meta: n_head_kv        = 1
0.00.285.243 I llm_load_print_meta: n_rot            = 256
0.00.285.243 I llm_load_print_meta: n_swa            = 0
0.00.285.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.245 I llm_load_print_meta: n_gqa            = 8
0.00.285.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.247 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.248 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.249 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.249 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.251 I llm_load_print_meta: n_ff             = 16384
0.00.285.251 I llm_load_print_meta: n_expert         = 0
0.00.285.252 I llm_load_print_meta: n_expert_used    = 0
0.00.285.252 I llm_load_print_meta: causal attn      = 1
0.00.285.252 I llm_load_print_meta: pooling type     = 0
0.00.285.253 I llm_load_print_meta: rope type        = 2
0.00.285.253 I llm_load_print_meta: rope scaling     = linear
0.00.285.255 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.256 I llm_load_print_meta: freq_scale_train = 1
0.00.285.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.257 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.257 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.259 I llm_load_print_meta: model type       = 2B
0.00.285.260 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.261 I llm_load_print_meta: model params     = 2.51 B
0.00.285.262 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.262 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.263 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.268 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.268 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.268 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.269 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.269 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.270 I llm_load_print_meta: max token length = 93
0.00.285.291 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.355.976 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.355.984 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.360.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.361.004 I llama_new_context_with_model: n_batch    = 2048
0.00.361.004 I llama_new_context_with_model: n_ubatch   = 512
0.00.361.005 I llama_new_context_with_model: flash_attn = 0
0.00.361.007 I llama_new_context_with_model: freq_base  = 10000.0
0.00.361.008 I llama_new_context_with_model: freq_scale = 1
0.00.389.228 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.389.243 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.389.334 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.181 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.189 I llama_new_context_with_model: graph nodes  = 601
0.00.390.189 I llama_new_context_with_model: graph splits = 1
0.00.390.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.486 I main: llama threadpool init, n_threads = 4
0.00.484.499 I 
0.00.484.604 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.484.607 I 
0.00.484.642 I sampler seed: 1437812941
0.00.484.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.659 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.484.659 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.660 I 
 increasities?

I cannot find the requested context or information. [end of text]


0.01.543.494 I llama_perf_sampler_print:    sampling time =       2.32 ms /    15 runs   (    0.15 ms per token,  6457.17 tokens per second)
0.01.543.496 I llama_perf_context_print:        load time =     482.59 ms
0.01.543.498 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.543.499 I llama_perf_context_print:        eval time =    1050.09 ms /    14 runs   (   75.01 ms per token,    13.33 tokens per second)
0.01.543.500 I llama_perf_context_print:       total time =    1059.02 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.490s
user	0m26.594s
sys	0m9.380s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3919 (dcdd5353)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32215.62 ms
main:    total time = 32215.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.451 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.667 I main: llama backend init
0.00.001.771 I main: load the model and apply lora adapter, if any
0.00.021.764 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.812 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.824 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.834 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.835 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.835 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.836 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.837 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.840 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.841 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.842 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.842 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.843 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.264 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.112 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.119 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.119 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.120 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.121 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.122 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.125 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.127 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.128 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.129 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.132 I llama_model_loader: - type  f32:   37 tensors
0.00.133.135 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.136 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.552 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.259 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.355 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.680 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.288 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.767 I llm_load_vocab: special tokens cache size = 5
0.00.268.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.504 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.505 I llm_load_print_meta: arch             = gemma
0.00.268.505 I llm_load_print_meta: vocab type       = SPM
0.00.268.506 I llm_load_print_meta: n_vocab          = 256000
0.00.268.506 I llm_load_print_meta: n_merges         = 0
0.00.268.507 I llm_load_print_meta: vocab_only       = 0
0.00.268.507 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.507 I llm_load_print_meta: n_embd           = 2048
0.00.268.508 I llm_load_print_meta: n_layer          = 18
0.00.268.519 I llm_load_print_meta: n_head           = 8
0.00.268.520 I llm_load_print_meta: n_head_kv        = 1
0.00.268.520 I llm_load_print_meta: n_rot            = 256
0.00.268.521 I llm_load_print_meta: n_swa            = 0
0.00.268.521 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.521 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.522 I llm_load_print_meta: n_gqa            = 8
0.00.268.523 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.526 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.526 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.527 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.527 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.528 I llm_load_print_meta: n_ff             = 16384
0.00.268.528 I llm_load_print_meta: n_expert         = 0
0.00.268.528 I llm_load_print_meta: n_expert_used    = 0
0.00.268.529 I llm_load_print_meta: causal attn      = 1
0.00.268.529 I llm_load_print_meta: pooling type     = 0
0.00.268.529 I llm_load_print_meta: rope type        = 2
0.00.268.530 I llm_load_print_meta: rope scaling     = linear
0.00.268.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.532 I llm_load_print_meta: freq_scale_train = 1
0.00.268.532 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.533 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.535 I llm_load_print_meta: model type       = 2B
0.00.268.535 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.536 I llm_load_print_meta: model params     = 2.51 B
0.00.268.537 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.537 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.538 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.538 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.538 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.539 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.539 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.540 I llm_load_print_meta: max token length = 93
0.00.268.556 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.328.169 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.328.175 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.328.176 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.328.177 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.328.178 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.328.178 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.333.125 I llama_new_context_with_model: n_ctx      = 8192
0.00.333.132 I llama_new_context_with_model: n_batch    = 2048
0.00.333.132 I llama_new_context_with_model: n_ubatch   = 512
0.00.333.132 I llama_new_context_with_model: flash_attn = 0
0.00.333.135 I llama_new_context_with_model: freq_base  = 10000.0
0.00.333.136 I llama_new_context_with_model: freq_scale = 1
0.00.361.034 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.048 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.999 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.007 I llama_new_context_with_model: graph nodes  = 601
0.00.362.007 I llama_new_context_with_model: graph splits = 1
0.00.362.010 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.094 I main: llama threadpool init, n_threads = 4
0.00.443.106 I 
0.00.443.185 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.188 I 
0.00.443.224 I sampler seed: 1406364477
0.00.443.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.235 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.443.236 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.236 I 
 squaRELLA
**Summary**

The SquatreLLA project aims to develop and implement a novel machine learning-based framework for generating synthetic data with diverse properties

0.02.014.294 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7060.33 tokens per second)
0.02.014.297 I llama_perf_context_print:        load time =     441.30 ms
0.02.014.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.014.301 I llama_perf_context_print:        eval time =    1554.34 ms /    32 runs   (   48.57 ms per token,    20.59 tokens per second)
0.02.014.302 I llama_perf_context_print:       total time =    1571.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3919 (dcdd5353)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32032.14 ms
main:    total time = 32032.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.548 I build: 3919 (dcdd5353) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.021.568 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.585 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.586 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.590 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.591 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.592 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.593 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.594 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.598 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.598 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.599 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.599 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.600 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.801 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.273 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.134 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.143 I llama_model_loader: - type  f32:   37 tensors
0.00.132.145 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.146 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.951 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.041 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.246.657 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.251.560 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.261.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.111 I llm_load_vocab: special tokens cache size = 5
0.00.283.136 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.156 I llm_load_print_meta: arch             = gemma
0.00.283.157 I llm_load_print_meta: vocab type       = SPM
0.00.283.157 I llm_load_print_meta: n_vocab          = 256000
0.00.283.158 I llm_load_print_meta: n_merges         = 0
0.00.283.158 I llm_load_print_meta: vocab_only       = 0
0.00.283.158 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.159 I llm_load_print_meta: n_embd           = 2048
0.00.283.159 I llm_load_print_meta: n_layer          = 18
0.00.283.172 I llm_load_print_meta: n_head           = 8
0.00.283.173 I llm_load_print_meta: n_head_kv        = 1
0.00.283.173 I llm_load_print_meta: n_rot            = 256
0.00.283.173 I llm_load_print_meta: n_swa            = 0
0.00.283.174 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.174 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.175 I llm_load_print_meta: n_gqa            = 8
0.00.283.176 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.177 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.178 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.179 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.179 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.180 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.180 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.181 I llm_load_print_meta: n_ff             = 16384
0.00.283.181 I llm_load_print_meta: n_expert         = 0
0.00.283.181 I llm_load_print_meta: n_expert_used    = 0
0.00.283.181 I llm_load_print_meta: causal attn      = 1
0.00.283.182 I llm_load_print_meta: pooling type     = 0
0.00.283.182 I llm_load_print_meta: rope type        = 2
0.00.283.183 I llm_load_print_meta: rope scaling     = linear
0.00.283.184 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.185 I llm_load_print_meta: freq_scale_train = 1
0.00.283.185 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.185 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.186 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.187 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.187 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.188 I llm_load_print_meta: model type       = 2B
0.00.283.188 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.189 I llm_load_print_meta: model params     = 2.51 B
0.00.283.190 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.191 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.191 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.192 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.192 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.192 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.193 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.193 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.194 I llm_load_print_meta: max token length = 93
0.00.283.212 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.341.469 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.346.367 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.374 I llama_new_context_with_model: n_batch    = 2048
0.00.346.374 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.374 I llama_new_context_with_model: flash_attn = 0
0.00.346.377 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.378 I llama_new_context_with_model: freq_scale = 1
0.00.375.260 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.375.276 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.375.386 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.212 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.376.220 I llama_new_context_with_model: graph nodes  = 601
0.00.376.220 I llama_new_context_with_model: graph splits = 1
0.00.376.222 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.490 I main: llama threadpool init, n_threads = 4
0.00.456.503 I 
0.00.456.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.581 I 
0.00.456.620 I sampler seed: 2685278241
0.00.456.630 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.632 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.456.633 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.633 I 
 increasities in the modern world.

**Answer:**

The modern world has witnessed a surge in various forms of narcissism, which has had profound implications for

0.02.045.360 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6676.11 tokens per second)
0.02.045.362 I llama_perf_context_print:        load time =     454.63 ms
0.02.045.364 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.365 I llama_perf_context_print:        eval time =    1570.43 ms /    32 runs   (   49.08 ms per token,    20.38 tokens per second)
0.02.045.366 I llama_perf_context_print:       total time =    1588.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.402s
user	8m14.663s
sys	0m6.918s
