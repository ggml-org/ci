+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.559 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.021.900 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.911 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.919 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.924 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.928 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.931 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.932 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.933 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.938 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.940 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.857 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.863 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.863 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.864 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.864 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.865 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.866 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.869 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.869 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.870 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.873 I llama_model_loader: - type  f32:   37 tensors
0.00.132.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.151 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.242 I llm_load_vocab: special tokens cache size = 5
0.00.265.955 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.975 I llm_load_print_meta: arch             = gemma
0.00.265.975 I llm_load_print_meta: vocab type       = SPM
0.00.265.976 I llm_load_print_meta: n_vocab          = 256000
0.00.265.976 I llm_load_print_meta: n_merges         = 0
0.00.265.977 I llm_load_print_meta: vocab_only       = 0
0.00.265.977 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.978 I llm_load_print_meta: n_embd           = 2048
0.00.265.978 I llm_load_print_meta: n_layer          = 18
0.00.265.990 I llm_load_print_meta: n_head           = 8
0.00.265.992 I llm_load_print_meta: n_head_kv        = 1
0.00.265.992 I llm_load_print_meta: n_rot            = 256
0.00.265.992 I llm_load_print_meta: n_swa            = 0
0.00.265.993 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.993 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.995 I llm_load_print_meta: n_gqa            = 8
0.00.265.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.998 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.999 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.000 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.001 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.001 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.001 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.003 I llm_load_print_meta: n_ff             = 16384
0.00.266.003 I llm_load_print_meta: n_expert         = 0
0.00.266.003 I llm_load_print_meta: n_expert_used    = 0
0.00.266.004 I llm_load_print_meta: causal attn      = 1
0.00.266.004 I llm_load_print_meta: pooling type     = 0
0.00.266.005 I llm_load_print_meta: rope type        = 2
0.00.266.005 I llm_load_print_meta: rope scaling     = linear
0.00.266.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.008 I llm_load_print_meta: freq_scale_train = 1
0.00.266.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.009 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.009 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.009 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.010 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.012 I llm_load_print_meta: model type       = 2B
0.00.266.013 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.013 I llm_load_print_meta: model params     = 2.51 B
0.00.266.014 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.015 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.015 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.015 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.016 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.016 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.016 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.017 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.017 I llm_load_print_meta: max token length = 93
0.00.368.531 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.540 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.541 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.542 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.542 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.543 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.693 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.699 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.700 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.701 I llama_new_context_with_model: n_batch       = 2048
0.00.374.701 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.702 I llama_new_context_with_model: flash_attn    = 0
0.00.374.704 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.706 I llama_new_context_with_model: freq_scale    = 1
0.00.374.706 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.725 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.143 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.157 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.249 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.570 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.577 I llama_new_context_with_model: graph nodes  = 601
0.00.390.577 I llama_new_context_with_model: graph splits = 1
0.00.390.580 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.580 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.604 I main: llama threadpool init, n_threads = 4
0.00.476.621 I 
0.00.476.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.701 I 
0.00.476.736 I sampler seed: 2821339616
0.00.476.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.751 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.751 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.751 I 
 increasels. [end of text]


0.00.759.051 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7936.51 tokens per second)
0.00.759.053 I llama_perf_context_print:        load time =     475.79 ms
0.00.759.055 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.759.066 I llama_perf_context_print:        eval time =     278.94 ms /     4 runs   (   69.74 ms per token,    14.34 tokens per second)
0.00.759.067 I llama_perf_context_print:       total time =     282.46 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.264 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.449 I main: llama backend init
0.00.000.455 I main: load the model and apply lora adapter, if any
0.00.020.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.593 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.594 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.599 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.600 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.605 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.532 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.533 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.538 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.538 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.539 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.540 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.543 I llama_model_loader: - type  f32:   37 tensors
0.00.131.544 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.760 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.541 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.146 I llm_load_vocab: special tokens cache size = 5
0.00.266.744 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.763 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.764 I llm_load_print_meta: arch             = gemma
0.00.266.765 I llm_load_print_meta: vocab type       = SPM
0.00.266.765 I llm_load_print_meta: n_vocab          = 256000
0.00.266.766 I llm_load_print_meta: n_merges         = 0
0.00.266.766 I llm_load_print_meta: vocab_only       = 0
0.00.266.766 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.767 I llm_load_print_meta: n_embd           = 2048
0.00.266.767 I llm_load_print_meta: n_layer          = 18
0.00.266.779 I llm_load_print_meta: n_head           = 8
0.00.266.781 I llm_load_print_meta: n_head_kv        = 1
0.00.266.781 I llm_load_print_meta: n_rot            = 256
0.00.266.781 I llm_load_print_meta: n_swa            = 0
0.00.266.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.784 I llm_load_print_meta: n_gqa            = 8
0.00.266.785 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.790 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.790 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.790 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.792 I llm_load_print_meta: n_ff             = 16384
0.00.266.792 I llm_load_print_meta: n_expert         = 0
0.00.266.792 I llm_load_print_meta: n_expert_used    = 0
0.00.266.793 I llm_load_print_meta: causal attn      = 1
0.00.266.793 I llm_load_print_meta: pooling type     = 0
0.00.266.793 I llm_load_print_meta: rope type        = 2
0.00.266.794 I llm_load_print_meta: rope scaling     = linear
0.00.266.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.796 I llm_load_print_meta: freq_scale_train = 1
0.00.266.796 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.797 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.797 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.797 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.797 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.798 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.798 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.800 I llm_load_print_meta: model type       = 2B
0.00.266.801 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.801 I llm_load_print_meta: model params     = 2.51 B
0.00.266.802 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.805 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.806 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.806 I llm_load_print_meta: max token length = 93
0.00.363.046 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.108 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.113 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.114 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.114 I llama_new_context_with_model: n_batch       = 2048
0.00.368.115 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.115 I llama_new_context_with_model: flash_attn    = 0
0.00.368.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.118 I llama_new_context_with_model: freq_scale    = 1
0.00.368.119 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.139 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.383.610 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.624 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.725 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.985 I llama_new_context_with_model: graph nodes  = 601
0.00.384.986 I llama_new_context_with_model: graph splits = 1
0.00.384.989 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.730 I main: llama threadpool init, n_threads = 4
0.00.466.749 I 
0.00.466.822 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.825 I 
0.00.466.857 I sampler seed: 1422808949
0.00.466.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.873 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.874 I 
 increably. [end of text]


0.00.739.936 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8196.72 tokens per second)
0.00.739.939 I llama_perf_context_print:        load time =     466.25 ms
0.00.739.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.739.941 I llama_perf_context_print:        eval time =     269.84 ms /     4 runs   (   67.46 ms per token,    14.82 tokens per second)
0.00.739.942 I llama_perf_context_print:       total time =     273.21 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.097 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.108 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.116 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.123 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.129 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.132 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.133 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.134 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.136 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.136 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.137 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.142 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.145 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.146 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.642 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.506 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.507 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.508 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.509 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.510 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.512 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.512 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.513 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.513 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.514 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.516 I llama_model_loader: - type  f32:   37 tensors
0.00.131.517 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.533 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.216 I llm_load_vocab: special tokens cache size = 5
0.00.275.577 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.598 I llm_load_print_meta: arch             = gemma
0.00.275.599 I llm_load_print_meta: vocab type       = SPM
0.00.275.599 I llm_load_print_meta: n_vocab          = 256000
0.00.275.600 I llm_load_print_meta: n_merges         = 0
0.00.275.600 I llm_load_print_meta: vocab_only       = 0
0.00.275.601 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.601 I llm_load_print_meta: n_embd           = 2048
0.00.275.601 I llm_load_print_meta: n_layer          = 18
0.00.275.613 I llm_load_print_meta: n_head           = 8
0.00.275.615 I llm_load_print_meta: n_head_kv        = 1
0.00.275.615 I llm_load_print_meta: n_rot            = 256
0.00.275.615 I llm_load_print_meta: n_swa            = 0
0.00.275.616 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.618 I llm_load_print_meta: n_gqa            = 8
0.00.275.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.622 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.624 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.626 I llm_load_print_meta: n_ff             = 16384
0.00.275.627 I llm_load_print_meta: n_expert         = 0
0.00.275.627 I llm_load_print_meta: n_expert_used    = 0
0.00.275.627 I llm_load_print_meta: causal attn      = 1
0.00.275.628 I llm_load_print_meta: pooling type     = 0
0.00.275.628 I llm_load_print_meta: rope type        = 2
0.00.275.628 I llm_load_print_meta: rope scaling     = linear
0.00.275.630 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.630 I llm_load_print_meta: freq_scale_train = 1
0.00.275.631 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.631 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.631 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.632 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.632 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.632 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.632 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.634 I llm_load_print_meta: model type       = 2B
0.00.275.635 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.636 I llm_load_print_meta: model params     = 2.51 B
0.00.275.637 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.637 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.638 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.638 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.638 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.639 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.639 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.639 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.640 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.641 I llm_load_print_meta: max token length = 93
0.00.353.408 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.416 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.417 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.418 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.418 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.419 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.835 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.842 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.843 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.843 I llama_new_context_with_model: n_batch       = 2048
0.00.358.844 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.844 I llama_new_context_with_model: flash_attn    = 0
0.00.358.847 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.848 I llama_new_context_with_model: freq_scale    = 1
0.00.358.849 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.873 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.373.464 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.476 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.570 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.814 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.818 I llama_new_context_with_model: graph nodes  = 601
0.00.374.819 I llama_new_context_with_model: graph splits = 1
0.00.374.822 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.822 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.738 I main: llama threadpool init, n_threads = 4
0.00.460.755 I 
0.00.460.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.841 I 
0.00.460.878 I sampler seed: 4280302292
0.00.460.890 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.897 I 
 increably. [end of text]


0.00.744.628 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7836.99 tokens per second)
0.00.744.630 I llama_perf_context_print:        load time =     459.95 ms
0.00.744.631 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.744.632 I llama_perf_context_print:        eval time =     280.42 ms /     4 runs   (   70.10 ms per token,    14.26 tokens per second)
0.00.744.633 I llama_perf_context_print:       total time =     283.90 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.025.747 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.762 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.773 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.781 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.791 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.793 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.795 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.796 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.797 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.798 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.804 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.805 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.807 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.808 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.556 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.042 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.143.924 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.143.931 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.143.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.143.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.143.933 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.143.934 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.143.934 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.937 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.939 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.939 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.143.940 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.944 I llama_model_loader: - type  f32:   37 tensors
0.00.143.945 I llama_model_loader: - type q8_0:  127 tensors
0.00.226.517 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.530 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.164 I llm_load_vocab: special tokens cache size = 5
0.00.291.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.847 I llm_load_print_meta: arch             = gemma
0.00.291.847 I llm_load_print_meta: vocab type       = SPM
0.00.291.848 I llm_load_print_meta: n_vocab          = 256000
0.00.291.848 I llm_load_print_meta: n_merges         = 0
0.00.291.848 I llm_load_print_meta: vocab_only       = 0
0.00.291.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.849 I llm_load_print_meta: n_embd           = 2048
0.00.291.849 I llm_load_print_meta: n_layer          = 18
0.00.291.860 I llm_load_print_meta: n_head           = 8
0.00.291.862 I llm_load_print_meta: n_head_kv        = 1
0.00.291.863 I llm_load_print_meta: n_rot            = 256
0.00.291.863 I llm_load_print_meta: n_swa            = 0
0.00.291.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.864 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.865 I llm_load_print_meta: n_gqa            = 8
0.00.291.867 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.871 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.871 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.871 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.872 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.874 I llm_load_print_meta: n_ff             = 16384
0.00.291.874 I llm_load_print_meta: n_expert         = 0
0.00.291.874 I llm_load_print_meta: n_expert_used    = 0
0.00.291.875 I llm_load_print_meta: causal attn      = 1
0.00.291.875 I llm_load_print_meta: pooling type     = 0
0.00.291.875 I llm_load_print_meta: rope type        = 2
0.00.291.876 I llm_load_print_meta: rope scaling     = linear
0.00.291.877 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.878 I llm_load_print_meta: freq_scale_train = 1
0.00.291.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.882 I llm_load_print_meta: model type       = 2B
0.00.291.884 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.884 I llm_load_print_meta: model params     = 2.51 B
0.00.291.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.887 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.889 I llm_load_print_meta: max token length = 93
0.00.368.614 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.368.621 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.373.663 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.668 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.669 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.669 I llama_new_context_with_model: n_batch       = 2048
0.00.373.670 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.670 I llama_new_context_with_model: flash_attn    = 0
0.00.373.672 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.673 I llama_new_context_with_model: freq_scale    = 1
0.00.373.674 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.692 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.830 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.844 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.936 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.199 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.205 I llama_new_context_with_model: graph nodes  = 601
0.00.389.205 I llama_new_context_with_model: graph splits = 1
0.00.389.209 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.209 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.700 I main: llama threadpool init, n_threads = 4
0.00.478.716 I 
0.00.478.792 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.796 I 
0.00.478.830 I sampler seed: 205363632
0.00.478.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.855 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.858 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.859 I 
 maneuvously.

I'm not sure what you mean. Can you please explain? [end of text]


0.02.006.117 I llama_perf_sampler_print:    sampling time =       3.22 ms /    21 runs   (    0.15 ms per token,  6529.85 tokens per second)
0.02.006.119 I llama_perf_context_print:        load time =     477.93 ms
0.02.006.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.006.121 I llama_perf_context_print:        eval time =    1514.88 ms /    20 runs   (   75.74 ms per token,    13.20 tokens per second)
0.02.006.122 I llama_perf_context_print:       total time =    1527.42 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m14.105s
user	0m12.325s
sys	0m9.399s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4410 (dc32e8f0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40250.11 ms
main:    total time = 40250.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.805 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.835 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.836 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.839 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.841 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.841 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.842 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.843 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.843 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.848 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.848 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.849 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.850 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.850 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.581 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.712 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.666 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.667 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.671 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.672 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.673 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.673 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.674 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.678 I llama_model_loader: - type  f32:   37 tensors
0.00.132.680 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.681 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.529 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.211 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.737 I llm_load_vocab: special tokens cache size = 5
0.00.272.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.307 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.309 I llm_load_print_meta: arch             = gemma
0.00.272.309 I llm_load_print_meta: vocab type       = SPM
0.00.272.310 I llm_load_print_meta: n_vocab          = 256000
0.00.272.310 I llm_load_print_meta: n_merges         = 0
0.00.272.311 I llm_load_print_meta: vocab_only       = 0
0.00.272.311 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.312 I llm_load_print_meta: n_embd           = 2048
0.00.272.312 I llm_load_print_meta: n_layer          = 18
0.00.272.323 I llm_load_print_meta: n_head           = 8
0.00.272.325 I llm_load_print_meta: n_head_kv        = 1
0.00.272.325 I llm_load_print_meta: n_rot            = 256
0.00.272.325 I llm_load_print_meta: n_swa            = 0
0.00.272.326 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.326 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.328 I llm_load_print_meta: n_gqa            = 8
0.00.272.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.331 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.333 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.334 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.336 I llm_load_print_meta: n_ff             = 16384
0.00.272.336 I llm_load_print_meta: n_expert         = 0
0.00.272.337 I llm_load_print_meta: n_expert_used    = 0
0.00.272.337 I llm_load_print_meta: causal attn      = 1
0.00.272.337 I llm_load_print_meta: pooling type     = 0
0.00.272.337 I llm_load_print_meta: rope type        = 2
0.00.272.338 I llm_load_print_meta: rope scaling     = linear
0.00.272.339 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.340 I llm_load_print_meta: freq_scale_train = 1
0.00.272.340 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.340 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.341 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.341 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.342 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.342 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.343 I llm_load_print_meta: model type       = 2B
0.00.272.344 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.345 I llm_load_print_meta: model params     = 2.51 B
0.00.272.346 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.347 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.347 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.348 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.348 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.348 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.349 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.349 I llm_load_print_meta: max token length = 93
0.00.333.860 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.867 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.868 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.868 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.869 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.869 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.985 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.991 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.992 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.992 I llama_new_context_with_model: n_batch       = 2048
0.00.338.992 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.993 I llama_new_context_with_model: flash_attn    = 0
0.00.338.996 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.996 I llama_new_context_with_model: freq_scale    = 1
0.00.338.997 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.016 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.353.865 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.878 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.989 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.275 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.282 I llama_new_context_with_model: graph nodes  = 601
0.00.355.283 I llama_new_context_with_model: graph splits = 1
0.00.355.286 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.286 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.800 I main: llama threadpool init, n_threads = 4
0.00.430.817 I 
0.00.430.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.897 I 
0.00.430.931 I sampler seed: 501501155
0.00.430.943 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.948 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.949 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.949 I 
 maneuvously, and with a mischievous grin, winked at me.

I blinked, bewildered. What was going on? Where was he?

"Don

0.02.019.373 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6688.29 tokens per second)
0.02.019.376 I llama_perf_context_print:        load time =     430.01 ms
0.02.019.377 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.019.378 I llama_perf_context_print:        eval time =    1570.54 ms /    32 runs   (   49.08 ms per token,    20.38 tokens per second)
0.02.019.379 I llama_perf_context_print:       total time =    1588.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4410 (dc32e8f0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40221.98 ms
main:    total time = 40221.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.178 I build: 4410 (dc32e8f0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.337 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.353 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.363 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.366 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.367 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.368 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.374 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.374 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.376 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.477 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.530 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.362 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.369 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.370 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.370 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.371 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.376 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.381 I llama_model_loader: - type  f32:   37 tensors
0.00.132.382 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.382 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.253 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.704 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.320 I llm_load_vocab: special tokens cache size = 5
0.00.269.109 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.130 I llm_load_print_meta: arch             = gemma
0.00.269.131 I llm_load_print_meta: vocab type       = SPM
0.00.269.131 I llm_load_print_meta: n_vocab          = 256000
0.00.269.132 I llm_load_print_meta: n_merges         = 0
0.00.269.132 I llm_load_print_meta: vocab_only       = 0
0.00.269.132 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.133 I llm_load_print_meta: n_embd           = 2048
0.00.269.133 I llm_load_print_meta: n_layer          = 18
0.00.269.145 I llm_load_print_meta: n_head           = 8
0.00.269.147 I llm_load_print_meta: n_head_kv        = 1
0.00.269.147 I llm_load_print_meta: n_rot            = 256
0.00.269.147 I llm_load_print_meta: n_swa            = 0
0.00.269.148 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.150 I llm_load_print_meta: n_gqa            = 8
0.00.269.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.153 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.154 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.157 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.158 I llm_load_print_meta: n_ff             = 16384
0.00.269.158 I llm_load_print_meta: n_expert         = 0
0.00.269.159 I llm_load_print_meta: n_expert_used    = 0
0.00.269.159 I llm_load_print_meta: causal attn      = 1
0.00.269.159 I llm_load_print_meta: pooling type     = 0
0.00.269.159 I llm_load_print_meta: rope type        = 2
0.00.269.160 I llm_load_print_meta: rope scaling     = linear
0.00.269.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.162 I llm_load_print_meta: freq_scale_train = 1
0.00.269.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.166 I llm_load_print_meta: model type       = 2B
0.00.269.167 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.167 I llm_load_print_meta: model params     = 2.51 B
0.00.269.169 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.170 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.171 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.172 I llm_load_print_meta: max token length = 93
0.00.327.960 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.996 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.003 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.003 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.004 I llama_new_context_with_model: n_batch       = 2048
0.00.333.004 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.005 I llama_new_context_with_model: flash_attn    = 0
0.00.333.007 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.007 I llama_new_context_with_model: freq_scale    = 1
0.00.333.008 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.028 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.347.531 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.544 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.638 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.899 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.904 I llama_new_context_with_model: graph nodes  = 601
0.00.348.905 I llama_new_context_with_model: graph splits = 1
0.00.348.909 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.909 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.525 I main: llama threadpool init, n_threads = 4
0.00.423.541 I 
0.00.423.617 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.620 I 
0.00.423.652 I sampler seed: 3684310706
0.00.423.663 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.674 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.678 I 
 squaRED LINES:

**Answer the following questions about the provided image.**

**1. What is the main theme of the image?**

**2

0.01.992.936 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6753.99 tokens per second)
0.01.992.939 I llama_perf_context_print:        load time =     423.13 ms
0.01.992.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.942 I llama_perf_context_print:        eval time =    1550.62 ms /    32 runs   (   48.46 ms per token,    20.64 tokens per second)
0.01.992.943 I llama_perf_context_print:       total time =    1569.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.278s
user	10m24.093s
sys	0m7.031s
