+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.029.068 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.079 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.095 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.096 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.103 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.104 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.111 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.112 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.113 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.062.601 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.398 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.405 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.406 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.407 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.408 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.411 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.411 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.412 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.413 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.145.413 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.417 I llama_model_loader: - type  f32:   37 tensors
0.00.145.419 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.956 I llm_load_vocab: special tokens cache size = 5
0.00.280.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.542 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.543 I llm_load_print_meta: arch             = gemma
0.00.280.544 I llm_load_print_meta: vocab type       = SPM
0.00.280.544 I llm_load_print_meta: n_vocab          = 256000
0.00.280.545 I llm_load_print_meta: n_merges         = 0
0.00.280.545 I llm_load_print_meta: vocab_only       = 0
0.00.280.545 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.545 I llm_load_print_meta: n_embd           = 2048
0.00.280.546 I llm_load_print_meta: n_layer          = 18
0.00.280.557 I llm_load_print_meta: n_head           = 8
0.00.280.558 I llm_load_print_meta: n_head_kv        = 1
0.00.280.558 I llm_load_print_meta: n_rot            = 256
0.00.280.558 I llm_load_print_meta: n_swa            = 0
0.00.280.559 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.559 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.560 I llm_load_print_meta: n_gqa            = 8
0.00.280.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.562 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.563 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.564 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.565 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.565 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.565 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.566 I llm_load_print_meta: n_ff             = 16384
0.00.280.566 I llm_load_print_meta: n_expert         = 0
0.00.280.567 I llm_load_print_meta: n_expert_used    = 0
0.00.280.567 I llm_load_print_meta: causal attn      = 1
0.00.280.567 I llm_load_print_meta: pooling type     = 0
0.00.280.568 I llm_load_print_meta: rope type        = 2
0.00.280.568 I llm_load_print_meta: rope scaling     = linear
0.00.280.569 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.570 I llm_load_print_meta: freq_scale_train = 1
0.00.280.570 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.570 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.570 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.571 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.571 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.571 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.571 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.572 I llm_load_print_meta: model type       = 2B
0.00.280.572 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.573 I llm_load_print_meta: model params     = 2.51 B
0.00.280.574 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.574 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.575 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.575 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.576 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.576 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.577 I llm_load_print_meta: max token length = 93
0.00.382.491 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.382.499 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.382.500 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.382.501 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.382.501 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.382.502 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.866 I llama_new_context_with_model: n_batch       = 2048
0.00.387.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.867 I llama_new_context_with_model: flash_attn    = 0
0.00.387.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.871 I llama_new_context_with_model: freq_scale    = 1
0.00.387.872 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.514 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.622 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.914 I llama_new_context_with_model: graph nodes  = 601
0.00.403.915 I llama_new_context_with_model: graph splits = 1
0.00.403.916 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.113 I main: llama threadpool init, n_threads = 4
0.00.489.129 I 
0.00.489.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.207 I 
0.00.489.249 I sampler seed: 2236307265
0.00.489.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.275 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.278 I 
 increably.

I am unable to generate a response as I am unable to access external websites or specific APIs. [end of text]


0.02.187.624 I llama_perf_sampler_print:    sampling time =       4.09 ms /    25 runs   (    0.16 ms per token,  6116.96 tokens per second)
0.02.187.627 I llama_perf_context_print:        load time =     488.34 ms
0.02.187.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.187.630 I llama_perf_context_print:        eval time =    1683.35 ms /    24 runs   (   70.14 ms per token,    14.26 tokens per second)
0.02.187.633 I llama_perf_context_print:       total time =    1698.52 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.558 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.000.805 I main: load the model and apply lora adapter, if any
0.00.022.114 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.129 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.146 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.152 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.154 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.155 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.156 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.843 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.851 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.851 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.852 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.853 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.854 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.855 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.857 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.860 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.865 I llama_model_loader: - type  f32:   37 tensors
0.00.132.866 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.580 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.240 I llm_load_vocab: special tokens cache size = 5
0.00.282.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.072 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.073 I llm_load_print_meta: arch             = gemma
0.00.282.073 I llm_load_print_meta: vocab type       = SPM
0.00.282.074 I llm_load_print_meta: n_vocab          = 256000
0.00.282.075 I llm_load_print_meta: n_merges         = 0
0.00.282.075 I llm_load_print_meta: vocab_only       = 0
0.00.282.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.076 I llm_load_print_meta: n_embd           = 2048
0.00.282.076 I llm_load_print_meta: n_layer          = 18
0.00.282.089 I llm_load_print_meta: n_head           = 8
0.00.282.090 I llm_load_print_meta: n_head_kv        = 1
0.00.282.090 I llm_load_print_meta: n_rot            = 256
0.00.282.090 I llm_load_print_meta: n_swa            = 0
0.00.282.091 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.091 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.092 I llm_load_print_meta: n_gqa            = 8
0.00.282.093 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.094 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.095 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.097 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.097 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.098 I llm_load_print_meta: n_ff             = 16384
0.00.282.098 I llm_load_print_meta: n_expert         = 0
0.00.282.099 I llm_load_print_meta: n_expert_used    = 0
0.00.282.099 I llm_load_print_meta: causal attn      = 1
0.00.282.099 I llm_load_print_meta: pooling type     = 0
0.00.282.100 I llm_load_print_meta: rope type        = 2
0.00.282.100 I llm_load_print_meta: rope scaling     = linear
0.00.282.101 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.102 I llm_load_print_meta: freq_scale_train = 1
0.00.282.103 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.103 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.103 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.104 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.104 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.105 I llm_load_print_meta: model type       = 2B
0.00.282.106 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.106 I llm_load_print_meta: model params     = 2.51 B
0.00.282.107 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.108 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.109 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.109 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.109 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.110 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.110 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.110 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.111 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.111 I llm_load_print_meta: max token length = 93
0.00.375.477 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.780 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.789 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.789 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.790 I llama_new_context_with_model: n_batch       = 2048
0.00.380.790 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.791 I llama_new_context_with_model: flash_attn    = 0
0.00.380.795 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.796 I llama_new_context_with_model: freq_scale    = 1
0.00.380.797 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.537 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.553 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.927 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.934 I llama_new_context_with_model: graph nodes  = 601
0.00.397.935 I llama_new_context_with_model: graph splits = 1
0.00.397.936 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.997 I main: llama threadpool init, n_threads = 4
0.00.480.013 I 
0.00.480.088 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.092 I 
0.00.480.145 I sampler seed: 3685995633
0.00.480.156 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.165 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.167 I 
 increasities, the boy's family paid the ransom to free their son.

**Questions:**
a) Explain the significance of the term "incredi

0.02.703.067 I llama_perf_sampler_print:    sampling time =       5.52 ms /    33 runs   (    0.17 ms per token,  5976.10 tokens per second)
0.02.703.069 I llama_perf_context_print:        load time =     479.17 ms
0.02.703.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.072 I llama_perf_context_print:        eval time =    2202.38 ms /    32 runs   (   68.82 ms per token,    14.53 tokens per second)
0.02.703.073 I llama_perf_context_print:       total time =    2223.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.524 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.711 I main: llama backend init
0.00.000.718 I main: load the model and apply lora adapter, if any
0.00.020.767 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.777 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.788 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.789 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.794 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.794 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.795 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.795 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.796 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.799 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.799 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.800 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.801 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.280 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.706 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.526 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.529 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.532 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.533 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.534 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.535 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.535 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.539 I llama_model_loader: - type  f32:   37 tensors
0.00.130.540 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.509 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.061 I llm_load_vocab: special tokens cache size = 5
0.00.272.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.893 I llm_load_print_meta: arch             = gemma
0.00.272.894 I llm_load_print_meta: vocab type       = SPM
0.00.272.894 I llm_load_print_meta: n_vocab          = 256000
0.00.272.895 I llm_load_print_meta: n_merges         = 0
0.00.272.895 I llm_load_print_meta: vocab_only       = 0
0.00.272.896 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.896 I llm_load_print_meta: n_embd           = 2048
0.00.272.896 I llm_load_print_meta: n_layer          = 18
0.00.272.906 I llm_load_print_meta: n_head           = 8
0.00.272.907 I llm_load_print_meta: n_head_kv        = 1
0.00.272.907 I llm_load_print_meta: n_rot            = 256
0.00.272.907 I llm_load_print_meta: n_swa            = 0
0.00.272.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.908 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.909 I llm_load_print_meta: n_gqa            = 8
0.00.272.910 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.912 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.914 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.915 I llm_load_print_meta: n_ff             = 16384
0.00.272.916 I llm_load_print_meta: n_expert         = 0
0.00.272.916 I llm_load_print_meta: n_expert_used    = 0
0.00.272.916 I llm_load_print_meta: causal attn      = 1
0.00.272.916 I llm_load_print_meta: pooling type     = 0
0.00.272.917 I llm_load_print_meta: rope type        = 2
0.00.272.918 I llm_load_print_meta: rope scaling     = linear
0.00.272.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.919 I llm_load_print_meta: freq_scale_train = 1
0.00.272.920 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.920 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.920 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.921 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.921 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.921 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.922 I llm_load_print_meta: model type       = 2B
0.00.272.922 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.923 I llm_load_print_meta: model params     = 2.51 B
0.00.272.924 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.924 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.925 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.926 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.926 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.926 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.927 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.927 I llm_load_print_meta: max token length = 93
0.00.350.621 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.350.629 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.630 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.350.631 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.350.631 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.632 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.690 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.697 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.697 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.698 I llama_new_context_with_model: n_batch       = 2048
0.00.355.698 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.698 I llama_new_context_with_model: flash_attn    = 0
0.00.355.700 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.701 I llama_new_context_with_model: freq_scale    = 1
0.00.355.702 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.788 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.802 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.892 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.150 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.170 I llama_new_context_with_model: graph nodes  = 601
0.00.371.170 I llama_new_context_with_model: graph splits = 1
0.00.371.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.403 I main: llama threadpool init, n_threads = 4
0.00.454.418 I 
0.00.454.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.493 I 
0.00.454.541 I sampler seed: 2077663473
0.00.454.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.568 I 
 increasities, but I have no desire to pursue them.

I am a person of faith and I believe in the power of prayer. However, I am

0.02.695.150 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5871.89 tokens per second)
0.02.695.153 I llama_perf_context_print:        load time =     453.67 ms
0.02.695.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.695.168 I llama_perf_context_print:        eval time =    2220.84 ms /    32 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.695.169 I llama_perf_context_print:       total time =    2240.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.598 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.805 I main: load the model and apply lora adapter, if any
0.00.021.252 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.280 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.281 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.285 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.286 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.288 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.288 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.298 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.840 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.856 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.861 I llama_model_loader: - type  f32:   37 tensors
0.00.132.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.803 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.152 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.653 I llm_load_vocab: special tokens cache size = 5
0.00.265.282 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.298 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.299 I llm_load_print_meta: arch             = gemma
0.00.265.299 I llm_load_print_meta: vocab type       = SPM
0.00.265.300 I llm_load_print_meta: n_vocab          = 256000
0.00.265.300 I llm_load_print_meta: n_merges         = 0
0.00.265.301 I llm_load_print_meta: vocab_only       = 0
0.00.265.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.301 I llm_load_print_meta: n_embd           = 2048
0.00.265.301 I llm_load_print_meta: n_layer          = 18
0.00.265.311 I llm_load_print_meta: n_head           = 8
0.00.265.312 I llm_load_print_meta: n_head_kv        = 1
0.00.265.313 I llm_load_print_meta: n_rot            = 256
0.00.265.313 I llm_load_print_meta: n_swa            = 0
0.00.265.314 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.316 I llm_load_print_meta: n_gqa            = 8
0.00.265.317 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.317 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.320 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.321 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.322 I llm_load_print_meta: n_ff             = 16384
0.00.265.323 I llm_load_print_meta: n_expert         = 0
0.00.265.323 I llm_load_print_meta: n_expert_used    = 0
0.00.265.323 I llm_load_print_meta: causal attn      = 1
0.00.265.324 I llm_load_print_meta: pooling type     = 0
0.00.265.324 I llm_load_print_meta: rope type        = 2
0.00.265.324 I llm_load_print_meta: rope scaling     = linear
0.00.265.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.327 I llm_load_print_meta: freq_scale_train = 1
0.00.265.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.330 I llm_load_print_meta: model type       = 2B
0.00.265.331 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.332 I llm_load_print_meta: model params     = 2.51 B
0.00.265.333 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.334 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.335 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.337 I llm_load_print_meta: max token length = 93
0.00.337.248 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.255 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.290 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.296 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.296 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.297 I llama_new_context_with_model: n_batch       = 2048
0.00.342.297 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.297 I llama_new_context_with_model: flash_attn    = 0
0.00.342.299 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.301 I llama_new_context_with_model: freq_scale    = 1
0.00.342.301 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.928 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.944 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.053 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.398 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.420 I llama_new_context_with_model: graph nodes  = 601
0.00.359.420 I llama_new_context_with_model: graph splits = 1
0.00.359.423 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.913 I main: llama threadpool init, n_threads = 4
0.00.457.928 I 
0.00.458.000 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.004 I 
0.00.458.054 I sampler seed: 2461376494
0.00.458.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.070 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.070 I 
 increamically. I understand your query. I am happy to assist you with your request. [end of text]


0.01.883.018 I llama_perf_sampler_print:    sampling time =       3.27 ms /    20 runs   (    0.16 ms per token,  6108.74 tokens per second)
0.01.883.020 I llama_perf_context_print:        load time =     457.09 ms
0.01.883.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.883.023 I llama_perf_context_print:        eval time =    1413.00 ms /    19 runs   (   74.37 ms per token,    13.45 tokens per second)
0.01.883.023 I llama_perf_context_print:       total time =    1425.11 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.273s
user	0m33.272s
sys	0m9.461s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4312 (dc5301d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40189.76 ms
main:    total time = 40189.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.354 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.366 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.374 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.384 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.385 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.390 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.391 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.392 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.393 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.401 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.402 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.264 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.036 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.242 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.243 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.244 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.245 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.253 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.254 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.255 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.259 I llama_model_loader: - type  f32:   37 tensors
0.00.133.261 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.262 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.614 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.455 I llm_load_vocab: special tokens cache size = 5
0.00.268.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.034 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.035 I llm_load_print_meta: arch             = gemma
0.00.268.036 I llm_load_print_meta: vocab type       = SPM
0.00.268.037 I llm_load_print_meta: n_vocab          = 256000
0.00.268.037 I llm_load_print_meta: n_merges         = 0
0.00.268.037 I llm_load_print_meta: vocab_only       = 0
0.00.268.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.038 I llm_load_print_meta: n_embd           = 2048
0.00.268.038 I llm_load_print_meta: n_layer          = 18
0.00.268.049 I llm_load_print_meta: n_head           = 8
0.00.268.050 I llm_load_print_meta: n_head_kv        = 1
0.00.268.050 I llm_load_print_meta: n_rot            = 256
0.00.268.051 I llm_load_print_meta: n_swa            = 0
0.00.268.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.052 I llm_load_print_meta: n_gqa            = 8
0.00.268.054 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.057 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.057 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.057 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.058 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.058 I llm_load_print_meta: n_ff             = 16384
0.00.268.059 I llm_load_print_meta: n_expert         = 0
0.00.268.059 I llm_load_print_meta: n_expert_used    = 0
0.00.268.059 I llm_load_print_meta: causal attn      = 1
0.00.268.059 I llm_load_print_meta: pooling type     = 0
0.00.268.060 I llm_load_print_meta: rope type        = 2
0.00.268.060 I llm_load_print_meta: rope scaling     = linear
0.00.268.062 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.062 I llm_load_print_meta: freq_scale_train = 1
0.00.268.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.065 I llm_load_print_meta: model type       = 2B
0.00.268.065 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.066 I llm_load_print_meta: model params     = 2.51 B
0.00.268.067 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.068 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.068 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.069 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.069 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.070 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.070 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.071 I llm_load_print_meta: max token length = 93
0.00.328.767 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.774 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.775 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.775 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.776 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.776 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.875 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.882 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.883 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.883 I llama_new_context_with_model: n_batch       = 2048
0.00.333.884 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.884 I llama_new_context_with_model: flash_attn    = 0
0.00.333.886 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.887 I llama_new_context_with_model: freq_scale    = 1
0.00.333.888 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.516 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.923 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.931 I llama_new_context_with_model: graph nodes  = 601
0.00.349.931 I llama_new_context_with_model: graph splits = 1
0.00.349.933 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.138 I main: llama threadpool init, n_threads = 4
0.00.425.154 I 
0.00.425.228 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.231 I 
0.00.425.274 I sampler seed: 740324964
0.00.425.285 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.296 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.300 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.300 I 
 seconally. The first part of the sentence is a statement of fact and the second part is a suggestion.

"The government has implemented policies that promote economic

0.02.028.571 I llama_perf_sampler_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5862.50 tokens per second)
0.02.028.574 I llama_perf_context_print:        load time =     424.35 ms
0.02.028.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.028.576 I llama_perf_context_print:        eval time =    1583.44 ms /    32 runs   (   49.48 ms per token,    20.21 tokens per second)
0.02.028.577 I llama_perf_context_print:       total time =    1603.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4312 (dc5301d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40193.12 ms
main:    total time = 40193.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 4312 (dc5301d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.020.906 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.926 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.927 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.931 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.934 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.936 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.937 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.944 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.945 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.715 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.605 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.551 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.552 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.554 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.555 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.563 I llama_model_loader: - type  f32:   37 tensors
0.00.131.565 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.566 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.646 I llm_load_vocab: special tokens cache size = 5
0.00.267.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.302 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.302 I llm_load_print_meta: arch             = gemma
0.00.267.303 I llm_load_print_meta: vocab type       = SPM
0.00.267.303 I llm_load_print_meta: n_vocab          = 256000
0.00.267.304 I llm_load_print_meta: n_merges         = 0
0.00.267.304 I llm_load_print_meta: vocab_only       = 0
0.00.267.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.305 I llm_load_print_meta: n_embd           = 2048
0.00.267.305 I llm_load_print_meta: n_layer          = 18
0.00.267.316 I llm_load_print_meta: n_head           = 8
0.00.267.317 I llm_load_print_meta: n_head_kv        = 1
0.00.267.317 I llm_load_print_meta: n_rot            = 256
0.00.267.317 I llm_load_print_meta: n_swa            = 0
0.00.267.318 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.318 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.319 I llm_load_print_meta: n_gqa            = 8
0.00.267.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.324 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.325 I llm_load_print_meta: n_ff             = 16384
0.00.267.325 I llm_load_print_meta: n_expert         = 0
0.00.267.325 I llm_load_print_meta: n_expert_used    = 0
0.00.267.325 I llm_load_print_meta: causal attn      = 1
0.00.267.326 I llm_load_print_meta: pooling type     = 0
0.00.267.326 I llm_load_print_meta: rope type        = 2
0.00.267.326 I llm_load_print_meta: rope scaling     = linear
0.00.267.327 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.328 I llm_load_print_meta: freq_scale_train = 1
0.00.267.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.329 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.330 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.330 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.330 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.331 I llm_load_print_meta: model type       = 2B
0.00.267.331 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.332 I llm_load_print_meta: model params     = 2.51 B
0.00.267.333 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.333 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.334 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.334 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.335 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.336 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.336 I llm_load_print_meta: max token length = 93
0.00.325.773 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.883 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.889 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.890 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.890 I llama_new_context_with_model: n_batch       = 2048
0.00.330.891 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.891 I llama_new_context_with_model: flash_attn    = 0
0.00.330.893 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.894 I llama_new_context_with_model: freq_scale    = 1
0.00.330.895 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.414 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.431 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.729 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.735 I llama_new_context_with_model: graph nodes  = 601
0.00.346.736 I llama_new_context_with_model: graph splits = 1
0.00.346.738 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.230 I main: llama threadpool init, n_threads = 4
0.00.421.246 I 
0.00.421.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.336 I 
0.00.421.386 I sampler seed: 719934456
0.00.421.398 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.407 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.409 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.409 I 
 maneuvously.

I'm having some difficulties with my online banking statement and would like to get some assistance.

**Assistant:** I understand. Please

0.02.001.843 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  5994.55 tokens per second)
0.02.001.846 I llama_perf_context_print:        load time =     420.47 ms
0.02.001.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.001.850 I llama_perf_context_print:        eval time =    1561.08 ms /    32 runs   (   48.78 ms per token,    20.50 tokens per second)
0.02.001.850 I llama_perf_context_print:       total time =    1580.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.208s
user	10m24.063s
sys	0m6.894s
