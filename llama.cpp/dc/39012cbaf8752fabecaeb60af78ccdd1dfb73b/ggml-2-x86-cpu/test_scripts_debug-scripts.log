+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.023.561 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.573 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.685 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.691 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.693 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.694 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.695 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.696 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.702 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.704 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.706 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.707 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.017 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.189 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.198 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.199 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.203 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.204 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.207 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.208 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.210 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.210 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.212 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.220 I llama_model_loader: - type  f32:   37 tensors
0.00.270.222 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.274 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.250 I llm_load_vocab: special tokens cache size = 5
0.00.606.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.561 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.562 I llm_load_print_meta: arch             = gemma
0.00.606.563 I llm_load_print_meta: vocab type       = SPM
0.00.606.564 I llm_load_print_meta: n_vocab          = 256000
0.00.606.566 I llm_load_print_meta: n_merges         = 0
0.00.606.567 I llm_load_print_meta: vocab_only       = 0
0.00.606.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.567 I llm_load_print_meta: n_embd           = 2048
0.00.606.568 I llm_load_print_meta: n_layer          = 18
0.00.606.632 I llm_load_print_meta: n_head           = 8
0.00.606.639 I llm_load_print_meta: n_head_kv        = 1
0.00.606.640 I llm_load_print_meta: n_rot            = 256
0.00.606.640 I llm_load_print_meta: n_swa            = 0
0.00.606.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.646 I llm_load_print_meta: n_gqa            = 8
0.00.606.651 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.655 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.660 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.661 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.666 I llm_load_print_meta: n_ff             = 16384
0.00.606.666 I llm_load_print_meta: n_expert         = 0
0.00.606.676 I llm_load_print_meta: n_expert_used    = 0
0.00.606.677 I llm_load_print_meta: causal attn      = 1
0.00.606.694 I llm_load_print_meta: pooling type     = 0
0.00.606.695 I llm_load_print_meta: rope type        = 2
0.00.606.696 I llm_load_print_meta: rope scaling     = linear
0.00.606.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.699 I llm_load_print_meta: freq_scale_train = 1
0.00.606.699 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.699 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.700 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.701 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.701 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.702 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.703 I llm_load_print_meta: model type       = 2B
0.00.606.705 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.705 I llm_load_print_meta: model params     = 2.51 B
0.00.606.715 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.723 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.726 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.739 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.740 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.746 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.750 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.751 I llm_load_print_meta: max token length = 93
0.00.708.578 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.708.585 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.708.587 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.708.587 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.708.588 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.708.589 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.714.554 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.562 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.562 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.562 I llama_new_context_with_model: n_batch       = 2048
0.00.714.563 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.563 I llama_new_context_with_model: flash_attn    = 0
0.00.714.566 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.567 I llama_new_context_with_model: freq_scale    = 1
0.00.714.568 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.077 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.120 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.246 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.854 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.859 I llama_new_context_with_model: graph nodes  = 601
0.00.731.859 I llama_new_context_with_model: graph splits = 1
0.00.731.882 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.891 I main: llama threadpool init, n_threads = 4
0.01.340.906 I 
0.01.341.012 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.015 I 
0.01.341.245 I sampler seed: 1989733287
0.01.341.257 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.266 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.267 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.268 I 
 maneuvred.

The provided text appears to be gibberish or random symbols. I am unable to extract any meaningful information from it.

**Suggested Actions

0.14.806.283 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.76 tokens per second)
0.14.806.286 I llama_perf_context_print:        load time =    1339.90 ms
0.14.806.288 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.806.290 I llama_perf_context_print:        eval time =   13376.28 ms /    32 runs   (  418.01 ms per token,     2.39 tokens per second)
0.14.806.291 I llama_perf_context_print:       total time =   13465.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.700 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.922 I main: llama backend init
0.00.000.930 I main: load the model and apply lora adapter, if any
0.00.023.881 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.995 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.000 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.005 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.006 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.007 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.008 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.010 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.012 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.019 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.023 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.024 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.152 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.131 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.140 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.141 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.145 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.150 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.151 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.152 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.160 I llama_model_loader: - type  f32:   37 tensors
0.00.270.162 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.668 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.588 I llm_load_vocab: special tokens cache size = 5
0.00.632.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.569 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.570 I llm_load_print_meta: arch             = gemma
0.00.632.570 I llm_load_print_meta: vocab type       = SPM
0.00.632.571 I llm_load_print_meta: n_vocab          = 256000
0.00.632.574 I llm_load_print_meta: n_merges         = 0
0.00.632.574 I llm_load_print_meta: vocab_only       = 0
0.00.632.575 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.575 I llm_load_print_meta: n_embd           = 2048
0.00.632.576 I llm_load_print_meta: n_layer          = 18
0.00.632.641 I llm_load_print_meta: n_head           = 8
0.00.632.648 I llm_load_print_meta: n_head_kv        = 1
0.00.632.648 I llm_load_print_meta: n_rot            = 256
0.00.632.648 I llm_load_print_meta: n_swa            = 0
0.00.632.650 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.651 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.656 I llm_load_print_meta: n_gqa            = 8
0.00.632.679 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.691 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.691 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.692 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.705 I llm_load_print_meta: n_ff             = 16384
0.00.632.707 I llm_load_print_meta: n_expert         = 0
0.00.632.707 I llm_load_print_meta: n_expert_used    = 0
0.00.632.707 I llm_load_print_meta: causal attn      = 1
0.00.632.708 I llm_load_print_meta: pooling type     = 0
0.00.632.708 I llm_load_print_meta: rope type        = 2
0.00.632.709 I llm_load_print_meta: rope scaling     = linear
0.00.632.710 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.711 I llm_load_print_meta: freq_scale_train = 1
0.00.632.712 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.713 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.713 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.713 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.714 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.714 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.715 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.716 I llm_load_print_meta: model type       = 2B
0.00.632.717 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.718 I llm_load_print_meta: model params     = 2.51 B
0.00.632.727 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.728 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.729 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.729 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.730 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.733 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.734 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.734 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.740 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.742 I llm_load_print_meta: max token length = 93
0.00.728.881 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.734.902 I llama_new_context_with_model: n_seq_max     = 1
0.00.734.909 I llama_new_context_with_model: n_ctx         = 4096
0.00.734.909 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.734.910 I llama_new_context_with_model: n_batch       = 2048
0.00.734.910 I llama_new_context_with_model: n_ubatch      = 512
0.00.734.911 I llama_new_context_with_model: flash_attn    = 0
0.00.734.913 I llama_new_context_with_model: freq_base     = 10000.0
0.00.734.914 I llama_new_context_with_model: freq_scale    = 1
0.00.734.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.749.637 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.749.677 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.749.805 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.342 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.752.346 I llama_new_context_with_model: graph nodes  = 601
0.00.752.347 I llama_new_context_with_model: graph splits = 1
0.00.752.370 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.642 I main: llama threadpool init, n_threads = 4
0.01.360.657 I 
0.01.360.764 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.769 I 
0.01.361.003 I sampler seed: 2662526106
0.01.361.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.022 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.024 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.024 I 
 increably.

I understand that you are unable to access certain portions of the internet due to your current location. However, you can still access most of the

0.14.936.359 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.75 tokens per second)
0.14.936.362 I llama_perf_context_print:        load time =    1359.61 ms
0.14.936.364 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.936.365 I llama_perf_context_print:        eval time =   13486.02 ms /    32 runs   (  421.44 ms per token,     2.37 tokens per second)
0.14.936.366 I llama_perf_context_print:       total time =   13575.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.025.913 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.924 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.029 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.030 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.031 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.032 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.033 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.041 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.042 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.043 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.044 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.045 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.954 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.955 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.956 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.957 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.959 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.960 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.967 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.969 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.978 I llama_model_loader: - type  f32:   37 tensors
0.00.271.980 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.108 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.036 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.027 I llm_load_vocab: special tokens cache size = 5
0.00.607.216 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.289 I llm_load_print_meta: arch             = gemma
0.00.607.289 I llm_load_print_meta: vocab type       = SPM
0.00.607.291 I llm_load_print_meta: n_vocab          = 256000
0.00.607.293 I llm_load_print_meta: n_merges         = 0
0.00.607.293 I llm_load_print_meta: vocab_only       = 0
0.00.607.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.294 I llm_load_print_meta: n_embd           = 2048
0.00.607.295 I llm_load_print_meta: n_layer          = 18
0.00.607.361 I llm_load_print_meta: n_head           = 8
0.00.607.368 I llm_load_print_meta: n_head_kv        = 1
0.00.607.369 I llm_load_print_meta: n_rot            = 256
0.00.607.370 I llm_load_print_meta: n_swa            = 0
0.00.607.370 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.370 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.376 I llm_load_print_meta: n_gqa            = 8
0.00.607.380 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.389 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.393 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.398 I llm_load_print_meta: n_ff             = 16384
0.00.607.399 I llm_load_print_meta: n_expert         = 0
0.00.607.399 I llm_load_print_meta: n_expert_used    = 0
0.00.607.399 I llm_load_print_meta: causal attn      = 1
0.00.607.400 I llm_load_print_meta: pooling type     = 0
0.00.607.401 I llm_load_print_meta: rope type        = 2
0.00.607.402 I llm_load_print_meta: rope scaling     = linear
0.00.607.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.404 I llm_load_print_meta: freq_scale_train = 1
0.00.607.404 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.407 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.408 I llm_load_print_meta: model type       = 2B
0.00.607.409 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.410 I llm_load_print_meta: model params     = 2.51 B
0.00.607.420 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.420 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.423 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.430 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.431 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.432 I llm_load_print_meta: max token length = 93
0.00.682.579 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.682.589 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.682.590 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.682.591 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.682.591 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.682.592 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.688.604 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.611 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.611 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.612 I llama_new_context_with_model: n_batch       = 2048
0.00.688.613 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.613 I llama_new_context_with_model: flash_attn    = 0
0.00.688.616 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.616 I llama_new_context_with_model: freq_scale    = 1
0.00.688.617 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.596 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.636 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.767 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.322 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.326 I llama_new_context_with_model: graph nodes  = 601
0.00.706.327 I llama_new_context_with_model: graph splits = 1
0.00.706.350 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.854 I main: llama threadpool init, n_threads = 4
0.01.314.868 I 
0.01.314.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.979 I 
0.01.315.207 I sampler seed: 3305623229
0.01.315.219 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.226 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.315.229 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.229 I 
 increasities to the main character of the novel, Juliet.

**Juliet's character development:**

* **Initial:** An independent and strong-willed

0.14.772.661 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.46 tokens per second)
0.14.772.664 I llama_perf_context_print:        load time =    1313.88 ms
0.14.772.665 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.772.679 I llama_perf_context_print:        eval time =   13368.24 ms /    32 runs   (  417.76 ms per token,     2.39 tokens per second)
0.14.772.681 I llama_perf_context_print:       total time =   13457.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.251 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.263 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.366 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.371 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.372 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.377 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.387 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.389 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.390 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.435 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.519 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.520 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.521 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.522 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.524 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.525 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.528 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.530 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.531 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.533 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.540 I llama_model_loader: - type  f32:   37 tensors
0.00.269.542 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.305 I llm_load_vocab: special tokens cache size = 5
0.00.618.329 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.399 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.403 I llm_load_print_meta: arch             = gemma
0.00.618.404 I llm_load_print_meta: vocab type       = SPM
0.00.618.405 I llm_load_print_meta: n_vocab          = 256000
0.00.618.408 I llm_load_print_meta: n_merges         = 0
0.00.618.408 I llm_load_print_meta: vocab_only       = 0
0.00.618.409 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.409 I llm_load_print_meta: n_embd           = 2048
0.00.618.410 I llm_load_print_meta: n_layer          = 18
0.00.618.474 I llm_load_print_meta: n_head           = 8
0.00.618.484 I llm_load_print_meta: n_head_kv        = 1
0.00.618.486 I llm_load_print_meta: n_rot            = 256
0.00.618.487 I llm_load_print_meta: n_swa            = 0
0.00.618.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.487 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.492 I llm_load_print_meta: n_gqa            = 8
0.00.618.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.502 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.503 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.505 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.505 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.506 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.511 I llm_load_print_meta: n_ff             = 16384
0.00.618.512 I llm_load_print_meta: n_expert         = 0
0.00.618.512 I llm_load_print_meta: n_expert_used    = 0
0.00.618.512 I llm_load_print_meta: causal attn      = 1
0.00.618.513 I llm_load_print_meta: pooling type     = 0
0.00.618.514 I llm_load_print_meta: rope type        = 2
0.00.618.514 I llm_load_print_meta: rope scaling     = linear
0.00.618.516 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.516 I llm_load_print_meta: freq_scale_train = 1
0.00.618.517 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.517 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.518 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.518 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.519 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.519 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.519 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.520 I llm_load_print_meta: model type       = 2B
0.00.618.521 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.522 I llm_load_print_meta: model params     = 2.51 B
0.00.618.531 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.533 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.536 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.538 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.552 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.556 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.557 I llm_load_print_meta: max token length = 93
0.00.691.248 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.691.259 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.697.259 I llama_new_context_with_model: n_seq_max     = 1
0.00.697.266 I llama_new_context_with_model: n_ctx         = 4096
0.00.697.266 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.697.267 I llama_new_context_with_model: n_batch       = 2048
0.00.697.267 I llama_new_context_with_model: n_ubatch      = 512
0.00.697.268 I llama_new_context_with_model: flash_attn    = 0
0.00.697.271 I llama_new_context_with_model: freq_base     = 10000.0
0.00.697.271 I llama_new_context_with_model: freq_scale    = 1
0.00.697.272 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.345 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.384 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.518 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.102 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.106 I llama_new_context_with_model: graph nodes  = 601
0.00.715.106 I llama_new_context_with_model: graph splits = 1
0.00.715.129 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.912 I main: llama threadpool init, n_threads = 4
0.01.322.928 I 
0.01.323.037 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.041 I 
0.01.323.270 I sampler seed: 2112855626
0.01.323.283 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.323.290 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.323.293 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.323.293 I 
 increasities with a twist.

**Synopsis:**

In the futuristic metropolis of Neo-Arcadia, artificial intelligence has become an integral part of daily life.

0.14.843.626 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.33 tokens per second)
0.14.843.631 I llama_perf_context_print:        load time =    1321.97 ms
0.14.843.632 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.843.634 I llama_perf_context_print:        eval time =   13431.96 ms /    32 runs   (  419.75 ms per token,     2.38 tokens per second)
0.14.843.636 I llama_perf_context_print:       total time =   13520.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.718s
user	3m48.693s
sys	0m9.335s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4157 (dc39012c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186280.88 ms
main:    total time = 186280.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.392 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.401 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.506 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.508 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.514 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.517 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.519 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.520 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.521 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.522 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.528 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.529 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.020 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.102 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.103 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.106 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.110 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.111 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.112 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.113 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.115 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.122 I llama_model_loader: - type  f32:   37 tensors
0.00.276.124 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.125 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.550 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.335 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.263 I llm_load_vocab: special tokens cache size = 5
0.00.632.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.672 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.673 I llm_load_print_meta: arch             = gemma
0.00.632.674 I llm_load_print_meta: vocab type       = SPM
0.00.632.675 I llm_load_print_meta: n_vocab          = 256000
0.00.632.677 I llm_load_print_meta: n_merges         = 0
0.00.632.678 I llm_load_print_meta: vocab_only       = 0
0.00.632.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.678 I llm_load_print_meta: n_embd           = 2048
0.00.632.679 I llm_load_print_meta: n_layer          = 18
0.00.632.743 I llm_load_print_meta: n_head           = 8
0.00.632.750 I llm_load_print_meta: n_head_kv        = 1
0.00.632.752 I llm_load_print_meta: n_rot            = 256
0.00.632.753 I llm_load_print_meta: n_swa            = 0
0.00.632.758 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.763 I llm_load_print_meta: n_gqa            = 8
0.00.632.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.773 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.774 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.775 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.776 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.778 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.783 I llm_load_print_meta: n_ff             = 16384
0.00.632.784 I llm_load_print_meta: n_expert         = 0
0.00.632.784 I llm_load_print_meta: n_expert_used    = 0
0.00.632.785 I llm_load_print_meta: causal attn      = 1
0.00.632.785 I llm_load_print_meta: pooling type     = 0
0.00.632.786 I llm_load_print_meta: rope type        = 2
0.00.632.787 I llm_load_print_meta: rope scaling     = linear
0.00.632.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.789 I llm_load_print_meta: freq_scale_train = 1
0.00.632.800 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.801 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.804 I llm_load_print_meta: model type       = 2B
0.00.632.805 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.632.806 I llm_load_print_meta: model params     = 2.51 B
0.00.632.815 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.632.815 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.816 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.817 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.820 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.827 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.829 I llm_load_print_meta: max token length = 93
0.00.695.085 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.695.094 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.695.095 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.695.095 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.695.096 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.695.097 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.700.794 I llama_new_context_with_model: n_seq_max     = 1
0.00.700.801 I llama_new_context_with_model: n_ctx         = 4096
0.00.700.801 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.700.802 I llama_new_context_with_model: n_batch       = 2048
0.00.700.802 I llama_new_context_with_model: n_ubatch      = 512
0.00.700.803 I llama_new_context_with_model: flash_attn    = 0
0.00.700.805 I llama_new_context_with_model: freq_base     = 10000.0
0.00.700.806 I llama_new_context_with_model: freq_scale    = 1
0.00.700.807 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.310 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.348 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.715.470 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.036 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.040 I llama_new_context_with_model: graph nodes  = 601
0.00.718.040 I llama_new_context_with_model: graph splits = 1
0.00.718.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.688 I main: llama threadpool init, n_threads = 4
0.01.304.702 I 
0.01.304.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.304.814 I 
0.01.305.049 I sampler seed: 143561536
0.01.305.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.068 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.069 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.069 I 
 increasities. [end of text]


0.02.699.769 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.74 tokens per second)
0.02.699.773 I llama_perf_context_print:        load time =    1303.74 ms
0.02.699.774 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.699.787 I llama_perf_context_print:        eval time =    1382.17 ms /     4 runs   (  345.54 ms per token,     2.89 tokens per second)
0.02.699.788 I llama_perf_context_print:       total time =    1395.09 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4157 (dc39012c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185979.41 ms
main:    total time = 185979.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4157 (dc39012c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.288 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.393 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.410 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.415 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.419 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.422 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.429 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.430 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.431 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.433 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.030 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.034 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.041 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.043 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.060 I llama_model_loader: - type  f32:   37 tensors
0.00.270.062 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.063 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.033 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.331 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.247 I llm_load_vocab: special tokens cache size = 5
0.00.600.004 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.074 I llm_load_print_meta: arch             = gemma
0.00.600.075 I llm_load_print_meta: vocab type       = SPM
0.00.600.076 I llm_load_print_meta: n_vocab          = 256000
0.00.600.078 I llm_load_print_meta: n_merges         = 0
0.00.600.079 I llm_load_print_meta: vocab_only       = 0
0.00.600.079 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.080 I llm_load_print_meta: n_embd           = 2048
0.00.600.080 I llm_load_print_meta: n_layer          = 18
0.00.600.144 I llm_load_print_meta: n_head           = 8
0.00.600.152 I llm_load_print_meta: n_head_kv        = 1
0.00.600.153 I llm_load_print_meta: n_rot            = 256
0.00.600.154 I llm_load_print_meta: n_swa            = 0
0.00.600.154 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.155 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.160 I llm_load_print_meta: n_gqa            = 8
0.00.600.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.169 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.171 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.173 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.182 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.187 I llm_load_print_meta: n_ff             = 16384
0.00.600.188 I llm_load_print_meta: n_expert         = 0
0.00.600.188 I llm_load_print_meta: n_expert_used    = 0
0.00.600.189 I llm_load_print_meta: causal attn      = 1
0.00.600.190 I llm_load_print_meta: pooling type     = 0
0.00.600.190 I llm_load_print_meta: rope type        = 2
0.00.600.190 I llm_load_print_meta: rope scaling     = linear
0.00.600.192 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.193 I llm_load_print_meta: freq_scale_train = 1
0.00.600.193 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.194 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.194 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.195 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.195 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.196 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.197 I llm_load_print_meta: model type       = 2B
0.00.600.198 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.199 I llm_load_print_meta: model params     = 2.51 B
0.00.600.209 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.209 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.210 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.210 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.211 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.212 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.219 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.220 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.221 I llm_load_print_meta: max token length = 93
0.00.656.019 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.661.668 I llama_new_context_with_model: n_seq_max     = 1
0.00.661.675 I llama_new_context_with_model: n_ctx         = 4096
0.00.661.675 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.661.675 I llama_new_context_with_model: n_batch       = 2048
0.00.661.676 I llama_new_context_with_model: n_ubatch      = 512
0.00.661.676 I llama_new_context_with_model: flash_attn    = 0
0.00.661.678 I llama_new_context_with_model: freq_base     = 10000.0
0.00.661.679 I llama_new_context_with_model: freq_scale    = 1
0.00.661.680 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.677.234 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.677.277 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.677.404 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.680.042 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.680.045 I llama_new_context_with_model: graph nodes  = 601
0.00.680.046 I llama_new_context_with_model: graph splits = 1
0.00.680.069 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.131 I main: llama threadpool init, n_threads = 4
0.01.264.146 I 
0.01.264.256 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.260 I 
0.01.264.492 I sampler seed: 384524721
0.01.264.503 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.513 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.264.514 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.264.515 I 
 seconally.

I am so sorry, but I am unable to provide medical advice or generate responses related to medical topics. My purpose is to assist with tasks

0.12.437.785 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.24 tokens per second)
0.12.437.788 I llama_perf_context_print:        load time =    1263.20 ms
0.12.437.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.437.791 I llama_perf_context_print:        eval time =   11084.38 ms /    32 runs   (  346.39 ms per token,     2.89 tokens per second)
0.12.437.791 I llama_perf_context_print:       total time =   11173.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.250s
user	46m5.412s
sys	0m6.367s
