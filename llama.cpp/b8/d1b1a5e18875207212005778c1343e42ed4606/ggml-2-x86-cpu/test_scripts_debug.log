+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.413 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.515 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.526 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.534 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.536 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.537 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.539 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.541 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.556 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.557 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.559 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.722 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.768 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.776 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.779 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.780 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.786 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.787 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.789 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.790 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.360.791 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.800 I llama_model_loader: - type  f32:   37 tensors
0.00.360.803 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.584 I llm_load_vocab: special tokens cache size = 5
0.00.841.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.248 I llm_load_print_meta: arch             = gemma
0.00.841.249 I llm_load_print_meta: vocab type       = SPM
0.00.841.250 I llm_load_print_meta: n_vocab          = 256000
0.00.841.252 I llm_load_print_meta: n_merges         = 0
0.00.841.253 I llm_load_print_meta: vocab_only       = 0
0.00.841.253 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.253 I llm_load_print_meta: n_embd           = 2048
0.00.841.254 I llm_load_print_meta: n_layer          = 18
0.00.841.320 I llm_load_print_meta: n_head           = 8
0.00.841.328 I llm_load_print_meta: n_head_kv        = 1
0.00.841.329 I llm_load_print_meta: n_rot            = 256
0.00.841.330 I llm_load_print_meta: n_swa            = 0
0.00.841.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.331 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.335 I llm_load_print_meta: n_gqa            = 8
0.00.841.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.349 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.350 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.351 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.351 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.351 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.356 I llm_load_print_meta: n_ff             = 16384
0.00.841.358 I llm_load_print_meta: n_expert         = 0
0.00.841.358 I llm_load_print_meta: n_expert_used    = 0
0.00.841.367 I llm_load_print_meta: causal attn      = 1
0.00.841.368 I llm_load_print_meta: pooling type     = 0
0.00.841.368 I llm_load_print_meta: rope type        = 2
0.00.841.369 I llm_load_print_meta: rope scaling     = linear
0.00.841.371 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.372 I llm_load_print_meta: freq_scale_train = 1
0.00.841.373 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.373 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.374 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.375 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.375 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.376 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.376 I llm_load_print_meta: model type       = 2B
0.00.841.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.378 I llm_load_print_meta: model params     = 2.51 B
0.00.841.379 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.382 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.382 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.383 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.384 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.390 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.391 I llm_load_print_meta: max token length = 93
0.00.944.223 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.944.233 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.944.234 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.944.235 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.944.235 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.944.236 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.950.010 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.017 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.017 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.018 I llama_new_context_with_model: n_batch       = 2048
0.00.950.018 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.019 I llama_new_context_with_model: flash_attn    = 0
0.00.950.021 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.022 I llama_new_context_with_model: freq_scale    = 1
0.00.950.023 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.494 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.533 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.333 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.337 I llama_new_context_with_model: graph nodes  = 601
0.00.967.338 I llama_new_context_with_model: graph splits = 1
0.00.967.362 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.232 I main: llama threadpool init, n_threads = 4
0.01.576.250 I 
0.01.576.369 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.373 I 
0.01.576.615 I sampler seed: 3562674239
0.01.576.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.641 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.642 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.642 I 
 increasities from the 1950s. [end of text]


0.06.667.051 I llama_perf_sampler_print:    sampling time =      18.40 ms /    13 runs   (    1.42 ms per token,   706.37 tokens per second)
0.06.667.055 I llama_perf_context_print:        load time =    1575.29 ms
0.06.667.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.667.058 I llama_perf_context_print:        eval time =    5056.05 ms /    12 runs   (  421.34 ms per token,     2.37 tokens per second)
0.06.667.060 I llama_perf_context_print:       total time =    5090.83 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.023.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.142 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.151 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.152 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.154 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.170 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.171 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.174 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.547 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.552 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.553 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.555 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.556 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.566 I llama_model_loader: - type  f32:   37 tensors
0.00.350.568 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.778 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.157 I llm_load_vocab: special tokens cache size = 5
0.00.846.164 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.238 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.239 I llm_load_print_meta: arch             = gemma
0.00.846.240 I llm_load_print_meta: vocab type       = SPM
0.00.846.241 I llm_load_print_meta: n_vocab          = 256000
0.00.846.244 I llm_load_print_meta: n_merges         = 0
0.00.846.244 I llm_load_print_meta: vocab_only       = 0
0.00.846.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.245 I llm_load_print_meta: n_embd           = 2048
0.00.846.246 I llm_load_print_meta: n_layer          = 18
0.00.846.312 I llm_load_print_meta: n_head           = 8
0.00.846.320 I llm_load_print_meta: n_head_kv        = 1
0.00.846.322 I llm_load_print_meta: n_rot            = 256
0.00.846.323 I llm_load_print_meta: n_swa            = 0
0.00.846.323 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.324 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.329 I llm_load_print_meta: n_gqa            = 8
0.00.846.334 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.344 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.345 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.345 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.345 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.350 I llm_load_print_meta: n_ff             = 16384
0.00.846.351 I llm_load_print_meta: n_expert         = 0
0.00.846.351 I llm_load_print_meta: n_expert_used    = 0
0.00.846.352 I llm_load_print_meta: causal attn      = 1
0.00.846.353 I llm_load_print_meta: pooling type     = 0
0.00.846.353 I llm_load_print_meta: rope type        = 2
0.00.846.353 I llm_load_print_meta: rope scaling     = linear
0.00.846.355 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.357 I llm_load_print_meta: freq_scale_train = 1
0.00.846.357 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.358 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.358 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.359 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.359 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.359 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.360 I llm_load_print_meta: model type       = 2B
0.00.846.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.364 I llm_load_print_meta: model params     = 2.51 B
0.00.846.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.368 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.376 I llm_load_print_meta: max token length = 93
0.00.944.085 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.949.965 I llama_new_context_with_model: n_seq_max     = 1
0.00.949.973 I llama_new_context_with_model: n_ctx         = 4096
0.00.949.974 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.949.974 I llama_new_context_with_model: n_batch       = 2048
0.00.949.974 I llama_new_context_with_model: n_ubatch      = 512
0.00.949.975 I llama_new_context_with_model: flash_attn    = 0
0.00.949.977 I llama_new_context_with_model: freq_base     = 10000.0
0.00.949.978 I llama_new_context_with_model: freq_scale    = 1
0.00.949.979 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.915 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.956 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.965.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.687 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.691 I llama_new_context_with_model: graph nodes  = 601
0.00.967.691 I llama_new_context_with_model: graph splits = 1
0.00.967.714 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.446 I main: llama threadpool init, n_threads = 4
0.01.579.463 I 
0.01.579.581 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.586 I 
0.01.579.848 I sampler seed: 1972306178
0.01.579.861 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.874 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.874 I 
 increasively, seeking to overwhelm the human mind.

This is not intended to be disrespectful or harmful. It is simply an observation about the nature of consciousness.

0.15.173.683 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.53 tokens per second)
0.15.173.687 I llama_perf_context_print:        load time =    1578.44 ms
0.15.173.689 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.173.691 I llama_perf_context_print:        eval time =   13505.46 ms /    32 runs   (  422.05 ms per token,     2.37 tokens per second)
0.15.173.692 I llama_perf_context_print:       total time =   13594.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.255 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.264 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.376 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.378 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.382 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.389 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.397 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.402 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.071 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.741 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.752 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.753 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.754 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.757 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.767 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.778 I llama_model_loader: - type  f32:   37 tensors
0.00.348.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.748 I llm_load_vocab: special tokens cache size = 5
0.00.825.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.590 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.591 I llm_load_print_meta: arch             = gemma
0.00.825.591 I llm_load_print_meta: vocab type       = SPM
0.00.825.592 I llm_load_print_meta: n_vocab          = 256000
0.00.825.595 I llm_load_print_meta: n_merges         = 0
0.00.825.595 I llm_load_print_meta: vocab_only       = 0
0.00.825.595 I llm_load_print_meta: n_ctx_train      = 8192
0.00.825.596 I llm_load_print_meta: n_embd           = 2048
0.00.825.596 I llm_load_print_meta: n_layer          = 18
0.00.825.660 I llm_load_print_meta: n_head           = 8
0.00.825.667 I llm_load_print_meta: n_head_kv        = 1
0.00.825.668 I llm_load_print_meta: n_rot            = 256
0.00.825.670 I llm_load_print_meta: n_swa            = 0
0.00.825.670 I llm_load_print_meta: n_embd_head_k    = 256
0.00.825.671 I llm_load_print_meta: n_embd_head_v    = 256
0.00.825.676 I llm_load_print_meta: n_gqa            = 8
0.00.825.691 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.825.702 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.825.703 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.825.705 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.825.708 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.825.708 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.825.708 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.825.713 I llm_load_print_meta: n_ff             = 16384
0.00.825.714 I llm_load_print_meta: n_expert         = 0
0.00.825.714 I llm_load_print_meta: n_expert_used    = 0
0.00.825.715 I llm_load_print_meta: causal attn      = 1
0.00.825.715 I llm_load_print_meta: pooling type     = 0
0.00.825.715 I llm_load_print_meta: rope type        = 2
0.00.825.716 I llm_load_print_meta: rope scaling     = linear
0.00.825.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.825.718 I llm_load_print_meta: freq_scale_train = 1
0.00.825.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.825.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.825.719 I llm_load_print_meta: ssm_d_conv       = 0
0.00.825.719 I llm_load_print_meta: ssm_d_inner      = 0
0.00.825.732 I llm_load_print_meta: ssm_d_state      = 0
0.00.825.732 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.825.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.825.733 I llm_load_print_meta: model type       = 2B
0.00.825.735 I llm_load_print_meta: model ftype      = Q8_0
0.00.825.736 I llm_load_print_meta: model params     = 2.51 B
0.00.825.736 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.825.746 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.825.747 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.825.748 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.825.748 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.825.748 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.825.749 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.825.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.825.764 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.825.765 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.825.765 I llm_load_print_meta: max token length = 93
0.00.904.146 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.904.155 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.904.156 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.904.157 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.904.158 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.904.158 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.909.968 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.975 I llama_new_context_with_model: n_ctx         = 4096
0.00.909.975 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.909.975 I llama_new_context_with_model: n_batch       = 2048
0.00.909.976 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.976 I llama_new_context_with_model: flash_attn    = 0
0.00.909.979 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.979 I llama_new_context_with_model: freq_scale    = 1
0.00.909.980 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.375 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.495 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.927.302 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.927.306 I llama_new_context_with_model: graph nodes  = 601
0.00.927.306 I llama_new_context_with_model: graph splits = 1
0.00.927.329 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.573 I main: llama threadpool init, n_threads = 4
0.01.536.590 I 
0.01.536.709 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.536.712 I 
0.01.536.954 I sampler seed: 3118467729
0.01.536.968 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.981 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.982 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.982 I 
 seconary to a more general definition of the term.

**Definition of Secondary:**

Secondary refers to something that occurs as a result of or in addition to

0.15.292.616 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.04 tokens per second)
0.15.292.618 I llama_perf_context_print:        load time =    1535.65 ms
0.15.292.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.292.634 I llama_perf_context_print:        eval time =   13666.45 ms /    32 runs   (  427.08 ms per token,     2.34 tokens per second)
0.15.292.636 I llama_perf_context_print:       total time =   13756.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.165 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.174 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.292 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.299 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.301 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.310 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.322 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.330 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.332 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.337 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.117 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.602 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.800 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.813 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.814 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.821 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.822 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.824 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.825 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.827 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.834 I llama_model_loader: - type  f32:   37 tensors
0.00.352.837 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.474 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.342 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.224 I llm_load_vocab: special tokens cache size = 5
0.00.835.088 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.164 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.165 I llm_load_print_meta: arch             = gemma
0.00.835.166 I llm_load_print_meta: vocab type       = SPM
0.00.835.167 I llm_load_print_meta: n_vocab          = 256000
0.00.835.170 I llm_load_print_meta: n_merges         = 0
0.00.835.170 I llm_load_print_meta: vocab_only       = 0
0.00.835.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.171 I llm_load_print_meta: n_embd           = 2048
0.00.835.171 I llm_load_print_meta: n_layer          = 18
0.00.835.237 I llm_load_print_meta: n_head           = 8
0.00.835.244 I llm_load_print_meta: n_head_kv        = 1
0.00.835.246 I llm_load_print_meta: n_rot            = 256
0.00.835.246 I llm_load_print_meta: n_swa            = 0
0.00.835.246 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.252 I llm_load_print_meta: n_gqa            = 8
0.00.835.257 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.262 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.263 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.270 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.270 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.271 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.277 I llm_load_print_meta: n_ff             = 16384
0.00.835.278 I llm_load_print_meta: n_expert         = 0
0.00.835.278 I llm_load_print_meta: n_expert_used    = 0
0.00.835.279 I llm_load_print_meta: causal attn      = 1
0.00.835.279 I llm_load_print_meta: pooling type     = 0
0.00.835.279 I llm_load_print_meta: rope type        = 2
0.00.835.280 I llm_load_print_meta: rope scaling     = linear
0.00.835.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.283 I llm_load_print_meta: freq_scale_train = 1
0.00.835.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.284 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.297 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.310 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.314 I llm_load_print_meta: model type       = 2B
0.00.835.315 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.316 I llm_load_print_meta: model params     = 2.51 B
0.00.835.317 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.318 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.321 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.322 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.322 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.329 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.330 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.331 I llm_load_print_meta: max token length = 93
0.00.908.466 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.908.474 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.915.362 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.370 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.370 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.370 I llama_new_context_with_model: n_batch       = 2048
0.00.915.371 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.371 I llama_new_context_with_model: flash_attn    = 0
0.00.915.373 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.374 I llama_new_context_with_model: freq_scale    = 1
0.00.915.374 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.757 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.798 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.914 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.493 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.497 I llama_new_context_with_model: graph nodes  = 601
0.00.932.498 I llama_new_context_with_model: graph splits = 1
0.00.932.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.539.692 I main: llama threadpool init, n_threads = 4
0.01.539.730 I 
0.01.539.866 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.870 I 
0.01.540.117 I sampler seed: 3985499689
0.01.540.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.146 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.150 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.150 I 
 increasities. [end of text]


0.03.240.297 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.18 tokens per second)
0.03.240.300 I llama_perf_context_print:        load time =    1538.74 ms
0.03.240.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.240.303 I llama_perf_context_print:        eval time =    1687.87 ms /     4 runs   (  421.97 ms per token,     2.37 tokens per second)
0.03.240.304 I llama_perf_context_print:       total time =    1700.61 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m50.128s
user	2m30.190s
sys	0m9.290s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4291 (b8d1b1a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185890.13 ms
main:    total time = 185890.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.261 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.361 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.375 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.380 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.382 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.383 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.385 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.387 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.388 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.403 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.241 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.136 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.140 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.141 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.143 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.144 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.146 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.153 I llama_model_loader: - type  f32:   37 tensors
0.00.352.155 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.157 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.163 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.710 I llm_load_vocab: special tokens cache size = 5
0.00.838.686 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.756 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.760 I llm_load_print_meta: arch             = gemma
0.00.838.761 I llm_load_print_meta: vocab type       = SPM
0.00.838.762 I llm_load_print_meta: n_vocab          = 256000
0.00.838.765 I llm_load_print_meta: n_merges         = 0
0.00.838.765 I llm_load_print_meta: vocab_only       = 0
0.00.838.766 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.766 I llm_load_print_meta: n_embd           = 2048
0.00.838.767 I llm_load_print_meta: n_layer          = 18
0.00.838.828 I llm_load_print_meta: n_head           = 8
0.00.838.838 I llm_load_print_meta: n_head_kv        = 1
0.00.838.839 I llm_load_print_meta: n_rot            = 256
0.00.838.839 I llm_load_print_meta: n_swa            = 0
0.00.838.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.841 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.846 I llm_load_print_meta: n_gqa            = 8
0.00.838.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.857 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.861 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.862 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.863 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.863 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.868 I llm_load_print_meta: n_ff             = 16384
0.00.838.869 I llm_load_print_meta: n_expert         = 0
0.00.838.869 I llm_load_print_meta: n_expert_used    = 0
0.00.838.870 I llm_load_print_meta: causal attn      = 1
0.00.838.870 I llm_load_print_meta: pooling type     = 0
0.00.838.870 I llm_load_print_meta: rope type        = 2
0.00.838.871 I llm_load_print_meta: rope scaling     = linear
0.00.838.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.873 I llm_load_print_meta: freq_scale_train = 1
0.00.838.873 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.874 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.874 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.874 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.875 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.875 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.876 I llm_load_print_meta: model type       = 2B
0.00.838.879 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.838.880 I llm_load_print_meta: model params     = 2.51 B
0.00.838.881 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.838.881 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.882 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.883 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.883 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.883 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.890 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.891 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.892 I llm_load_print_meta: max token length = 93
0.00.900.305 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.900.316 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.900.317 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.900.318 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.900.318 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.900.319 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.906.239 I llama_new_context_with_model: n_seq_max     = 1
0.00.906.249 I llama_new_context_with_model: n_ctx         = 4096
0.00.906.250 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.906.250 I llama_new_context_with_model: n_batch       = 2048
0.00.906.251 I llama_new_context_with_model: n_ubatch      = 512
0.00.906.251 I llama_new_context_with_model: flash_attn    = 0
0.00.906.254 I llama_new_context_with_model: freq_base     = 10000.0
0.00.906.255 I llama_new_context_with_model: freq_scale    = 1
0.00.906.256 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.922.304 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.347 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.925.186 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.925.189 I llama_new_context_with_model: graph nodes  = 601
0.00.925.190 I llama_new_context_with_model: graph splits = 1
0.00.925.213 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.102 I main: llama threadpool init, n_threads = 4
0.01.504.120 I 
0.01.504.249 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.504.253 I 
0.01.504.490 I sampler seed: 79704626
0.01.504.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.504.514 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.504.515 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.504.516 I 
 increasities and pronouncements of God’s wrath are common features of religious rhetoric. However, the content and form of these expressions often vary significantly between different religious

0.12.584.831 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
0.12.584.835 I llama_perf_context_print:        load time =    1503.16 ms
0.12.584.836 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.584.838 I llama_perf_context_print:        eval time =   10992.71 ms /    32 runs   (  343.52 ms per token,     2.91 tokens per second)
0.12.584.840 I llama_perf_context_print:       total time =   11080.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4291 (b8d1b1a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185950.21 ms
main:    total time = 185950.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4291 (b8d1b1a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.407 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.419 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.428 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.429 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.431 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.448 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.515 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.525 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.526 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.527 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.530 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.544 I llama_model_loader: - type  f32:   37 tensors
0.00.348.546 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.546 I llama_model_loader: - type q6_K:   19 tensors
0.00.574.613 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.749 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.711 I llm_load_vocab: special tokens cache size = 5
0.00.827.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.827.122 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.827.126 I llm_load_print_meta: arch             = gemma
0.00.827.126 I llm_load_print_meta: vocab type       = SPM
0.00.827.127 I llm_load_print_meta: n_vocab          = 256000
0.00.827.130 I llm_load_print_meta: n_merges         = 0
0.00.827.130 I llm_load_print_meta: vocab_only       = 0
0.00.827.130 I llm_load_print_meta: n_ctx_train      = 8192
0.00.827.131 I llm_load_print_meta: n_embd           = 2048
0.00.827.131 I llm_load_print_meta: n_layer          = 18
0.00.827.194 I llm_load_print_meta: n_head           = 8
0.00.827.205 I llm_load_print_meta: n_head_kv        = 1
0.00.827.205 I llm_load_print_meta: n_rot            = 256
0.00.827.206 I llm_load_print_meta: n_swa            = 0
0.00.827.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.827.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.827.212 I llm_load_print_meta: n_gqa            = 8
0.00.827.218 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.827.223 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.827.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.827.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.827.226 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.827.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.827.228 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.827.233 I llm_load_print_meta: n_ff             = 16384
0.00.827.234 I llm_load_print_meta: n_expert         = 0
0.00.827.235 I llm_load_print_meta: n_expert_used    = 0
0.00.827.235 I llm_load_print_meta: causal attn      = 1
0.00.827.235 I llm_load_print_meta: pooling type     = 0
0.00.827.236 I llm_load_print_meta: rope type        = 2
0.00.827.236 I llm_load_print_meta: rope scaling     = linear
0.00.827.238 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.827.238 I llm_load_print_meta: freq_scale_train = 1
0.00.827.246 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.827.247 I llm_load_print_meta: rope_finetuned   = unknown
0.00.827.247 I llm_load_print_meta: ssm_d_conv       = 0
0.00.827.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.827.248 I llm_load_print_meta: ssm_d_state      = 0
0.00.827.248 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.827.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.827.250 I llm_load_print_meta: model type       = 2B
0.00.827.251 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.827.252 I llm_load_print_meta: model params     = 2.51 B
0.00.827.253 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.827.253 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.827.254 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.827.254 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.827.255 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.827.255 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.827.255 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.827.256 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.827.262 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.827.263 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.827.264 I llm_load_print_meta: max token length = 93
0.00.885.685 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.891.193 I llama_new_context_with_model: n_seq_max     = 1
0.00.891.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.891.198 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.891.199 I llama_new_context_with_model: n_batch       = 2048
0.00.891.199 I llama_new_context_with_model: n_ubatch      = 512
0.00.891.200 I llama_new_context_with_model: flash_attn    = 0
0.00.891.202 I llama_new_context_with_model: freq_base     = 10000.0
0.00.891.203 I llama_new_context_with_model: freq_scale    = 1
0.00.891.204 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.905.679 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.905.720 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.905.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.908.387 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.908.390 I llama_new_context_with_model: graph nodes  = 601
0.00.908.391 I llama_new_context_with_model: graph splits = 1
0.00.908.412 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.488.964 I main: llama threadpool init, n_threads = 4
0.01.488.981 I 
0.01.489.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.489.107 I 
0.01.489.351 I sampler seed: 2980032867
0.01.489.365 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.374 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.377 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.377 I 
 seconded, and then reactivated. The reactivated state was unstable and eventually collapsed, leaving only a small fragment of the original structure standing.

What is

0.12.630.547 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.12.630.564 I llama_perf_context_print:        load time =    1488.01 ms
0.12.630.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.630.570 I llama_perf_context_print:        eval time =   11053.29 ms /    32 runs   (  345.42 ms per token,     2.90 tokens per second)
0.12.630.572 I llama_perf_context_print:       total time =   11141.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.976s
user	46m43.661s
sys	0m6.450s
