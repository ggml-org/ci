+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.172 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.385 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.020.533 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.566 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.568 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.568 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.569 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.573 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.573 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.574 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.964 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.966 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.967 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.968 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.973 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.973 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.974 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.977 I llama_model_loader: - type  f32:   37 tensors
0.00.129.978 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.947 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.217 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.908 I llm_load_vocab: special tokens cache size = 5
0.00.273.853 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.873 I llm_load_print_meta: arch             = gemma
0.00.273.874 I llm_load_print_meta: vocab type       = SPM
0.00.273.874 I llm_load_print_meta: n_vocab          = 256000
0.00.273.875 I llm_load_print_meta: n_merges         = 0
0.00.273.875 I llm_load_print_meta: vocab_only       = 0
0.00.273.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.875 I llm_load_print_meta: n_embd           = 2048
0.00.273.876 I llm_load_print_meta: n_layer          = 18
0.00.273.887 I llm_load_print_meta: n_head           = 8
0.00.273.888 I llm_load_print_meta: n_head_kv        = 1
0.00.273.889 I llm_load_print_meta: n_rot            = 256
0.00.273.889 I llm_load_print_meta: n_swa            = 0
0.00.273.889 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.890 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.891 I llm_load_print_meta: n_gqa            = 8
0.00.273.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.893 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.895 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.895 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.896 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.897 I llm_load_print_meta: n_ff             = 16384
0.00.273.897 I llm_load_print_meta: n_expert         = 0
0.00.273.897 I llm_load_print_meta: n_expert_used    = 0
0.00.273.897 I llm_load_print_meta: causal attn      = 1
0.00.273.898 I llm_load_print_meta: pooling type     = 0
0.00.273.898 I llm_load_print_meta: rope type        = 2
0.00.273.898 I llm_load_print_meta: rope scaling     = linear
0.00.273.900 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.900 I llm_load_print_meta: freq_scale_train = 1
0.00.273.901 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.902 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.902 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.902 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.902 I llm_load_print_meta: model type       = 2B
0.00.273.903 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.904 I llm_load_print_meta: model params     = 2.51 B
0.00.273.905 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.905 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.905 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.906 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.907 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.907 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.907 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.908 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.908 I llm_load_print_meta: max token length = 93
0.00.373.922 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.373.929 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.373.930 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.373.931 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.373.931 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.373.932 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.082 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.089 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.089 I llama_new_context_with_model: n_batch       = 2048
0.00.379.089 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.090 I llama_new_context_with_model: flash_attn    = 0
0.00.379.092 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.093 I llama_new_context_with_model: freq_scale    = 1
0.00.379.094 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.249 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.263 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.352 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.572 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.579 I llama_new_context_with_model: graph nodes  = 601
0.00.394.580 I llama_new_context_with_model: graph splits = 1
0.00.394.582 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.463 I main: llama threadpool init, n_threads = 4
0.00.479.478 I 
0.00.479.570 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.573 I 
0.00.479.614 I sampler seed: 2706683422
0.00.479.626 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.639 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.642 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.643 I 
 increasities are a common type of error in which participants fail to respond to stimuli because they are too focused on responding to previous stimuli.

Which of the following

0.02.734.040 I llama_perf_sampler_print:    sampling time =       5.53 ms /    33 runs   (    0.17 ms per token,  5967.45 tokens per second)
0.02.734.043 I llama_perf_context_print:        load time =     479.05 ms
0.02.734.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.734.047 I llama_perf_context_print:        eval time =    2234.68 ms /    32 runs   (   69.83 ms per token,    14.32 tokens per second)
0.02.734.048 I llama_perf_context_print:       total time =    2254.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.801 I main: load the model and apply lora adapter, if any
0.00.022.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.284 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.291 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.306 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.307 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.308 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.903 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.999 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.000 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.004 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.004 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.006 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.006 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.007 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.011 I llama_model_loader: - type  f32:   37 tensors
0.00.132.012 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.000 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.400 I llm_load_vocab: special tokens cache size = 5
0.00.258.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.046 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.047 I llm_load_print_meta: arch             = gemma
0.00.258.047 I llm_load_print_meta: vocab type       = SPM
0.00.258.048 I llm_load_print_meta: n_vocab          = 256000
0.00.258.048 I llm_load_print_meta: n_merges         = 0
0.00.258.049 I llm_load_print_meta: vocab_only       = 0
0.00.258.049 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.049 I llm_load_print_meta: n_embd           = 2048
0.00.258.050 I llm_load_print_meta: n_layer          = 18
0.00.258.061 I llm_load_print_meta: n_head           = 8
0.00.258.062 I llm_load_print_meta: n_head_kv        = 1
0.00.258.062 I llm_load_print_meta: n_rot            = 256
0.00.258.062 I llm_load_print_meta: n_swa            = 0
0.00.258.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.063 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.064 I llm_load_print_meta: n_gqa            = 8
0.00.258.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.066 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.068 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.068 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.069 I llm_load_print_meta: n_ff             = 16384
0.00.258.070 I llm_load_print_meta: n_expert         = 0
0.00.258.070 I llm_load_print_meta: n_expert_used    = 0
0.00.258.070 I llm_load_print_meta: causal attn      = 1
0.00.258.070 I llm_load_print_meta: pooling type     = 0
0.00.258.071 I llm_load_print_meta: rope type        = 2
0.00.258.071 I llm_load_print_meta: rope scaling     = linear
0.00.258.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.074 I llm_load_print_meta: freq_scale_train = 1
0.00.258.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.075 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.076 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.076 I llm_load_print_meta: model type       = 2B
0.00.258.077 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.077 I llm_load_print_meta: model params     = 2.51 B
0.00.258.078 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.079 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.079 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.080 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.081 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.081 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.082 I llm_load_print_meta: max token length = 93
0.00.353.054 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.358.318 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.325 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.326 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.326 I llama_new_context_with_model: n_batch       = 2048
0.00.358.326 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.327 I llama_new_context_with_model: flash_attn    = 0
0.00.358.329 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.329 I llama_new_context_with_model: freq_scale    = 1
0.00.358.330 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.554 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.568 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.663 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.921 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.927 I llama_new_context_with_model: graph nodes  = 601
0.00.374.927 I llama_new_context_with_model: graph splits = 1
0.00.374.931 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.650 I main: llama threadpool init, n_threads = 4
0.00.459.668 I 
0.00.459.744 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.747 I 
0.00.459.795 I sampler seed: 1308115757
0.00.459.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.808 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.809 I 
 increasels and all of the other creatures that are said to inhabit the swamp.

I am unable to provide an answer as the requested information contains harmful and potentially

0.02.631.498 I llama_perf_sampler_print:    sampling time =       5.99 ms /    33 runs   (    0.18 ms per token,  5505.51 tokens per second)
0.02.631.500 I llama_perf_context_print:        load time =     458.83 ms
0.02.631.501 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.631.503 I llama_perf_context_print:        eval time =    2151.36 ms /    32 runs   (   67.23 ms per token,    14.87 tokens per second)
0.02.631.503 I llama_perf_context_print:       total time =    2171.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.596 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.822 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.021.655 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.682 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.688 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.693 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.699 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.701 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.069 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.874 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.875 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.875 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.876 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.880 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.880 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.881 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.881 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.882 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.886 I llama_model_loader: - type  f32:   37 tensors
0.00.131.888 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.335 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.792 I llm_load_vocab: special tokens cache size = 5
0.00.263.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.888 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.889 I llm_load_print_meta: arch             = gemma
0.00.263.890 I llm_load_print_meta: vocab type       = SPM
0.00.263.890 I llm_load_print_meta: n_vocab          = 256000
0.00.263.891 I llm_load_print_meta: n_merges         = 0
0.00.263.891 I llm_load_print_meta: vocab_only       = 0
0.00.263.892 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.892 I llm_load_print_meta: n_embd           = 2048
0.00.263.892 I llm_load_print_meta: n_layer          = 18
0.00.263.904 I llm_load_print_meta: n_head           = 8
0.00.263.905 I llm_load_print_meta: n_head_kv        = 1
0.00.263.905 I llm_load_print_meta: n_rot            = 256
0.00.263.905 I llm_load_print_meta: n_swa            = 0
0.00.263.906 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.906 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.907 I llm_load_print_meta: n_gqa            = 8
0.00.263.908 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.909 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.910 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.912 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.912 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.913 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.914 I llm_load_print_meta: n_ff             = 16384
0.00.263.914 I llm_load_print_meta: n_expert         = 0
0.00.263.914 I llm_load_print_meta: n_expert_used    = 0
0.00.263.914 I llm_load_print_meta: causal attn      = 1
0.00.263.915 I llm_load_print_meta: pooling type     = 0
0.00.263.915 I llm_load_print_meta: rope type        = 2
0.00.263.915 I llm_load_print_meta: rope scaling     = linear
0.00.263.916 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.917 I llm_load_print_meta: freq_scale_train = 1
0.00.263.917 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.918 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.918 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.918 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.919 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.919 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.919 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.920 I llm_load_print_meta: model type       = 2B
0.00.263.920 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.921 I llm_load_print_meta: model params     = 2.51 B
0.00.263.922 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.923 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.924 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.925 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.925 I llm_load_print_meta: max token length = 93
0.00.341.057 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.064 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.064 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.065 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.065 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.066 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.388 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.394 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.394 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.395 I llama_new_context_with_model: n_batch       = 2048
0.00.346.395 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.396 I llama_new_context_with_model: flash_attn    = 0
0.00.346.398 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.399 I llama_new_context_with_model: freq_scale    = 1
0.00.346.400 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.392 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.406 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.502 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.796 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.804 I llama_new_context_with_model: graph nodes  = 601
0.00.361.804 I llama_new_context_with_model: graph splits = 1
0.00.361.806 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.628 I main: llama threadpool init, n_threads = 4
0.00.447.644 I 
0.00.447.729 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.736 I 
0.00.447.783 I sampler seed: 1332634871
0.00.447.794 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.798 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.798 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.800 I 
 increasities, a man of mystery with a penchant for the unusual, and a world filled with conspiracies.

**Who is the enigmatic figure?**



0.02.697.054 I llama_perf_sampler_print:    sampling time =       5.55 ms /    33 runs   (    0.17 ms per token,  5950.23 tokens per second)
0.02.697.057 I llama_perf_context_print:        load time =     446.78 ms
0.02.697.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.697.059 I llama_perf_context_print:        eval time =    2230.16 ms /    32 runs   (   69.69 ms per token,    14.35 tokens per second)
0.02.697.060 I llama_perf_context_print:       total time =    2249.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.168 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.713 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.726 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.738 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.740 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.745 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.745 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.747 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.747 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.748 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.749 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.753 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.754 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.755 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.756 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.390 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.217 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.218 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.219 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.220 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.220 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.225 I llama_model_loader: - type  f32:   37 tensors
0.00.131.227 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.275 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.631 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.236 I llm_load_vocab: special tokens cache size = 5
0.00.266.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.974 I llm_load_print_meta: arch             = gemma
0.00.266.975 I llm_load_print_meta: vocab type       = SPM
0.00.266.975 I llm_load_print_meta: n_vocab          = 256000
0.00.266.976 I llm_load_print_meta: n_merges         = 0
0.00.266.976 I llm_load_print_meta: vocab_only       = 0
0.00.266.976 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.977 I llm_load_print_meta: n_embd           = 2048
0.00.266.977 I llm_load_print_meta: n_layer          = 18
0.00.266.990 I llm_load_print_meta: n_head           = 8
0.00.266.991 I llm_load_print_meta: n_head_kv        = 1
0.00.266.991 I llm_load_print_meta: n_rot            = 256
0.00.266.992 I llm_load_print_meta: n_swa            = 0
0.00.266.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.993 I llm_load_print_meta: n_gqa            = 8
0.00.266.994 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.995 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.996 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.999 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.000 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.001 I llm_load_print_meta: n_ff             = 16384
0.00.267.001 I llm_load_print_meta: n_expert         = 0
0.00.267.001 I llm_load_print_meta: n_expert_used    = 0
0.00.267.002 I llm_load_print_meta: causal attn      = 1
0.00.267.002 I llm_load_print_meta: pooling type     = 0
0.00.267.002 I llm_load_print_meta: rope type        = 2
0.00.267.003 I llm_load_print_meta: rope scaling     = linear
0.00.267.004 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.005 I llm_load_print_meta: freq_scale_train = 1
0.00.267.005 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.005 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.006 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.006 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.006 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.007 I llm_load_print_meta: model type       = 2B
0.00.267.008 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.009 I llm_load_print_meta: model params     = 2.51 B
0.00.267.010 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.010 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.011 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.011 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.012 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.012 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.012 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.013 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.013 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.014 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.014 I llm_load_print_meta: max token length = 93
0.00.337.943 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.950 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.038 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.044 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.045 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.045 I llama_new_context_with_model: n_batch       = 2048
0.00.343.045 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.046 I llama_new_context_with_model: flash_attn    = 0
0.00.343.048 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.048 I llama_new_context_with_model: freq_scale    = 1
0.00.343.049 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.410 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.784 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.790 I llama_new_context_with_model: graph nodes  = 601
0.00.358.791 I llama_new_context_with_model: graph splits = 1
0.00.358.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.115 I main: llama threadpool init, n_threads = 4
0.00.445.131 I 
0.00.445.206 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.210 I 
0.00.445.254 I sampler seed: 4262520398
0.00.445.266 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.280 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.283 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.284 I 
 increasities to express the idea that the subject is a good listener.

**Examples:**

* You listen attentively when I speak.
* You show genuine

0.02.870.575 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5907.63 tokens per second)
0.02.870.577 I llama_perf_context_print:        load time =     444.73 ms
0.02.870.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.870.580 I llama_perf_context_print:        eval time =    2404.61 ms /    32 runs   (   75.14 ms per token,    13.31 tokens per second)
0.02.870.581 I llama_perf_context_print:       total time =    2425.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.406s
user	0m39.244s
sys	0m9.330s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4286 (62e84d98)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40201.24 ms
main:    total time = 40201.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.343 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.356 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.357 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.360 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.361 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.362 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.362 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.363 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.364 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.367 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.368 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.937 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.841 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.842 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.842 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.847 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.849 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.852 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.856 I llama_model_loader: - type  f32:   37 tensors
0.00.130.857 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.858 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.481 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.997 I llm_load_vocab: special tokens cache size = 5
0.00.267.827 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.846 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.846 I llm_load_print_meta: arch             = gemma
0.00.267.847 I llm_load_print_meta: vocab type       = SPM
0.00.267.847 I llm_load_print_meta: n_vocab          = 256000
0.00.267.848 I llm_load_print_meta: n_merges         = 0
0.00.267.848 I llm_load_print_meta: vocab_only       = 0
0.00.267.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.849 I llm_load_print_meta: n_embd           = 2048
0.00.267.850 I llm_load_print_meta: n_layer          = 18
0.00.267.861 I llm_load_print_meta: n_head           = 8
0.00.267.862 I llm_load_print_meta: n_head_kv        = 1
0.00.267.862 I llm_load_print_meta: n_rot            = 256
0.00.267.863 I llm_load_print_meta: n_swa            = 0
0.00.267.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.864 I llm_load_print_meta: n_gqa            = 8
0.00.267.866 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.869 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.870 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.870 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.871 I llm_load_print_meta: n_ff             = 16384
0.00.267.871 I llm_load_print_meta: n_expert         = 0
0.00.267.871 I llm_load_print_meta: n_expert_used    = 0
0.00.267.872 I llm_load_print_meta: causal attn      = 1
0.00.267.872 I llm_load_print_meta: pooling type     = 0
0.00.267.872 I llm_load_print_meta: rope type        = 2
0.00.267.873 I llm_load_print_meta: rope scaling     = linear
0.00.267.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.874 I llm_load_print_meta: freq_scale_train = 1
0.00.267.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.876 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.877 I llm_load_print_meta: model type       = 2B
0.00.267.877 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.878 I llm_load_print_meta: model params     = 2.51 B
0.00.267.879 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.880 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.881 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.882 I llm_load_print_meta: max token length = 93
0.00.329.027 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.329.034 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.329.035 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.329.035 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.329.036 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.329.037 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.273 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.280 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.280 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.281 I llama_new_context_with_model: n_batch       = 2048
0.00.334.281 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.281 I llama_new_context_with_model: flash_attn    = 0
0.00.334.284 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.285 I llama_new_context_with_model: freq_scale    = 1
0.00.334.286 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.433 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.447 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.535 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.745 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.753 I llama_new_context_with_model: graph nodes  = 601
0.00.349.753 I llama_new_context_with_model: graph splits = 1
0.00.349.755 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.072 I main: llama threadpool init, n_threads = 4
0.00.425.088 I 
0.00.425.159 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.163 I 
0.00.425.208 I sampler seed: 1911256418
0.00.425.219 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.232 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.236 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.236 I 
 strick the following expression:

$$x^2 + 2x + 1$$

The answer should be: $$(x + 1)^2

0.02.009.212 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5723.20 tokens per second)
0.02.009.215 I llama_perf_context_print:        load time =     424.31 ms
0.02.009.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.217 I llama_perf_context_print:        eval time =    1564.08 ms /    32 runs   (   48.88 ms per token,    20.46 tokens per second)
0.02.009.218 I llama_perf_context_print:       total time =    1584.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4286 (62e84d98)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40170.72 ms
main:    total time = 40170.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.174 I build: 4286 (62e84d98) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.663 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.692 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.696 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.697 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.698 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.699 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.700 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.704 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.704 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.612 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.479 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.489 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.490 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.493 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.497 I llama_model_loader: - type  f32:   37 tensors
0.00.130.498 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.498 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.016 I llm_load_vocab: special tokens cache size = 5
0.00.276.657 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.675 I llm_load_print_meta: arch             = gemma
0.00.276.676 I llm_load_print_meta: vocab type       = SPM
0.00.276.677 I llm_load_print_meta: n_vocab          = 256000
0.00.276.677 I llm_load_print_meta: n_merges         = 0
0.00.276.677 I llm_load_print_meta: vocab_only       = 0
0.00.276.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.678 I llm_load_print_meta: n_embd           = 2048
0.00.276.679 I llm_load_print_meta: n_layer          = 18
0.00.276.690 I llm_load_print_meta: n_head           = 8
0.00.276.690 I llm_load_print_meta: n_head_kv        = 1
0.00.276.691 I llm_load_print_meta: n_rot            = 256
0.00.276.692 I llm_load_print_meta: n_swa            = 0
0.00.276.692 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.692 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.693 I llm_load_print_meta: n_gqa            = 8
0.00.276.695 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.696 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.697 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.698 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.698 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.699 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.699 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.701 I llm_load_print_meta: n_ff             = 16384
0.00.276.701 I llm_load_print_meta: n_expert         = 0
0.00.276.701 I llm_load_print_meta: n_expert_used    = 0
0.00.276.701 I llm_load_print_meta: causal attn      = 1
0.00.276.702 I llm_load_print_meta: pooling type     = 0
0.00.276.702 I llm_load_print_meta: rope type        = 2
0.00.276.703 I llm_load_print_meta: rope scaling     = linear
0.00.276.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.705 I llm_load_print_meta: freq_scale_train = 1
0.00.276.706 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.707 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.707 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.707 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.707 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.708 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.709 I llm_load_print_meta: model type       = 2B
0.00.276.710 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.711 I llm_load_print_meta: model params     = 2.51 B
0.00.276.711 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.713 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.714 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.715 I llm_load_print_meta: max token length = 93
0.00.334.848 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.885 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.885 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.886 I llama_new_context_with_model: n_batch       = 2048
0.00.339.886 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.887 I llama_new_context_with_model: flash_attn    = 0
0.00.339.889 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.890 I llama_new_context_with_model: freq_scale    = 1
0.00.339.891 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.403 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.416 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.761 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.767 I llama_new_context_with_model: graph nodes  = 601
0.00.355.767 I llama_new_context_with_model: graph splits = 1
0.00.355.769 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.753 I main: llama threadpool init, n_threads = 4
0.00.429.767 I 
0.00.429.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.850 I 
0.00.429.896 I sampler seed: 2973331369
0.00.429.907 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.921 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.925 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.925 I 
 maneuvously.

I am unable to access the requested file. The requested file is likely corrupted or inaccessible.

I apologize for any inconvenience this may cause

0.02.004.270 I llama_perf_sampler_print:    sampling time =       5.88 ms /    33 runs   (    0.18 ms per token,  5609.38 tokens per second)
0.02.004.272 I llama_perf_context_print:        load time =     429.37 ms
0.02.004.273 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.004.275 I llama_perf_context_print:        eval time =    1554.47 ms /    32 runs   (   48.58 ms per token,    20.59 tokens per second)
0.02.004.275 I llama_perf_context_print:       total time =    1574.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.150s
user	10m24.137s
sys	0m6.995s
