+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.001.851 I main: load the model and apply lora adapter, if any
0.00.022.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.092 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.106 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.107 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.110 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.111 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.112 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.113 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.113 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.119 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.119 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.733 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.793 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.800 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.801 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.802 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.811 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.812 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.816 I llama_model_loader: - type  f32:   37 tensors
0.00.132.818 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.795 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.537 I llm_load_vocab: special tokens cache size = 5
0.00.221.033 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.046 I llm_load_print_meta: arch             = gemma
0.00.221.047 I llm_load_print_meta: vocab type       = SPM
0.00.221.047 I llm_load_print_meta: n_vocab          = 256000
0.00.221.047 I llm_load_print_meta: n_merges         = 0
0.00.221.048 I llm_load_print_meta: vocab_only       = 0
0.00.221.048 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.049 I llm_load_print_meta: n_embd           = 2048
0.00.221.049 I llm_load_print_meta: n_layer          = 18
0.00.221.060 I llm_load_print_meta: n_head           = 8
0.00.221.061 I llm_load_print_meta: n_head_kv        = 1
0.00.221.062 I llm_load_print_meta: n_rot            = 256
0.00.221.062 I llm_load_print_meta: n_swa            = 0
0.00.221.062 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.063 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.064 I llm_load_print_meta: n_gqa            = 8
0.00.221.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.069 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.070 I llm_load_print_meta: n_ff             = 16384
0.00.221.070 I llm_load_print_meta: n_expert         = 0
0.00.221.071 I llm_load_print_meta: n_expert_used    = 0
0.00.221.071 I llm_load_print_meta: causal attn      = 1
0.00.221.071 I llm_load_print_meta: pooling type     = 0
0.00.221.072 I llm_load_print_meta: rope type        = 2
0.00.221.072 I llm_load_print_meta: rope scaling     = linear
0.00.221.074 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.075 I llm_load_print_meta: freq_scale_train = 1
0.00.221.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.077 I llm_load_print_meta: model type       = 2B
0.00.221.078 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.078 I llm_load_print_meta: model params     = 2.51 B
0.00.221.079 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.080 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.081 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.082 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.082 I llm_load_print_meta: max token length = 93
0.00.221.098 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.012 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.320.018 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.320.019 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.320.020 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.320.020 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.320.021 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.325.106 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.112 I llama_new_context_with_model: n_batch    = 2048
0.00.325.112 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.113 I llama_new_context_with_model: flash_attn = 0
0.00.325.115 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.116 I llama_new_context_with_model: freq_scale = 1
0.00.353.683 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.353.699 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.353.789 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.620 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.354.628 I llama_new_context_with_model: graph nodes  = 601
0.00.354.629 I llama_new_context_with_model: graph splits = 1
0.00.354.630 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.649 I main: llama threadpool init, n_threads = 4
0.00.444.660 I 
0.00.444.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.739 I 
0.00.444.768 I sampler seed: 2952373900
0.00.444.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.780 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.444.780 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamental response is a phenomenon in which the delay between a stimulus and the neural response is extended, suggesting that the time required for the response to emerge is affected

0.02.656.562 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7141.31 tokens per second)
0.02.656.564 I llama_perf_context_print:        load time =     442.78 ms
0.02.656.565 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.656.566 I llama_perf_context_print:        eval time =    2194.59 ms /    32 runs   (   68.58 ms per token,    14.58 tokens per second)
0.02.656.567 I llama_perf_context_print:       total time =    2211.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.506 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.710 I main: llama backend init
0.00.001.812 I main: load the model and apply lora adapter, if any
0.00.022.130 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.150 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.151 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.156 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.157 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.158 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.330 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.452 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.314 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.320 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.321 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.322 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.329 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.330 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.331 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.332 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.337 I llama_model_loader: - type  f32:   37 tensors
0.00.132.339 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.495 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.246 I llm_load_vocab: special tokens cache size = 5
0.00.218.827 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.842 I llm_load_print_meta: arch             = gemma
0.00.218.843 I llm_load_print_meta: vocab type       = SPM
0.00.218.843 I llm_load_print_meta: n_vocab          = 256000
0.00.218.844 I llm_load_print_meta: n_merges         = 0
0.00.218.844 I llm_load_print_meta: vocab_only       = 0
0.00.218.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.845 I llm_load_print_meta: n_embd           = 2048
0.00.218.845 I llm_load_print_meta: n_layer          = 18
0.00.218.856 I llm_load_print_meta: n_head           = 8
0.00.218.857 I llm_load_print_meta: n_head_kv        = 1
0.00.218.858 I llm_load_print_meta: n_rot            = 256
0.00.218.858 I llm_load_print_meta: n_swa            = 0
0.00.218.858 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.858 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.859 I llm_load_print_meta: n_gqa            = 8
0.00.218.860 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.861 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.862 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.863 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.864 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.864 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.865 I llm_load_print_meta: n_ff             = 16384
0.00.218.865 I llm_load_print_meta: n_expert         = 0
0.00.218.865 I llm_load_print_meta: n_expert_used    = 0
0.00.218.866 I llm_load_print_meta: causal attn      = 1
0.00.218.866 I llm_load_print_meta: pooling type     = 0
0.00.218.866 I llm_load_print_meta: rope type        = 2
0.00.218.867 I llm_load_print_meta: rope scaling     = linear
0.00.218.868 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.869 I llm_load_print_meta: freq_scale_train = 1
0.00.218.869 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.870 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.870 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.870 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.870 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.871 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.871 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.871 I llm_load_print_meta: model type       = 2B
0.00.218.872 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.872 I llm_load_print_meta: model params     = 2.51 B
0.00.218.874 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.875 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.876 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.877 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.877 I llm_load_print_meta: max token length = 93
0.00.218.901 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.717 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.827 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.832 I llama_new_context_with_model: n_batch    = 2048
0.00.314.833 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.833 I llama_new_context_with_model: flash_attn = 0
0.00.314.835 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.836 I llama_new_context_with_model: freq_scale = 1
0.00.343.494 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.510 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.444 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.452 I llama_new_context_with_model: graph nodes  = 601
0.00.344.452 I llama_new_context_with_model: graph splits = 1
0.00.344.454 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.147 I main: llama threadpool init, n_threads = 4
0.00.431.159 I 
0.00.431.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.237 I 
0.00.431.265 I sampler seed: 1086672281
0.00.431.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.276 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.276 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I'm not sure what you're trying to say. Can you please rephrase your question? [end of text]


0.02.191.078 I llama_perf_sampler_print:    sampling time =       4.01 ms /    27 runs   (    0.15 ms per token,  6734.85 tokens per second)
0.02.191.080 I llama_perf_context_print:        load time =     429.32 ms
0.02.191.082 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.191.083 I llama_perf_context_print:        eval time =    1745.09 ms /    26 runs   (   67.12 ms per token,    14.90 tokens per second)
0.02.191.084 I llama_perf_context_print:       total time =    1759.94 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.021.879 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.928 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.941 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.942 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.961 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.962 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.963 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.684 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.684 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.685 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.688 I llama_model_loader: - type  f32:   37 tensors
0.00.132.691 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.889 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.569 I llm_load_vocab: special tokens cache size = 5
0.00.217.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.028 I llm_load_print_meta: arch             = gemma
0.00.217.029 I llm_load_print_meta: vocab type       = SPM
0.00.217.030 I llm_load_print_meta: n_vocab          = 256000
0.00.217.031 I llm_load_print_meta: n_merges         = 0
0.00.217.032 I llm_load_print_meta: vocab_only       = 0
0.00.217.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.032 I llm_load_print_meta: n_embd           = 2048
0.00.217.033 I llm_load_print_meta: n_layer          = 18
0.00.217.044 I llm_load_print_meta: n_head           = 8
0.00.217.045 I llm_load_print_meta: n_head_kv        = 1
0.00.217.045 I llm_load_print_meta: n_rot            = 256
0.00.217.046 I llm_load_print_meta: n_swa            = 0
0.00.217.046 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.046 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.048 I llm_load_print_meta: n_gqa            = 8
0.00.217.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.055 I llm_load_print_meta: n_ff             = 16384
0.00.217.055 I llm_load_print_meta: n_expert         = 0
0.00.217.055 I llm_load_print_meta: n_expert_used    = 0
0.00.217.056 I llm_load_print_meta: causal attn      = 1
0.00.217.056 I llm_load_print_meta: pooling type     = 0
0.00.217.058 I llm_load_print_meta: rope type        = 2
0.00.217.059 I llm_load_print_meta: rope scaling     = linear
0.00.217.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.061 I llm_load_print_meta: freq_scale_train = 1
0.00.217.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.062 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.062 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.063 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.063 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.064 I llm_load_print_meta: model type       = 2B
0.00.217.065 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.066 I llm_load_print_meta: model params     = 2.51 B
0.00.217.067 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.069 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.070 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.070 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.071 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.071 I llm_load_print_meta: max token length = 93
0.00.217.087 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.870 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.292.876 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.877 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.292.878 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.292.879 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.879 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.297.905 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.912 I llama_new_context_with_model: n_batch    = 2048
0.00.297.912 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.913 I llama_new_context_with_model: flash_attn = 0
0.00.297.915 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.916 I llama_new_context_with_model: freq_scale = 1
0.00.326.535 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.549 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.638 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.486 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.494 I llama_new_context_with_model: graph nodes  = 601
0.00.327.495 I llama_new_context_with_model: graph splits = 1
0.00.327.497 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.974 I main: llama threadpool init, n_threads = 4
0.00.418.986 I 
0.00.419.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.060 I 
0.00.419.097 I sampler seed: 2015632370
0.00.419.105 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.109 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.109 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in a crowded room, resulting in temporary blindness and confusion. [end of text]


0.01.460.563 I llama_perf_sampler_print:    sampling time =       2.30 ms /    16 runs   (    0.14 ms per token,  6947.46 tokens per second)
0.01.460.566 I llama_perf_context_print:        load time =     417.12 ms
0.01.460.567 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.460.568 I llama_perf_context_print:        eval time =    1032.22 ms /    15 runs   (   68.81 ms per token,    14.53 tokens per second)
0.01.460.569 I llama_perf_context_print:       total time =    1041.60 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.579 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.021.929 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.986 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.010 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.011 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.012 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.012 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.013 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.019 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.550 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.439 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.440 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.440 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.441 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.443 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.446 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.448 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.449 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.452 I llama_model_loader: - type  f32:   37 tensors
0.00.132.455 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.406 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.045 I llm_load_vocab: special tokens cache size = 5
0.00.215.524 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.537 I llm_load_print_meta: arch             = gemma
0.00.215.538 I llm_load_print_meta: vocab type       = SPM
0.00.215.538 I llm_load_print_meta: n_vocab          = 256000
0.00.215.539 I llm_load_print_meta: n_merges         = 0
0.00.215.539 I llm_load_print_meta: vocab_only       = 0
0.00.215.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.540 I llm_load_print_meta: n_embd           = 2048
0.00.215.540 I llm_load_print_meta: n_layer          = 18
0.00.215.551 I llm_load_print_meta: n_head           = 8
0.00.215.552 I llm_load_print_meta: n_head_kv        = 1
0.00.215.552 I llm_load_print_meta: n_rot            = 256
0.00.215.552 I llm_load_print_meta: n_swa            = 0
0.00.215.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.554 I llm_load_print_meta: n_gqa            = 8
0.00.215.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.560 I llm_load_print_meta: n_ff             = 16384
0.00.215.560 I llm_load_print_meta: n_expert         = 0
0.00.215.560 I llm_load_print_meta: n_expert_used    = 0
0.00.215.561 I llm_load_print_meta: causal attn      = 1
0.00.215.561 I llm_load_print_meta: pooling type     = 0
0.00.215.561 I llm_load_print_meta: rope type        = 2
0.00.215.561 I llm_load_print_meta: rope scaling     = linear
0.00.215.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.563 I llm_load_print_meta: freq_scale_train = 1
0.00.215.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.566 I llm_load_print_meta: model type       = 2B
0.00.215.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.569 I llm_load_print_meta: model params     = 2.51 B
0.00.215.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.574 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.574 I llm_load_print_meta: max token length = 93
0.00.215.589 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.285.978 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.285.984 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.291.007 I llama_new_context_with_model: n_ctx      = 8192
0.00.291.013 I llama_new_context_with_model: n_batch    = 2048
0.00.291.014 I llama_new_context_with_model: n_ubatch   = 512
0.00.291.015 I llama_new_context_with_model: flash_attn = 0
0.00.291.017 I llama_new_context_with_model: freq_base  = 10000.0
0.00.291.017 I llama_new_context_with_model: freq_scale = 1
0.00.320.186 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.199 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.289 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.162 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.171 I llama_new_context_with_model: graph nodes  = 601
0.00.321.171 I llama_new_context_with_model: graph splits = 1
0.00.321.173 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.664 I main: llama threadpool init, n_threads = 4
0.00.413.676 I 
0.00.413.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.413.754 I 
0.00.413.792 I sampler seed: 3395625223
0.00.413.803 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.806 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.413.806 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I need some help understanding the concept of entropy and how it relates to the second law of thermodynamics.

**Entropy:**

- A measure

0.02.839.271 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6430.24 tokens per second)
0.02.839.273 I llama_perf_context_print:        load time =     411.79 ms
0.02.839.274 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.839.276 I llama_perf_context_print:        eval time =    2406.08 ms /    32 runs   (   75.19 ms per token,    13.30 tokens per second)
0.02.839.276 I llama_perf_context_print:       total time =    2425.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.530s
user	0m32.473s
sys	0m9.263s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3761 (6262d13e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31961.49 ms
main:    total time = 31961.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.002.007 I main: load the model and apply lora adapter, if any
0.00.022.253 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.338 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.343 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.348 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.349 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.362 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.363 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.850 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.415 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.428 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.429 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.430 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.433 I llama_model_loader: - type  f32:   37 tensors
0.00.132.436 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.436 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.479 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.104 I llm_load_vocab: special tokens cache size = 5
0.00.214.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.580 I llm_load_print_meta: arch             = gemma
0.00.214.581 I llm_load_print_meta: vocab type       = SPM
0.00.214.582 I llm_load_print_meta: n_vocab          = 256000
0.00.214.582 I llm_load_print_meta: n_merges         = 0
0.00.214.583 I llm_load_print_meta: vocab_only       = 0
0.00.214.583 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.584 I llm_load_print_meta: n_embd           = 2048
0.00.214.584 I llm_load_print_meta: n_layer          = 18
0.00.214.595 I llm_load_print_meta: n_head           = 8
0.00.214.597 I llm_load_print_meta: n_head_kv        = 1
0.00.214.597 I llm_load_print_meta: n_rot            = 256
0.00.214.598 I llm_load_print_meta: n_swa            = 0
0.00.214.598 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.598 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.599 I llm_load_print_meta: n_gqa            = 8
0.00.214.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.604 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.605 I llm_load_print_meta: n_ff             = 16384
0.00.214.606 I llm_load_print_meta: n_expert         = 0
0.00.214.606 I llm_load_print_meta: n_expert_used    = 0
0.00.214.606 I llm_load_print_meta: causal attn      = 1
0.00.214.607 I llm_load_print_meta: pooling type     = 0
0.00.214.607 I llm_load_print_meta: rope type        = 2
0.00.214.607 I llm_load_print_meta: rope scaling     = linear
0.00.214.609 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.609 I llm_load_print_meta: freq_scale_train = 1
0.00.214.610 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.611 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.611 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.612 I llm_load_print_meta: model type       = 2B
0.00.214.612 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.613 I llm_load_print_meta: model params     = 2.51 B
0.00.214.614 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.614 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.615 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.615 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.616 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.616 I llm_load_print_meta: max token length = 93
0.00.214.633 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.382 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.273.389 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.273.390 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.273.391 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.273.391 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.273.392 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.278.542 I llama_new_context_with_model: n_ctx      = 8192
0.00.278.548 I llama_new_context_with_model: n_batch    = 2048
0.00.278.548 I llama_new_context_with_model: n_ubatch   = 512
0.00.278.549 I llama_new_context_with_model: flash_attn = 0
0.00.278.551 I llama_new_context_with_model: freq_base  = 10000.0
0.00.278.552 I llama_new_context_with_model: freq_scale = 1
0.00.307.300 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.314 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.307.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.252 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.260 I llama_new_context_with_model: graph nodes  = 601
0.00.308.261 I llama_new_context_with_model: graph splits = 1
0.00.308.263 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.388.997 I main: llama threadpool init, n_threads = 4
0.00.389.009 I 
0.00.389.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.086 I 
0.00.389.115 I sampler seed: 4019972672
0.00.389.124 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.127 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.128 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 strick with a vibrant personality and a penchant for storytelling.

Astra, a young woman with a curious mind and a thirst for knowledge, finds herself entangled in a

0.01.978.680 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6832.30 tokens per second)
0.01.978.683 I llama_perf_context_print:        load time =     386.97 ms
0.01.978.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.687 I llama_perf_context_print:        eval time =    1571.61 ms /    32 runs   (   49.11 ms per token,    20.36 tokens per second)
0.01.978.688 I llama_perf_context_print:       total time =    1589.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3761 (6262d13e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32031.54 ms
main:    total time = 32031.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 3761 (6262d13e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.021.940 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.967 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.967 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.968 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.969 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.970 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.974 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.975 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.976 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.977 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.382 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.668 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.658 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.661 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.665 I llama_model_loader: - type  f32:   37 tensors
0.00.132.668 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.669 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.696 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.466 I llm_load_vocab: special tokens cache size = 5
0.00.220.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.274 I llm_load_print_meta: arch             = gemma
0.00.220.275 I llm_load_print_meta: vocab type       = SPM
0.00.220.276 I llm_load_print_meta: n_vocab          = 256000
0.00.220.276 I llm_load_print_meta: n_merges         = 0
0.00.220.276 I llm_load_print_meta: vocab_only       = 0
0.00.220.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.277 I llm_load_print_meta: n_embd           = 2048
0.00.220.277 I llm_load_print_meta: n_layer          = 18
0.00.220.289 I llm_load_print_meta: n_head           = 8
0.00.220.290 I llm_load_print_meta: n_head_kv        = 1
0.00.220.290 I llm_load_print_meta: n_rot            = 256
0.00.220.291 I llm_load_print_meta: n_swa            = 0
0.00.220.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.292 I llm_load_print_meta: n_gqa            = 8
0.00.220.293 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.295 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.296 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.297 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.298 I llm_load_print_meta: n_ff             = 16384
0.00.220.299 I llm_load_print_meta: n_expert         = 0
0.00.220.299 I llm_load_print_meta: n_expert_used    = 0
0.00.220.299 I llm_load_print_meta: causal attn      = 1
0.00.220.299 I llm_load_print_meta: pooling type     = 0
0.00.220.299 I llm_load_print_meta: rope type        = 2
0.00.220.300 I llm_load_print_meta: rope scaling     = linear
0.00.220.301 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.302 I llm_load_print_meta: freq_scale_train = 1
0.00.220.302 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.303 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.303 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.303 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.304 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.304 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.305 I llm_load_print_meta: model type       = 2B
0.00.220.305 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.220.306 I llm_load_print_meta: model params     = 2.51 B
0.00.220.307 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.220.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.308 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.309 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.309 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.310 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.310 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.311 I llm_load_print_meta: max token length = 93
0.00.220.330 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.278.450 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.283.512 I llama_new_context_with_model: n_ctx      = 8192
0.00.283.519 I llama_new_context_with_model: n_batch    = 2048
0.00.283.519 I llama_new_context_with_model: n_ubatch   = 512
0.00.283.520 I llama_new_context_with_model: flash_attn = 0
0.00.283.522 I llama_new_context_with_model: freq_base  = 10000.0
0.00.283.523 I llama_new_context_with_model: freq_scale = 1
0.00.312.819 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.312.838 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.312.930 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.313.787 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.313.795 I llama_new_context_with_model: graph nodes  = 601
0.00.313.795 I llama_new_context_with_model: graph splits = 1
0.00.313.797 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.394.718 I main: llama threadpool init, n_threads = 4
0.00.394.729 I 
0.00.394.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.394.809 I 
0.00.394.850 I sampler seed: 2512163603
0.00.394.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.394.863 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.394.864 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally, the sentence is grammatically incorrect.

I suggest we discuss the matter further.

The correct sentence should be:

"I suggest we discuss

0.01.981.533 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6921.14 tokens per second)
0.01.981.536 I llama_perf_context_print:        load time =     392.86 ms
0.01.981.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.540 I llama_perf_context_print:        eval time =    1569.00 ms /    32 runs   (   49.03 ms per token,    20.40 tokens per second)
0.01.981.542 I llama_perf_context_print:       total time =    1586.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.163s
user	8m14.175s
sys	0m6.813s
