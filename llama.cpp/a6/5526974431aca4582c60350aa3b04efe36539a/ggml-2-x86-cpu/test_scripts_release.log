+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.638 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.648 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.660 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.666 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.667 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.673 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.674 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.676 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.676 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.677 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.682 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.684 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.685 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.685 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.686 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.506 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.960 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.853 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.859 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.862 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.863 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.865 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.866 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.867 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.868 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.869 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.873 I llama_model_loader: - type  f32:   37 tensors
0.00.132.874 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.283 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.240 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.886 I llm_load_vocab: special tokens cache size = 5
0.00.279.990 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.010 I llm_load_print_meta: arch             = gemma
0.00.280.011 I llm_load_print_meta: vocab type       = SPM
0.00.280.011 I llm_load_print_meta: n_vocab          = 256000
0.00.280.012 I llm_load_print_meta: n_merges         = 0
0.00.280.012 I llm_load_print_meta: vocab_only       = 0
0.00.280.013 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.013 I llm_load_print_meta: n_embd           = 2048
0.00.280.014 I llm_load_print_meta: n_layer          = 18
0.00.280.026 I llm_load_print_meta: n_head           = 8
0.00.280.027 I llm_load_print_meta: n_head_kv        = 1
0.00.280.027 I llm_load_print_meta: n_rot            = 256
0.00.280.027 I llm_load_print_meta: n_swa            = 0
0.00.280.028 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.028 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.029 I llm_load_print_meta: n_gqa            = 8
0.00.280.030 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.031 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.033 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.033 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.033 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.034 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.035 I llm_load_print_meta: n_ff             = 16384
0.00.280.035 I llm_load_print_meta: n_expert         = 0
0.00.280.035 I llm_load_print_meta: n_expert_used    = 0
0.00.280.035 I llm_load_print_meta: causal attn      = 1
0.00.280.036 I llm_load_print_meta: pooling type     = 0
0.00.280.036 I llm_load_print_meta: rope type        = 2
0.00.280.036 I llm_load_print_meta: rope scaling     = linear
0.00.280.038 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.039 I llm_load_print_meta: freq_scale_train = 1
0.00.280.039 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.039 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.040 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.040 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.040 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.040 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.040 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.041 I llm_load_print_meta: model type       = 2B
0.00.280.041 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.042 I llm_load_print_meta: model params     = 2.51 B
0.00.280.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.045 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.045 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.045 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.046 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.046 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.047 I llm_load_print_meta: max token length = 93
0.00.379.819 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.379.827 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.379.828 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.379.828 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.379.829 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.379.829 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.103 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.110 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.111 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.111 I llama_new_context_with_model: n_batch       = 2048
0.00.385.111 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.112 I llama_new_context_with_model: flash_attn    = 0
0.00.385.114 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.115 I llama_new_context_with_model: freq_scale    = 1
0.00.385.116 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.137 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.399.619 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.633 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.723 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.964 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.971 I llama_new_context_with_model: graph nodes  = 601
0.00.400.972 I llama_new_context_with_model: graph splits = 1
0.00.400.974 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.321 I main: llama threadpool init, n_threads = 4
0.00.486.337 I 
0.00.486.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.413 I 
0.00.486.454 I sampler seed: 3037875133
0.00.486.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.476 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.480 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.480 I 
 increably in the field of artificial intelligence. [end of text]


0.01.203.945 I llama_perf_sampler_print:    sampling time =       1.56 ms /    11 runs   (    0.14 ms per token,  7037.75 tokens per second)
0.01.203.947 I llama_perf_context_print:        load time =     485.53 ms
0.01.203.948 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.203.950 I llama_perf_context_print:        eval time =     710.98 ms /    10 runs   (   71.10 ms per token,    14.07 tokens per second)
0.01.203.950 I llama_perf_context_print:       total time =     717.63 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.610 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.374 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.377 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.756 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.515 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.434 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.442 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.443 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.443 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.444 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.445 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.445 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.448 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.449 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.450 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.451 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.456 I llama_model_loader: - type  f32:   37 tensors
0.00.132.457 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.938 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.404 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.016 I llm_load_vocab: special tokens cache size = 5
0.00.281.256 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.274 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.275 I llm_load_print_meta: arch             = gemma
0.00.281.275 I llm_load_print_meta: vocab type       = SPM
0.00.281.276 I llm_load_print_meta: n_vocab          = 256000
0.00.281.276 I llm_load_print_meta: n_merges         = 0
0.00.281.277 I llm_load_print_meta: vocab_only       = 0
0.00.281.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.278 I llm_load_print_meta: n_embd           = 2048
0.00.281.278 I llm_load_print_meta: n_layer          = 18
0.00.281.290 I llm_load_print_meta: n_head           = 8
0.00.281.291 I llm_load_print_meta: n_head_kv        = 1
0.00.281.291 I llm_load_print_meta: n_rot            = 256
0.00.281.292 I llm_load_print_meta: n_swa            = 0
0.00.281.292 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.292 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.293 I llm_load_print_meta: n_gqa            = 8
0.00.281.294 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.295 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.296 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.297 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.298 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.299 I llm_load_print_meta: n_ff             = 16384
0.00.281.299 I llm_load_print_meta: n_expert         = 0
0.00.281.299 I llm_load_print_meta: n_expert_used    = 0
0.00.281.299 I llm_load_print_meta: causal attn      = 1
0.00.281.300 I llm_load_print_meta: pooling type     = 0
0.00.281.300 I llm_load_print_meta: rope type        = 2
0.00.281.301 I llm_load_print_meta: rope scaling     = linear
0.00.281.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.303 I llm_load_print_meta: freq_scale_train = 1
0.00.281.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.303 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.304 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.304 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.304 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.305 I llm_load_print_meta: model type       = 2B
0.00.281.306 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.306 I llm_load_print_meta: model params     = 2.51 B
0.00.281.307 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.308 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.308 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.309 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.309 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.310 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.310 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.310 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.311 I llm_load_print_meta: max token length = 93
0.00.375.382 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.441 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.448 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.448 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.449 I llama_new_context_with_model: n_batch       = 2048
0.00.380.449 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.450 I llama_new_context_with_model: flash_attn    = 0
0.00.380.452 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.452 I llama_new_context_with_model: freq_scale    = 1
0.00.380.453 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.474 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.395.191 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.205 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.304 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.545 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.552 I llama_new_context_with_model: graph nodes  = 601
0.00.396.553 I llama_new_context_with_model: graph splits = 1
0.00.396.555 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.317 I main: llama threadpool init, n_threads = 4
0.00.478.333 I 
0.00.478.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.408 I 
0.00.478.448 I sampler seed: 1826875314
0.00.478.459 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.471 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.474 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.475 I 
 increasities in a bid to influence the outcome of an election. [end of text]


0.01.450.021 I llama_perf_sampler_print:    sampling time =       2.16 ms /    15 runs   (    0.14 ms per token,  6957.33 tokens per second)
0.01.450.024 I llama_perf_context_print:        load time =     477.45 ms
0.01.450.025 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.450.027 I llama_perf_context_print:        eval time =     962.84 ms /    14 runs   (   68.77 ms per token,    14.54 tokens per second)
0.01.450.028 I llama_perf_context_print:       total time =     971.71 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.575 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.160 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.171 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.190 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.579 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.207 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.167 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.176 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.176 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.178 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.179 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.179 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.182 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.183 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.183 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.184 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.185 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.188 I llama_model_loader: - type  f32:   37 tensors
0.00.132.190 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.774 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.972 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.677 I llm_load_vocab: special tokens cache size = 5
0.00.295.815 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.835 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.836 I llm_load_print_meta: arch             = gemma
0.00.295.836 I llm_load_print_meta: vocab type       = SPM
0.00.295.838 I llm_load_print_meta: n_vocab          = 256000
0.00.295.838 I llm_load_print_meta: n_merges         = 0
0.00.295.839 I llm_load_print_meta: vocab_only       = 0
0.00.295.839 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.839 I llm_load_print_meta: n_embd           = 2048
0.00.295.840 I llm_load_print_meta: n_layer          = 18
0.00.295.852 I llm_load_print_meta: n_head           = 8
0.00.295.853 I llm_load_print_meta: n_head_kv        = 1
0.00.295.854 I llm_load_print_meta: n_rot            = 256
0.00.295.854 I llm_load_print_meta: n_swa            = 0
0.00.295.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.856 I llm_load_print_meta: n_gqa            = 8
0.00.295.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.857 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.858 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.859 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.859 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.860 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.861 I llm_load_print_meta: n_ff             = 16384
0.00.295.861 I llm_load_print_meta: n_expert         = 0
0.00.295.862 I llm_load_print_meta: n_expert_used    = 0
0.00.295.862 I llm_load_print_meta: causal attn      = 1
0.00.295.862 I llm_load_print_meta: pooling type     = 0
0.00.295.863 I llm_load_print_meta: rope type        = 2
0.00.295.863 I llm_load_print_meta: rope scaling     = linear
0.00.295.864 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.865 I llm_load_print_meta: freq_scale_train = 1
0.00.295.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.866 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.867 I llm_load_print_meta: model type       = 2B
0.00.295.867 I llm_load_print_meta: model ftype      = Q8_0
0.00.295.868 I llm_load_print_meta: model params     = 2.51 B
0.00.295.869 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.295.869 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.870 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.870 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.871 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.871 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.872 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.872 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.872 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.873 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.873 I llm_load_print_meta: max token length = 93
0.00.372.495 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.372.504 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.372.505 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.372.506 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.372.507 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.372.507 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.377.781 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.790 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.791 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.791 I llama_new_context_with_model: n_batch       = 2048
0.00.377.791 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.792 I llama_new_context_with_model: flash_attn    = 0
0.00.377.796 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.797 I llama_new_context_with_model: freq_scale    = 1
0.00.377.798 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.821 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.393.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.518 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.923 I llama_new_context_with_model: graph nodes  = 601
0.00.394.924 I llama_new_context_with_model: graph splits = 1
0.00.394.926 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.926 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.141 I main: llama threadpool init, n_threads = 4
0.00.483.155 I 
0.00.483.241 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.245 I 
0.00.483.296 I sampler seed: 3682876750
0.00.483.306 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.315 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.316 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.317 I 
 increasities, but I am unable to generate content that is sexually suggestive in nature.

I am unable to provide sexually suggestive or explicit content. My purpose is

0.02.803.865 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7096.77 tokens per second)
0.02.803.868 I llama_perf_context_print:        load time =     482.32 ms
0.02.803.870 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.803.871 I llama_perf_context_print:        eval time =    2301.81 ms /    32 runs   (   71.93 ms per token,    13.90 tokens per second)
0.02.803.872 I llama_perf_context_print:       total time =    2320.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.544 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.189 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.219 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.220 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.221 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.222 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.222 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.231 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.914 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.846 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.853 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.854 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.865 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.866 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.869 I llama_model_loader: - type  f32:   37 tensors
0.00.131.870 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.210 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.933 I llm_load_vocab: special tokens cache size = 5
0.00.275.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.049 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.050 I llm_load_print_meta: arch             = gemma
0.00.275.050 I llm_load_print_meta: vocab type       = SPM
0.00.275.051 I llm_load_print_meta: n_vocab          = 256000
0.00.275.051 I llm_load_print_meta: n_merges         = 0
0.00.275.052 I llm_load_print_meta: vocab_only       = 0
0.00.275.052 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.052 I llm_load_print_meta: n_embd           = 2048
0.00.275.053 I llm_load_print_meta: n_layer          = 18
0.00.275.066 I llm_load_print_meta: n_head           = 8
0.00.275.067 I llm_load_print_meta: n_head_kv        = 1
0.00.275.067 I llm_load_print_meta: n_rot            = 256
0.00.275.068 I llm_load_print_meta: n_swa            = 0
0.00.275.068 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.068 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.069 I llm_load_print_meta: n_gqa            = 8
0.00.275.070 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.072 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.073 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.074 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.075 I llm_load_print_meta: n_ff             = 16384
0.00.275.075 I llm_load_print_meta: n_expert         = 0
0.00.275.076 I llm_load_print_meta: n_expert_used    = 0
0.00.275.076 I llm_load_print_meta: causal attn      = 1
0.00.275.076 I llm_load_print_meta: pooling type     = 0
0.00.275.077 I llm_load_print_meta: rope type        = 2
0.00.275.077 I llm_load_print_meta: rope scaling     = linear
0.00.275.079 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.079 I llm_load_print_meta: freq_scale_train = 1
0.00.275.080 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.081 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.081 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.081 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.081 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.081 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.082 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.082 I llm_load_print_meta: model type       = 2B
0.00.275.083 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.083 I llm_load_print_meta: model params     = 2.51 B
0.00.275.084 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.085 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.085 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.085 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.086 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.087 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.087 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.088 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.088 I llm_load_print_meta: max token length = 93
0.00.346.801 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.807 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.963 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.968 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.969 I llama_new_context_with_model: n_batch       = 2048
0.00.351.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.970 I llama_new_context_with_model: flash_attn    = 0
0.00.351.972 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.973 I llama_new_context_with_model: freq_scale    = 1
0.00.351.974 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.995 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.366.223 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.237 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.540 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.547 I llama_new_context_with_model: graph nodes  = 601
0.00.367.547 I llama_new_context_with_model: graph splits = 1
0.00.367.550 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.365 I main: llama threadpool init, n_threads = 4
0.00.455.381 I 
0.00.455.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.469 I 
0.00.455.523 I sampler seed: 183911311
0.00.455.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.546 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.550 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.550 I 
 increadibly.

I am unable to determine the cause of this error because the provided context does not contain any information regarding the specific error message or the programming language

0.02.911.031 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6571.09 tokens per second)
0.02.911.034 I llama_perf_context_print:        load time =     454.59 ms
0.02.911.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.911.038 I llama_perf_context_print:        eval time =    2435.87 ms /    32 runs   (   76.12 ms per token,    13.14 tokens per second)
0.02.911.038 I llama_perf_context_print:       total time =    2455.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.083s
user	0m28.859s
sys	0m9.498s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4368 (a6552697)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40291.64 ms
main:    total time = 40291.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.021.033 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.042 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.051 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.074 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.075 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.075 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.081 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.081 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.082 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.083 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.677 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.622 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.629 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.630 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.631 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.632 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.633 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.635 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.640 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.641 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.642 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.647 I llama_model_loader: - type  f32:   37 tensors
0.00.131.648 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.649 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.676 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.872 I llm_load_vocab: special tokens cache size = 5
0.00.287.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.179 I llm_load_print_meta: arch             = gemma
0.00.287.179 I llm_load_print_meta: vocab type       = SPM
0.00.287.180 I llm_load_print_meta: n_vocab          = 256000
0.00.287.180 I llm_load_print_meta: n_merges         = 0
0.00.287.181 I llm_load_print_meta: vocab_only       = 0
0.00.287.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.182 I llm_load_print_meta: n_embd           = 2048
0.00.287.182 I llm_load_print_meta: n_layer          = 18
0.00.287.194 I llm_load_print_meta: n_head           = 8
0.00.287.195 I llm_load_print_meta: n_head_kv        = 1
0.00.287.195 I llm_load_print_meta: n_rot            = 256
0.00.287.196 I llm_load_print_meta: n_swa            = 0
0.00.287.196 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.196 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.198 I llm_load_print_meta: n_gqa            = 8
0.00.287.199 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.200 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.203 I llm_load_print_meta: n_ff             = 16384
0.00.287.204 I llm_load_print_meta: n_expert         = 0
0.00.287.204 I llm_load_print_meta: n_expert_used    = 0
0.00.287.204 I llm_load_print_meta: causal attn      = 1
0.00.287.205 I llm_load_print_meta: pooling type     = 0
0.00.287.205 I llm_load_print_meta: rope type        = 2
0.00.287.205 I llm_load_print_meta: rope scaling     = linear
0.00.287.207 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.207 I llm_load_print_meta: freq_scale_train = 1
0.00.287.207 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.208 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.208 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.208 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.208 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.209 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.209 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.209 I llm_load_print_meta: model type       = 2B
0.00.287.210 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.287.211 I llm_load_print_meta: model params     = 2.51 B
0.00.287.212 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.287.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.213 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.213 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.215 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.216 I llm_load_print_meta: max token length = 93
0.00.347.550 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.347.557 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.347.558 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.347.559 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.347.560 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.347.561 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.352.839 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.844 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.845 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.845 I llama_new_context_with_model: n_batch       = 2048
0.00.352.845 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.846 I llama_new_context_with_model: flash_attn    = 0
0.00.352.849 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.850 I llama_new_context_with_model: freq_scale    = 1
0.00.352.851 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.875 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.367.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.498 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.850 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.854 I llama_new_context_with_model: graph nodes  = 601
0.00.368.854 I llama_new_context_with_model: graph splits = 1
0.00.368.856 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.983 I main: llama threadpool init, n_threads = 4
0.00.445.000 I 
0.00.445.090 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.093 I 
0.00.445.141 I sampler seed: 3856116133
0.00.445.154 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.157 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.160 I 
 maneuvously.

I'm so hungry, I just can't stop eating.

I think I might be hungry.

I'm going

0.02.136.820 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6427.74 tokens per second)
0.02.136.822 I llama_perf_context_print:        load time =     444.15 ms
0.02.136.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.136.825 I llama_perf_context_print:        eval time =    1671.70 ms /    32 runs   (   52.24 ms per token,    19.14 tokens per second)
0.02.136.825 I llama_perf_context_print:       total time =    1691.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4368 (a6552697)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40255.54 ms
main:    total time = 40255.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.565 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.020.947 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.961 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.971 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.978 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.978 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.979 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.980 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.980 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.981 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.985 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.985 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.986 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.986 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.987 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.554 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.551 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.557 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.558 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.558 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.559 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.561 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.563 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.564 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.568 I llama_model_loader: - type  f32:   37 tensors
0.00.131.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.570 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.772 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.291 I llm_load_vocab: special tokens cache size = 5
0.00.273.397 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.413 I llm_load_print_meta: arch             = gemma
0.00.273.414 I llm_load_print_meta: vocab type       = SPM
0.00.273.414 I llm_load_print_meta: n_vocab          = 256000
0.00.273.415 I llm_load_print_meta: n_merges         = 0
0.00.273.415 I llm_load_print_meta: vocab_only       = 0
0.00.273.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.416 I llm_load_print_meta: n_embd           = 2048
0.00.273.418 I llm_load_print_meta: n_layer          = 18
0.00.273.429 I llm_load_print_meta: n_head           = 8
0.00.273.430 I llm_load_print_meta: n_head_kv        = 1
0.00.273.430 I llm_load_print_meta: n_rot            = 256
0.00.273.430 I llm_load_print_meta: n_swa            = 0
0.00.273.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.431 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.432 I llm_load_print_meta: n_gqa            = 8
0.00.273.433 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.435 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.436 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.437 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.437 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.439 I llm_load_print_meta: n_ff             = 16384
0.00.273.439 I llm_load_print_meta: n_expert         = 0
0.00.273.440 I llm_load_print_meta: n_expert_used    = 0
0.00.273.440 I llm_load_print_meta: causal attn      = 1
0.00.273.441 I llm_load_print_meta: pooling type     = 0
0.00.273.441 I llm_load_print_meta: rope type        = 2
0.00.273.441 I llm_load_print_meta: rope scaling     = linear
0.00.273.443 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.444 I llm_load_print_meta: freq_scale_train = 1
0.00.273.444 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.445 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.445 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.446 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.446 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.448 I llm_load_print_meta: model type       = 2B
0.00.273.449 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.450 I llm_load_print_meta: model params     = 2.51 B
0.00.273.450 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.451 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.451 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.452 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.452 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.453 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.453 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.453 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.454 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.454 I llm_load_print_meta: max token length = 93
0.00.330.833 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.805 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.811 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.812 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.812 I llama_new_context_with_model: n_batch       = 2048
0.00.335.813 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.813 I llama_new_context_with_model: flash_attn    = 0
0.00.335.815 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.816 I llama_new_context_with_model: freq_scale    = 1
0.00.335.817 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.839 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.350.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.227 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.334 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.567 I llama_new_context_with_model: graph nodes  = 601
0.00.351.568 I llama_new_context_with_model: graph splits = 1
0.00.351.570 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.570 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.464 I main: llama threadpool init, n_threads = 4
0.00.426.480 I 
0.00.426.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.562 I 
0.00.426.605 I sampler seed: 1154557121
0.00.426.616 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.618 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.619 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.620 I 
 seconally, while the other continues.

The race is on,
With hearts pounding,
Through crowded streets,
A vibrant tapestry of dreams.



0.02.073.290 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6623.85 tokens per second)
0.02.073.292 I llama_perf_context_print:        load time =     425.68 ms
0.02.073.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.073.294 I llama_perf_context_print:        eval time =    1627.80 ms /    32 runs   (   50.87 ms per token,    19.66 tokens per second)
0.02.073.295 I llama_perf_context_print:       total time =    1646.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.673s
user	10m25.495s
sys	0m7.009s
