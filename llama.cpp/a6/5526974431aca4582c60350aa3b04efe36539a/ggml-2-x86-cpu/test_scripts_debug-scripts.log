+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.748 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.976 I main: llama backend init
0.00.000.986 I main: load the model and apply lora adapter, if any
0.00.023.911 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.924 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.022 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.036 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.038 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.046 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.054 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.057 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.058 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.060 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.067 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.069 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.070 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.071 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.072 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.752 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.039 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.262 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.273 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.283 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.284 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.285 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.355.287 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.298 I llama_model_loader: - type  f32:   37 tensors
0.00.355.299 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.484 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.600 I llm_load_vocab: special tokens cache size = 5
0.00.872.024 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.102 I llm_load_print_meta: arch             = gemma
0.00.872.102 I llm_load_print_meta: vocab type       = SPM
0.00.872.103 I llm_load_print_meta: n_vocab          = 256000
0.00.872.106 I llm_load_print_meta: n_merges         = 0
0.00.872.106 I llm_load_print_meta: vocab_only       = 0
0.00.872.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.107 I llm_load_print_meta: n_embd           = 2048
0.00.872.107 I llm_load_print_meta: n_layer          = 18
0.00.872.173 I llm_load_print_meta: n_head           = 8
0.00.872.180 I llm_load_print_meta: n_head_kv        = 1
0.00.872.181 I llm_load_print_meta: n_rot            = 256
0.00.872.181 I llm_load_print_meta: n_swa            = 0
0.00.872.182 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.182 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.186 I llm_load_print_meta: n_gqa            = 8
0.00.872.205 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.212 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.214 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.215 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.216 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.221 I llm_load_print_meta: n_ff             = 16384
0.00.872.221 I llm_load_print_meta: n_expert         = 0
0.00.872.221 I llm_load_print_meta: n_expert_used    = 0
0.00.872.222 I llm_load_print_meta: causal attn      = 1
0.00.872.223 I llm_load_print_meta: pooling type     = 0
0.00.872.223 I llm_load_print_meta: rope type        = 2
0.00.872.224 I llm_load_print_meta: rope scaling     = linear
0.00.872.226 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.226 I llm_load_print_meta: freq_scale_train = 1
0.00.872.227 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.227 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.234 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.234 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.234 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.235 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.235 I llm_load_print_meta: model type       = 2B
0.00.872.237 I llm_load_print_meta: model ftype      = Q8_0
0.00.872.237 I llm_load_print_meta: model params     = 2.51 B
0.00.872.238 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.872.238 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.239 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.239 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.240 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.240 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.241 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.241 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.247 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.249 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.249 I llm_load_print_meta: max token length = 93
0.00.973.029 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.973.041 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.973.042 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.973.043 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.973.043 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.973.044 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.979.046 I llama_new_context_with_model: n_seq_max     = 1
0.00.979.055 I llama_new_context_with_model: n_ctx         = 4096
0.00.979.055 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.979.056 I llama_new_context_with_model: n_batch       = 2048
0.00.979.056 I llama_new_context_with_model: n_ubatch      = 512
0.00.979.057 I llama_new_context_with_model: flash_attn    = 0
0.00.979.061 I llama_new_context_with_model: freq_base     = 10000.0
0.00.979.062 I llama_new_context_with_model: freq_scale    = 1
0.00.979.063 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.979.160 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.994.943 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.994.987 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.995.107 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.997.771 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.997.775 I llama_new_context_with_model: graph nodes  = 601
0.00.997.775 I llama_new_context_with_model: graph splits = 1
0.00.997.803 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.997.806 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.611.333 I main: llama threadpool init, n_threads = 4
0.01.611.350 I 
0.01.611.477 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.611.481 I 
0.01.611.720 I sampler seed: 2580396452
0.01.611.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.611.745 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.611.746 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.611.747 I 
 increasities. [end of text]


0.03.302.471 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.66 tokens per second)
0.03.302.488 I llama_perf_context_print:        load time =    1610.22 ms
0.03.302.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.302.492 I llama_perf_context_print:        eval time =    1677.97 ms /     4 runs   (  419.49 ms per token,     2.38 tokens per second)
0.03.302.492 I llama_perf_context_print:       total time =    1691.15 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.023.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.976 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.005 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.006 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.008 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.009 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.010 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.022 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.468 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.470 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.471 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.472 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.474 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.475 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.479 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.482 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.483 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.360.485 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.495 I llama_model_loader: - type  f32:   37 tensors
0.00.360.496 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.615 I llm_load_vocab: special tokens cache size = 5
0.00.864.675 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.864.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.864.751 I llm_load_print_meta: arch             = gemma
0.00.864.752 I llm_load_print_meta: vocab type       = SPM
0.00.864.753 I llm_load_print_meta: n_vocab          = 256000
0.00.864.756 I llm_load_print_meta: n_merges         = 0
0.00.864.756 I llm_load_print_meta: vocab_only       = 0
0.00.864.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.864.757 I llm_load_print_meta: n_embd           = 2048
0.00.864.757 I llm_load_print_meta: n_layer          = 18
0.00.864.825 I llm_load_print_meta: n_head           = 8
0.00.864.834 I llm_load_print_meta: n_head_kv        = 1
0.00.864.835 I llm_load_print_meta: n_rot            = 256
0.00.864.836 I llm_load_print_meta: n_swa            = 0
0.00.864.837 I llm_load_print_meta: n_embd_head_k    = 256
0.00.864.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.864.841 I llm_load_print_meta: n_gqa            = 8
0.00.864.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.864.851 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.864.853 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.864.855 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.864.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.864.856 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.864.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.864.861 I llm_load_print_meta: n_ff             = 16384
0.00.864.862 I llm_load_print_meta: n_expert         = 0
0.00.864.862 I llm_load_print_meta: n_expert_used    = 0
0.00.864.863 I llm_load_print_meta: causal attn      = 1
0.00.864.864 I llm_load_print_meta: pooling type     = 0
0.00.864.865 I llm_load_print_meta: rope type        = 2
0.00.864.865 I llm_load_print_meta: rope scaling     = linear
0.00.864.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.864.868 I llm_load_print_meta: freq_scale_train = 1
0.00.864.868 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.864.869 I llm_load_print_meta: rope_finetuned   = unknown
0.00.864.869 I llm_load_print_meta: ssm_d_conv       = 0
0.00.864.870 I llm_load_print_meta: ssm_d_inner      = 0
0.00.864.870 I llm_load_print_meta: ssm_d_state      = 0
0.00.864.870 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.864.871 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.864.872 I llm_load_print_meta: model type       = 2B
0.00.864.873 I llm_load_print_meta: model ftype      = Q8_0
0.00.864.873 I llm_load_print_meta: model params     = 2.51 B
0.00.864.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.864.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.864.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.864.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.864.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.864.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.864.880 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.864.880 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.864.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.864.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.864.889 I llm_load_print_meta: max token length = 93
0.00.961.098 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.967.812 I llama_new_context_with_model: n_seq_max     = 1
0.00.967.820 I llama_new_context_with_model: n_ctx         = 4096
0.00.967.821 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.967.821 I llama_new_context_with_model: n_batch       = 2048
0.00.967.822 I llama_new_context_with_model: n_ubatch      = 512
0.00.967.822 I llama_new_context_with_model: flash_attn    = 0
0.00.967.826 I llama_new_context_with_model: freq_base     = 10000.0
0.00.967.826 I llama_new_context_with_model: freq_scale    = 1
0.00.967.828 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.924 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.984.358 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.984.406 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.984.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.987.265 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.987.270 I llama_new_context_with_model: graph nodes  = 601
0.00.987.271 I llama_new_context_with_model: graph splits = 1
0.00.987.295 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.987.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.597.621 I main: llama threadpool init, n_threads = 4
0.01.597.639 I 
0.01.597.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.597.770 I 
0.01.598.042 I sampler seed: 1027496537
0.01.598.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.598.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.598.069 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.598.069 I 
 increably, a shimmering mirage of ethereal beauty.

**What is the meaning of this passage?**

The passage is describing a beautiful and ethereal sight.

0.15.096.915 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.33 tokens per second)
0.15.096.918 I llama_perf_context_print:        load time =    1596.62 ms
0.15.096.932 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.096.934 I llama_perf_context_print:        eval time =   13409.68 ms /    32 runs   (  419.05 ms per token,     2.39 tokens per second)
0.15.096.935 I llama_perf_context_print:       total time =   13499.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.210 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.224 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.335 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.345 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.356 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.362 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.364 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.372 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.374 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.903 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.771 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.783 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.784 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.786 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.787 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.788 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.790 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.794 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.795 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.796 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.797 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.356.799 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.810 I llama_model_loader: - type  f32:   37 tensors
0.00.356.812 I llama_model_loader: - type q8_0:  127 tensors
0.00.619.074 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.689.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.690.323 I llm_load_vocab: special tokens cache size = 5
0.00.882.191 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.882.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.882.268 I llm_load_print_meta: arch             = gemma
0.00.882.270 I llm_load_print_meta: vocab type       = SPM
0.00.882.270 I llm_load_print_meta: n_vocab          = 256000
0.00.882.273 I llm_load_print_meta: n_merges         = 0
0.00.882.273 I llm_load_print_meta: vocab_only       = 0
0.00.882.274 I llm_load_print_meta: n_ctx_train      = 8192
0.00.882.274 I llm_load_print_meta: n_embd           = 2048
0.00.882.275 I llm_load_print_meta: n_layer          = 18
0.00.882.339 I llm_load_print_meta: n_head           = 8
0.00.882.347 I llm_load_print_meta: n_head_kv        = 1
0.00.882.347 I llm_load_print_meta: n_rot            = 256
0.00.882.348 I llm_load_print_meta: n_swa            = 0
0.00.882.348 I llm_load_print_meta: n_embd_head_k    = 256
0.00.882.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.882.353 I llm_load_print_meta: n_gqa            = 8
0.00.882.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.882.364 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.882.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.882.366 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.882.366 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.882.368 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.882.368 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.882.373 I llm_load_print_meta: n_ff             = 16384
0.00.882.374 I llm_load_print_meta: n_expert         = 0
0.00.882.375 I llm_load_print_meta: n_expert_used    = 0
0.00.882.376 I llm_load_print_meta: causal attn      = 1
0.00.882.376 I llm_load_print_meta: pooling type     = 0
0.00.882.376 I llm_load_print_meta: rope type        = 2
0.00.882.377 I llm_load_print_meta: rope scaling     = linear
0.00.882.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.882.380 I llm_load_print_meta: freq_scale_train = 1
0.00.882.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.882.381 I llm_load_print_meta: rope_finetuned   = unknown
0.00.882.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.882.397 I llm_load_print_meta: ssm_d_inner      = 0
0.00.882.397 I llm_load_print_meta: ssm_d_state      = 0
0.00.882.398 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.882.398 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.882.399 I llm_load_print_meta: model type       = 2B
0.00.882.400 I llm_load_print_meta: model ftype      = Q8_0
0.00.882.401 I llm_load_print_meta: model params     = 2.51 B
0.00.882.417 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.882.418 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.882.419 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.882.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.882.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.882.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.882.424 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.882.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.882.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.882.437 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.882.438 I llm_load_print_meta: max token length = 93
0.00.961.684 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.961.693 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.961.694 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.961.695 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.961.695 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.961.696 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.967.542 I llama_new_context_with_model: n_seq_max     = 1
0.00.967.552 I llama_new_context_with_model: n_ctx         = 4096
0.00.967.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.967.553 I llama_new_context_with_model: n_batch       = 2048
0.00.967.553 I llama_new_context_with_model: n_ubatch      = 512
0.00.967.554 I llama_new_context_with_model: flash_attn    = 0
0.00.967.558 I llama_new_context_with_model: freq_base     = 10000.0
0.00.967.559 I llama_new_context_with_model: freq_scale    = 1
0.00.967.568 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.662 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.982.550 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.982.592 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.982.713 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.985.396 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.985.401 I llama_new_context_with_model: graph nodes  = 601
0.00.985.401 I llama_new_context_with_model: graph splits = 1
0.00.985.426 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.985.428 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.627.496 I main: llama threadpool init, n_threads = 4
0.01.627.514 I 
0.01.627.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.627.643 I 
0.01.627.880 I sampler seed: 2223750897
0.01.627.894 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.627.906 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.627.907 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.627.907 I 
 increamically. [end of text]


0.03.344.258 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   785.30 tokens per second)
0.03.344.262 I llama_perf_context_print:        load time =    1626.50 ms
0.03.344.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.344.277 I llama_perf_context_print:        eval time =    1703.61 ms /     4 runs   (  425.90 ms per token,     2.35 tokens per second)
0.03.344.278 I llama_perf_context_print:       total time =    1716.77 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.023.912 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.923 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.034 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.039 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.050 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.052 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.067 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.069 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.070 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.439 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.455 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.456 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.458 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.459 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.467 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.469 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.480 I llama_model_loader: - type  f32:   37 tensors
0.00.354.482 I llama_model_loader: - type q8_0:  127 tensors
0.00.603.714 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.485 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.500 I llm_load_vocab: special tokens cache size = 5
0.00.865.654 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.731 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.732 I llm_load_print_meta: arch             = gemma
0.00.865.732 I llm_load_print_meta: vocab type       = SPM
0.00.865.733 I llm_load_print_meta: n_vocab          = 256000
0.00.865.735 I llm_load_print_meta: n_merges         = 0
0.00.865.736 I llm_load_print_meta: vocab_only       = 0
0.00.865.736 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.737 I llm_load_print_meta: n_embd           = 2048
0.00.865.737 I llm_load_print_meta: n_layer          = 18
0.00.865.805 I llm_load_print_meta: n_head           = 8
0.00.865.812 I llm_load_print_meta: n_head_kv        = 1
0.00.865.813 I llm_load_print_meta: n_rot            = 256
0.00.865.813 I llm_load_print_meta: n_swa            = 0
0.00.865.814 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.814 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.819 I llm_load_print_meta: n_gqa            = 8
0.00.865.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.829 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.830 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.832 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.832 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.833 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.838 I llm_load_print_meta: n_ff             = 16384
0.00.865.838 I llm_load_print_meta: n_expert         = 0
0.00.865.839 I llm_load_print_meta: n_expert_used    = 0
0.00.865.840 I llm_load_print_meta: causal attn      = 1
0.00.865.841 I llm_load_print_meta: pooling type     = 0
0.00.865.841 I llm_load_print_meta: rope type        = 2
0.00.865.841 I llm_load_print_meta: rope scaling     = linear
0.00.865.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.844 I llm_load_print_meta: freq_scale_train = 1
0.00.865.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.845 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.848 I llm_load_print_meta: model type       = 2B
0.00.865.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.865.850 I llm_load_print_meta: model params     = 2.51 B
0.00.865.851 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.865.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.852 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.852 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.858 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.866 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.866 I llm_load_print_meta: max token length = 93
0.00.939.076 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.939.088 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.945.371 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.380 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.380 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.381 I llama_new_context_with_model: n_batch       = 2048
0.00.945.381 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.382 I llama_new_context_with_model: flash_attn    = 0
0.00.945.385 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.386 I llama_new_context_with_model: freq_scale    = 1
0.00.945.386 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.486 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.961.926 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.961.968 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.964.748 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.964.752 I llama_new_context_with_model: graph nodes  = 601
0.00.964.753 I llama_new_context_with_model: graph splits = 1
0.00.964.778 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.964.781 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.866 I main: llama threadpool init, n_threads = 4
0.01.575.883 I 
0.01.576.006 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.010 I 
0.01.576.248 I sampler seed: 2490573581
0.01.576.262 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.272 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.275 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.275 I 
 increasities and offer alternative solutions to sexual harassment. [end of text]


0.06.240.036 I llama_perf_sampler_print:    sampling time =      17.23 ms /    12 runs   (    1.44 ms per token,   696.26 tokens per second)
0.06.240.039 I llama_perf_context_print:        load time =    1574.85 ms
0.06.240.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.240.042 I llama_perf_context_print:        eval time =    4632.07 ms /    11 runs   (  421.10 ms per token,     2.37 tokens per second)
0.06.240.056 I llama_perf_context_print:       total time =    4664.18 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m37.882s
user	1m40.230s
sys	0m9.592s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4368 (a6552697)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185678.06 ms
main:    total time = 185678.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.000.890 I main: load the model and apply lora adapter, if any
0.00.023.457 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.468 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.574 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.588 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.590 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.599 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.603 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.605 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.606 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.608 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.609 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.300 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.705 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.707 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.711 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.715 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.716 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.718 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.719 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.721 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.731 I llama_model_loader: - type  f32:   37 tensors
0.00.354.733 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.734 I llama_model_loader: - type q6_K:   19 tensors
0.00.593.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.109 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.094 I llm_load_vocab: special tokens cache size = 5
0.00.855.655 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.733 I llm_load_print_meta: arch             = gemma
0.00.855.734 I llm_load_print_meta: vocab type       = SPM
0.00.855.734 I llm_load_print_meta: n_vocab          = 256000
0.00.855.737 I llm_load_print_meta: n_merges         = 0
0.00.855.738 I llm_load_print_meta: vocab_only       = 0
0.00.855.738 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.739 I llm_load_print_meta: n_embd           = 2048
0.00.855.739 I llm_load_print_meta: n_layer          = 18
0.00.855.804 I llm_load_print_meta: n_head           = 8
0.00.855.811 I llm_load_print_meta: n_head_kv        = 1
0.00.855.812 I llm_load_print_meta: n_rot            = 256
0.00.855.812 I llm_load_print_meta: n_swa            = 0
0.00.855.813 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.813 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.818 I llm_load_print_meta: n_gqa            = 8
0.00.855.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.829 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.830 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.833 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.834 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.839 I llm_load_print_meta: n_ff             = 16384
0.00.855.840 I llm_load_print_meta: n_expert         = 0
0.00.855.840 I llm_load_print_meta: n_expert_used    = 0
0.00.855.841 I llm_load_print_meta: causal attn      = 1
0.00.855.841 I llm_load_print_meta: pooling type     = 0
0.00.855.847 I llm_load_print_meta: rope type        = 2
0.00.855.847 I llm_load_print_meta: rope scaling     = linear
0.00.855.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.850 I llm_load_print_meta: freq_scale_train = 1
0.00.855.850 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.851 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.864 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.865 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.866 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.867 I llm_load_print_meta: model type       = 2B
0.00.855.868 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.855.869 I llm_load_print_meta: model params     = 2.51 B
0.00.855.870 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.855.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.873 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.874 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.880 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.882 I llm_load_print_meta: max token length = 93
0.00.918.703 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.918.716 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.918.716 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.918.717 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.918.718 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.918.718 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.924.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.738 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.738 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.739 I llama_new_context_with_model: n_batch       = 2048
0.00.924.739 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.740 I llama_new_context_with_model: flash_attn    = 0
0.00.924.743 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.744 I llama_new_context_with_model: freq_scale    = 1
0.00.924.745 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.841 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.940.413 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.940.452 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.940.573 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.943.231 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.943.235 I llama_new_context_with_model: graph nodes  = 601
0.00.943.235 I llama_new_context_with_model: graph splits = 1
0.00.943.259 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.943.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.526.261 I main: llama threadpool init, n_threads = 4
0.01.526.279 I 
0.01.526.404 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.526.408 I 
0.01.526.642 I sampler seed: 3730460931
0.01.526.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.526.666 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.526.669 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.526.669 I 
 squaRED-UP

The sentence is not grammatically correct. The word "squasred" is misspelled. It should be "squashed".

Squ

0.12.615.908 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   664.99 tokens per second)
0.12.615.912 I llama_perf_context_print:        load time =    1525.28 ms
0.12.615.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.615.916 I llama_perf_context_print:        eval time =   10998.88 ms /    32 runs   (  343.71 ms per token,     2.91 tokens per second)
0.12.615.920 I llama_perf_context_print:       total time =   11089.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4368 (a6552697)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185651.19 ms
main:    total time = 185651.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4368 (a6552697) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.022.859 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.960 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.974 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.976 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.982 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.985 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.987 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.990 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.996 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.000 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.001 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.002 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.536 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.095 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.476 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.487 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.488 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.497 I llama_model_loader: - type  f32:   37 tensors
0.00.352.500 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.500 I llama_model_loader: - type q6_K:   19 tensors
0.00.581.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.920 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.814 I llm_load_vocab: special tokens cache size = 5
0.00.846.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.968 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.972 I llm_load_print_meta: arch             = gemma
0.00.846.973 I llm_load_print_meta: vocab type       = SPM
0.00.846.974 I llm_load_print_meta: n_vocab          = 256000
0.00.846.977 I llm_load_print_meta: n_merges         = 0
0.00.846.977 I llm_load_print_meta: vocab_only       = 0
0.00.846.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.978 I llm_load_print_meta: n_embd           = 2048
0.00.846.978 I llm_load_print_meta: n_layer          = 18
0.00.847.045 I llm_load_print_meta: n_head           = 8
0.00.847.055 I llm_load_print_meta: n_head_kv        = 1
0.00.847.056 I llm_load_print_meta: n_rot            = 256
0.00.847.056 I llm_load_print_meta: n_swa            = 0
0.00.847.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.058 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.063 I llm_load_print_meta: n_gqa            = 8
0.00.847.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.074 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.078 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.079 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.080 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.080 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.081 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.087 I llm_load_print_meta: n_ff             = 16384
0.00.847.087 I llm_load_print_meta: n_expert         = 0
0.00.847.088 I llm_load_print_meta: n_expert_used    = 0
0.00.847.089 I llm_load_print_meta: causal attn      = 1
0.00.847.090 I llm_load_print_meta: pooling type     = 0
0.00.847.090 I llm_load_print_meta: rope type        = 2
0.00.847.091 I llm_load_print_meta: rope scaling     = linear
0.00.847.093 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.093 I llm_load_print_meta: freq_scale_train = 1
0.00.847.094 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.094 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.095 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.096 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.096 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.097 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.098 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.098 I llm_load_print_meta: model type       = 2B
0.00.847.099 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.847.102 I llm_load_print_meta: model params     = 2.51 B
0.00.847.103 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.847.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.106 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.113 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.114 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.115 I llm_load_print_meta: max token length = 93
0.00.906.216 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.912.010 I llama_new_context_with_model: n_seq_max     = 1
0.00.912.019 I llama_new_context_with_model: n_ctx         = 4096
0.00.912.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.912.019 I llama_new_context_with_model: n_batch       = 2048
0.00.912.020 I llama_new_context_with_model: n_ubatch      = 512
0.00.912.020 I llama_new_context_with_model: flash_attn    = 0
0.00.912.024 I llama_new_context_with_model: freq_base     = 10000.0
0.00.912.024 I llama_new_context_with_model: freq_scale    = 1
0.00.912.025 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.912.116 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.927.334 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.927.378 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.927.495 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.930.136 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.930.140 I llama_new_context_with_model: graph nodes  = 601
0.00.930.140 I llama_new_context_with_model: graph splits = 1
0.00.930.164 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.930.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.512.491 I main: llama threadpool init, n_threads = 4
0.01.512.504 I 
0.01.512.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.512.629 I 
0.01.512.868 I sampler seed: 2911212182
0.01.512.882 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.512.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.512.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.512.896 I 
 increamically, oblivious to the impending danger. [end of text]


0.04.985.603 I llama_perf_sampler_print:    sampling time =      15.62 ms /    11 runs   (    1.42 ms per token,   704.05 tokens per second)
0.04.985.606 I llama_perf_context_print:        load time =    1511.51 ms
0.04.985.607 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.985.609 I llama_perf_context_print:        eval time =    3442.68 ms /    10 runs   (  344.27 ms per token,     2.90 tokens per second)
0.04.985.609 I llama_perf_context_print:       total time =    3473.12 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.922s
user	46m12.944s
sys	0m6.319s
