+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.362 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.429 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.435 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.436 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.439 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.440 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.441 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.442 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.448 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.270 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.797 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.799 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.801 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.802 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.807 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.808 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.813 I llama_model_loader: - type  f32:   37 tensors
0.00.133.816 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.122 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.960 I llm_load_vocab: special tokens cache size = 5
0.00.225.780 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.793 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.794 I llm_load_print_meta: arch             = gemma
0.00.225.794 I llm_load_print_meta: vocab type       = SPM
0.00.225.795 I llm_load_print_meta: n_vocab          = 256000
0.00.225.795 I llm_load_print_meta: n_merges         = 0
0.00.225.796 I llm_load_print_meta: vocab_only       = 0
0.00.225.796 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.796 I llm_load_print_meta: n_embd           = 2048
0.00.225.797 I llm_load_print_meta: n_layer          = 18
0.00.225.810 I llm_load_print_meta: n_head           = 8
0.00.225.810 I llm_load_print_meta: n_head_kv        = 1
0.00.225.811 I llm_load_print_meta: n_rot            = 256
0.00.225.811 I llm_load_print_meta: n_swa            = 0
0.00.225.811 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.812 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.813 I llm_load_print_meta: n_gqa            = 8
0.00.225.814 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.815 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.817 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.817 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.818 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.819 I llm_load_print_meta: n_ff             = 16384
0.00.225.819 I llm_load_print_meta: n_expert         = 0
0.00.225.819 I llm_load_print_meta: n_expert_used    = 0
0.00.225.820 I llm_load_print_meta: causal attn      = 1
0.00.225.820 I llm_load_print_meta: pooling type     = 0
0.00.225.820 I llm_load_print_meta: rope type        = 2
0.00.225.821 I llm_load_print_meta: rope scaling     = linear
0.00.225.822 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.823 I llm_load_print_meta: freq_scale_train = 1
0.00.225.823 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.824 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.824 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.824 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.825 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.825 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.825 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.826 I llm_load_print_meta: model type       = 2B
0.00.225.826 I llm_load_print_meta: model ftype      = Q8_0
0.00.225.827 I llm_load_print_meta: model params     = 2.51 B
0.00.225.828 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.225.828 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.829 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.830 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.830 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.831 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.831 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.831 I llm_load_print_meta: max token length = 93
0.00.225.859 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.804 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.324.813 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.324.813 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.324.814 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.324.814 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.324.815 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.330.025 I llama_new_context_with_model: n_ctx      = 8192
0.00.330.031 I llama_new_context_with_model: n_batch    = 2048
0.00.330.032 I llama_new_context_with_model: n_ubatch   = 512
0.00.330.032 I llama_new_context_with_model: flash_attn = 0
0.00.330.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.330.036 I llama_new_context_with_model: freq_scale = 1
0.00.360.068 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.360.084 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.360.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.017 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.361.025 I llama_new_context_with_model: graph nodes  = 601
0.00.361.025 I llama_new_context_with_model: graph splits = 1
0.00.361.027 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.434 I main: llama threadpool init, n_threads = 4
0.00.453.447 I 
0.00.453.525 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.529 I 
0.00.453.558 I sampler seed: 3315449307
0.00.453.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.570 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.453.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively through the forest, sunlight dappling his verdant cloak. A melody of rustling leaves and chirping birds filled the air, a soothing serenade to

0.02.693.682 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6577.64 tokens per second)
0.02.693.684 I llama_perf_context_print:        load time =     451.55 ms
0.02.693.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.693.687 I llama_perf_context_print:        eval time =    2220.87 ms /    32 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.693.688 I llama_perf_context_print:       total time =    2240.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.527 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.809 I main: load the model and apply lora adapter, if any
0.00.021.839 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.850 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.857 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.857 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.860 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.863 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.863 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.867 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.868 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.869 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.782 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.619 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.627 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.628 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.631 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.632 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.632 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.639 I llama_model_loader: - type  f32:   37 tensors
0.00.131.642 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.888 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.615 I llm_load_vocab: special tokens cache size = 5
0.00.218.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.165 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.165 I llm_load_print_meta: arch             = gemma
0.00.218.166 I llm_load_print_meta: vocab type       = SPM
0.00.218.166 I llm_load_print_meta: n_vocab          = 256000
0.00.218.167 I llm_load_print_meta: n_merges         = 0
0.00.218.167 I llm_load_print_meta: vocab_only       = 0
0.00.218.168 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.168 I llm_load_print_meta: n_embd           = 2048
0.00.218.168 I llm_load_print_meta: n_layer          = 18
0.00.218.180 I llm_load_print_meta: n_head           = 8
0.00.218.181 I llm_load_print_meta: n_head_kv        = 1
0.00.218.182 I llm_load_print_meta: n_rot            = 256
0.00.218.182 I llm_load_print_meta: n_swa            = 0
0.00.218.182 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.184 I llm_load_print_meta: n_gqa            = 8
0.00.218.185 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.186 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.187 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.188 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.188 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.189 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.189 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.190 I llm_load_print_meta: n_ff             = 16384
0.00.218.190 I llm_load_print_meta: n_expert         = 0
0.00.218.191 I llm_load_print_meta: n_expert_used    = 0
0.00.218.191 I llm_load_print_meta: causal attn      = 1
0.00.218.192 I llm_load_print_meta: pooling type     = 0
0.00.218.192 I llm_load_print_meta: rope type        = 2
0.00.218.192 I llm_load_print_meta: rope scaling     = linear
0.00.218.194 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.194 I llm_load_print_meta: freq_scale_train = 1
0.00.218.194 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.195 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.195 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.195 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.196 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.196 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.196 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.197 I llm_load_print_meta: model type       = 2B
0.00.218.197 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.198 I llm_load_print_meta: model params     = 2.51 B
0.00.218.199 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.200 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.201 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.202 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.202 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.202 I llm_load_print_meta: max token length = 93
0.00.218.227 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.450 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.316.542 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.547 I llama_new_context_with_model: n_batch    = 2048
0.00.316.548 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.548 I llama_new_context_with_model: flash_attn = 0
0.00.316.552 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.553 I llama_new_context_with_model: freq_scale = 1
0.00.346.282 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.298 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.390 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.231 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.239 I llama_new_context_with_model: graph nodes  = 601
0.00.347.239 I llama_new_context_with_model: graph splits = 1
0.00.347.240 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.229 I main: llama threadpool init, n_threads = 4
0.00.435.240 I 
0.00.435.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.435.320 I 
0.00.435.349 I sampler seed: 2328729528
0.00.435.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.360 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.435.361 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to generate the requested response due to limitations in my programming capabilities. [end of text]


0.01.870.354 I llama_perf_sampler_print:    sampling time =       3.12 ms /    22 runs   (    0.14 ms per token,  7055.81 tokens per second)
0.01.870.356 I llama_perf_context_print:        load time =     433.40 ms
0.01.870.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.870.358 I llama_perf_context_print:        eval time =    1423.05 ms /    21 runs   (   67.76 ms per token,    14.76 tokens per second)
0.01.870.359 I llama_perf_context_print:       total time =    1435.13 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.641 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.877 I main: llama backend init
0.00.002.622 I main: load the model and apply lora adapter, if any
0.00.026.368 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.414 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.422 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.429 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.434 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.441 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.442 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.442 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.443 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.443 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.516 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.267 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.278 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.136.279 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.283 I llama_model_loader: - type  f32:   37 tensors
0.00.136.286 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.715 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.672 I llm_load_vocab: special tokens cache size = 5
0.00.226.383 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.399 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.400 I llm_load_print_meta: arch             = gemma
0.00.226.400 I llm_load_print_meta: vocab type       = SPM
0.00.226.401 I llm_load_print_meta: n_vocab          = 256000
0.00.226.402 I llm_load_print_meta: n_merges         = 0
0.00.226.403 I llm_load_print_meta: vocab_only       = 0
0.00.226.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.403 I llm_load_print_meta: n_embd           = 2048
0.00.226.404 I llm_load_print_meta: n_layer          = 18
0.00.226.416 I llm_load_print_meta: n_head           = 8
0.00.226.417 I llm_load_print_meta: n_head_kv        = 1
0.00.226.418 I llm_load_print_meta: n_rot            = 256
0.00.226.418 I llm_load_print_meta: n_swa            = 0
0.00.226.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.226.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.226.420 I llm_load_print_meta: n_gqa            = 8
0.00.226.421 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.226.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.226.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.226.423 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.226.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.226.424 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.226.424 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.226.425 I llm_load_print_meta: n_ff             = 16384
0.00.226.425 I llm_load_print_meta: n_expert         = 0
0.00.226.426 I llm_load_print_meta: n_expert_used    = 0
0.00.226.426 I llm_load_print_meta: causal attn      = 1
0.00.226.427 I llm_load_print_meta: pooling type     = 0
0.00.226.427 I llm_load_print_meta: rope type        = 2
0.00.226.428 I llm_load_print_meta: rope scaling     = linear
0.00.226.429 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.226.429 I llm_load_print_meta: freq_scale_train = 1
0.00.226.430 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.226.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.226.430 I llm_load_print_meta: ssm_d_conv       = 0
0.00.226.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.226.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.226.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.226.431 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.226.432 I llm_load_print_meta: model type       = 2B
0.00.226.432 I llm_load_print_meta: model ftype      = Q8_0
0.00.226.433 I llm_load_print_meta: model params     = 2.51 B
0.00.226.434 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.226.434 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.226.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.226.435 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.226.435 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.226.436 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.226.436 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.226.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.226.437 I llm_load_print_meta: max token length = 93
0.00.226.458 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.276 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.301.287 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.289 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.301.289 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.301.290 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.291 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.306.341 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.347 I llama_new_context_with_model: n_batch    = 2048
0.00.306.348 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.348 I llama_new_context_with_model: flash_attn = 0
0.00.306.352 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.353 I llama_new_context_with_model: freq_scale = 1
0.00.336.426 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.336.442 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.336.549 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.429 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.337.438 I llama_new_context_with_model: graph nodes  = 601
0.00.337.438 I llama_new_context_with_model: graph splits = 1
0.00.337.440 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.536 I main: llama threadpool init, n_threads = 4
0.00.431.550 I 
0.00.431.636 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.639 I 
0.00.431.671 I sampler seed: 999084117
0.00.431.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.687 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.688 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.727.349 I llama_perf_sampler_print:    sampling time =       0.59 ms /     5 runs   (    0.12 ms per token,  8417.51 tokens per second)
0.00.727.352 I llama_perf_context_print:        load time =     428.89 ms
0.00.727.353 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.727.355 I llama_perf_context_print:        eval time =     292.40 ms /     4 runs   (   73.10 ms per token,    13.68 tokens per second)
0.00.727.356 I llama_perf_context_print:       total time =     295.82 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.605 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.809 I main: llama backend init
0.00.001.932 I main: load the model and apply lora adapter, if any
0.00.022.612 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.668 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.675 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.680 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.680 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.681 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.682 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.682 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.688 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.581 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.347 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.264 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.271 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.272 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.274 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.274 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.278 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.278 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.279 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.279 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.283 I llama_model_loader: - type  f32:   37 tensors
0.00.132.287 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.868 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.574 I llm_load_vocab: special tokens cache size = 5
0.00.217.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.227 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.228 I llm_load_print_meta: arch             = gemma
0.00.217.228 I llm_load_print_meta: vocab type       = SPM
0.00.217.229 I llm_load_print_meta: n_vocab          = 256000
0.00.217.229 I llm_load_print_meta: n_merges         = 0
0.00.217.230 I llm_load_print_meta: vocab_only       = 0
0.00.217.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.231 I llm_load_print_meta: n_embd           = 2048
0.00.217.231 I llm_load_print_meta: n_layer          = 18
0.00.217.245 I llm_load_print_meta: n_head           = 8
0.00.217.246 I llm_load_print_meta: n_head_kv        = 1
0.00.217.246 I llm_load_print_meta: n_rot            = 256
0.00.217.247 I llm_load_print_meta: n_swa            = 0
0.00.217.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.248 I llm_load_print_meta: n_gqa            = 8
0.00.217.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.253 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.253 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.254 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.254 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.255 I llm_load_print_meta: n_ff             = 16384
0.00.217.255 I llm_load_print_meta: n_expert         = 0
0.00.217.255 I llm_load_print_meta: n_expert_used    = 0
0.00.217.256 I llm_load_print_meta: causal attn      = 1
0.00.217.256 I llm_load_print_meta: pooling type     = 0
0.00.217.256 I llm_load_print_meta: rope type        = 2
0.00.217.256 I llm_load_print_meta: rope scaling     = linear
0.00.217.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.258 I llm_load_print_meta: freq_scale_train = 1
0.00.217.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.260 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.261 I llm_load_print_meta: model type       = 2B
0.00.217.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.262 I llm_load_print_meta: model params     = 2.51 B
0.00.217.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.265 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.266 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.266 I llm_load_print_meta: max token length = 93
0.00.217.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.409 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.287.416 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.398 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.404 I llama_new_context_with_model: n_batch    = 2048
0.00.292.404 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.404 I llama_new_context_with_model: flash_attn = 0
0.00.292.407 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.408 I llama_new_context_with_model: freq_scale = 1
0.00.321.222 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.237 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.328 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.162 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.171 I llama_new_context_with_model: graph nodes  = 601
0.00.322.171 I llama_new_context_with_model: graph splits = 1
0.00.322.173 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.009 I main: llama threadpool init, n_threads = 4
0.00.416.020 I 
0.00.416.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.416.105 I 
0.00.416.148 I sampler seed: 3831795557
0.00.416.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.168 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.416.169 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 secon.

I understand that the question is asking about a specific phrase, but I am unable to provide a response as I do not have access to external information

0.02.866.645 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7058.82 tokens per second)
0.02.866.648 I llama_perf_context_print:        load time =     414.06 ms
0.02.866.649 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.651 I llama_perf_context_print:        eval time =    2431.88 ms /    32 runs   (   76.00 ms per token,    13.16 tokens per second)
0.02.866.652 I llama_perf_context_print:       total time =    2450.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.654s
user	0m28.420s
sys	0m9.398s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3770 (a6a3a5c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31993.94 ms
main:    total time = 31993.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.688 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.896 I main: llama backend init
0.00.002.016 I main: load the model and apply lora adapter, if any
0.00.022.552 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.599 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.607 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.613 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.614 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.617 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.620 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.620 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.625 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.803 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.534 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.541 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.542 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.543 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.544 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.548 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.551 I llama_model_loader: - type  f32:   37 tensors
0.00.132.554 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.555 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.185 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.841 I llm_load_vocab: special tokens cache size = 5
0.00.215.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.279 I llm_load_print_meta: arch             = gemma
0.00.215.280 I llm_load_print_meta: vocab type       = SPM
0.00.215.281 I llm_load_print_meta: n_vocab          = 256000
0.00.215.281 I llm_load_print_meta: n_merges         = 0
0.00.215.282 I llm_load_print_meta: vocab_only       = 0
0.00.215.282 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.282 I llm_load_print_meta: n_embd           = 2048
0.00.215.283 I llm_load_print_meta: n_layer          = 18
0.00.215.294 I llm_load_print_meta: n_head           = 8
0.00.215.295 I llm_load_print_meta: n_head_kv        = 1
0.00.215.296 I llm_load_print_meta: n_rot            = 256
0.00.215.296 I llm_load_print_meta: n_swa            = 0
0.00.215.296 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.297 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.297 I llm_load_print_meta: n_gqa            = 8
0.00.215.298 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.299 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.300 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.302 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.302 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.304 I llm_load_print_meta: n_ff             = 16384
0.00.215.304 I llm_load_print_meta: n_expert         = 0
0.00.215.304 I llm_load_print_meta: n_expert_used    = 0
0.00.215.304 I llm_load_print_meta: causal attn      = 1
0.00.215.305 I llm_load_print_meta: pooling type     = 0
0.00.215.305 I llm_load_print_meta: rope type        = 2
0.00.215.305 I llm_load_print_meta: rope scaling     = linear
0.00.215.307 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.307 I llm_load_print_meta: freq_scale_train = 1
0.00.215.308 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.308 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.308 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.309 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.309 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.309 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.309 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.310 I llm_load_print_meta: model type       = 2B
0.00.215.310 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.311 I llm_load_print_meta: model params     = 2.51 B
0.00.215.312 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.315 I llm_load_print_meta: max token length = 93
0.00.215.339 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.639 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.272.648 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.272.649 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.272.649 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.272.650 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.272.650 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.277.633 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.639 I llama_new_context_with_model: n_batch    = 2048
0.00.277.640 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.640 I llama_new_context_with_model: flash_attn = 0
0.00.277.643 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.644 I llama_new_context_with_model: freq_scale = 1
0.00.306.015 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.306.028 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.117 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.991 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.998 I llama_new_context_with_model: graph nodes  = 601
0.00.306.999 I llama_new_context_with_model: graph splits = 1
0.00.307.000 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.388.066 I main: llama threadpool init, n_threads = 4
0.00.388.078 I 
0.00.388.154 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.388.157 I 
0.00.388.185 I sampler seed: 4129872245
0.00.388.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.388.206 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.388.209 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.340.112 I llama_perf_sampler_print:    sampling time =       3.17 ms /    20 runs   (    0.16 ms per token,  6311.14 tokens per second)
0.01.340.114 I llama_perf_context_print:        load time =     386.03 ms
0.01.340.115 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.340.117 I llama_perf_context_print:        eval time =     940.25 ms /    19 runs   (   49.49 ms per token,    20.21 tokens per second)
0.01.340.117 I llama_perf_context_print:       total time =     952.05 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3770 (a6a3a5c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32102.13 ms
main:    total time = 32102.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 3770 (a6a3a5c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.021.740 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.763 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.764 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.768 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.770 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.771 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.775 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.776 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.776 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.777 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.004 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.014 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.015 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.018 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.022 I llama_model_loader: - type  f32:   37 tensors
0.00.132.024 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.025 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.595 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.427 I llm_load_vocab: special tokens cache size = 5
0.00.218.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.008 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.008 I llm_load_print_meta: arch             = gemma
0.00.219.009 I llm_load_print_meta: vocab type       = SPM
0.00.219.009 I llm_load_print_meta: n_vocab          = 256000
0.00.219.010 I llm_load_print_meta: n_merges         = 0
0.00.219.010 I llm_load_print_meta: vocab_only       = 0
0.00.219.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.011 I llm_load_print_meta: n_embd           = 2048
0.00.219.011 I llm_load_print_meta: n_layer          = 18
0.00.219.023 I llm_load_print_meta: n_head           = 8
0.00.219.025 I llm_load_print_meta: n_head_kv        = 1
0.00.219.025 I llm_load_print_meta: n_rot            = 256
0.00.219.025 I llm_load_print_meta: n_swa            = 0
0.00.219.025 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.026 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.026 I llm_load_print_meta: n_gqa            = 8
0.00.219.027 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.030 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.032 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.032 I llm_load_print_meta: n_ff             = 16384
0.00.219.033 I llm_load_print_meta: n_expert         = 0
0.00.219.033 I llm_load_print_meta: n_expert_used    = 0
0.00.219.033 I llm_load_print_meta: causal attn      = 1
0.00.219.033 I llm_load_print_meta: pooling type     = 0
0.00.219.034 I llm_load_print_meta: rope type        = 2
0.00.219.034 I llm_load_print_meta: rope scaling     = linear
0.00.219.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.036 I llm_load_print_meta: freq_scale_train = 1
0.00.219.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.038 I llm_load_print_meta: model type       = 2B
0.00.219.039 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.219.039 I llm_load_print_meta: model params     = 2.51 B
0.00.219.040 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.219.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.041 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.041 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.043 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.043 I llm_load_print_meta: max token length = 93
0.00.219.062 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.810 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.279.757 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.765 I llama_new_context_with_model: n_batch    = 2048
0.00.279.765 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.766 I llama_new_context_with_model: flash_attn = 0
0.00.279.769 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.769 I llama_new_context_with_model: freq_scale = 1
0.00.308.970 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.986 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.073 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.920 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.929 I llama_new_context_with_model: graph nodes  = 601
0.00.309.929 I llama_new_context_with_model: graph splits = 1
0.00.309.931 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.975 I main: llama threadpool init, n_threads = 4
0.00.389.988 I 
0.00.390.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.390.068 I 
0.00.390.115 I sampler seed: 3415589912
0.00.390.125 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.390.129 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.390.130 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I was just thinking about you and how much I miss you. I long for your laughter and company. It's been way too long

0.01.987.500 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6618.53 tokens per second)
0.01.987.503 I llama_perf_context_print:        load time =     388.11 ms
0.01.987.505 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.987.507 I llama_perf_context_print:        eval time =    1578.68 ms /    32 runs   (   49.33 ms per token,    20.27 tokens per second)
0.01.987.508 I llama_perf_context_print:       total time =    1597.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.410s
user	8m11.837s
sys	0m6.966s
