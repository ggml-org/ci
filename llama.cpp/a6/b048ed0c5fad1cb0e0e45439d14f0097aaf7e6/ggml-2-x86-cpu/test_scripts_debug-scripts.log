+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.891 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.096 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.196 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.211 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.212 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.226 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.228 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.322 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.774 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.781 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.783 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.784 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.785 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.786 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.787 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.791 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.793 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.793 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.804 I llama_model_loader: - type  f32:   37 tensors
0.00.268.807 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.648 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.427 I llm_load_vocab: special tokens cache size = 5
0.00.605.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.095 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.099 I llm_load_print_meta: arch             = gemma
0.00.605.099 I llm_load_print_meta: vocab type       = SPM
0.00.605.100 I llm_load_print_meta: n_vocab          = 256000
0.00.605.103 I llm_load_print_meta: n_merges         = 0
0.00.605.104 I llm_load_print_meta: vocab_only       = 0
0.00.605.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.104 I llm_load_print_meta: n_embd           = 2048
0.00.605.105 I llm_load_print_meta: n_layer          = 18
0.00.605.172 I llm_load_print_meta: n_head           = 8
0.00.605.181 I llm_load_print_meta: n_head_kv        = 1
0.00.605.183 I llm_load_print_meta: n_rot            = 256
0.00.605.183 I llm_load_print_meta: n_swa            = 0
0.00.605.184 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.184 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.189 I llm_load_print_meta: n_gqa            = 8
0.00.605.194 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.210 I llm_load_print_meta: n_ff             = 16384
0.00.605.210 I llm_load_print_meta: n_expert         = 0
0.00.605.210 I llm_load_print_meta: n_expert_used    = 0
0.00.605.211 I llm_load_print_meta: causal attn      = 1
0.00.605.211 I llm_load_print_meta: pooling type     = 0
0.00.605.211 I llm_load_print_meta: rope type        = 2
0.00.605.212 I llm_load_print_meta: rope scaling     = linear
0.00.605.216 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.217 I llm_load_print_meta: freq_scale_train = 1
0.00.605.217 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.217 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.218 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.218 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.218 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.218 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.219 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.219 I llm_load_print_meta: model type       = 2B
0.00.605.220 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.221 I llm_load_print_meta: model params     = 2.51 B
0.00.605.222 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.224 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.225 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.226 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.226 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.227 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.233 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.234 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.234 I llm_load_print_meta: max token length = 93
0.00.605.402 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.964 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.975 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.976 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.976 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.977 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.978 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.738 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.745 I llama_new_context_with_model: n_batch    = 2048
0.00.711.746 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.746 I llama_new_context_with_model: flash_attn = 0
0.00.711.748 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.749 I llama_new_context_with_model: freq_scale = 1
0.00.740.772 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.814 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.358 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.363 I llama_new_context_with_model: graph nodes  = 601
0.00.742.364 I llama_new_context_with_model: graph splits = 1
0.00.742.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.938 I main: llama threadpool init, n_threads = 4
0.01.354.950 I 
0.01.355.067 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.071 I 
0.01.355.240 I sampler seed: 730643881
0.01.355.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.259 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.355.262 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.262 I 
 increasively. 

I need to find the sum of all even numbers between 1 and 20.

**1. List the even numbers between

0.14.959.533 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.36 tokens per second)
0.14.959.561 I llama_perf_context_print:        load time =    1352.07 ms
0.14.959.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.959.571 I llama_perf_context_print:        eval time =   13523.44 ms /    32 runs   (  422.61 ms per token,     2.37 tokens per second)
0.14.959.575 I llama_perf_context_print:       total time =   13604.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.745 I main: load the model and apply lora adapter, if any
0.00.024.831 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.918 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.932 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.960 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.961 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.056 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.065 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.066 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.075 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.076 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.078 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.086 I llama_model_loader: - type  f32:   37 tensors
0.00.268.090 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.421 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.167 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.263 I llm_load_vocab: special tokens cache size = 5
0.00.597.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.662 I llm_load_print_meta: arch             = gemma
0.00.597.662 I llm_load_print_meta: vocab type       = SPM
0.00.597.663 I llm_load_print_meta: n_vocab          = 256000
0.00.597.666 I llm_load_print_meta: n_merges         = 0
0.00.597.666 I llm_load_print_meta: vocab_only       = 0
0.00.597.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.667 I llm_load_print_meta: n_embd           = 2048
0.00.597.667 I llm_load_print_meta: n_layer          = 18
0.00.597.735 I llm_load_print_meta: n_head           = 8
0.00.597.743 I llm_load_print_meta: n_head_kv        = 1
0.00.597.747 I llm_load_print_meta: n_rot            = 256
0.00.597.747 I llm_load_print_meta: n_swa            = 0
0.00.597.747 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.748 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.753 I llm_load_print_meta: n_gqa            = 8
0.00.597.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.766 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.767 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.767 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.772 I llm_load_print_meta: n_ff             = 16384
0.00.597.773 I llm_load_print_meta: n_expert         = 0
0.00.597.775 I llm_load_print_meta: n_expert_used    = 0
0.00.597.775 I llm_load_print_meta: causal attn      = 1
0.00.597.775 I llm_load_print_meta: pooling type     = 0
0.00.597.776 I llm_load_print_meta: rope type        = 2
0.00.597.777 I llm_load_print_meta: rope scaling     = linear
0.00.597.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.779 I llm_load_print_meta: freq_scale_train = 1
0.00.597.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.780 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.781 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.793 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.794 I llm_load_print_meta: model type       = 2B
0.00.597.798 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.799 I llm_load_print_meta: model params     = 2.51 B
0.00.597.800 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.800 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.801 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.801 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.802 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.802 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.803 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.810 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.811 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.812 I llm_load_print_meta: max token length = 93
0.00.597.982 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.676 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.699.323 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.330 I llama_new_context_with_model: n_batch    = 2048
0.00.699.331 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.331 I llama_new_context_with_model: flash_attn = 0
0.00.699.334 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.334 I llama_new_context_with_model: freq_scale = 1
0.00.728.126 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.172 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.285 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.647 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.652 I llama_new_context_with_model: graph nodes  = 601
0.00.729.652 I llama_new_context_with_model: graph splits = 1
0.00.729.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.052 I main: llama threadpool init, n_threads = 4
0.01.341.064 I 
0.01.341.168 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.172 I 
0.01.341.334 I sampler seed: 2430494208
0.01.341.345 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.351 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.341.352 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.352 I 
 increasities
**Answer:** I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.09.035.945 I llama_perf_sampler_print:    sampling time =      27.67 ms /    19 runs   (    1.46 ms per token,   686.64 tokens per second)
0.09.035.948 I llama_perf_context_print:        load time =    1338.22 ms
0.09.035.950 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.035.951 I llama_perf_context_print:        eval time =    7648.20 ms /    18 runs   (  424.90 ms per token,     2.35 tokens per second)
0.09.035.952 I llama_perf_context_print:       total time =    7694.90 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.857 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.074 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.166 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.177 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.179 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.183 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.185 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.186 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.198 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.201 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.148 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.495 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.777 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.779 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.780 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.787 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.797 I llama_model_loader: - type  f32:   37 tensors
0.00.269.802 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.450 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.448 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.513 I llm_load_vocab: special tokens cache size = 5
0.00.605.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.010 I llm_load_print_meta: arch             = gemma
0.00.606.011 I llm_load_print_meta: vocab type       = SPM
0.00.606.011 I llm_load_print_meta: n_vocab          = 256000
0.00.606.014 I llm_load_print_meta: n_merges         = 0
0.00.606.014 I llm_load_print_meta: vocab_only       = 0
0.00.606.015 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.015 I llm_load_print_meta: n_embd           = 2048
0.00.606.015 I llm_load_print_meta: n_layer          = 18
0.00.606.078 I llm_load_print_meta: n_head           = 8
0.00.606.084 I llm_load_print_meta: n_head_kv        = 1
0.00.606.085 I llm_load_print_meta: n_rot            = 256
0.00.606.085 I llm_load_print_meta: n_swa            = 0
0.00.606.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.091 I llm_load_print_meta: n_gqa            = 8
0.00.606.095 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.103 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.104 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.132 I llm_load_print_meta: n_ff             = 16384
0.00.606.134 I llm_load_print_meta: n_expert         = 0
0.00.606.134 I llm_load_print_meta: n_expert_used    = 0
0.00.606.135 I llm_load_print_meta: causal attn      = 1
0.00.606.135 I llm_load_print_meta: pooling type     = 0
0.00.606.135 I llm_load_print_meta: rope type        = 2
0.00.606.136 I llm_load_print_meta: rope scaling     = linear
0.00.606.138 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.138 I llm_load_print_meta: freq_scale_train = 1
0.00.606.138 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.139 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.139 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.139 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.140 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.140 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.140 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.141 I llm_load_print_meta: model type       = 2B
0.00.606.142 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.143 I llm_load_print_meta: model params     = 2.51 B
0.00.606.143 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.144 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.145 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.146 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.153 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.155 I llm_load_print_meta: max token length = 93
0.00.606.343 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.023 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.684.033 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.034 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.684.035 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.684.035 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.036 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.689.816 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.823 I llama_new_context_with_model: n_batch    = 2048
0.00.689.824 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.824 I llama_new_context_with_model: flash_attn = 0
0.00.689.827 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.828 I llama_new_context_with_model: freq_scale = 1
0.00.719.300 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.341 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.828 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.833 I llama_new_context_with_model: graph nodes  = 601
0.00.720.833 I llama_new_context_with_model: graph splits = 1
0.00.720.849 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.372 I main: llama threadpool init, n_threads = 4
0.01.357.386 I 
0.01.357.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.513 I 
0.01.357.687 I sampler seed: 3038055996
0.01.357.698 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.706 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.357.707 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.707 I 
 increadibly. [end of text]


0.03.052.272 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.70 tokens per second)
0.03.052.277 I llama_perf_context_print:        load time =    1354.48 ms
0.03.052.279 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.052.280 I llama_perf_context_print:        eval time =    1682.86 ms /     4 runs   (  420.71 ms per token,     2.38 tokens per second)
0.03.052.281 I llama_perf_context_print:       total time =    1694.91 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.654 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.859 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.972 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.976 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.979 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.981 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.982 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.998 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.000 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.001 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.248 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.258 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.259 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.260 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.263 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.266 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.267 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.268 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.269 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.270 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.279 I llama_model_loader: - type  f32:   37 tensors
0.00.269.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.963 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.320 I llm_load_vocab: special tokens cache size = 5
0.00.591.312 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.388 I llm_load_print_meta: arch             = gemma
0.00.591.388 I llm_load_print_meta: vocab type       = SPM
0.00.591.389 I llm_load_print_meta: n_vocab          = 256000
0.00.591.392 I llm_load_print_meta: n_merges         = 0
0.00.591.392 I llm_load_print_meta: vocab_only       = 0
0.00.591.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.393 I llm_load_print_meta: n_embd           = 2048
0.00.591.393 I llm_load_print_meta: n_layer          = 18
0.00.591.459 I llm_load_print_meta: n_head           = 8
0.00.591.467 I llm_load_print_meta: n_head_kv        = 1
0.00.591.472 I llm_load_print_meta: n_rot            = 256
0.00.591.473 I llm_load_print_meta: n_swa            = 0
0.00.591.473 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.473 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.478 I llm_load_print_meta: n_gqa            = 8
0.00.591.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.488 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.490 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.492 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.504 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.517 I llm_load_print_meta: n_ff             = 16384
0.00.591.518 I llm_load_print_meta: n_expert         = 0
0.00.591.518 I llm_load_print_meta: n_expert_used    = 0
0.00.591.518 I llm_load_print_meta: causal attn      = 1
0.00.591.519 I llm_load_print_meta: pooling type     = 0
0.00.591.531 I llm_load_print_meta: rope type        = 2
0.00.591.535 I llm_load_print_meta: rope scaling     = linear
0.00.591.536 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.537 I llm_load_print_meta: freq_scale_train = 1
0.00.591.537 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.537 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.538 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.538 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.538 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.539 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.539 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.540 I llm_load_print_meta: model type       = 2B
0.00.591.541 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.550 I llm_load_print_meta: model params     = 2.51 B
0.00.591.552 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.552 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.555 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.556 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.563 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.564 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.564 I llm_load_print_meta: max token length = 93
0.00.591.740 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.726 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.662.734 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.668.394 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.401 I llama_new_context_with_model: n_batch    = 2048
0.00.668.401 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.402 I llama_new_context_with_model: flash_attn = 0
0.00.668.404 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.405 I llama_new_context_with_model: freq_scale = 1
0.00.697.404 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.444 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.929 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.934 I llama_new_context_with_model: graph nodes  = 601
0.00.698.934 I llama_new_context_with_model: graph splits = 1
0.00.698.949 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.514 I main: llama threadpool init, n_threads = 4
0.01.314.525 I 
0.01.314.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.647 I 
0.01.314.820 I sampler seed: 4102124943
0.01.314.831 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.838 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.839 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.845 I 
 increasities!

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.09.771.756 I llama_perf_sampler_print:    sampling time =      30.84 ms /    21 runs   (    1.47 ms per token,   680.98 tokens per second)
0.09.771.759 I llama_perf_context_print:        load time =    1311.60 ms
0.09.771.760 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.771.774 I llama_perf_context_print:        eval time =    8405.27 ms /    20 runs   (  420.26 ms per token,     2.38 tokens per second)
0.09.771.775 I llama_perf_context_print:       total time =    8457.25 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.346s
user	2m18.508s
sys	0m9.428s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3913 (a6b048ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199084.01 ms
main:    total time = 199084.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.025.357 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.566 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.668 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.670 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.671 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.679 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.681 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.682 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.683 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.605 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.694 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.743 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.744 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.745 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.746 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.747 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.748 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.752 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.754 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.755 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.756 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.764 I llama_model_loader: - type  f32:   37 tensors
0.00.271.768 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.769 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.009 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.506 I llm_load_vocab: special tokens cache size = 5
0.00.596.335 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.404 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.406 I llm_load_print_meta: arch             = gemma
0.00.596.406 I llm_load_print_meta: vocab type       = SPM
0.00.596.407 I llm_load_print_meta: n_vocab          = 256000
0.00.596.409 I llm_load_print_meta: n_merges         = 0
0.00.596.410 I llm_load_print_meta: vocab_only       = 0
0.00.596.411 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.411 I llm_load_print_meta: n_embd           = 2048
0.00.596.411 I llm_load_print_meta: n_layer          = 18
0.00.596.474 I llm_load_print_meta: n_head           = 8
0.00.596.481 I llm_load_print_meta: n_head_kv        = 1
0.00.596.482 I llm_load_print_meta: n_rot            = 256
0.00.596.482 I llm_load_print_meta: n_swa            = 0
0.00.596.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.483 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.487 I llm_load_print_meta: n_gqa            = 8
0.00.596.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.519 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.524 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.524 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.531 I llm_load_print_meta: n_ff             = 16384
0.00.596.532 I llm_load_print_meta: n_expert         = 0
0.00.596.532 I llm_load_print_meta: n_expert_used    = 0
0.00.596.532 I llm_load_print_meta: causal attn      = 1
0.00.596.533 I llm_load_print_meta: pooling type     = 0
0.00.596.540 I llm_load_print_meta: rope type        = 2
0.00.596.541 I llm_load_print_meta: rope scaling     = linear
0.00.596.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.543 I llm_load_print_meta: freq_scale_train = 1
0.00.596.543 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.544 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.544 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.544 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.544 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.545 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.545 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.546 I llm_load_print_meta: model type       = 2B
0.00.596.547 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.547 I llm_load_print_meta: model params     = 2.51 B
0.00.596.548 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.548 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.557 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.558 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.564 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.574 I llm_load_print_meta: max token length = 93
0.00.596.742 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.716 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.656.727 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.656.728 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.656.729 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.656.730 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.656.731 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.662.503 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.512 I llama_new_context_with_model: n_batch    = 2048
0.00.662.512 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.513 I llama_new_context_with_model: flash_attn = 0
0.00.662.517 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.518 I llama_new_context_with_model: freq_scale = 1
0.00.693.630 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.674 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.788 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.174 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.180 I llama_new_context_with_model: graph nodes  = 601
0.00.695.180 I llama_new_context_with_model: graph splits = 1
0.00.695.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.126 I main: llama threadpool init, n_threads = 4
0.01.279.138 I 
0.01.279.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.249 I 
0.01.279.417 I sampler seed: 2919832044
0.01.279.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.434 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.435 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.435 I 
 squaRELLI, ANNA
24 March 2023

I am unable to access the internet to retrieve the most up-to-date information

0.12.215.943 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.37 tokens per second)
0.12.215.964 I llama_perf_context_print:        load time =    1276.26 ms
0.12.215.966 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.215.968 I llama_perf_context_print:        eval time =   10855.71 ms /    32 runs   (  339.24 ms per token,     2.95 tokens per second)
0.12.215.969 I llama_perf_context_print:       total time =   10936.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3913 (a6b048ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198315.35 ms
main:    total time = 198315.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 3913 (a6b048ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.469 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.575 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.576 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.584 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.585 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.586 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.588 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.589 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.595 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.596 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.597 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.598 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.599 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.262 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.847 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.855 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.857 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.858 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.859 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.862 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.865 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.866 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.875 I llama_model_loader: - type  f32:   37 tensors
0.00.267.878 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.879 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.530 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.030 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.045 I llm_load_vocab: special tokens cache size = 5
0.00.599.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.867 I llm_load_print_meta: arch             = gemma
0.00.599.867 I llm_load_print_meta: vocab type       = SPM
0.00.599.868 I llm_load_print_meta: n_vocab          = 256000
0.00.599.871 I llm_load_print_meta: n_merges         = 0
0.00.599.872 I llm_load_print_meta: vocab_only       = 0
0.00.599.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.873 I llm_load_print_meta: n_embd           = 2048
0.00.599.873 I llm_load_print_meta: n_layer          = 18
0.00.599.938 I llm_load_print_meta: n_head           = 8
0.00.599.946 I llm_load_print_meta: n_head_kv        = 1
0.00.599.947 I llm_load_print_meta: n_rot            = 256
0.00.599.947 I llm_load_print_meta: n_swa            = 0
0.00.599.948 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.953 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.958 I llm_load_print_meta: n_gqa            = 8
0.00.599.963 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.968 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.973 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.974 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.974 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.979 I llm_load_print_meta: n_ff             = 16384
0.00.599.980 I llm_load_print_meta: n_expert         = 0
0.00.599.980 I llm_load_print_meta: n_expert_used    = 0
0.00.599.980 I llm_load_print_meta: causal attn      = 1
0.00.599.981 I llm_load_print_meta: pooling type     = 0
0.00.599.982 I llm_load_print_meta: rope type        = 2
0.00.599.982 I llm_load_print_meta: rope scaling     = linear
0.00.599.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.984 I llm_load_print_meta: freq_scale_train = 1
0.00.599.996 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.997 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.997 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.998 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.011 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.012 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.012 I llm_load_print_meta: model type       = 2B
0.00.600.014 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.014 I llm_load_print_meta: model params     = 2.51 B
0.00.600.015 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.016 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.016 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.017 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.017 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.018 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.019 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.020 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.029 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.039 I llm_load_print_meta: max token length = 93
0.00.600.209 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.508 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.662.991 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.998 I llama_new_context_with_model: n_batch    = 2048
0.00.662.999 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.999 I llama_new_context_with_model: flash_attn = 0
0.00.663.002 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.002 I llama_new_context_with_model: freq_scale = 1
0.00.691.737 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.783 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.896 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.693.271 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.276 I llama_new_context_with_model: graph nodes  = 601
0.00.693.277 I llama_new_context_with_model: graph splits = 1
0.00.693.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.045 I main: llama threadpool init, n_threads = 4
0.01.271.057 I 
0.01.271.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.167 I 
0.01.271.335 I sampler seed: 4181202570
0.01.271.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.354 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.354 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.354 I 
 seconally, the answer should be:

The answer is: "It depends."

There are many factors that can influence the outcome of an election, including

0.12.322.447 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.76 tokens per second)
0.12.322.452 I llama_perf_context_print:        load time =    1268.11 ms
0.12.322.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.322.456 I llama_perf_context_print:        eval time =   10970.18 ms /    32 runs   (  342.82 ms per token,     2.92 tokens per second)
0.12.322.456 I llama_perf_context_print:       total time =   11051.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.782s
user	50m13.040s
sys	0m6.375s
