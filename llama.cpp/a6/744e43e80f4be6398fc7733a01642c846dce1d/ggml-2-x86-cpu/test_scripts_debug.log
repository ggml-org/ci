+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.592 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.601 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.711 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.722 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.724 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.727 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.729 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.737 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.747 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.870 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.251 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.252 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.260 I llama_model_loader: - type  f32:   37 tensors
0.00.266.263 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.733 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.204 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.244 I llm_load_vocab: special tokens cache size = 5
0.00.610.624 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.699 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.703 I llm_load_print_meta: arch             = gemma
0.00.610.704 I llm_load_print_meta: vocab type       = SPM
0.00.610.705 I llm_load_print_meta: n_vocab          = 256000
0.00.610.708 I llm_load_print_meta: n_merges         = 0
0.00.610.708 I llm_load_print_meta: vocab_only       = 0
0.00.610.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.709 I llm_load_print_meta: n_embd           = 2048
0.00.610.709 I llm_load_print_meta: n_layer          = 18
0.00.610.775 I llm_load_print_meta: n_head           = 8
0.00.610.785 I llm_load_print_meta: n_head_kv        = 1
0.00.610.786 I llm_load_print_meta: n_rot            = 256
0.00.610.787 I llm_load_print_meta: n_swa            = 0
0.00.610.788 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.788 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.815 I llm_load_print_meta: n_gqa            = 8
0.00.610.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.829 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.830 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.834 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.841 I llm_load_print_meta: n_ff             = 16384
0.00.610.843 I llm_load_print_meta: n_expert         = 0
0.00.610.843 I llm_load_print_meta: n_expert_used    = 0
0.00.610.844 I llm_load_print_meta: causal attn      = 1
0.00.610.844 I llm_load_print_meta: pooling type     = 0
0.00.610.845 I llm_load_print_meta: rope type        = 2
0.00.610.846 I llm_load_print_meta: rope scaling     = linear
0.00.610.850 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.851 I llm_load_print_meta: freq_scale_train = 1
0.00.610.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.853 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.854 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.854 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.854 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.855 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.856 I llm_load_print_meta: model type       = 2B
0.00.610.857 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.859 I llm_load_print_meta: model params     = 2.51 B
0.00.610.869 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.869 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.871 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.874 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.875 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.882 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.884 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.885 I llm_load_print_meta: max token length = 93
0.00.716.187 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.716.196 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.716.197 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.716.198 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.716.199 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.716.200 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.722.316 I llama_new_context_with_model: n_ctx      = 8192
0.00.722.324 I llama_new_context_with_model: n_batch    = 2048
0.00.722.324 I llama_new_context_with_model: n_ubatch   = 512
0.00.722.324 I llama_new_context_with_model: flash_attn = 0
0.00.722.327 I llama_new_context_with_model: freq_base  = 10000.0
0.00.722.327 I llama_new_context_with_model: freq_scale = 1
0.00.750.652 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.693 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.820 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.429 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.753.432 I llama_new_context_with_model: graph nodes  = 601
0.00.753.433 I llama_new_context_with_model: graph splits = 1
0.00.753.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.119 I main: llama threadpool init, n_threads = 4
0.01.364.134 I 
0.01.364.252 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.257 I 
0.01.364.501 I sampler seed: 2816494344
0.01.364.513 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.519 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.521 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.521 I 
 seconary.

## The Importance of Self-Care

**Self-care** is a crucial aspect of mental and physical well-being. It involves taking

0.14.890.289 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.05 tokens per second)
0.14.890.314 I llama_perf_context_print:        load time =    1361.22 ms
0.14.890.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.318 I llama_perf_context_print:        eval time =   13428.92 ms /    32 runs   (  419.65 ms per token,     2.38 tokens per second)
0.14.890.318 I llama_perf_context_print:       total time =   13526.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.025.715 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.816 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.831 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.841 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.843 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.846 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.847 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.854 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.858 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.859 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.792 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.418 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.898 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.899 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.900 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.901 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.903 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.904 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.907 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.909 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.910 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.911 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.912 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.920 I llama_model_loader: - type  f32:   37 tensors
0.00.265.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.122 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.962 I llm_load_vocab: special tokens cache size = 5
0.00.595.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.955 I llm_load_print_meta: arch             = gemma
0.00.595.956 I llm_load_print_meta: vocab type       = SPM
0.00.595.957 I llm_load_print_meta: n_vocab          = 256000
0.00.595.959 I llm_load_print_meta: n_merges         = 0
0.00.595.960 I llm_load_print_meta: vocab_only       = 0
0.00.595.960 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.960 I llm_load_print_meta: n_embd           = 2048
0.00.595.961 I llm_load_print_meta: n_layer          = 18
0.00.596.025 I llm_load_print_meta: n_head           = 8
0.00.596.031 I llm_load_print_meta: n_head_kv        = 1
0.00.596.032 I llm_load_print_meta: n_rot            = 256
0.00.596.032 I llm_load_print_meta: n_swa            = 0
0.00.596.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.040 I llm_load_print_meta: n_gqa            = 8
0.00.596.045 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.054 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.055 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.060 I llm_load_print_meta: n_ff             = 16384
0.00.596.061 I llm_load_print_meta: n_expert         = 0
0.00.596.062 I llm_load_print_meta: n_expert_used    = 0
0.00.596.062 I llm_load_print_meta: causal attn      = 1
0.00.596.063 I llm_load_print_meta: pooling type     = 0
0.00.596.063 I llm_load_print_meta: rope type        = 2
0.00.596.064 I llm_load_print_meta: rope scaling     = linear
0.00.596.065 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.066 I llm_load_print_meta: freq_scale_train = 1
0.00.596.067 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.067 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.068 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.068 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.069 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.069 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.070 I llm_load_print_meta: model type       = 2B
0.00.596.071 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.072 I llm_load_print_meta: model params     = 2.51 B
0.00.596.082 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.085 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.086 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.093 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.094 I llm_load_print_meta: max token length = 93
0.00.694.784 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.700.777 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.785 I llama_new_context_with_model: n_batch    = 2048
0.00.700.785 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.786 I llama_new_context_with_model: flash_attn = 0
0.00.700.788 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.789 I llama_new_context_with_model: freq_scale = 1
0.00.730.926 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.969 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.097 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.662 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.666 I llama_new_context_with_model: graph nodes  = 601
0.00.733.667 I llama_new_context_with_model: graph splits = 1
0.00.733.690 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.531 I main: llama threadpool init, n_threads = 4
0.01.343.546 I 
0.01.343.660 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.663 I 
0.01.343.902 I sampler seed: 3705589785
0.01.343.917 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.926 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.928 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.929 I 
 increably!

I am unable to generate text that contains offensive or derogatory language. [end of text]


0.08.988.751 I llama_perf_sampler_print:    sampling time =      27.95 ms /    19 runs   (    1.47 ms per token,   679.79 tokens per second)
0.08.988.754 I llama_perf_context_print:        load time =    1340.64 ms
0.08.988.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.988.769 I llama_perf_context_print:        eval time =    7589.09 ms /    18 runs   (  421.62 ms per token,     2.37 tokens per second)
0.08.988.770 I llama_perf_context_print:       total time =    7645.23 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.025.459 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.470 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.557 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.573 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.575 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.578 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.590 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.593 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.551 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.564 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.565 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.566 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.573 I llama_model_loader: - type  f32:   37 tensors
0.00.265.575 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.859 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.746 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.705 I llm_load_vocab: special tokens cache size = 5
0.00.622.078 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.151 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.155 I llm_load_print_meta: arch             = gemma
0.00.622.156 I llm_load_print_meta: vocab type       = SPM
0.00.622.157 I llm_load_print_meta: n_vocab          = 256000
0.00.622.159 I llm_load_print_meta: n_merges         = 0
0.00.622.160 I llm_load_print_meta: vocab_only       = 0
0.00.622.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.161 I llm_load_print_meta: n_embd           = 2048
0.00.622.161 I llm_load_print_meta: n_layer          = 18
0.00.622.226 I llm_load_print_meta: n_head           = 8
0.00.622.236 I llm_load_print_meta: n_head_kv        = 1
0.00.622.236 I llm_load_print_meta: n_rot            = 256
0.00.622.238 I llm_load_print_meta: n_swa            = 0
0.00.622.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.244 I llm_load_print_meta: n_gqa            = 8
0.00.622.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.254 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.259 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.259 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.265 I llm_load_print_meta: n_ff             = 16384
0.00.622.266 I llm_load_print_meta: n_expert         = 0
0.00.622.267 I llm_load_print_meta: n_expert_used    = 0
0.00.622.267 I llm_load_print_meta: causal attn      = 1
0.00.622.268 I llm_load_print_meta: pooling type     = 0
0.00.622.276 I llm_load_print_meta: rope type        = 2
0.00.622.277 I llm_load_print_meta: rope scaling     = linear
0.00.622.279 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.280 I llm_load_print_meta: freq_scale_train = 1
0.00.622.281 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.282 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.282 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.283 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.284 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.285 I llm_load_print_meta: model type       = 2B
0.00.622.286 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.303 I llm_load_print_meta: model params     = 2.51 B
0.00.622.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.314 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.315 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.316 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.323 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.324 I llm_load_print_meta: max token length = 93
0.00.719.363 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.719.371 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.372 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.719.373 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.719.373 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.374 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.725.301 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.309 I llama_new_context_with_model: n_batch    = 2048
0.00.725.309 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.310 I llama_new_context_with_model: flash_attn = 0
0.00.725.313 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.314 I llama_new_context_with_model: freq_scale = 1
0.00.753.748 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.753.793 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.753.935 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.756.539 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.544 I llama_new_context_with_model: graph nodes  = 601
0.00.756.544 I llama_new_context_with_model: graph splits = 1
0.00.756.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.408.652 I main: llama threadpool init, n_threads = 4
0.01.408.665 I 
0.01.408.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.408.774 I 
0.01.409.009 I sampler seed: 3582970778
0.01.409.021 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.409.027 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.409.029 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.409.029 I 
 increasities, and other forms of flattery.

Flattery is an art that requires both skill and knowledge. It is a delicate balance between expressing appreciation and maintaining

0.14.905.086 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.26 tokens per second)
0.14.905.102 I llama_perf_context_print:        load time =    1405.80 ms
0.14.905.104 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.905.105 I llama_perf_context_print:        eval time =   13398.35 ms /    32 runs   (  418.70 ms per token,     2.39 tokens per second)
0.14.905.106 I llama_perf_context_print:       total time =   13496.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.025.459 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.468 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.557 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.568 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.576 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.578 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.579 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.580 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.589 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.656 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.034 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.046 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.050 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.051 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.058 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.059 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.068 I llama_model_loader: - type  f32:   37 tensors
0.00.266.070 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.844 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.835 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.821 I llm_load_vocab: special tokens cache size = 5
0.00.625.333 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.416 I llm_load_print_meta: arch             = gemma
0.00.625.417 I llm_load_print_meta: vocab type       = SPM
0.00.625.418 I llm_load_print_meta: n_vocab          = 256000
0.00.625.420 I llm_load_print_meta: n_merges         = 0
0.00.625.421 I llm_load_print_meta: vocab_only       = 0
0.00.625.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.422 I llm_load_print_meta: n_embd           = 2048
0.00.625.422 I llm_load_print_meta: n_layer          = 18
0.00.625.484 I llm_load_print_meta: n_head           = 8
0.00.625.491 I llm_load_print_meta: n_head_kv        = 1
0.00.625.492 I llm_load_print_meta: n_rot            = 256
0.00.625.492 I llm_load_print_meta: n_swa            = 0
0.00.625.493 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.493 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.498 I llm_load_print_meta: n_gqa            = 8
0.00.625.503 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.507 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.524 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.526 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.531 I llm_load_print_meta: n_ff             = 16384
0.00.625.531 I llm_load_print_meta: n_expert         = 0
0.00.625.532 I llm_load_print_meta: n_expert_used    = 0
0.00.625.532 I llm_load_print_meta: causal attn      = 1
0.00.625.533 I llm_load_print_meta: pooling type     = 0
0.00.625.534 I llm_load_print_meta: rope type        = 2
0.00.625.534 I llm_load_print_meta: rope scaling     = linear
0.00.625.536 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.536 I llm_load_print_meta: freq_scale_train = 1
0.00.625.537 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.538 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.538 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.538 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.539 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.540 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.540 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.541 I llm_load_print_meta: model type       = 2B
0.00.625.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.542 I llm_load_print_meta: model params     = 2.51 B
0.00.625.552 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.552 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.553 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.554 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.560 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.567 I llm_load_print_meta: max token length = 93
0.00.700.674 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.700.684 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.706.563 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.569 I llama_new_context_with_model: n_batch    = 2048
0.00.706.569 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.570 I llama_new_context_with_model: flash_attn = 0
0.00.706.572 I llama_new_context_with_model: freq_base  = 10000.0
0.00.706.573 I llama_new_context_with_model: freq_scale = 1
0.00.736.626 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.666 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.795 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.370 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.375 I llama_new_context_with_model: graph nodes  = 601
0.00.739.375 I llama_new_context_with_model: graph splits = 1
0.00.739.400 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.508 I main: llama threadpool init, n_threads = 4
0.01.353.519 I 
0.01.353.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.629 I 
0.01.353.862 I sampler seed: 1021429553
0.01.353.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.883 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.883 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.885 I 
 increably!

I am unable to generate a response that includes offensive or inappropriate language. [end of text]


0.09.381.366 I llama_perf_sampler_print:    sampling time =      29.39 ms /    20 runs   (    1.47 ms per token,   680.50 tokens per second)
0.09.381.380 I llama_perf_context_print:        load time =    1350.64 ms
0.09.381.391 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.381.394 I llama_perf_context_print:        eval time =    7969.36 ms /    19 runs   (  419.44 ms per token,     2.38 tokens per second)
0.09.381.395 I llama_perf_context_print:       total time =    8027.87 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.934s
user	3m3.542s
sys	0m9.607s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4011 (a6744e43)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198566.88 ms
main:    total time = 198566.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.612 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.809 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.025.610 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.714 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.725 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.726 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.731 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.735 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.736 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.755 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.761 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.762 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.763 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.764 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.738 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.416 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.652 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.659 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.660 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.670 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.672 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.680 I llama_model_loader: - type  f32:   37 tensors
0.00.265.683 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.684 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.535 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.117 I llm_load_vocab: special tokens cache size = 5
0.00.597.542 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.614 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.618 I llm_load_print_meta: arch             = gemma
0.00.597.619 I llm_load_print_meta: vocab type       = SPM
0.00.597.620 I llm_load_print_meta: n_vocab          = 256000
0.00.597.622 I llm_load_print_meta: n_merges         = 0
0.00.597.623 I llm_load_print_meta: vocab_only       = 0
0.00.597.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.624 I llm_load_print_meta: n_embd           = 2048
0.00.597.624 I llm_load_print_meta: n_layer          = 18
0.00.597.690 I llm_load_print_meta: n_head           = 8
0.00.597.701 I llm_load_print_meta: n_head_kv        = 1
0.00.597.703 I llm_load_print_meta: n_rot            = 256
0.00.597.703 I llm_load_print_meta: n_swa            = 0
0.00.597.704 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.705 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.711 I llm_load_print_meta: n_gqa            = 8
0.00.597.716 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.721 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.725 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.727 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.728 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.728 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.733 I llm_load_print_meta: n_ff             = 16384
0.00.597.734 I llm_load_print_meta: n_expert         = 0
0.00.597.743 I llm_load_print_meta: n_expert_used    = 0
0.00.597.744 I llm_load_print_meta: causal attn      = 1
0.00.597.747 I llm_load_print_meta: pooling type     = 0
0.00.597.747 I llm_load_print_meta: rope type        = 2
0.00.597.748 I llm_load_print_meta: rope scaling     = linear
0.00.597.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.750 I llm_load_print_meta: freq_scale_train = 1
0.00.597.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.751 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.751 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.752 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.752 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.752 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.753 I llm_load_print_meta: model type       = 2B
0.00.597.754 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.755 I llm_load_print_meta: model params     = 2.51 B
0.00.597.764 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.765 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.766 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.767 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.768 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.769 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.769 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.775 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.776 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.777 I llm_load_print_meta: max token length = 93
0.00.661.819 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.661.829 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.661.830 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.661.830 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.661.831 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.661.832 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.667.689 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.696 I llama_new_context_with_model: n_batch    = 2048
0.00.667.697 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.697 I llama_new_context_with_model: flash_attn = 0
0.00.667.700 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.701 I llama_new_context_with_model: freq_scale = 1
0.00.696.749 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.792 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.538 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.699.543 I llama_new_context_with_model: graph nodes  = 601
0.00.699.543 I llama_new_context_with_model: graph splits = 1
0.00.699.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.497 I main: llama threadpool init, n_threads = 4
0.01.275.509 I 
0.01.275.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.620 I 
0.01.275.861 I sampler seed: 958785569
0.01.275.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.880 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.275.881 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.881 I 
 seconally.

I am unable to generate a response as I am unable to access the internet or any external resources. [end of text]


0.09.740.391 I llama_perf_sampler_print:    sampling time =      38.63 ms /    26 runs   (    1.49 ms per token,   673.09 tokens per second)
0.09.740.396 I llama_perf_context_print:        load time =    1272.62 ms
0.09.740.398 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.740.400 I llama_perf_context_print:        eval time =    8388.49 ms /    25 runs   (  335.54 ms per token,     2.98 tokens per second)
0.09.740.401 I llama_perf_context_print:       total time =    8464.90 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4011 (a6744e43)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198499.10 ms
main:    total time = 198499.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4011 (a6744e43) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.541 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.638 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.652 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.662 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.663 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.664 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.672 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.572 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.580 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.581 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.582 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.584 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.585 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.587 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.602 I llama_model_loader: - type  f32:   37 tensors
0.00.266.605 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.615 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.012 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.096 I llm_load_vocab: special tokens cache size = 5
0.00.600.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.697 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.698 I llm_load_print_meta: arch             = gemma
0.00.600.698 I llm_load_print_meta: vocab type       = SPM
0.00.600.699 I llm_load_print_meta: n_vocab          = 256000
0.00.600.702 I llm_load_print_meta: n_merges         = 0
0.00.600.702 I llm_load_print_meta: vocab_only       = 0
0.00.600.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.703 I llm_load_print_meta: n_embd           = 2048
0.00.600.703 I llm_load_print_meta: n_layer          = 18
0.00.600.768 I llm_load_print_meta: n_head           = 8
0.00.600.776 I llm_load_print_meta: n_head_kv        = 1
0.00.600.776 I llm_load_print_meta: n_rot            = 256
0.00.600.777 I llm_load_print_meta: n_swa            = 0
0.00.600.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.782 I llm_load_print_meta: n_gqa            = 8
0.00.600.787 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.803 I llm_load_print_meta: n_ff             = 16384
0.00.600.804 I llm_load_print_meta: n_expert         = 0
0.00.600.804 I llm_load_print_meta: n_expert_used    = 0
0.00.600.804 I llm_load_print_meta: causal attn      = 1
0.00.600.814 I llm_load_print_meta: pooling type     = 0
0.00.600.814 I llm_load_print_meta: rope type        = 2
0.00.600.815 I llm_load_print_meta: rope scaling     = linear
0.00.600.816 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.817 I llm_load_print_meta: freq_scale_train = 1
0.00.600.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.823 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.824 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.825 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.836 I llm_load_print_meta: model type       = 2B
0.00.600.838 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.839 I llm_load_print_meta: model params     = 2.51 B
0.00.600.849 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.853 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.861 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.869 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.870 I llm_load_print_meta: max token length = 93
0.00.662.250 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.668.149 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.156 I llama_new_context_with_model: n_batch    = 2048
0.00.668.157 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.157 I llama_new_context_with_model: flash_attn = 0
0.00.668.160 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.161 I llama_new_context_with_model: freq_scale = 1
0.00.697.602 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.643 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.768 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.305 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.308 I llama_new_context_with_model: graph nodes  = 601
0.00.700.309 I llama_new_context_with_model: graph splits = 1
0.00.700.332 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.957 I main: llama threadpool init, n_threads = 4
0.01.277.969 I 
0.01.278.075 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.079 I 
0.01.278.314 I sampler seed: 3241996270
0.01.278.327 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.333 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.278.337 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.337 I 
 seconally, as you are unable to accurately assess the context.

I am unable to provide assistance with tasks that may result in harmful or illegal activities. [end of text]


0.12.157.942 I llama_perf_sampler_print:    sampling time =      49.42 ms /    33 runs   (    1.50 ms per token,   667.72 tokens per second)
0.12.157.947 I llama_perf_context_print:        load time =    1275.03 ms
0.12.157.949 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.157.951 I llama_perf_context_print:        eval time =   10782.35 ms /    32 runs   (  336.95 ms per token,     2.97 tokens per second)
0.12.157.953 I llama_perf_context_print:       total time =   10880.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.892s
user	49m56.084s
sys	0m6.343s
