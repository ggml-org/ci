+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.608 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.305 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.314 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.321 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.334 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.338 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.338 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.339 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.340 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.341 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.346 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.347 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.547 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.371 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.379 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.381 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.382 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.386 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.386 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.387 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.390 I llama_model_loader: - type  f32:   37 tensors
0.00.131.391 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.084 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.113 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.600 I llm_load_vocab: special tokens cache size = 5
0.00.265.093 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.108 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.108 I llm_load_print_meta: arch             = gemma
0.00.265.109 I llm_load_print_meta: vocab type       = SPM
0.00.265.109 I llm_load_print_meta: n_vocab          = 256000
0.00.265.110 I llm_load_print_meta: n_merges         = 0
0.00.265.110 I llm_load_print_meta: vocab_only       = 0
0.00.265.110 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.111 I llm_load_print_meta: n_embd           = 2048
0.00.265.111 I llm_load_print_meta: n_layer          = 18
0.00.265.121 I llm_load_print_meta: n_head           = 8
0.00.265.122 I llm_load_print_meta: n_head_kv        = 1
0.00.265.123 I llm_load_print_meta: n_rot            = 256
0.00.265.123 I llm_load_print_meta: n_swa            = 0
0.00.265.123 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.124 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.125 I llm_load_print_meta: n_gqa            = 8
0.00.265.126 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.127 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.128 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.130 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.130 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.131 I llm_load_print_meta: n_ff             = 16384
0.00.265.131 I llm_load_print_meta: n_expert         = 0
0.00.265.132 I llm_load_print_meta: n_expert_used    = 0
0.00.265.132 I llm_load_print_meta: causal attn      = 1
0.00.265.132 I llm_load_print_meta: pooling type     = 0
0.00.265.133 I llm_load_print_meta: rope type        = 2
0.00.265.133 I llm_load_print_meta: rope scaling     = linear
0.00.265.135 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.135 I llm_load_print_meta: freq_scale_train = 1
0.00.265.136 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.136 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.136 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.137 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.138 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.138 I llm_load_print_meta: model type       = 2B
0.00.265.138 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.139 I llm_load_print_meta: model params     = 2.51 B
0.00.265.140 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.140 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.141 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.141 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.142 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.142 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.142 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.143 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.143 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.143 I llm_load_print_meta: max token length = 93
0.00.363.953 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.964 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.964 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.965 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.965 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.966 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.239 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.246 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.247 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.247 I llama_new_context_with_model: n_batch       = 2048
0.00.369.248 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.248 I llama_new_context_with_model: flash_attn    = 0
0.00.369.252 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.253 I llama_new_context_with_model: freq_scale    = 1
0.00.369.254 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.148 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.163 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.509 I llama_new_context_with_model: graph nodes  = 601
0.00.385.510 I llama_new_context_with_model: graph splits = 1
0.00.385.512 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.715 I main: llama threadpool init, n_threads = 4
0.00.470.731 I 
0.00.470.807 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.810 I 
0.00.470.851 I sampler seed: 2805111691
0.00.470.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.866 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.868 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.868 I 
 seconally with the following sentence.

The question is how to resolve the conflict between humans and AI.

It is crucial to address this conflict head-on

0.02.737.856 I llama_perf_sampler_print:    sampling time =       5.79 ms /    33 runs   (    0.18 ms per token,  5700.47 tokens per second)
0.02.737.858 I llama_perf_context_print:        load time =     469.90 ms
0.02.737.859 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.861 I llama_perf_context_print:        eval time =    2247.15 ms /    32 runs   (   70.22 ms per token,    14.24 tokens per second)
0.02.737.861 I llama_perf_context_print:       total time =    2267.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.601 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.800 I main: llama backend init
0.00.000.806 I main: load the model and apply lora adapter, if any
0.00.020.944 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.959 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.973 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.973 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.974 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.976 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.981 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.982 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.745 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.751 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.752 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.752 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.753 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.754 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.758 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.759 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.762 I llama_model_loader: - type  f32:   37 tensors
0.00.130.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.931 I llm_load_vocab: special tokens cache size = 5
0.00.265.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.661 I llm_load_print_meta: arch             = gemma
0.00.265.662 I llm_load_print_meta: vocab type       = SPM
0.00.265.662 I llm_load_print_meta: n_vocab          = 256000
0.00.265.663 I llm_load_print_meta: n_merges         = 0
0.00.265.663 I llm_load_print_meta: vocab_only       = 0
0.00.265.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.664 I llm_load_print_meta: n_embd           = 2048
0.00.265.665 I llm_load_print_meta: n_layer          = 18
0.00.265.678 I llm_load_print_meta: n_head           = 8
0.00.265.678 I llm_load_print_meta: n_head_kv        = 1
0.00.265.679 I llm_load_print_meta: n_rot            = 256
0.00.265.679 I llm_load_print_meta: n_swa            = 0
0.00.265.679 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.680 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.681 I llm_load_print_meta: n_gqa            = 8
0.00.265.682 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.683 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.684 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.685 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.686 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.686 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.687 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.688 I llm_load_print_meta: n_ff             = 16384
0.00.265.689 I llm_load_print_meta: n_expert         = 0
0.00.265.689 I llm_load_print_meta: n_expert_used    = 0
0.00.265.689 I llm_load_print_meta: causal attn      = 1
0.00.265.689 I llm_load_print_meta: pooling type     = 0
0.00.265.690 I llm_load_print_meta: rope type        = 2
0.00.265.690 I llm_load_print_meta: rope scaling     = linear
0.00.265.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.693 I llm_load_print_meta: freq_scale_train = 1
0.00.265.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.694 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.694 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.694 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.694 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.699 I llm_load_print_meta: model type       = 2B
0.00.265.700 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.701 I llm_load_print_meta: model params     = 2.51 B
0.00.265.701 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.702 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.703 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.705 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.705 I llm_load_print_meta: max token length = 93
0.00.364.095 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.256 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.262 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.263 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.263 I llama_new_context_with_model: n_batch       = 2048
0.00.369.264 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.264 I llama_new_context_with_model: flash_attn    = 0
0.00.369.267 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.268 I llama_new_context_with_model: freq_scale    = 1
0.00.369.269 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.840 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.855 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.208 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.214 I llama_new_context_with_model: graph nodes  = 601
0.00.386.214 I llama_new_context_with_model: graph splits = 1
0.00.386.217 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.706 I main: llama threadpool init, n_threads = 4
0.00.470.721 I 
0.00.470.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.798 I 
0.00.470.844 I sampler seed: 2414673689
0.00.470.855 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.859 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.860 I 
 seconary data analysis and visualisation

**Introduction**

Secondary data analysis involves analyzing and interpreting existing data that has already been collected. This type of analysis can be

0.02.658.360 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5902.34 tokens per second)
0.02.658.362 I llama_perf_context_print:        load time =     469.88 ms
0.02.658.363 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.658.365 I llama_perf_context_print:        eval time =    2167.45 ms /    32 runs   (   67.73 ms per token,    14.76 tokens per second)
0.02.658.366 I llama_perf_context_print:       total time =    2187.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.520 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.020.965 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.974 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.997 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.008 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.985 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.945 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.951 I llama_model_loader: - type  f32:   37 tensors
0.00.130.952 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.015 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.596 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.185 I llm_load_vocab: special tokens cache size = 5
0.00.262.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.865 I llm_load_print_meta: arch             = gemma
0.00.262.865 I llm_load_print_meta: vocab type       = SPM
0.00.262.866 I llm_load_print_meta: n_vocab          = 256000
0.00.262.867 I llm_load_print_meta: n_merges         = 0
0.00.262.867 I llm_load_print_meta: vocab_only       = 0
0.00.262.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.868 I llm_load_print_meta: n_embd           = 2048
0.00.262.868 I llm_load_print_meta: n_layer          = 18
0.00.262.880 I llm_load_print_meta: n_head           = 8
0.00.262.881 I llm_load_print_meta: n_head_kv        = 1
0.00.262.881 I llm_load_print_meta: n_rot            = 256
0.00.262.882 I llm_load_print_meta: n_swa            = 0
0.00.262.882 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.882 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.883 I llm_load_print_meta: n_gqa            = 8
0.00.262.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.885 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.886 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.887 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.888 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.888 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.888 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.889 I llm_load_print_meta: n_ff             = 16384
0.00.262.889 I llm_load_print_meta: n_expert         = 0
0.00.262.890 I llm_load_print_meta: n_expert_used    = 0
0.00.262.890 I llm_load_print_meta: causal attn      = 1
0.00.262.890 I llm_load_print_meta: pooling type     = 0
0.00.262.891 I llm_load_print_meta: rope type        = 2
0.00.262.891 I llm_load_print_meta: rope scaling     = linear
0.00.262.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.893 I llm_load_print_meta: freq_scale_train = 1
0.00.262.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.894 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.895 I llm_load_print_meta: model type       = 2B
0.00.262.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.896 I llm_load_print_meta: model params     = 2.51 B
0.00.262.897 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.900 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.900 I llm_load_print_meta: max token length = 93
0.00.340.249 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.256 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.257 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.257 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.258 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.259 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.845 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.854 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.854 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.855 I llama_new_context_with_model: n_batch       = 2048
0.00.345.855 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.856 I llama_new_context_with_model: flash_attn    = 0
0.00.345.859 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.860 I llama_new_context_with_model: freq_scale    = 1
0.00.345.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.093 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.217 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.550 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.557 I llama_new_context_with_model: graph nodes  = 601
0.00.362.557 I llama_new_context_with_model: graph splits = 1
0.00.362.559 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.467 I main: llama threadpool init, n_threads = 4
0.00.453.483 I 
0.00.453.572 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.577 I 
0.00.453.629 I sampler seed: 1309494105
0.00.453.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.647 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.648 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.648 I 
 increasities, the rhythmic pulse of the universe echoing through its vastness.

This is the world of Pulsars, where the laws of physics bend and warp

0.02.707.693 I llama_perf_sampler_print:    sampling time =       5.51 ms /    33 runs   (    0.17 ms per token,  5993.46 tokens per second)
0.02.707.695 I llama_perf_context_print:        load time =     452.68 ms
0.02.707.696 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.707.697 I llama_perf_context_print:        eval time =    2234.87 ms /    32 runs   (   69.84 ms per token,    14.32 tokens per second)
0.02.707.698 I llama_perf_context_print:       total time =    2254.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.591 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.000.798 I main: load the model and apply lora adapter, if any
0.00.021.000 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.012 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.027 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.028 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.034 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.035 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.036 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.036 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.037 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.041 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.042 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.043 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.043 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.628 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.503 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.512 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.513 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.514 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.516 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.517 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.522 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.523 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.524 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.525 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.530 I llama_model_loader: - type  f32:   37 tensors
0.00.132.533 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.924 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.022 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.667 I llm_load_vocab: special tokens cache size = 5
0.00.275.515 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.537 I llm_load_print_meta: arch             = gemma
0.00.275.538 I llm_load_print_meta: vocab type       = SPM
0.00.275.538 I llm_load_print_meta: n_vocab          = 256000
0.00.275.539 I llm_load_print_meta: n_merges         = 0
0.00.275.539 I llm_load_print_meta: vocab_only       = 0
0.00.275.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.540 I llm_load_print_meta: n_embd           = 2048
0.00.275.540 I llm_load_print_meta: n_layer          = 18
0.00.275.551 I llm_load_print_meta: n_head           = 8
0.00.275.552 I llm_load_print_meta: n_head_kv        = 1
0.00.275.552 I llm_load_print_meta: n_rot            = 256
0.00.275.553 I llm_load_print_meta: n_swa            = 0
0.00.275.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.555 I llm_load_print_meta: n_gqa            = 8
0.00.275.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.560 I llm_load_print_meta: n_ff             = 16384
0.00.275.561 I llm_load_print_meta: n_expert         = 0
0.00.275.561 I llm_load_print_meta: n_expert_used    = 0
0.00.275.561 I llm_load_print_meta: causal attn      = 1
0.00.275.562 I llm_load_print_meta: pooling type     = 0
0.00.275.562 I llm_load_print_meta: rope type        = 2
0.00.275.562 I llm_load_print_meta: rope scaling     = linear
0.00.275.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.564 I llm_load_print_meta: freq_scale_train = 1
0.00.275.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.565 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.566 I llm_load_print_meta: model type       = 2B
0.00.275.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.568 I llm_load_print_meta: model params     = 2.51 B
0.00.275.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.569 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.570 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.571 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.571 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.571 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.572 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.572 I llm_load_print_meta: max token length = 93
0.00.347.978 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.988 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.164 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.171 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.171 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.172 I llama_new_context_with_model: n_batch       = 2048
0.00.353.172 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.173 I llama_new_context_with_model: flash_attn    = 0
0.00.353.175 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.176 I llama_new_context_with_model: freq_scale    = 1
0.00.353.177 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.510 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.946 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.953 I llama_new_context_with_model: graph nodes  = 601
0.00.369.953 I llama_new_context_with_model: graph splits = 1
0.00.369.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.020 I main: llama threadpool init, n_threads = 4
0.00.460.037 I 
0.00.460.111 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.114 I 
0.00.460.161 I sampler seed: 230747052
0.00.460.172 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.175 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.178 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.178 I 
 increasities to the extent of her abilities. [end of text]


0.01.225.709 I llama_perf_sampler_print:    sampling time =       1.89 ms /    11 runs   (    0.17 ms per token,  5826.27 tokens per second)
0.01.225.712 I llama_perf_context_print:        load time =     459.21 ms
0.01.225.714 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.225.716 I llama_perf_context_print:        eval time =     757.78 ms /    10 runs   (   75.78 ms per token,    13.20 tokens per second)
0.01.225.717 I llama_perf_context_print:       total time =     765.70 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.894s
user	0m32.735s
sys	0m9.481s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4287 (a6648b9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.49 ms
main:    total time = 40222.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.668 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.678 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.687 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.699 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.700 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.700 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.701 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.701 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.702 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.706 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.707 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.708 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.708 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.264 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.468 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.474 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.475 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.475 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.477 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.481 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.482 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.483 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.487 I llama_model_loader: - type  f32:   37 tensors
0.00.131.488 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.489 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.564 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.241 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.861 I llm_load_vocab: special tokens cache size = 5
0.00.268.663 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.683 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.684 I llm_load_print_meta: arch             = gemma
0.00.268.685 I llm_load_print_meta: vocab type       = SPM
0.00.268.686 I llm_load_print_meta: n_vocab          = 256000
0.00.268.686 I llm_load_print_meta: n_merges         = 0
0.00.268.686 I llm_load_print_meta: vocab_only       = 0
0.00.268.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.687 I llm_load_print_meta: n_embd           = 2048
0.00.268.687 I llm_load_print_meta: n_layer          = 18
0.00.268.699 I llm_load_print_meta: n_head           = 8
0.00.268.700 I llm_load_print_meta: n_head_kv        = 1
0.00.268.700 I llm_load_print_meta: n_rot            = 256
0.00.268.701 I llm_load_print_meta: n_swa            = 0
0.00.268.701 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.701 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.702 I llm_load_print_meta: n_gqa            = 8
0.00.268.703 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.704 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.705 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.707 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.707 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.707 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.707 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.708 I llm_load_print_meta: n_ff             = 16384
0.00.268.709 I llm_load_print_meta: n_expert         = 0
0.00.268.709 I llm_load_print_meta: n_expert_used    = 0
0.00.268.709 I llm_load_print_meta: causal attn      = 1
0.00.268.709 I llm_load_print_meta: pooling type     = 0
0.00.268.710 I llm_load_print_meta: rope type        = 2
0.00.268.710 I llm_load_print_meta: rope scaling     = linear
0.00.268.712 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.712 I llm_load_print_meta: freq_scale_train = 1
0.00.268.712 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.713 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.713 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.714 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.714 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.714 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.714 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.715 I llm_load_print_meta: model type       = 2B
0.00.268.715 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.716 I llm_load_print_meta: model params     = 2.51 B
0.00.268.717 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.717 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.717 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.718 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.718 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.718 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.719 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.719 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.720 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.720 I llm_load_print_meta: max token length = 93
0.00.330.102 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.110 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.111 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.112 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.112 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.113 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.390 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.396 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.397 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.397 I llama_new_context_with_model: n_batch       = 2048
0.00.335.398 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.398 I llama_new_context_with_model: flash_attn    = 0
0.00.335.401 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.402 I llama_new_context_with_model: freq_scale    = 1
0.00.335.402 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.830 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.845 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.237 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.242 I llama_new_context_with_model: graph nodes  = 601
0.00.351.242 I llama_new_context_with_model: graph splits = 1
0.00.351.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.587 I main: llama threadpool init, n_threads = 4
0.00.426.603 I 
0.00.426.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.681 I 
0.00.426.722 I sampler seed: 4118842021
0.00.426.733 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.741 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.743 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.743 I 
 squaRED, a leading provider of software solutions for the construction industry, has implemented a new digital transformation strategy to leverage technology to improve operational efficiency and enhance customer experience

0.02.017.142 I llama_perf_sampler_print:    sampling time =       5.86 ms /    33 runs   (    0.18 ms per token,  5629.48 tokens per second)
0.02.017.144 I llama_perf_context_print:        load time =     425.84 ms
0.02.017.145 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.147 I llama_perf_context_print:        eval time =    1570.93 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.017.148 I llama_perf_context_print:       total time =    1590.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4287 (a6648b9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40192.47 ms
main:    total time = 40192.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.170 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.353 I main: llama backend init
0.00.000.359 I main: load the model and apply lora adapter, if any
0.00.020.506 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.521 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.530 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.538 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.539 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.540 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.541 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.541 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.544 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.546 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.964 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.635 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.645 I llama_model_loader: - type  f32:   37 tensors
0.00.129.646 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.646 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.865 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.878 I llm_load_vocab: special tokens cache size = 5
0.00.263.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.432 I llm_load_print_meta: arch             = gemma
0.00.263.433 I llm_load_print_meta: vocab type       = SPM
0.00.263.433 I llm_load_print_meta: n_vocab          = 256000
0.00.263.434 I llm_load_print_meta: n_merges         = 0
0.00.263.434 I llm_load_print_meta: vocab_only       = 0
0.00.263.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.435 I llm_load_print_meta: n_embd           = 2048
0.00.263.435 I llm_load_print_meta: n_layer          = 18
0.00.263.446 I llm_load_print_meta: n_head           = 8
0.00.263.447 I llm_load_print_meta: n_head_kv        = 1
0.00.263.447 I llm_load_print_meta: n_rot            = 256
0.00.263.447 I llm_load_print_meta: n_swa            = 0
0.00.263.448 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.448 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.449 I llm_load_print_meta: n_gqa            = 8
0.00.263.450 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.451 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.452 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.454 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.454 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.454 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.455 I llm_load_print_meta: n_ff             = 16384
0.00.263.463 I llm_load_print_meta: n_expert         = 0
0.00.263.463 I llm_load_print_meta: n_expert_used    = 0
0.00.263.463 I llm_load_print_meta: causal attn      = 1
0.00.263.464 I llm_load_print_meta: pooling type     = 0
0.00.263.464 I llm_load_print_meta: rope type        = 2
0.00.263.464 I llm_load_print_meta: rope scaling     = linear
0.00.263.466 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.466 I llm_load_print_meta: freq_scale_train = 1
0.00.263.467 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.468 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.468 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.468 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.468 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.469 I llm_load_print_meta: model type       = 2B
0.00.263.470 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.471 I llm_load_print_meta: model params     = 2.51 B
0.00.263.471 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.472 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.472 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.472 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.473 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.475 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.475 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.475 I llm_load_print_meta: max token length = 93
0.00.321.696 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.807 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.813 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.814 I llama_new_context_with_model: n_batch       = 2048
0.00.326.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.815 I llama_new_context_with_model: flash_attn    = 0
0.00.326.817 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.818 I llama_new_context_with_model: freq_scale    = 1
0.00.326.819 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.159 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.174 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.267 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.557 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.561 I llama_new_context_with_model: graph nodes  = 601
0.00.343.562 I llama_new_context_with_model: graph splits = 1
0.00.343.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.685 I main: llama threadpool init, n_threads = 4
0.00.418.701 I 
0.00.418.777 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.781 I 
0.00.418.826 I sampler seed: 1791439932
0.00.418.839 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.843 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.844 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.845 I 
 seconded arms. The arms swung from a point high in the sky, nearly touching the clouds. 

What is the symbolism of the arms swinging from a

0.01.989.308 I llama_perf_sampler_print:    sampling time =       6.00 ms /    33 runs   (    0.18 ms per token,  5504.59 tokens per second)
0.01.989.311 I llama_perf_context_print:        load time =     418.31 ms
0.01.989.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.989.313 I llama_perf_context_print:        eval time =    1550.24 ms /    32 runs   (   48.45 ms per token,    20.64 tokens per second)
0.01.989.314 I llama_perf_context_print:       total time =    1570.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.269s
user	10m23.926s
sys	0m6.999s
