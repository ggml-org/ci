+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.393 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.400 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.485 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.496 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.503 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.508 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.509 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.510 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.512 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.514 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.523 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.526 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.528 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.529 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.531 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.256 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.208 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.230 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.233 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.234 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.236 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.245 I llama_model_loader: - type  f32:   37 tensors
0.00.358.247 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.161 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.687 I llm_load_vocab: special tokens cache size = 5
0.00.836.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.992 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.993 I llm_load_print_meta: arch             = gemma
0.00.836.994 I llm_load_print_meta: vocab type       = SPM
0.00.836.995 I llm_load_print_meta: n_vocab          = 256000
0.00.836.997 I llm_load_print_meta: n_merges         = 0
0.00.836.998 I llm_load_print_meta: vocab_only       = 0
0.00.836.998 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.999 I llm_load_print_meta: n_embd           = 2048
0.00.836.999 I llm_load_print_meta: n_layer          = 18
0.00.837.065 I llm_load_print_meta: n_head           = 8
0.00.837.071 I llm_load_print_meta: n_head_kv        = 1
0.00.837.072 I llm_load_print_meta: n_rot            = 256
0.00.837.073 I llm_load_print_meta: n_swa            = 0
0.00.837.074 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.075 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.079 I llm_load_print_meta: n_gqa            = 8
0.00.837.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.090 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.103 I llm_load_print_meta: n_ff             = 16384
0.00.837.104 I llm_load_print_meta: n_expert         = 0
0.00.837.104 I llm_load_print_meta: n_expert_used    = 0
0.00.837.105 I llm_load_print_meta: causal attn      = 1
0.00.837.105 I llm_load_print_meta: pooling type     = 0
0.00.837.106 I llm_load_print_meta: rope type        = 2
0.00.837.106 I llm_load_print_meta: rope scaling     = linear
0.00.837.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.109 I llm_load_print_meta: freq_scale_train = 1
0.00.837.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.112 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.113 I llm_load_print_meta: model type       = 2B
0.00.837.114 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.115 I llm_load_print_meta: model params     = 2.51 B
0.00.837.116 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.116 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.118 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.118 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.119 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.119 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.120 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.121 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.128 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.128 I llm_load_print_meta: max token length = 93
0.00.939.230 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.939.242 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.939.243 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.939.244 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.939.245 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.939.246 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.945.183 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.190 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.191 I llama_new_context_with_model: n_batch       = 2048
0.00.945.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.192 I llama_new_context_with_model: flash_attn    = 0
0.00.945.194 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.195 I llama_new_context_with_model: freq_scale    = 1
0.00.945.195 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.960.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.960.871 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.547 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.551 I llama_new_context_with_model: graph nodes  = 601
0.00.963.552 I llama_new_context_with_model: graph splits = 1
0.00.963.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.015 I main: llama threadpool init, n_threads = 4
0.01.573.031 I 
0.01.573.150 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.573.153 I 
0.01.573.393 I sampler seed: 2530980125
0.01.573.408 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.421 I 
 increasities

I am unable to generate a response that includes sexually suggestive or explicit content. My purpose is to assist users with tasks and provide information to the best

0.15.164.001 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.84 tokens per second)
0.15.164.004 I llama_perf_context_print:        load time =    1572.08 ms
0.15.164.005 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.164.007 I llama_perf_context_print:        eval time =   13502.27 ms /    32 runs   (  421.95 ms per token,     2.37 tokens per second)
0.15.164.022 I llama_perf_context_print:       total time =   13590.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.029 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.160 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.173 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.175 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.178 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.180 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.182 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.199 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.201 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.203 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.218 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.729 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.708 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.709 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.710 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.711 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.716 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.717 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.718 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.719 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.721 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.731 I llama_model_loader: - type  f32:   37 tensors
0.00.350.733 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.251 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.993 I llm_load_vocab: special tokens cache size = 5
0.00.820.474 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.551 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.552 I llm_load_print_meta: arch             = gemma
0.00.820.553 I llm_load_print_meta: vocab type       = SPM
0.00.820.554 I llm_load_print_meta: n_vocab          = 256000
0.00.820.556 I llm_load_print_meta: n_merges         = 0
0.00.820.556 I llm_load_print_meta: vocab_only       = 0
0.00.820.557 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.557 I llm_load_print_meta: n_embd           = 2048
0.00.820.558 I llm_load_print_meta: n_layer          = 18
0.00.820.626 I llm_load_print_meta: n_head           = 8
0.00.820.636 I llm_load_print_meta: n_head_kv        = 1
0.00.820.638 I llm_load_print_meta: n_rot            = 256
0.00.820.638 I llm_load_print_meta: n_swa            = 0
0.00.820.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.651 I llm_load_print_meta: n_gqa            = 8
0.00.820.658 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.672 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.673 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.674 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.675 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.683 I llm_load_print_meta: n_ff             = 16384
0.00.820.685 I llm_load_print_meta: n_expert         = 0
0.00.820.685 I llm_load_print_meta: n_expert_used    = 0
0.00.820.687 I llm_load_print_meta: causal attn      = 1
0.00.820.688 I llm_load_print_meta: pooling type     = 0
0.00.820.691 I llm_load_print_meta: rope type        = 2
0.00.820.692 I llm_load_print_meta: rope scaling     = linear
0.00.820.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.695 I llm_load_print_meta: freq_scale_train = 1
0.00.820.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.696 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.700 I llm_load_print_meta: model type       = 2B
0.00.820.707 I llm_load_print_meta: model ftype      = Q8_0
0.00.820.709 I llm_load_print_meta: model params     = 2.51 B
0.00.820.711 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.820.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.713 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.714 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.718 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.719 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.726 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.728 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.731 I llm_load_print_meta: max token length = 93
0.00.916.251 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.922.546 I llama_new_context_with_model: n_seq_max     = 1
0.00.922.554 I llama_new_context_with_model: n_ctx         = 4096
0.00.922.554 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.922.554 I llama_new_context_with_model: n_batch       = 2048
0.00.922.555 I llama_new_context_with_model: n_ubatch      = 512
0.00.922.555 I llama_new_context_with_model: flash_attn    = 0
0.00.922.558 I llama_new_context_with_model: freq_base     = 10000.0
0.00.922.558 I llama_new_context_with_model: freq_scale    = 1
0.00.922.559 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.937.894 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.937.942 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.067 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.940.731 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.940.735 I llama_new_context_with_model: graph nodes  = 601
0.00.940.735 I llama_new_context_with_model: graph splits = 1
0.00.940.760 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.547.764 I main: llama threadpool init, n_threads = 4
0.01.547.781 I 
0.01.547.919 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.547.923 I 
0.01.548.175 I sampler seed: 915964331
0.01.548.189 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.201 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.201 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.202 I 
 increably. [end of text]


0.03.251.215 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.26 tokens per second)
0.03.251.218 I llama_perf_context_print:        load time =    1546.78 ms
0.03.251.220 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.251.221 I llama_perf_context_print:        eval time =    1690.73 ms /     4 runs   (  422.68 ms per token,     2.37 tokens per second)
0.03.251.236 I llama_perf_context_print:       total time =    1703.46 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.146 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.263 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.264 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.277 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.278 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.282 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.283 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.856 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.900 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.913 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.914 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.917 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.918 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.925 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.927 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.928 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.938 I llama_model_loader: - type  f32:   37 tensors
0.00.351.941 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.172 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.872 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.825 I llm_load_vocab: special tokens cache size = 5
0.00.838.337 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.414 I llm_load_print_meta: arch             = gemma
0.00.838.415 I llm_load_print_meta: vocab type       = SPM
0.00.838.416 I llm_load_print_meta: n_vocab          = 256000
0.00.838.419 I llm_load_print_meta: n_merges         = 0
0.00.838.419 I llm_load_print_meta: vocab_only       = 0
0.00.838.420 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.421 I llm_load_print_meta: n_embd           = 2048
0.00.838.422 I llm_load_print_meta: n_layer          = 18
0.00.838.487 I llm_load_print_meta: n_head           = 8
0.00.838.497 I llm_load_print_meta: n_head_kv        = 1
0.00.838.498 I llm_load_print_meta: n_rot            = 256
0.00.838.498 I llm_load_print_meta: n_swa            = 0
0.00.838.498 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.499 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.503 I llm_load_print_meta: n_gqa            = 8
0.00.838.508 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.515 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.517 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.517 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.517 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.518 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.522 I llm_load_print_meta: n_ff             = 16384
0.00.838.524 I llm_load_print_meta: n_expert         = 0
0.00.838.524 I llm_load_print_meta: n_expert_used    = 0
0.00.838.525 I llm_load_print_meta: causal attn      = 1
0.00.838.525 I llm_load_print_meta: pooling type     = 0
0.00.838.525 I llm_load_print_meta: rope type        = 2
0.00.838.535 I llm_load_print_meta: rope scaling     = linear
0.00.838.536 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.537 I llm_load_print_meta: freq_scale_train = 1
0.00.838.538 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.538 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.539 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.541 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.542 I llm_load_print_meta: model type       = 2B
0.00.838.543 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.544 I llm_load_print_meta: model params     = 2.51 B
0.00.838.545 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.546 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.547 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.547 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.548 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.548 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.548 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.554 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.555 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.556 I llm_load_print_meta: max token length = 93
0.00.917.671 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.917.681 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.683 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.917.683 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.917.684 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.685 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.923.463 I llama_new_context_with_model: n_seq_max     = 1
0.00.923.470 I llama_new_context_with_model: n_ctx         = 4096
0.00.923.471 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.923.471 I llama_new_context_with_model: n_batch       = 2048
0.00.923.472 I llama_new_context_with_model: n_ubatch      = 512
0.00.923.472 I llama_new_context_with_model: flash_attn    = 0
0.00.923.475 I llama_new_context_with_model: freq_base     = 10000.0
0.00.923.476 I llama_new_context_with_model: freq_scale    = 1
0.00.923.477 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.994 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.939.034 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.154 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.946 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.950 I llama_new_context_with_model: graph nodes  = 601
0.00.941.951 I llama_new_context_with_model: graph splits = 1
0.00.941.972 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.552.669 I main: llama threadpool init, n_threads = 4
0.01.552.686 I 
0.01.552.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.552.809 I 
0.01.553.050 I sampler seed: 3262143833
0.01.553.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.553.075 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.553.076 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.553.077 I 
 increasels to an audience.

The trolls chuckled, whispering amongst themselves. "He's going to destroy us all."

As the troll king roared,

0.15.292.912 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.64 tokens per second)
0.15.292.915 I llama_perf_context_print:        load time =    1551.73 ms
0.15.292.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.292.941 I llama_perf_context_print:        eval time =   13651.21 ms /    32 runs   (  426.60 ms per token,     2.34 tokens per second)
0.15.292.943 I llama_perf_context_print:       total time =   13740.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.311 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.322 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.410 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.425 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.436 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.438 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.448 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.465 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.126 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.271 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.239 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.247 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.255 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.259 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.260 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.261 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.263 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.264 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.273 I llama_model_loader: - type  f32:   37 tensors
0.00.354.275 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.069 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.797 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.711 I llm_load_vocab: special tokens cache size = 5
0.00.837.450 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.519 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.520 I llm_load_print_meta: arch             = gemma
0.00.837.521 I llm_load_print_meta: vocab type       = SPM
0.00.837.521 I llm_load_print_meta: n_vocab          = 256000
0.00.837.524 I llm_load_print_meta: n_merges         = 0
0.00.837.524 I llm_load_print_meta: vocab_only       = 0
0.00.837.525 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.525 I llm_load_print_meta: n_embd           = 2048
0.00.837.526 I llm_load_print_meta: n_layer          = 18
0.00.837.591 I llm_load_print_meta: n_head           = 8
0.00.837.598 I llm_load_print_meta: n_head_kv        = 1
0.00.837.599 I llm_load_print_meta: n_rot            = 256
0.00.837.599 I llm_load_print_meta: n_swa            = 0
0.00.837.600 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.606 I llm_load_print_meta: n_gqa            = 8
0.00.837.611 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.616 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.617 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.619 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.620 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.625 I llm_load_print_meta: n_ff             = 16384
0.00.837.626 I llm_load_print_meta: n_expert         = 0
0.00.837.626 I llm_load_print_meta: n_expert_used    = 0
0.00.837.627 I llm_load_print_meta: causal attn      = 1
0.00.837.627 I llm_load_print_meta: pooling type     = 0
0.00.837.627 I llm_load_print_meta: rope type        = 2
0.00.837.631 I llm_load_print_meta: rope scaling     = linear
0.00.837.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.644 I llm_load_print_meta: freq_scale_train = 1
0.00.837.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.657 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.658 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.667 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.667 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.668 I llm_load_print_meta: model type       = 2B
0.00.837.669 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.670 I llm_load_print_meta: model params     = 2.51 B
0.00.837.671 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.673 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.674 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.687 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.691 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.692 I llm_load_print_meta: max token length = 93
0.00.910.471 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.910.482 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.916.286 I llama_new_context_with_model: n_seq_max     = 1
0.00.916.293 I llama_new_context_with_model: n_ctx         = 4096
0.00.916.294 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.916.294 I llama_new_context_with_model: n_batch       = 2048
0.00.916.295 I llama_new_context_with_model: n_ubatch      = 512
0.00.916.295 I llama_new_context_with_model: flash_attn    = 0
0.00.916.297 I llama_new_context_with_model: freq_base     = 10000.0
0.00.916.298 I llama_new_context_with_model: freq_scale    = 1
0.00.916.299 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.982 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.024 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.931.141 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.933.713 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.933.717 I llama_new_context_with_model: graph nodes  = 601
0.00.933.718 I llama_new_context_with_model: graph splits = 1
0.00.933.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.542.184 I main: llama threadpool init, n_threads = 4
0.01.542.200 I 
0.01.542.320 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.542.324 I 
0.01.542.561 I sampler seed: 1802227911
0.01.542.575 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.542.586 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.542.589 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.542.589 I 
 increasities. [end of text]


0.03.242.082 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   805.15 tokens per second)
0.03.242.085 I llama_perf_context_print:        load time =    1541.24 ms
0.03.242.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.242.101 I llama_perf_context_print:        eval time =    1687.03 ms /     4 runs   (  421.76 ms per token,     2.37 tokens per second)
0.03.242.103 I llama_perf_context_print:       total time =    1699.91 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.506s
user	2m16.464s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4287 (a6648b9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186024.64 ms
main:    total time = 186024.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.023.449 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.460 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.553 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.564 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.571 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.575 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.577 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.578 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.590 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.593 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.594 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.272 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.888 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.874 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.876 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.885 I llama_model_loader: - type  f32:   37 tensors
0.00.348.897 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.899 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.999 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.098 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.969 I llm_load_vocab: special tokens cache size = 5
0.00.845.592 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.666 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.667 I llm_load_print_meta: arch             = gemma
0.00.845.668 I llm_load_print_meta: vocab type       = SPM
0.00.845.668 I llm_load_print_meta: n_vocab          = 256000
0.00.845.671 I llm_load_print_meta: n_merges         = 0
0.00.845.671 I llm_load_print_meta: vocab_only       = 0
0.00.845.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.672 I llm_load_print_meta: n_embd           = 2048
0.00.845.672 I llm_load_print_meta: n_layer          = 18
0.00.845.738 I llm_load_print_meta: n_head           = 8
0.00.845.745 I llm_load_print_meta: n_head_kv        = 1
0.00.845.745 I llm_load_print_meta: n_rot            = 256
0.00.845.746 I llm_load_print_meta: n_swa            = 0
0.00.845.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.748 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.753 I llm_load_print_meta: n_gqa            = 8
0.00.845.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.772 I llm_load_print_meta: n_ff             = 16384
0.00.845.773 I llm_load_print_meta: n_expert         = 0
0.00.845.774 I llm_load_print_meta: n_expert_used    = 0
0.00.845.774 I llm_load_print_meta: causal attn      = 1
0.00.845.774 I llm_load_print_meta: pooling type     = 0
0.00.845.783 I llm_load_print_meta: rope type        = 2
0.00.845.784 I llm_load_print_meta: rope scaling     = linear
0.00.845.785 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.786 I llm_load_print_meta: freq_scale_train = 1
0.00.845.787 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.787 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.788 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.788 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.800 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.801 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.802 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.803 I llm_load_print_meta: model type       = 2B
0.00.845.805 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.810 I llm_load_print_meta: model params     = 2.51 B
0.00.845.811 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.812 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.813 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.814 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.821 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.823 I llm_load_print_meta: max token length = 93
0.00.907.335 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.907.349 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.907.350 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.907.350 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.907.351 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.907.352 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.913.345 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.354 I llama_new_context_with_model: n_ctx         = 4096
0.00.913.355 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.913.355 I llama_new_context_with_model: n_batch       = 2048
0.00.913.356 I llama_new_context_with_model: n_ubatch      = 512
0.00.913.356 I llama_new_context_with_model: flash_attn    = 0
0.00.913.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.361 I llama_new_context_with_model: freq_scale    = 1
0.00.913.361 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.293 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.339 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.464 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.176 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.180 I llama_new_context_with_model: graph nodes  = 601
0.00.932.181 I llama_new_context_with_model: graph splits = 1
0.00.932.220 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.513.701 I main: llama threadpool init, n_threads = 4
0.01.513.718 I 
0.01.513.836 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.513.840 I 
0.01.514.080 I sampler seed: 783202335
0.01.514.095 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.514.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.514.106 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.514.106 I 
 squaRE, the AI-powered gaming platform, has revolutionized the way players experience gaming. Let's explore the key features and benefits that make squaRE

0.12.591.922 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.11 tokens per second)
0.12.591.926 I llama_perf_context_print:        load time =    1512.69 ms
0.12.591.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.591.937 I llama_perf_context_print:        eval time =   10989.20 ms /    32 runs   (  343.41 ms per token,     2.91 tokens per second)
0.12.591.940 I llama_perf_context_print:       total time =   11078.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4287 (a6648b9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185920.58 ms
main:    total time = 185920.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4287 (a6648b9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.023.466 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.573 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.591 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.598 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.602 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.603 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.605 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.606 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.607 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.075 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.221 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.134 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.137 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.138 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.140 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.141 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.145 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.156 I llama_model_loader: - type  f32:   37 tensors
0.00.351.159 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.159 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.935 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.565 I llm_load_vocab: special tokens cache size = 5
0.00.834.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.496 I llm_load_print_meta: arch             = gemma
0.00.834.497 I llm_load_print_meta: vocab type       = SPM
0.00.834.498 I llm_load_print_meta: n_vocab          = 256000
0.00.834.500 I llm_load_print_meta: n_merges         = 0
0.00.834.501 I llm_load_print_meta: vocab_only       = 0
0.00.834.501 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.502 I llm_load_print_meta: n_embd           = 2048
0.00.834.502 I llm_load_print_meta: n_layer          = 18
0.00.834.568 I llm_load_print_meta: n_head           = 8
0.00.834.575 I llm_load_print_meta: n_head_kv        = 1
0.00.834.576 I llm_load_print_meta: n_rot            = 256
0.00.834.576 I llm_load_print_meta: n_swa            = 0
0.00.834.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.582 I llm_load_print_meta: n_gqa            = 8
0.00.834.587 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.592 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.593 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.595 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.595 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.596 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.601 I llm_load_print_meta: n_ff             = 16384
0.00.834.601 I llm_load_print_meta: n_expert         = 0
0.00.834.602 I llm_load_print_meta: n_expert_used    = 0
0.00.834.602 I llm_load_print_meta: causal attn      = 1
0.00.834.602 I llm_load_print_meta: pooling type     = 0
0.00.834.603 I llm_load_print_meta: rope type        = 2
0.00.834.603 I llm_load_print_meta: rope scaling     = linear
0.00.834.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.605 I llm_load_print_meta: freq_scale_train = 1
0.00.834.606 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.606 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.606 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.607 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.607 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.607 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.608 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.608 I llm_load_print_meta: model type       = 2B
0.00.834.609 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.610 I llm_load_print_meta: model params     = 2.51 B
0.00.834.611 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.611 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.612 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.612 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.612 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.613 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.613 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.621 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.622 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.622 I llm_load_print_meta: max token length = 93
0.00.894.584 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.900.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.900.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.900.475 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.900.475 I llama_new_context_with_model: n_batch       = 2048
0.00.900.475 I llama_new_context_with_model: n_ubatch      = 512
0.00.900.476 I llama_new_context_with_model: flash_attn    = 0
0.00.900.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.900.479 I llama_new_context_with_model: freq_scale    = 1
0.00.900.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.394 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.915.437 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.915.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.098 I llama_new_context_with_model: graph nodes  = 601
0.00.918.098 I llama_new_context_with_model: graph splits = 1
0.00.918.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.457 I main: llama threadpool init, n_threads = 4
0.01.501.474 I 
0.01.501.597 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.601 I 
0.01.501.842 I sampler seed: 1712833520
0.01.501.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.867 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.870 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.870 I 
 maneuvously. The sentence is grammatically incorrect.

**Correct Sentence:**

"The house was built by a skilled carpenter with a reputation for exquisite craftsmanship

0.12.605.741 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.87 tokens per second)
0.12.605.744 I llama_perf_context_print:        load time =    1500.48 ms
0.12.605.745 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.605.746 I llama_perf_context_print:        eval time =   11015.66 ms /    32 runs   (  344.24 ms per token,     2.90 tokens per second)
0.12.605.771 I llama_perf_context_print:       total time =   11104.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.002s
user	46m44.115s
sys	0m6.194s
