+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.685 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.241 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.441 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.536 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.548 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.550 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.554 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.555 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.556 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.557 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.558 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.558 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.566 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.570 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.571 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.572 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.572 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.567 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.196 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.551 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.563 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.564 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.569 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.570 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.571 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.572 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.581 I llama_model_loader: - type  f32:   37 tensors
0.00.198.585 I llama_model_loader: - type q8_0:  127 tensors
0.00.502.187 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.210 I llm_load_vocab: special tokens cache size = 5
0.00.561.370 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.433 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.434 I llm_load_print_meta: arch             = gemma
0.00.561.434 I llm_load_print_meta: vocab type       = SPM
0.00.561.436 I llm_load_print_meta: n_vocab          = 256000
0.00.561.438 I llm_load_print_meta: n_merges         = 0
0.00.561.439 I llm_load_print_meta: vocab_only       = 0
0.00.561.439 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.440 I llm_load_print_meta: n_embd           = 2048
0.00.561.440 I llm_load_print_meta: n_layer          = 18
0.00.561.474 I llm_load_print_meta: n_head           = 8
0.00.561.481 I llm_load_print_meta: n_head_kv        = 1
0.00.561.482 I llm_load_print_meta: n_rot            = 256
0.00.561.482 I llm_load_print_meta: n_swa            = 0
0.00.561.483 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.483 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.488 I llm_load_print_meta: n_gqa            = 8
0.00.561.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.499 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.506 I llm_load_print_meta: n_ff             = 16384
0.00.561.506 I llm_load_print_meta: n_expert         = 0
0.00.561.507 I llm_load_print_meta: n_expert_used    = 0
0.00.561.507 I llm_load_print_meta: causal attn      = 1
0.00.561.507 I llm_load_print_meta: pooling type     = 0
0.00.561.508 I llm_load_print_meta: rope type        = 2
0.00.561.508 I llm_load_print_meta: rope scaling     = linear
0.00.561.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.511 I llm_load_print_meta: freq_scale_train = 1
0.00.561.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.531 I llm_load_print_meta: model type       = 2B
0.00.561.531 I llm_load_print_meta: model ftype      = Q8_0
0.00.561.532 I llm_load_print_meta: model params     = 2.51 B
0.00.561.533 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.561.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.535 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.537 I llm_load_print_meta: max token length = 93
0.00.561.708 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.366 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.659.379 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.659.380 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.659.381 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.659.381 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.659.382 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.665.229 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.236 I llama_new_context_with_model: n_batch    = 2048
0.00.665.236 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.237 I llama_new_context_with_model: flash_attn = 0
0.00.665.242 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.242 I llama_new_context_with_model: freq_scale = 1
0.00.695.989 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.032 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.152 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.620 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.626 I llama_new_context_with_model: graph nodes  = 601
0.00.697.627 I llama_new_context_with_model: graph splits = 1
0.00.697.643 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.329 I main: llama threadpool init, n_threads = 4
0.01.314.340 I 
0.01.314.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.439 I 
0.01.314.600 I sampler seed: 2936633508
0.01.314.607 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.612 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.613 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

I'm not sure if I should use "then" or "next" in this context.

**Then** we will move on

0.14.912.833 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.28 tokens per second)
0.14.912.836 I llama_perf_context_print:        load time =    1311.40 ms
0.14.912.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.912.838 I llama_perf_context_print:        eval time =   13515.98 ms /    32 runs   (  422.37 ms per token,     2.37 tokens per second)
0.14.912.839 I llama_perf_context_print:       total time =   13598.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.659 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.025.503 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.606 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.623 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.627 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.635 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.636 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.645 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.395 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.902 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.913 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.914 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.920 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.921 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.923 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.198.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.950 I llama_model_loader: - type  f32:   37 tensors
0.00.198.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.504.124 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.152 I llm_load_vocab: special tokens cache size = 5
0.00.563.339 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.402 I llm_load_print_meta: arch             = gemma
0.00.563.403 I llm_load_print_meta: vocab type       = SPM
0.00.563.404 I llm_load_print_meta: n_vocab          = 256000
0.00.563.406 I llm_load_print_meta: n_merges         = 0
0.00.563.407 I llm_load_print_meta: vocab_only       = 0
0.00.563.407 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.408 I llm_load_print_meta: n_embd           = 2048
0.00.563.408 I llm_load_print_meta: n_layer          = 18
0.00.563.445 I llm_load_print_meta: n_head           = 8
0.00.563.452 I llm_load_print_meta: n_head_kv        = 1
0.00.563.452 I llm_load_print_meta: n_rot            = 256
0.00.563.453 I llm_load_print_meta: n_swa            = 0
0.00.563.453 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.453 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.458 I llm_load_print_meta: n_gqa            = 8
0.00.563.463 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.469 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.470 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.470 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.471 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.476 I llm_load_print_meta: n_ff             = 16384
0.00.563.476 I llm_load_print_meta: n_expert         = 0
0.00.563.477 I llm_load_print_meta: n_expert_used    = 0
0.00.563.477 I llm_load_print_meta: causal attn      = 1
0.00.563.477 I llm_load_print_meta: pooling type     = 0
0.00.563.478 I llm_load_print_meta: rope type        = 2
0.00.563.478 I llm_load_print_meta: rope scaling     = linear
0.00.563.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.480 I llm_load_print_meta: freq_scale_train = 1
0.00.563.480 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.483 I llm_load_print_meta: model type       = 2B
0.00.563.484 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.485 I llm_load_print_meta: model params     = 2.51 B
0.00.563.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.487 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.487 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.488 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.488 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.489 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.489 I llm_load_print_meta: max token length = 93
0.00.563.668 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.216 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.662.939 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.946 I llama_new_context_with_model: n_batch    = 2048
0.00.662.947 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.948 I llama_new_context_with_model: flash_attn = 0
0.00.662.951 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.952 I llama_new_context_with_model: freq_scale = 1
0.00.693.929 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.974 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.091 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.695.478 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.484 I llama_new_context_with_model: graph nodes  = 601
0.00.695.484 I llama_new_context_with_model: graph splits = 1
0.00.695.501 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.696 I main: llama threadpool init, n_threads = 4
0.01.309.710 I 
0.01.309.805 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.808 I 
0.01.309.969 I sampler seed: 383881626
0.01.309.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.985 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.309.986 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and other inappropriate conduct.

I am unable to provide personally identifiable information, including contact information, or high profile demographic data. [end of text]


0.13.153.537 I llama_perf_sampler_print:    sampling time =      43.16 ms /    29 runs   (    1.49 ms per token,   671.97 tokens per second)
0.13.153.540 I llama_perf_context_print:        load time =    1306.79 ms
0.13.153.541 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.153.543 I llama_perf_context_print:        eval time =   11771.03 ms /    28 runs   (  420.39 ms per token,     2.38 tokens per second)
0.13.153.544 I llama_perf_context_print:       total time =   11843.85 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.666 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.125 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.319 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.413 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.437 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.445 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.446 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.447 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.456 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.470 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.472 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.489 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.497 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.643 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.866 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.875 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.876 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.877 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.879 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.880 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.901 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.902 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.911 I llama_model_loader: - type  f32:   37 tensors
0.00.198.915 I llama_model_loader: - type q8_0:  127 tensors
0.00.501.418 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.525 I llm_load_vocab: special tokens cache size = 5
0.00.560.716 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.780 I llm_load_print_meta: arch             = gemma
0.00.560.781 I llm_load_print_meta: vocab type       = SPM
0.00.560.782 I llm_load_print_meta: n_vocab          = 256000
0.00.560.784 I llm_load_print_meta: n_merges         = 0
0.00.560.785 I llm_load_print_meta: vocab_only       = 0
0.00.560.785 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.787 I llm_load_print_meta: n_embd           = 2048
0.00.560.787 I llm_load_print_meta: n_layer          = 18
0.00.560.823 I llm_load_print_meta: n_head           = 8
0.00.560.832 I llm_load_print_meta: n_head_kv        = 1
0.00.560.832 I llm_load_print_meta: n_rot            = 256
0.00.560.832 I llm_load_print_meta: n_swa            = 0
0.00.560.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.838 I llm_load_print_meta: n_gqa            = 8
0.00.560.843 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.849 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.850 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.852 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.852 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.852 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.858 I llm_load_print_meta: n_ff             = 16384
0.00.560.858 I llm_load_print_meta: n_expert         = 0
0.00.560.859 I llm_load_print_meta: n_expert_used    = 0
0.00.560.860 I llm_load_print_meta: causal attn      = 1
0.00.560.860 I llm_load_print_meta: pooling type     = 0
0.00.560.861 I llm_load_print_meta: rope type        = 2
0.00.560.861 I llm_load_print_meta: rope scaling     = linear
0.00.560.863 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.864 I llm_load_print_meta: freq_scale_train = 1
0.00.560.864 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.864 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.864 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.865 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.877 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.878 I llm_load_print_meta: model type       = 2B
0.00.560.880 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.881 I llm_load_print_meta: model params     = 2.51 B
0.00.560.881 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.882 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.885 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.886 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.899 I llm_load_print_meta: max token length = 93
0.00.561.073 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.178 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.637.186 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.637.186 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.637.187 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.637.188 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.637.188 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.642.950 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.959 I llama_new_context_with_model: n_batch    = 2048
0.00.642.959 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.960 I llama_new_context_with_model: flash_attn = 0
0.00.642.964 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.965 I llama_new_context_with_model: freq_scale = 1
0.00.673.429 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.472 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.673.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.015 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.022 I llama_new_context_with_model: graph nodes  = 601
0.00.675.022 I llama_new_context_with_model: graph splits = 1
0.00.675.041 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.846 I main: llama threadpool init, n_threads = 4
0.01.326.859 I 
0.01.326.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.959 I 
0.01.327.122 I sampler seed: 3135068775
0.01.327.133 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.139 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.327.139 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to generate a response as requested as I am unable to access external websites or specific data. [end of text]


0.12.372.601 I llama_perf_sampler_print:    sampling time =      40.04 ms /    27 runs   (    1.48 ms per token,   674.31 tokens per second)
0.12.372.604 I llama_perf_context_print:        load time =    1323.95 ms
0.12.372.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.372.607 I llama_perf_context_print:        eval time =   10977.71 ms /    26 runs   (  422.22 ms per token,     2.37 tokens per second)
0.12.372.608 I llama_perf_context_print:       total time =   11045.77 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.661 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.913 I main: llama backend init
0.00.002.918 I main: load the model and apply lora adapter, if any
0.00.028.279 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.472 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.584 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.598 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.599 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.603 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.605 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.606 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.614 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.635 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.637 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.638 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.640 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.641 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.189.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.202.110 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.202.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.202.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.202.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.202.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.202.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.202.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.202.129 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.202.130 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.202.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.202.132 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.202.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.202.143 I llama_model_loader: - type  f32:   37 tensors
0.00.202.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.503.546 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.678 I llm_load_vocab: special tokens cache size = 5
0.00.562.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.002 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.003 I llm_load_print_meta: arch             = gemma
0.00.563.004 I llm_load_print_meta: vocab type       = SPM
0.00.563.005 I llm_load_print_meta: n_vocab          = 256000
0.00.563.007 I llm_load_print_meta: n_merges         = 0
0.00.563.007 I llm_load_print_meta: vocab_only       = 0
0.00.563.008 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.008 I llm_load_print_meta: n_embd           = 2048
0.00.563.009 I llm_load_print_meta: n_layer          = 18
0.00.563.043 I llm_load_print_meta: n_head           = 8
0.00.563.049 I llm_load_print_meta: n_head_kv        = 1
0.00.563.050 I llm_load_print_meta: n_rot            = 256
0.00.563.050 I llm_load_print_meta: n_swa            = 0
0.00.563.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.056 I llm_load_print_meta: n_gqa            = 8
0.00.563.060 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.064 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.066 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.067 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.068 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.074 I llm_load_print_meta: n_ff             = 16384
0.00.563.074 I llm_load_print_meta: n_expert         = 0
0.00.563.074 I llm_load_print_meta: n_expert_used    = 0
0.00.563.075 I llm_load_print_meta: causal attn      = 1
0.00.563.075 I llm_load_print_meta: pooling type     = 0
0.00.563.075 I llm_load_print_meta: rope type        = 2
0.00.563.076 I llm_load_print_meta: rope scaling     = linear
0.00.563.077 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.078 I llm_load_print_meta: freq_scale_train = 1
0.00.563.078 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.079 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.079 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.079 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.080 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.081 I llm_load_print_meta: model type       = 2B
0.00.563.082 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.083 I llm_load_print_meta: model params     = 2.51 B
0.00.563.084 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.084 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.085 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.085 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.086 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.086 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.087 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.087 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.087 I llm_load_print_meta: max token length = 93
0.00.563.291 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.634.368 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.634.384 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.640.194 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.204 I llama_new_context_with_model: n_batch    = 2048
0.00.640.204 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.205 I llama_new_context_with_model: flash_attn = 0
0.00.640.209 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.210 I llama_new_context_with_model: freq_scale = 1
0.00.671.906 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.951 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.064 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.417 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.423 I llama_new_context_with_model: graph nodes  = 601
0.00.673.423 I llama_new_context_with_model: graph splits = 1
0.00.673.441 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.272 I main: llama threadpool init, n_threads = 4
0.01.287.284 I 
0.01.287.379 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.380 I 
0.01.287.542 I sampler seed: 998845294
0.01.287.553 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.558 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.559 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements in their own right.

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.11.555.133 I llama_perf_sampler_print:    sampling time =      37.03 ms /    25 runs   (    1.48 ms per token,   675.06 tokens per second)
0.11.555.136 I llama_perf_context_print:        load time =    1284.26 ms
0.11.555.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.555.151 I llama_perf_context_print:        eval time =   10205.20 ms /    24 runs   (  425.22 ms per token,     2.35 tokens per second)
0.11.555.152 I llama_perf_context_print:       total time =   10267.87 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.962s
user	3m19.676s
sys	0m9.762s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3795 (d13edb17)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199188.77 ms
main:    total time = 199188.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.678 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.002.874 I main: load the model and apply lora adapter, if any
0.00.025.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.228 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.336 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.337 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.342 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.343 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.344 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.346 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.347 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.357 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.358 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.742 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.993 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.003 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.004 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.005 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.006 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.007 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.008 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.011 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.012 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.014 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.014 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.199.015 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.023 I llama_model_loader: - type  f32:   37 tensors
0.00.199.027 I llama_model_loader: - type q4_K:  108 tensors
0.00.199.028 I llama_model_loader: - type q6_K:   19 tensors
0.00.508.424 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.522 I llm_load_vocab: special tokens cache size = 5
0.00.567.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.732 I llm_load_print_meta: arch             = gemma
0.00.567.733 I llm_load_print_meta: vocab type       = SPM
0.00.567.734 I llm_load_print_meta: n_vocab          = 256000
0.00.567.737 I llm_load_print_meta: n_merges         = 0
0.00.567.737 I llm_load_print_meta: vocab_only       = 0
0.00.567.738 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.738 I llm_load_print_meta: n_embd           = 2048
0.00.567.738 I llm_load_print_meta: n_layer          = 18
0.00.567.774 I llm_load_print_meta: n_head           = 8
0.00.567.783 I llm_load_print_meta: n_head_kv        = 1
0.00.567.784 I llm_load_print_meta: n_rot            = 256
0.00.567.786 I llm_load_print_meta: n_swa            = 0
0.00.567.786 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.786 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.791 I llm_load_print_meta: n_gqa            = 8
0.00.567.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.805 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.807 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.807 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.807 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.808 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.813 I llm_load_print_meta: n_ff             = 16384
0.00.567.813 I llm_load_print_meta: n_expert         = 0
0.00.567.814 I llm_load_print_meta: n_expert_used    = 0
0.00.567.814 I llm_load_print_meta: causal attn      = 1
0.00.567.815 I llm_load_print_meta: pooling type     = 0
0.00.567.815 I llm_load_print_meta: rope type        = 2
0.00.567.815 I llm_load_print_meta: rope scaling     = linear
0.00.567.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.817 I llm_load_print_meta: freq_scale_train = 1
0.00.567.817 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.818 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.820 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.832 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.833 I llm_load_print_meta: model type       = 2B
0.00.567.834 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.567.835 I llm_load_print_meta: model params     = 2.51 B
0.00.567.836 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.567.853 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.854 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.857 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.858 I llm_load_print_meta: max token length = 93
0.00.568.039 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.627.621 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.627.634 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.627.635 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.627.635 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.627.636 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.627.637 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.633.278 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.288 I llama_new_context_with_model: n_batch    = 2048
0.00.633.289 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.290 I llama_new_context_with_model: flash_attn = 0
0.00.633.294 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.295 I llama_new_context_with_model: freq_scale = 1
0.00.665.088 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.134 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.665.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.627 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.633 I llama_new_context_with_model: graph nodes  = 601
0.00.666.633 I llama_new_context_with_model: graph splits = 1
0.00.666.650 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.587 I main: llama threadpool init, n_threads = 4
0.01.251.599 I 
0.01.251.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.694 I 
0.01.251.857 I sampler seed: 1822548607
0.01.251.867 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.872 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.875 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED TEXT:

I am unable to generate a response as I am unable to access the requested data. The data you requested is private and cannot be accessed

0.12.299.408 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.30 tokens per second)
0.12.299.413 I llama_perf_context_print:        load time =    1248.62 ms
0.12.299.415 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.299.416 I llama_perf_context_print:        eval time =   10965.34 ms /    32 runs   (  342.67 ms per token,     2.92 tokens per second)
0.12.299.417 I llama_perf_context_print:       total time =   11047.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3795 (d13edb17)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199140.53 ms
main:    total time = 199140.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.655 I build: 3795 (d13edb17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.851 I main: load the model and apply lora adapter, if any
0.00.025.090 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.192 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.207 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.211 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.216 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.217 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.219 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.220 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.221 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.222 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.230 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.231 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.233 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.234 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.307 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.730 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.024 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.040 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.042 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.046 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.047 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.058 I llama_model_loader: - type  f32:   37 tensors
0.00.198.062 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.063 I llama_model_loader: - type q6_K:   19 tensors
0.00.497.405 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.449 I llm_load_vocab: special tokens cache size = 5
0.00.556.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.659 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.660 I llm_load_print_meta: arch             = gemma
0.00.556.661 I llm_load_print_meta: vocab type       = SPM
0.00.556.662 I llm_load_print_meta: n_vocab          = 256000
0.00.556.665 I llm_load_print_meta: n_merges         = 0
0.00.556.665 I llm_load_print_meta: vocab_only       = 0
0.00.556.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.666 I llm_load_print_meta: n_embd           = 2048
0.00.556.666 I llm_load_print_meta: n_layer          = 18
0.00.556.702 I llm_load_print_meta: n_head           = 8
0.00.556.708 I llm_load_print_meta: n_head_kv        = 1
0.00.556.709 I llm_load_print_meta: n_rot            = 256
0.00.556.709 I llm_load_print_meta: n_swa            = 0
0.00.556.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.715 I llm_load_print_meta: n_gqa            = 8
0.00.556.719 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.725 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.727 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.727 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.727 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.732 I llm_load_print_meta: n_ff             = 16384
0.00.556.733 I llm_load_print_meta: n_expert         = 0
0.00.556.733 I llm_load_print_meta: n_expert_used    = 0
0.00.556.733 I llm_load_print_meta: causal attn      = 1
0.00.556.734 I llm_load_print_meta: pooling type     = 0
0.00.556.734 I llm_load_print_meta: rope type        = 2
0.00.556.734 I llm_load_print_meta: rope scaling     = linear
0.00.556.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.736 I llm_load_print_meta: freq_scale_train = 1
0.00.556.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.737 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.739 I llm_load_print_meta: model type       = 2B
0.00.556.740 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.556.741 I llm_load_print_meta: model params     = 2.51 B
0.00.556.742 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.556.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.743 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.763 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.764 I llm_load_print_meta: max token length = 93
0.00.556.948 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.613.831 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.619.396 I llama_new_context_with_model: n_ctx      = 8192
0.00.619.404 I llama_new_context_with_model: n_batch    = 2048
0.00.619.404 I llama_new_context_with_model: n_ubatch   = 512
0.00.619.405 I llama_new_context_with_model: flash_attn = 0
0.00.619.409 I llama_new_context_with_model: freq_base  = 10000.0
0.00.619.409 I llama_new_context_with_model: freq_scale = 1
0.00.651.171 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.217 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.337 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.703 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.710 I llama_new_context_with_model: graph nodes  = 601
0.00.652.710 I llama_new_context_with_model: graph splits = 1
0.00.652.726 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.233.720 I main: llama threadpool init, n_threads = 4
0.01.233.734 I 
0.01.233.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.233.832 I 
0.01.233.999 I sampler seed: 447116386
0.01.234.010 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.234.015 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.234.015 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

The answer should be:
**Rapidly**

The word "rapidly" means "in a quick and intense manner." It is

0.12.287.293 I llama_perf_sampler_print:    sampling time =      50.41 ms /    33 runs   (    1.53 ms per token,   654.68 tokens per second)
0.12.287.297 I llama_perf_context_print:        load time =    1230.78 ms
0.12.287.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.287.313 I llama_perf_context_print:        eval time =   10966.16 ms /    32 runs   (  342.69 ms per token,     2.92 tokens per second)
0.12.287.315 I llama_perf_context_print:       total time =   11053.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.868s
user	50m23.196s
sys	0m6.616s
