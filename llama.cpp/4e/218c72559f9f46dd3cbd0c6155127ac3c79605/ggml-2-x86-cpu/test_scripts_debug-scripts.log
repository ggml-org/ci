+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.607 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.619 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.720 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.722 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.733 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.734 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.735 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.736 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.738 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.748 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.750 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.753 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.751 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.257 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.077 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.078 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.079 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.087 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.088 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.090 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.099 I llama_model_loader: - type  f32:   37 tensors
0.00.356.102 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.368 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.161 I llm_load_vocab: special tokens cache size = 5
0.00.832.174 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.246 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.247 I llm_load_print_meta: arch             = gemma
0.00.832.248 I llm_load_print_meta: vocab type       = SPM
0.00.832.249 I llm_load_print_meta: n_vocab          = 256000
0.00.832.251 I llm_load_print_meta: n_merges         = 0
0.00.832.252 I llm_load_print_meta: vocab_only       = 0
0.00.832.252 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.252 I llm_load_print_meta: n_embd           = 2048
0.00.832.253 I llm_load_print_meta: n_layer          = 18
0.00.832.318 I llm_load_print_meta: n_head           = 8
0.00.832.325 I llm_load_print_meta: n_head_kv        = 1
0.00.832.325 I llm_load_print_meta: n_rot            = 256
0.00.832.326 I llm_load_print_meta: n_swa            = 0
0.00.832.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.332 I llm_load_print_meta: n_gqa            = 8
0.00.832.350 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.369 I llm_load_print_meta: n_ff             = 16384
0.00.832.369 I llm_load_print_meta: n_expert         = 0
0.00.832.370 I llm_load_print_meta: n_expert_used    = 0
0.00.832.370 I llm_load_print_meta: causal attn      = 1
0.00.832.370 I llm_load_print_meta: pooling type     = 0
0.00.832.371 I llm_load_print_meta: rope type        = 2
0.00.832.372 I llm_load_print_meta: rope scaling     = linear
0.00.832.373 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.377 I llm_load_print_meta: freq_scale_train = 1
0.00.832.377 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.378 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.378 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.380 I llm_load_print_meta: model type       = 2B
0.00.832.381 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.382 I llm_load_print_meta: model params     = 2.51 B
0.00.832.383 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.383 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.384 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.384 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.385 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.385 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.406 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.406 I llm_load_print_meta: max token length = 93
0.00.934.684 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.934.693 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.934.694 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.934.695 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.934.695 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.934.696 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.940.562 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.568 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.569 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.569 I llama_new_context_with_model: n_batch       = 2048
0.00.940.570 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.570 I llama_new_context_with_model: flash_attn    = 0
0.00.940.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.573 I llama_new_context_with_model: freq_scale    = 1
0.00.940.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.208 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.250 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.910 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.914 I llama_new_context_with_model: graph nodes  = 601
0.00.957.915 I llama_new_context_with_model: graph splits = 1
0.00.957.938 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.569.371 I main: llama threadpool init, n_threads = 4
0.01.569.387 I 
0.01.569.508 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.569.511 I 
0.01.569.750 I sampler seed: 3019475574
0.01.569.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.569.784 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.569.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.569.785 I 
 increasities and anxieties into fantastical creatures, blurring the lines between reality and imagination.

In this narrative, explore the following themes:

* The power of

0.15.257.907 I llama_perf_sampler_print:    sampling time =      48.44 ms /    33 runs   (    1.47 ms per token,   681.24 tokens per second)
0.15.257.910 I llama_perf_context_print:        load time =    1568.43 ms
0.15.257.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.257.913 I llama_perf_context_print:        eval time =   13599.97 ms /    32 runs   (  425.00 ms per token,     2.35 tokens per second)
0.15.257.914 I llama_perf_context_print:       total time =   13688.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.717 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.023.657 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.782 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.794 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.798 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.800 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.801 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.805 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.812 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.815 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.817 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.818 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.819 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.247 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.612 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.614 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.615 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.617 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.618 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.620 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.624 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.625 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.627 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.628 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.630 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.638 I llama_model_loader: - type  f32:   37 tensors
0.00.351.640 I llama_model_loader: - type q8_0:  127 tensors
0.00.587.206 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.939 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.849 I llm_load_vocab: special tokens cache size = 5
0.00.838.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.527 I llm_load_print_meta: arch             = gemma
0.00.838.527 I llm_load_print_meta: vocab type       = SPM
0.00.838.528 I llm_load_print_meta: n_vocab          = 256000
0.00.838.530 I llm_load_print_meta: n_merges         = 0
0.00.838.531 I llm_load_print_meta: vocab_only       = 0
0.00.838.531 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.531 I llm_load_print_meta: n_embd           = 2048
0.00.838.532 I llm_load_print_meta: n_layer          = 18
0.00.838.596 I llm_load_print_meta: n_head           = 8
0.00.838.603 I llm_load_print_meta: n_head_kv        = 1
0.00.838.604 I llm_load_print_meta: n_rot            = 256
0.00.838.605 I llm_load_print_meta: n_swa            = 0
0.00.838.605 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.610 I llm_load_print_meta: n_gqa            = 8
0.00.838.614 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.640 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.641 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.642 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.642 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.647 I llm_load_print_meta: n_ff             = 16384
0.00.838.648 I llm_load_print_meta: n_expert         = 0
0.00.838.648 I llm_load_print_meta: n_expert_used    = 0
0.00.838.649 I llm_load_print_meta: causal attn      = 1
0.00.838.649 I llm_load_print_meta: pooling type     = 0
0.00.838.649 I llm_load_print_meta: rope type        = 2
0.00.838.658 I llm_load_print_meta: rope scaling     = linear
0.00.838.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.660 I llm_load_print_meta: freq_scale_train = 1
0.00.838.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.661 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.662 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.662 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.663 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.664 I llm_load_print_meta: model type       = 2B
0.00.838.665 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.666 I llm_load_print_meta: model params     = 2.51 B
0.00.838.673 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.674 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.682 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.683 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.683 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.684 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.696 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.698 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.698 I llm_load_print_meta: max token length = 93
0.00.935.291 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.941.096 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.104 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.104 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.105 I llama_new_context_with_model: n_batch       = 2048
0.00.941.105 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.106 I llama_new_context_with_model: flash_attn    = 0
0.00.941.108 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.109 I llama_new_context_with_model: freq_scale    = 1
0.00.941.110 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.037 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.082 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.201 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.761 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.765 I llama_new_context_with_model: graph nodes  = 601
0.00.959.765 I llama_new_context_with_model: graph splits = 1
0.00.959.789 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.894 I main: llama threadpool init, n_threads = 4
0.01.598.912 I 
0.01.599.034 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.599.038 I 
0.01.599.282 I sampler seed: 3903090601
0.01.599.296 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.599.309 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.599.310 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.599.310 I 
 increasities from the 1960s and 1970s.

I'm unable to access the requested material. [end of text]


0.14.445.180 I llama_perf_sampler_print:    sampling time =      45.04 ms /    31 runs   (    1.45 ms per token,   688.32 tokens per second)
0.14.445.184 I llama_perf_context_print:        load time =    1597.85 ms
0.14.445.185 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.445.187 I llama_perf_context_print:        eval time =   12764.27 ms /    30 runs   (  425.48 ms per token,     2.35 tokens per second)
0.14.445.188 I llama_perf_context_print:       total time =   12846.30 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.724 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.922 I main: load the model and apply lora adapter, if any
0.00.023.374 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.385 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.497 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.506 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.508 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.518 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.521 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.523 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.524 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.525 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.489 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.490 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.493 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.498 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.499 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.500 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.359.502 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.359.503 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.359.511 I llama_model_loader: - type  f32:   37 tensors
0.00.359.514 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.519 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.282 I llm_load_vocab: special tokens cache size = 5
0.00.862.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.096 I llm_load_print_meta: arch             = gemma
0.00.862.097 I llm_load_print_meta: vocab type       = SPM
0.00.862.098 I llm_load_print_meta: n_vocab          = 256000
0.00.862.100 I llm_load_print_meta: n_merges         = 0
0.00.862.101 I llm_load_print_meta: vocab_only       = 0
0.00.862.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.101 I llm_load_print_meta: n_embd           = 2048
0.00.862.102 I llm_load_print_meta: n_layer          = 18
0.00.862.164 I llm_load_print_meta: n_head           = 8
0.00.862.174 I llm_load_print_meta: n_head_kv        = 1
0.00.862.174 I llm_load_print_meta: n_rot            = 256
0.00.862.176 I llm_load_print_meta: n_swa            = 0
0.00.862.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.181 I llm_load_print_meta: n_gqa            = 8
0.00.862.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.191 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.195 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.197 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.202 I llm_load_print_meta: n_ff             = 16384
0.00.862.203 I llm_load_print_meta: n_expert         = 0
0.00.862.203 I llm_load_print_meta: n_expert_used    = 0
0.00.862.204 I llm_load_print_meta: causal attn      = 1
0.00.862.205 I llm_load_print_meta: pooling type     = 0
0.00.862.205 I llm_load_print_meta: rope type        = 2
0.00.862.206 I llm_load_print_meta: rope scaling     = linear
0.00.862.208 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.209 I llm_load_print_meta: freq_scale_train = 1
0.00.862.210 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.210 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.211 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.212 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.212 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.213 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.214 I llm_load_print_meta: model type       = 2B
0.00.862.215 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.216 I llm_load_print_meta: model params     = 2.51 B
0.00.862.217 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.218 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.221 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.222 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.223 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.223 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.230 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.232 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.232 I llm_load_print_meta: max token length = 93
0.00.940.828 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.940.836 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.940.837 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.940.838 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.940.838 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.940.839 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.946.639 I llama_new_context_with_model: n_seq_max     = 1
0.00.946.646 I llama_new_context_with_model: n_ctx         = 4096
0.00.946.646 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.946.647 I llama_new_context_with_model: n_batch       = 2048
0.00.946.647 I llama_new_context_with_model: n_ubatch      = 512
0.00.946.648 I llama_new_context_with_model: flash_attn    = 0
0.00.946.650 I llama_new_context_with_model: freq_base     = 10000.0
0.00.946.651 I llama_new_context_with_model: freq_scale    = 1
0.00.946.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.189 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.961.230 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.961.341 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.932 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.936 I llama_new_context_with_model: graph nodes  = 601
0.00.963.936 I llama_new_context_with_model: graph splits = 1
0.00.963.958 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.922 I main: llama threadpool init, n_threads = 4
0.01.578.940 I 
0.01.579.061 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.065 I 
0.01.579.310 I sampler seed: 3726467065
0.01.579.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.339 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.339 I 
 increasities:

1. What is the difference between a sociological perspective and a psychological perspective on the same issue?
2. How do sociological perspectives and psychological

0.15.223.331 I llama_perf_sampler_print:    sampling time =      47.94 ms /    33 runs   (    1.45 ms per token,   688.40 tokens per second)
0.15.223.344 I llama_perf_context_print:        load time =    1577.90 ms
0.15.223.346 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.223.348 I llama_perf_context_print:        eval time =   13557.45 ms /    32 runs   (  423.67 ms per token,     2.36 tokens per second)
0.15.223.349 I llama_perf_context_print:       total time =   13644.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.626 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.637 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.722 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.734 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.743 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.744 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.746 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.747 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.749 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.750 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.760 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.767 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.768 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.435 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.829 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.838 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.845 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.849 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.850 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.852 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.853 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.874 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.884 I llama_model_loader: - type  f32:   37 tensors
0.00.348.887 I llama_model_loader: - type q8_0:  127 tensors
0.00.592.294 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.385 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.348 I llm_load_vocab: special tokens cache size = 5
0.00.839.445 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.516 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.517 I llm_load_print_meta: arch             = gemma
0.00.839.518 I llm_load_print_meta: vocab type       = SPM
0.00.839.519 I llm_load_print_meta: n_vocab          = 256000
0.00.839.522 I llm_load_print_meta: n_merges         = 0
0.00.839.522 I llm_load_print_meta: vocab_only       = 0
0.00.839.523 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.523 I llm_load_print_meta: n_embd           = 2048
0.00.839.523 I llm_load_print_meta: n_layer          = 18
0.00.839.586 I llm_load_print_meta: n_head           = 8
0.00.839.594 I llm_load_print_meta: n_head_kv        = 1
0.00.839.594 I llm_load_print_meta: n_rot            = 256
0.00.839.596 I llm_load_print_meta: n_swa            = 0
0.00.839.597 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.598 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.603 I llm_load_print_meta: n_gqa            = 8
0.00.839.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.612 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.613 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.616 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.617 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.617 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.617 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.622 I llm_load_print_meta: n_ff             = 16384
0.00.839.623 I llm_load_print_meta: n_expert         = 0
0.00.839.623 I llm_load_print_meta: n_expert_used    = 0
0.00.839.624 I llm_load_print_meta: causal attn      = 1
0.00.839.624 I llm_load_print_meta: pooling type     = 0
0.00.839.624 I llm_load_print_meta: rope type        = 2
0.00.839.629 I llm_load_print_meta: rope scaling     = linear
0.00.839.630 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.631 I llm_load_print_meta: freq_scale_train = 1
0.00.839.632 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.632 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.633 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.634 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.634 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.634 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.635 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.635 I llm_load_print_meta: model type       = 2B
0.00.839.636 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.637 I llm_load_print_meta: model params     = 2.51 B
0.00.839.638 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.652 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.661 I llm_load_print_meta: max token length = 93
0.00.912.479 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.912.488 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.918.291 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.298 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.299 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.299 I llama_new_context_with_model: n_batch       = 2048
0.00.918.299 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.300 I llama_new_context_with_model: flash_attn    = 0
0.00.918.303 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.303 I llama_new_context_with_model: freq_scale    = 1
0.00.918.304 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.285 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.324 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.439 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.002 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.007 I llama_new_context_with_model: graph nodes  = 601
0.00.936.007 I llama_new_context_with_model: graph splits = 1
0.00.936.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.555.139 I main: llama threadpool init, n_threads = 4
0.01.555.156 I 
0.01.555.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.555.278 I 
0.01.555.514 I sampler seed: 3008970812
0.01.555.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.555.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.555.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.555.541 I 
 increasities is a series of events where people's desires or needs become overwhelming and uncontrollable.

**Answer the following questions based on the provided definition:**



0.15.207.275 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.33 tokens per second)
0.15.207.278 I llama_perf_context_print:        load time =    1554.17 ms
0.15.207.279 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.207.281 I llama_perf_context_print:        eval time =   13565.33 ms /    32 runs   (  423.92 ms per token,     2.36 tokens per second)
0.15.207.282 I llama_perf_context_print:       total time =   13652.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.211s
user	3m49.077s
sys	0m9.328s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4280 (4e218c72)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185154.61 ms
main:    total time = 185154.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.000.823 I main: load the model and apply lora adapter, if any
0.00.023.360 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.371 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.460 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.472 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.479 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.482 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.484 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.485 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.494 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.495 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.499 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.500 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.443 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.869 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.870 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.871 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.873 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.874 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.875 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.879 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.881 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.882 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.883 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.885 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.894 I llama_model_loader: - type  f32:   37 tensors
0.00.348.897 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.897 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.942 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.972 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.984 I llm_load_vocab: special tokens cache size = 5
0.00.854.407 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.482 I llm_load_print_meta: arch             = gemma
0.00.854.483 I llm_load_print_meta: vocab type       = SPM
0.00.854.484 I llm_load_print_meta: n_vocab          = 256000
0.00.854.487 I llm_load_print_meta: n_merges         = 0
0.00.854.487 I llm_load_print_meta: vocab_only       = 0
0.00.854.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.488 I llm_load_print_meta: n_embd           = 2048
0.00.854.488 I llm_load_print_meta: n_layer          = 18
0.00.854.554 I llm_load_print_meta: n_head           = 8
0.00.854.562 I llm_load_print_meta: n_head_kv        = 1
0.00.854.563 I llm_load_print_meta: n_rot            = 256
0.00.854.563 I llm_load_print_meta: n_swa            = 0
0.00.854.564 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.565 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.570 I llm_load_print_meta: n_gqa            = 8
0.00.854.575 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.581 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.582 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.584 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.585 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.585 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.586 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.591 I llm_load_print_meta: n_ff             = 16384
0.00.854.592 I llm_load_print_meta: n_expert         = 0
0.00.854.592 I llm_load_print_meta: n_expert_used    = 0
0.00.854.593 I llm_load_print_meta: causal attn      = 1
0.00.854.593 I llm_load_print_meta: pooling type     = 0
0.00.854.594 I llm_load_print_meta: rope type        = 2
0.00.854.594 I llm_load_print_meta: rope scaling     = linear
0.00.854.596 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.596 I llm_load_print_meta: freq_scale_train = 1
0.00.854.597 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.601 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.602 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.602 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.602 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.603 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.612 I llm_load_print_meta: model type       = 2B
0.00.854.613 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.614 I llm_load_print_meta: model params     = 2.51 B
0.00.854.615 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.615 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.619 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.619 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.620 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.620 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.621 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.621 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.627 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.628 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.629 I llm_load_print_meta: max token length = 93
0.00.917.223 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.917.231 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.917.232 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.917.233 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.917.233 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.917.234 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.922.862 I llama_new_context_with_model: n_seq_max     = 1
0.00.922.868 I llama_new_context_with_model: n_ctx         = 4096
0.00.922.868 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.922.869 I llama_new_context_with_model: n_batch       = 2048
0.00.922.869 I llama_new_context_with_model: n_ubatch      = 512
0.00.922.869 I llama_new_context_with_model: flash_attn    = 0
0.00.922.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.922.872 I llama_new_context_with_model: freq_scale    = 1
0.00.922.873 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.937.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.937.307 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.937.411 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.919 I llama_new_context_with_model: graph nodes  = 601
0.00.939.919 I llama_new_context_with_model: graph splits = 1
0.00.939.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.107 I main: llama threadpool init, n_threads = 4
0.01.527.124 I 
0.01.527.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.527.248 I 
0.01.527.488 I sampler seed: 829724989
0.01.527.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.512 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.515 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.516 I 
 increasities and vulnerabilities.

**The vulnerabilities and weaknesses of the system are:**

- **Centralized decision-making:** The system relies heavily on centralized decision

0.12.656.999 I llama_perf_sampler_print:    sampling time =      48.14 ms /    33 runs   (    1.46 ms per token,   685.44 tokens per second)
0.12.657.002 I llama_perf_context_print:        load time =    1526.19 ms
0.12.657.003 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.657.018 I llama_perf_context_print:        eval time =   11041.41 ms /    32 runs   (  345.04 ms per token,     2.90 tokens per second)
0.12.657.020 I llama_perf_context_print:       total time =   11129.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4280 (4e218c72)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 184963.17 ms
main:    total time = 184963.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4280 (4e218c72) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.402 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.515 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.517 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.522 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.526 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.527 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.529 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.533 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.547 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.552 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.347 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.738 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.143 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.145 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.148 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.150 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.152 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.186 I llama_model_loader: - type  f32:   37 tensors
0.00.350.192 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.192 I llama_model_loader: - type q6_K:   19 tensors
0.00.570.215 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.095 I llm_load_vocab: special tokens cache size = 5
0.00.837.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.523 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.524 I llm_load_print_meta: arch             = gemma
0.00.837.524 I llm_load_print_meta: vocab type       = SPM
0.00.837.526 I llm_load_print_meta: n_vocab          = 256000
0.00.837.528 I llm_load_print_meta: n_merges         = 0
0.00.837.529 I llm_load_print_meta: vocab_only       = 0
0.00.837.529 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.530 I llm_load_print_meta: n_embd           = 2048
0.00.837.530 I llm_load_print_meta: n_layer          = 18
0.00.837.594 I llm_load_print_meta: n_head           = 8
0.00.837.602 I llm_load_print_meta: n_head_kv        = 1
0.00.837.603 I llm_load_print_meta: n_rot            = 256
0.00.837.604 I llm_load_print_meta: n_swa            = 0
0.00.837.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.604 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.609 I llm_load_print_meta: n_gqa            = 8
0.00.837.614 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.619 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.620 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.621 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.622 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.629 I llm_load_print_meta: n_ff             = 16384
0.00.837.629 I llm_load_print_meta: n_expert         = 0
0.00.837.631 I llm_load_print_meta: n_expert_used    = 0
0.00.837.631 I llm_load_print_meta: causal attn      = 1
0.00.837.631 I llm_load_print_meta: pooling type     = 0
0.00.837.632 I llm_load_print_meta: rope type        = 2
0.00.837.632 I llm_load_print_meta: rope scaling     = linear
0.00.837.634 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.646 I llm_load_print_meta: freq_scale_train = 1
0.00.837.659 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.666 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.666 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.667 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.667 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.668 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.668 I llm_load_print_meta: model type       = 2B
0.00.837.669 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.670 I llm_load_print_meta: model params     = 2.51 B
0.00.837.671 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.672 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.673 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.673 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.674 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.674 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.682 I llm_load_print_meta: max token length = 93
0.00.895.145 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.901.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.132 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.133 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.133 I llama_new_context_with_model: n_batch       = 2048
0.00.901.134 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.134 I llama_new_context_with_model: flash_attn    = 0
0.00.901.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.137 I llama_new_context_with_model: freq_scale    = 1
0.00.901.138 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.916.167 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.916.211 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.916.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.786 I llama_new_context_with_model: graph nodes  = 601
0.00.918.786 I llama_new_context_with_model: graph splits = 1
0.00.918.825 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.503.741 I main: llama threadpool init, n_threads = 4
0.01.503.757 I 
0.01.503.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.503.898 I 
0.01.504.151 I sampler seed: 2301195487
0.01.504.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.504.177 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.504.181 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.504.182 I 
 increasities by proposing the following research agenda:

**Research Agenda**

**Goal:** To investigate the impact of social comparison on individuals' self-esteem and

0.12.619.254 I llama_perf_sampler_print:    sampling time =      48.23 ms /    33 runs   (    1.46 ms per token,   684.21 tokens per second)
0.12.619.270 I llama_perf_context_print:        load time =    1502.76 ms
0.12.619.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.619.274 I llama_perf_context_print:        eval time =   11027.86 ms /    32 runs   (  344.62 ms per token,     2.90 tokens per second)
0.12.619.289 I llama_perf_context_print:       total time =   11115.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.307s
user	46m40.088s
sys	0m6.377s
