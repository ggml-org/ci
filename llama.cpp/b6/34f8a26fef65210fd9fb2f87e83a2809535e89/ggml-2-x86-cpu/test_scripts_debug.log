+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.757 I main: load the model and apply lora adapter, if any
0.00.025.272 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.283 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.369 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.710 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.110 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.119 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.120 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.121 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.122 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.124 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.125 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.130 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.131 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.140 I llama_model_loader: - type  f32:   37 tensors
0.00.265.142 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.979 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.415 I llm_load_vocab: special tokens cache size = 5
0.00.628.285 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.360 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.361 I llm_load_print_meta: arch             = gemma
0.00.628.362 I llm_load_print_meta: vocab type       = SPM
0.00.628.362 I llm_load_print_meta: n_vocab          = 256000
0.00.628.366 I llm_load_print_meta: n_merges         = 0
0.00.628.366 I llm_load_print_meta: vocab_only       = 0
0.00.628.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.367 I llm_load_print_meta: n_embd           = 2048
0.00.628.367 I llm_load_print_meta: n_layer          = 18
0.00.628.432 I llm_load_print_meta: n_head           = 8
0.00.628.442 I llm_load_print_meta: n_head_kv        = 1
0.00.628.444 I llm_load_print_meta: n_rot            = 256
0.00.628.444 I llm_load_print_meta: n_swa            = 0
0.00.628.444 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.449 I llm_load_print_meta: n_gqa            = 8
0.00.628.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.459 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.461 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.462 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.463 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.468 I llm_load_print_meta: n_ff             = 16384
0.00.628.469 I llm_load_print_meta: n_expert         = 0
0.00.628.470 I llm_load_print_meta: n_expert_used    = 0
0.00.628.470 I llm_load_print_meta: causal attn      = 1
0.00.628.471 I llm_load_print_meta: pooling type     = 0
0.00.628.474 I llm_load_print_meta: rope type        = 2
0.00.628.474 I llm_load_print_meta: rope scaling     = linear
0.00.628.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.476 I llm_load_print_meta: freq_scale_train = 1
0.00.628.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.477 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.478 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.479 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.480 I llm_load_print_meta: model type       = 2B
0.00.628.481 I llm_load_print_meta: model ftype      = Q8_0
0.00.628.482 I llm_load_print_meta: model params     = 2.51 B
0.00.628.492 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.628.492 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.493 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.494 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.496 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.497 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.497 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.503 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.505 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.505 I llm_load_print_meta: max token length = 93
0.00.732.719 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.732.727 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.732.728 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.732.729 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.732.730 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.732.731 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.738.570 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.578 I llama_new_context_with_model: n_batch    = 2048
0.00.738.578 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.579 I llama_new_context_with_model: flash_attn = 0
0.00.738.581 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.582 I llama_new_context_with_model: freq_scale = 1
0.00.767.624 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.767.665 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.767.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.770.375 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.770.379 I llama_new_context_with_model: graph nodes  = 601
0.00.770.380 I llama_new_context_with_model: graph splits = 1
0.00.770.403 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.381.391 I main: llama threadpool init, n_threads = 4
0.01.381.404 I 
0.01.381.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.381.512 I 
0.01.381.737 I sampler seed: 3228409931
0.01.381.750 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.381.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.381.761 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.381.761 I 
 increasities and contradictions, leading to a paradoxical state of being.

This paradoxical state of being could be interpreted as a metaphor for the human condition, where we

0.14.857.726 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.33 tokens per second)
0.14.857.730 I llama_perf_context_print:        load time =    1378.54 ms
0.14.857.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.734 I llama_perf_context_print:        eval time =   13377.80 ms /    32 runs   (  418.06 ms per token,     2.39 tokens per second)
0.14.857.736 I llama_perf_context_print:       total time =   13476.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.025.656 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.761 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.765 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.771 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.772 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.773 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.780 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.781 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.785 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.318 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.524 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.547 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.556 I llama_model_loader: - type  f32:   37 tensors
0.00.266.558 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.852 I llm_load_vocab: special tokens cache size = 5
0.00.616.562 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.635 I llm_load_print_meta: arch             = gemma
0.00.616.635 I llm_load_print_meta: vocab type       = SPM
0.00.616.636 I llm_load_print_meta: n_vocab          = 256000
0.00.616.639 I llm_load_print_meta: n_merges         = 0
0.00.616.639 I llm_load_print_meta: vocab_only       = 0
0.00.616.640 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.640 I llm_load_print_meta: n_embd           = 2048
0.00.616.640 I llm_load_print_meta: n_layer          = 18
0.00.616.707 I llm_load_print_meta: n_head           = 8
0.00.616.715 I llm_load_print_meta: n_head_kv        = 1
0.00.616.716 I llm_load_print_meta: n_rot            = 256
0.00.616.716 I llm_load_print_meta: n_swa            = 0
0.00.616.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.717 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.722 I llm_load_print_meta: n_gqa            = 8
0.00.616.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.731 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.732 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.734 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.735 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.741 I llm_load_print_meta: n_ff             = 16384
0.00.616.742 I llm_load_print_meta: n_expert         = 0
0.00.616.755 I llm_load_print_meta: n_expert_used    = 0
0.00.616.762 I llm_load_print_meta: causal attn      = 1
0.00.616.763 I llm_load_print_meta: pooling type     = 0
0.00.616.763 I llm_load_print_meta: rope type        = 2
0.00.616.763 I llm_load_print_meta: rope scaling     = linear
0.00.616.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.765 I llm_load_print_meta: freq_scale_train = 1
0.00.616.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.767 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.768 I llm_load_print_meta: model type       = 2B
0.00.616.769 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.770 I llm_load_print_meta: model params     = 2.51 B
0.00.616.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.784 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.791 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.793 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.793 I llm_load_print_meta: max token length = 93
0.00.714.788 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.720.674 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.682 I llama_new_context_with_model: n_batch    = 2048
0.00.720.682 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.683 I llama_new_context_with_model: flash_attn = 0
0.00.720.686 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.686 I llama_new_context_with_model: freq_scale = 1
0.00.750.241 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.287 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.414 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.928 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.932 I llama_new_context_with_model: graph nodes  = 601
0.00.752.932 I llama_new_context_with_model: graph splits = 1
0.00.752.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.263 I main: llama threadpool init, n_threads = 4
0.01.364.279 I 
0.01.364.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.391 I 
0.01.364.629 I sampler seed: 534748777
0.01.364.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.649 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.649 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.649 I 
 increasities and scandals.

I'm not sure if I should be concerned about the potential for scandals or unethical behavior in my workplace.

**Answer:**

0.14.974.377 I llama_perf_sampler_print:    sampling time =      50.00 ms /    33 runs   (    1.52 ms per token,   660.03 tokens per second)
0.14.974.391 I llama_perf_context_print:        load time =    1361.35 ms
0.14.974.393 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.974.394 I llama_perf_context_print:        eval time =   13510.19 ms /    32 runs   (  422.19 ms per token,     2.37 tokens per second)
0.14.974.395 I llama_perf_context_print:       total time =   13610.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.138 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.149 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.245 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.259 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.271 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.287 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.292 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.104 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.105 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.106 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.108 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.109 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.110 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.116 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.118 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.126 I llama_model_loader: - type  f32:   37 tensors
0.00.266.129 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.217 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.878 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.918 I llm_load_vocab: special tokens cache size = 5
0.00.629.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.702 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.703 I llm_load_print_meta: arch             = gemma
0.00.629.704 I llm_load_print_meta: vocab type       = SPM
0.00.629.705 I llm_load_print_meta: n_vocab          = 256000
0.00.629.707 I llm_load_print_meta: n_merges         = 0
0.00.629.708 I llm_load_print_meta: vocab_only       = 0
0.00.629.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.709 I llm_load_print_meta: n_embd           = 2048
0.00.629.709 I llm_load_print_meta: n_layer          = 18
0.00.629.774 I llm_load_print_meta: n_head           = 8
0.00.629.782 I llm_load_print_meta: n_head_kv        = 1
0.00.629.782 I llm_load_print_meta: n_rot            = 256
0.00.629.783 I llm_load_print_meta: n_swa            = 0
0.00.629.783 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.783 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.790 I llm_load_print_meta: n_gqa            = 8
0.00.629.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.803 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.805 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.808 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.808 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.817 I llm_load_print_meta: n_ff             = 16384
0.00.629.819 I llm_load_print_meta: n_expert         = 0
0.00.629.820 I llm_load_print_meta: n_expert_used    = 0
0.00.629.821 I llm_load_print_meta: causal attn      = 1
0.00.629.822 I llm_load_print_meta: pooling type     = 0
0.00.629.822 I llm_load_print_meta: rope type        = 2
0.00.629.833 I llm_load_print_meta: rope scaling     = linear
0.00.629.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.840 I llm_load_print_meta: freq_scale_train = 1
0.00.629.841 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.841 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.842 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.846 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.847 I llm_load_print_meta: model type       = 2B
0.00.629.848 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.849 I llm_load_print_meta: model params     = 2.51 B
0.00.629.860 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.864 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.867 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.868 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.869 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.879 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.884 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.884 I llm_load_print_meta: max token length = 93
0.00.726.352 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.726.361 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.726.362 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.726.362 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.726.363 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.726.364 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.732.518 I llama_new_context_with_model: n_ctx      = 8192
0.00.732.525 I llama_new_context_with_model: n_batch    = 2048
0.00.732.525 I llama_new_context_with_model: n_ubatch   = 512
0.00.732.526 I llama_new_context_with_model: flash_attn = 0
0.00.732.529 I llama_new_context_with_model: freq_base  = 10000.0
0.00.732.530 I llama_new_context_with_model: freq_scale = 1
0.00.762.360 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.762.527 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.765.061 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.765.065 I llama_new_context_with_model: graph nodes  = 601
0.00.765.066 I llama_new_context_with_model: graph splits = 1
0.00.765.091 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.959 I main: llama threadpool init, n_threads = 4
0.01.375.972 I 
0.01.376.090 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.376.095 I 
0.01.376.340 I sampler seed: 4281586703
0.01.376.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.376.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.376.361 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.376.362 I 
 seconary to the principal clause. Identify the type of clause.

The sun, which has been shining brightly throughout the day, cast a warm glow on the

0.14.854.983 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.95 tokens per second)
0.14.855.005 I llama_perf_context_print:        load time =    1373.06 ms
0.14.855.007 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.855.009 I llama_perf_context_print:        eval time =   13382.01 ms /    32 runs   (  418.19 ms per token,     2.39 tokens per second)
0.14.855.010 I llama_perf_context_print:       total time =   13479.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.025.351 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.364 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.464 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.472 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.475 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.481 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.483 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.484 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.485 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.486 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.760 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.356 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.733 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.740 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.744 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.750 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.751 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.753 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.754 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.755 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.762 I llama_model_loader: - type  f32:   37 tensors
0.00.265.765 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.665 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.514 I llm_load_vocab: special tokens cache size = 5
0.00.603.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.915 I llm_load_print_meta: arch             = gemma
0.00.603.916 I llm_load_print_meta: vocab type       = SPM
0.00.603.917 I llm_load_print_meta: n_vocab          = 256000
0.00.603.919 I llm_load_print_meta: n_merges         = 0
0.00.603.920 I llm_load_print_meta: vocab_only       = 0
0.00.603.920 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.921 I llm_load_print_meta: n_embd           = 2048
0.00.603.921 I llm_load_print_meta: n_layer          = 18
0.00.603.984 I llm_load_print_meta: n_head           = 8
0.00.603.990 I llm_load_print_meta: n_head_kv        = 1
0.00.603.991 I llm_load_print_meta: n_rot            = 256
0.00.603.992 I llm_load_print_meta: n_swa            = 0
0.00.603.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.993 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.997 I llm_load_print_meta: n_gqa            = 8
0.00.604.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.008 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.010 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.012 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.017 I llm_load_print_meta: n_ff             = 16384
0.00.604.017 I llm_load_print_meta: n_expert         = 0
0.00.604.018 I llm_load_print_meta: n_expert_used    = 0
0.00.604.019 I llm_load_print_meta: causal attn      = 1
0.00.604.022 I llm_load_print_meta: pooling type     = 0
0.00.604.023 I llm_load_print_meta: rope type        = 2
0.00.604.023 I llm_load_print_meta: rope scaling     = linear
0.00.604.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.036 I llm_load_print_meta: freq_scale_train = 1
0.00.604.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.047 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.049 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.049 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.052 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.053 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.054 I llm_load_print_meta: model type       = 2B
0.00.604.055 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.056 I llm_load_print_meta: model params     = 2.51 B
0.00.604.065 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.066 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.067 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.069 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.070 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.078 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.079 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.080 I llm_load_print_meta: max token length = 93
0.00.678.195 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.678.204 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.684.145 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.153 I llama_new_context_with_model: n_batch    = 2048
0.00.684.153 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.154 I llama_new_context_with_model: flash_attn = 0
0.00.684.156 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.157 I llama_new_context_with_model: freq_scale = 1
0.00.713.309 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.349 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.713.470 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.034 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.038 I llama_new_context_with_model: graph nodes  = 601
0.00.716.039 I llama_new_context_with_model: graph splits = 1
0.00.716.062 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.716 I main: llama threadpool init, n_threads = 4
0.01.330.729 I 
0.01.330.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.836 I 
0.01.331.065 I sampler seed: 1933235449
0.01.331.077 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.085 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.085 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.085 I 
 seconally to the following passage:

The world is a stage, and those who perform upon it are characters. The audience is the entire human race, and

0.14.879.144 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.29 tokens per second)
0.14.879.148 I llama_perf_context_print:        load time =    1327.82 ms
0.14.879.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.151 I llama_perf_context_print:        eval time =   13451.09 ms /    32 runs   (  420.35 ms per token,     2.38 tokens per second)
0.14.879.152 I llama_perf_context_print:       total time =   13548.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.619s
user	3m49.106s
sys	0m9.545s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4013 (b634f8a2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199408.44 ms
main:    total time = 199408.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.025.516 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.635 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.648 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.650 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.661 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.663 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.664 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.667 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.669 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.678 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.680 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.682 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.684 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.875 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.526 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.546 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.555 I llama_model_loader: - type  f32:   37 tensors
0.00.266.557 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.558 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.191 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.155 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.151 I llm_load_vocab: special tokens cache size = 5
0.00.632.937 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.008 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.012 I llm_load_print_meta: arch             = gemma
0.00.633.013 I llm_load_print_meta: vocab type       = SPM
0.00.633.014 I llm_load_print_meta: n_vocab          = 256000
0.00.633.016 I llm_load_print_meta: n_merges         = 0
0.00.633.016 I llm_load_print_meta: vocab_only       = 0
0.00.633.017 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.017 I llm_load_print_meta: n_embd           = 2048
0.00.633.018 I llm_load_print_meta: n_layer          = 18
0.00.633.083 I llm_load_print_meta: n_head           = 8
0.00.633.093 I llm_load_print_meta: n_head_kv        = 1
0.00.633.095 I llm_load_print_meta: n_rot            = 256
0.00.633.096 I llm_load_print_meta: n_swa            = 0
0.00.633.096 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.096 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.101 I llm_load_print_meta: n_gqa            = 8
0.00.633.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.113 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.115 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.115 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.117 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.122 I llm_load_print_meta: n_ff             = 16384
0.00.633.122 I llm_load_print_meta: n_expert         = 0
0.00.633.123 I llm_load_print_meta: n_expert_used    = 0
0.00.633.124 I llm_load_print_meta: causal attn      = 1
0.00.633.125 I llm_load_print_meta: pooling type     = 0
0.00.633.125 I llm_load_print_meta: rope type        = 2
0.00.633.126 I llm_load_print_meta: rope scaling     = linear
0.00.633.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.128 I llm_load_print_meta: freq_scale_train = 1
0.00.633.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.130 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.131 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.131 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.135 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.136 I llm_load_print_meta: model type       = 2B
0.00.633.137 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.633.139 I llm_load_print_meta: model params     = 2.51 B
0.00.633.150 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.633.151 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.152 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.153 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.154 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.156 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.157 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.157 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.166 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.167 I llm_load_print_meta: max token length = 93
0.00.696.632 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.696.640 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.696.641 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.696.642 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.696.643 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.696.644 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.702.771 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.779 I llama_new_context_with_model: n_batch    = 2048
0.00.702.779 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.780 I llama_new_context_with_model: flash_attn = 0
0.00.702.782 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.783 I llama_new_context_with_model: freq_scale = 1
0.00.732.205 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.245 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.975 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.979 I llama_new_context_with_model: graph nodes  = 601
0.00.734.979 I llama_new_context_with_model: graph splits = 1
0.00.735.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.806 I main: llama threadpool init, n_threads = 4
0.01.312.820 I 
0.01.312.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.931 I 
0.01.313.175 I sampler seed: 4045856786
0.01.313.188 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.313.197 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.313.198 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.313.198 I 
 seconde,
I'm having a difficult time understanding this passage. 

**Passage:**

> "The essence of the matter is that the individual

0.12.211.466 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.21 tokens per second)
0.12.211.469 I llama_perf_context_print:        load time =    1309.92 ms
0.12.211.472 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.211.474 I llama_perf_context_print:        eval time =   10801.39 ms /    32 runs   (  337.54 ms per token,     2.96 tokens per second)
0.12.211.475 I llama_perf_context_print:       total time =   10898.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4013 (b634f8a2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198301.74 ms
main:    total time = 198301.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4013 (b634f8a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.025.586 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.694 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.710 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.720 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.724 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.725 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.726 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.733 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.735 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.737 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.737 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.232 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.496 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.515 I llama_model_loader: - type  f32:   37 tensors
0.00.265.518 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.519 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.405 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.302 I llm_load_vocab: special tokens cache size = 5
0.00.605.383 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.452 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.454 I llm_load_print_meta: arch             = gemma
0.00.605.454 I llm_load_print_meta: vocab type       = SPM
0.00.605.455 I llm_load_print_meta: n_vocab          = 256000
0.00.605.457 I llm_load_print_meta: n_merges         = 0
0.00.605.458 I llm_load_print_meta: vocab_only       = 0
0.00.605.458 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.458 I llm_load_print_meta: n_embd           = 2048
0.00.605.459 I llm_load_print_meta: n_layer          = 18
0.00.605.521 I llm_load_print_meta: n_head           = 8
0.00.605.528 I llm_load_print_meta: n_head_kv        = 1
0.00.605.530 I llm_load_print_meta: n_rot            = 256
0.00.605.530 I llm_load_print_meta: n_swa            = 0
0.00.605.531 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.535 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.540 I llm_load_print_meta: n_gqa            = 8
0.00.605.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.553 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.554 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.555 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.556 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.562 I llm_load_print_meta: n_ff             = 16384
0.00.605.562 I llm_load_print_meta: n_expert         = 0
0.00.605.563 I llm_load_print_meta: n_expert_used    = 0
0.00.605.563 I llm_load_print_meta: causal attn      = 1
0.00.605.564 I llm_load_print_meta: pooling type     = 0
0.00.605.564 I llm_load_print_meta: rope type        = 2
0.00.605.564 I llm_load_print_meta: rope scaling     = linear
0.00.605.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.566 I llm_load_print_meta: freq_scale_train = 1
0.00.605.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.571 I llm_load_print_meta: model type       = 2B
0.00.605.572 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.572 I llm_load_print_meta: model params     = 2.51 B
0.00.605.582 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.584 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.585 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.585 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.585 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.591 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.593 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.594 I llm_load_print_meta: max token length = 93
0.00.667.644 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.673.448 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.454 I llama_new_context_with_model: n_batch    = 2048
0.00.673.455 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.455 I llama_new_context_with_model: flash_attn = 0
0.00.673.457 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.458 I llama_new_context_with_model: freq_scale = 1
0.00.703.790 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.837 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.548 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.552 I llama_new_context_with_model: graph nodes  = 601
0.00.706.552 I llama_new_context_with_model: graph splits = 1
0.00.706.577 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.004 I main: llama threadpool init, n_threads = 4
0.01.286.018 I 
0.01.286.127 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.131 I 
0.01.286.369 I sampler seed: 1011789731
0.01.286.384 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.391 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.395 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.395 I 
 encompasses the entire range of services required for a successful and efficient business operation.

**a) Identify the key services encompassed by the statement.**

**b

0.12.186.855 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.36 tokens per second)
0.12.186.858 I llama_perf_context_print:        load time =    1283.06 ms
0.12.186.859 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.861 I llama_perf_context_print:        eval time =   10803.50 ms /    32 runs   (  337.61 ms per token,     2.96 tokens per second)
0.12.186.862 I llama_perf_context_print:       total time =   10900.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.029s
user	50m12.633s
sys	0m6.530s
