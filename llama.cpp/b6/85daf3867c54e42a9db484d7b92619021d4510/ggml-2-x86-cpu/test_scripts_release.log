+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.310 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.328 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.338 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.342 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.343 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.344 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.344 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.345 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.345 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.349 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.350 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.350 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.299 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.306 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.307 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.308 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.309 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.310 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.311 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.315 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.316 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.317 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.318 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.319 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.322 I llama_model_loader: - type  f32:   37 tensors
0.00.131.323 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.091 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.798 I llm_load_vocab: special tokens cache size = 5
0.00.269.735 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.760 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.760 I llm_load_print_meta: arch             = gemma
0.00.269.761 I llm_load_print_meta: vocab type       = SPM
0.00.269.761 I llm_load_print_meta: n_vocab          = 256000
0.00.269.762 I llm_load_print_meta: n_merges         = 0
0.00.269.762 I llm_load_print_meta: vocab_only       = 0
0.00.269.763 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.763 I llm_load_print_meta: n_embd           = 2048
0.00.269.763 I llm_load_print_meta: n_layer          = 18
0.00.269.777 I llm_load_print_meta: n_head           = 8
0.00.269.778 I llm_load_print_meta: n_head_kv        = 1
0.00.269.778 I llm_load_print_meta: n_rot            = 256
0.00.269.778 I llm_load_print_meta: n_swa            = 0
0.00.269.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.780 I llm_load_print_meta: n_gqa            = 8
0.00.269.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.782 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.786 I llm_load_print_meta: n_ff             = 16384
0.00.269.786 I llm_load_print_meta: n_expert         = 0
0.00.269.787 I llm_load_print_meta: n_expert_used    = 0
0.00.269.787 I llm_load_print_meta: causal attn      = 1
0.00.269.787 I llm_load_print_meta: pooling type     = 0
0.00.269.787 I llm_load_print_meta: rope type        = 2
0.00.269.788 I llm_load_print_meta: rope scaling     = linear
0.00.269.790 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.790 I llm_load_print_meta: freq_scale_train = 1
0.00.269.791 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.791 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.792 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.792 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.793 I llm_load_print_meta: model type       = 2B
0.00.269.793 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.794 I llm_load_print_meta: model params     = 2.51 B
0.00.269.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.796 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.797 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.797 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.798 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.799 I llm_load_print_meta: max token length = 93
0.00.372.559 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.567 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.568 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.569 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.570 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.570 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.942 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.943 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.943 I llama_new_context_with_model: n_batch       = 2048
0.00.377.944 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.944 I llama_new_context_with_model: flash_attn    = 0
0.00.377.947 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.948 I llama_new_context_with_model: freq_scale    = 1
0.00.377.949 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.232 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.245 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.335 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.551 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.557 I llama_new_context_with_model: graph nodes  = 601
0.00.393.558 I llama_new_context_with_model: graph splits = 1
0.00.393.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.617 I main: llama threadpool init, n_threads = 4
0.00.479.635 I 
0.00.479.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.710 I 
0.00.479.758 I sampler seed: 2557748364
0.00.479.769 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.781 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.785 I 
 increasities by the number of vertices:

$$n_1=3$$

$$n_2=4$$

$$n_3=5$$

0.02.758.530 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6056.16 tokens per second)
0.02.758.533 I llama_perf_context_print:        load time =     478.85 ms
0.02.758.534 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.758.536 I llama_perf_context_print:        eval time =    2259.31 ms /    32 runs   (   70.60 ms per token,    14.16 tokens per second)
0.02.758.537 I llama_perf_context_print:       total time =    2278.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.167 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.400 I main: llama backend init
0.00.000.406 I main: load the model and apply lora adapter, if any
0.00.020.745 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.766 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.767 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.772 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.773 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.774 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.774 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.778 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.779 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.779 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.780 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.780 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.132 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.137 I llama_model_loader: - type  f32:   37 tensors
0.00.131.138 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.120 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.701 I llm_load_vocab: special tokens cache size = 5
0.00.263.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.440 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.441 I llm_load_print_meta: arch             = gemma
0.00.263.442 I llm_load_print_meta: vocab type       = SPM
0.00.263.442 I llm_load_print_meta: n_vocab          = 256000
0.00.263.443 I llm_load_print_meta: n_merges         = 0
0.00.263.443 I llm_load_print_meta: vocab_only       = 0
0.00.263.443 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.444 I llm_load_print_meta: n_embd           = 2048
0.00.263.444 I llm_load_print_meta: n_layer          = 18
0.00.263.456 I llm_load_print_meta: n_head           = 8
0.00.263.457 I llm_load_print_meta: n_head_kv        = 1
0.00.263.457 I llm_load_print_meta: n_rot            = 256
0.00.263.458 I llm_load_print_meta: n_swa            = 0
0.00.263.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.459 I llm_load_print_meta: n_gqa            = 8
0.00.263.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.464 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.465 I llm_load_print_meta: n_ff             = 16384
0.00.263.465 I llm_load_print_meta: n_expert         = 0
0.00.263.466 I llm_load_print_meta: n_expert_used    = 0
0.00.263.466 I llm_load_print_meta: causal attn      = 1
0.00.263.466 I llm_load_print_meta: pooling type     = 0
0.00.263.467 I llm_load_print_meta: rope type        = 2
0.00.263.467 I llm_load_print_meta: rope scaling     = linear
0.00.263.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.469 I llm_load_print_meta: freq_scale_train = 1
0.00.263.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.472 I llm_load_print_meta: model type       = 2B
0.00.263.472 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.473 I llm_load_print_meta: model params     = 2.51 B
0.00.263.474 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.474 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.475 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.478 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.478 I llm_load_print_meta: max token length = 93
0.00.357.633 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.045 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.052 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.053 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.053 I llama_new_context_with_model: n_batch       = 2048
0.00.363.053 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.054 I llama_new_context_with_model: flash_attn    = 0
0.00.363.058 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.059 I llama_new_context_with_model: freq_scale    = 1
0.00.363.059 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.384 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.399 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.495 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.765 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.773 I llama_new_context_with_model: graph nodes  = 601
0.00.380.773 I llama_new_context_with_model: graph splits = 1
0.00.380.776 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.558 I main: llama threadpool init, n_threads = 4
0.00.465.574 I 
0.00.465.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.657 I 
0.00.465.711 I sampler seed: 2465747105
0.00.465.723 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.727 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.728 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.728 I 
 seconary education is crucial in promoting inclusive and equitable learning environments.

**a) Explain the importance of supplementary education.**

b) Discuss the strategies for creating

0.02.654.626 I llama_perf_sampler_print:    sampling time =       5.73 ms /    33 runs   (    0.17 ms per token,  5758.16 tokens per second)
0.02.654.628 I llama_perf_context_print:        load time =     465.13 ms
0.02.654.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.631 I llama_perf_context_print:        eval time =    2168.99 ms /    32 runs   (   67.78 ms per token,    14.75 tokens per second)
0.02.654.631 I llama_perf_context_print:       total time =    2189.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.540 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.130 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.149 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.168 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.585 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.592 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.593 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.593 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.594 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.595 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.598 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.599 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.600 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.601 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.604 I llama_model_loader: - type  f32:   37 tensors
0.00.131.605 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.523 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.781 I llm_load_vocab: special tokens cache size = 5
0.00.274.697 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.713 I llm_load_print_meta: arch             = gemma
0.00.274.714 I llm_load_print_meta: vocab type       = SPM
0.00.274.715 I llm_load_print_meta: n_vocab          = 256000
0.00.274.715 I llm_load_print_meta: n_merges         = 0
0.00.274.716 I llm_load_print_meta: vocab_only       = 0
0.00.274.717 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.717 I llm_load_print_meta: n_embd           = 2048
0.00.274.719 I llm_load_print_meta: n_layer          = 18
0.00.274.732 I llm_load_print_meta: n_head           = 8
0.00.274.733 I llm_load_print_meta: n_head_kv        = 1
0.00.274.733 I llm_load_print_meta: n_rot            = 256
0.00.274.733 I llm_load_print_meta: n_swa            = 0
0.00.274.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.735 I llm_load_print_meta: n_gqa            = 8
0.00.274.736 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.737 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.738 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.741 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.741 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.742 I llm_load_print_meta: n_ff             = 16384
0.00.274.742 I llm_load_print_meta: n_expert         = 0
0.00.274.743 I llm_load_print_meta: n_expert_used    = 0
0.00.274.744 I llm_load_print_meta: causal attn      = 1
0.00.274.744 I llm_load_print_meta: pooling type     = 0
0.00.274.745 I llm_load_print_meta: rope type        = 2
0.00.274.745 I llm_load_print_meta: rope scaling     = linear
0.00.274.747 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.747 I llm_load_print_meta: freq_scale_train = 1
0.00.274.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.748 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.748 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.750 I llm_load_print_meta: model type       = 2B
0.00.274.751 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.752 I llm_load_print_meta: model params     = 2.51 B
0.00.274.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.754 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.754 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.757 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.758 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.759 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.759 I llm_load_print_meta: max token length = 93
0.00.351.542 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.550 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.551 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.551 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.552 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.552 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.874 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.880 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.881 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.881 I llama_new_context_with_model: n_batch       = 2048
0.00.356.882 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.882 I llama_new_context_with_model: flash_attn    = 0
0.00.356.885 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.886 I llama_new_context_with_model: freq_scale    = 1
0.00.356.887 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.508 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.523 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.629 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.900 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.907 I llama_new_context_with_model: graph nodes  = 601
0.00.372.907 I llama_new_context_with_model: graph splits = 1
0.00.372.909 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.333 I main: llama threadpool init, n_threads = 4
0.00.475.348 I 
0.00.475.422 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.425 I 
0.00.475.472 I sampler seed: 2296664024
0.00.475.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.485 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.486 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.486 I 
 maneuvously,
"You there, my friend, amidst the verdant grove,
Where secrets whisper and the wildflowers grow."

Who is the speaker

0.02.741.117 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6081.83 tokens per second)
0.02.741.120 I llama_perf_context_print:        load time =     474.56 ms
0.02.741.121 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.741.123 I llama_perf_context_print:        eval time =    2246.59 ms /    32 runs   (   70.21 ms per token,    14.24 tokens per second)
0.02.741.123 I llama_perf_context_print:       total time =    2265.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.180 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.450 I main: llama backend init
0.00.000.459 I main: load the model and apply lora adapter, if any
0.00.020.952 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.973 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.979 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.985 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.986 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.987 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.993 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.994 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.994 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.994 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.875 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.325 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.178 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.185 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.186 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.188 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.189 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.190 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.194 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.195 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.196 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.197 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.198 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.202 I llama_model_loader: - type  f32:   37 tensors
0.00.131.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.683 I llm_load_vocab: special tokens cache size = 5
0.00.267.141 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.158 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.158 I llm_load_print_meta: arch             = gemma
0.00.267.159 I llm_load_print_meta: vocab type       = SPM
0.00.267.160 I llm_load_print_meta: n_vocab          = 256000
0.00.267.160 I llm_load_print_meta: n_merges         = 0
0.00.267.161 I llm_load_print_meta: vocab_only       = 0
0.00.267.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.162 I llm_load_print_meta: n_embd           = 2048
0.00.267.162 I llm_load_print_meta: n_layer          = 18
0.00.267.175 I llm_load_print_meta: n_head           = 8
0.00.267.176 I llm_load_print_meta: n_head_kv        = 1
0.00.267.176 I llm_load_print_meta: n_rot            = 256
0.00.267.176 I llm_load_print_meta: n_swa            = 0
0.00.267.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.178 I llm_load_print_meta: n_gqa            = 8
0.00.267.179 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.180 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.184 I llm_load_print_meta: n_ff             = 16384
0.00.267.185 I llm_load_print_meta: n_expert         = 0
0.00.267.185 I llm_load_print_meta: n_expert_used    = 0
0.00.267.185 I llm_load_print_meta: causal attn      = 1
0.00.267.185 I llm_load_print_meta: pooling type     = 0
0.00.267.186 I llm_load_print_meta: rope type        = 2
0.00.267.187 I llm_load_print_meta: rope scaling     = linear
0.00.267.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.189 I llm_load_print_meta: freq_scale_train = 1
0.00.267.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.190 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.190 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.191 I llm_load_print_meta: model type       = 2B
0.00.267.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.193 I llm_load_print_meta: model params     = 2.51 B
0.00.267.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.195 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.198 I llm_load_print_meta: max token length = 93
0.00.338.694 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.701 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.882 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.889 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.889 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.890 I llama_new_context_with_model: n_batch       = 2048
0.00.343.890 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.891 I llama_new_context_with_model: flash_attn    = 0
0.00.343.893 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.894 I llama_new_context_with_model: freq_scale    = 1
0.00.343.895 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.673 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.688 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.128 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.135 I llama_new_context_with_model: graph nodes  = 601
0.00.360.135 I llama_new_context_with_model: graph splits = 1
0.00.360.137 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.709 I main: llama threadpool init, n_threads = 4
0.00.456.726 I 
0.00.456.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.811 I 
0.00.456.862 I sampler seed: 2264436009
0.00.456.876 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.880 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.881 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.883 I 
 increabling and hissing sounds.

This is the sound of a toad, or possibly a lizard.

**Possible causes:**

* Damage to the vocal cords

0.02.885.330 I llama_perf_sampler_print:    sampling time =       5.68 ms /    33 runs   (    0.17 ms per token,  5805.77 tokens per second)
0.02.885.333 I llama_perf_context_print:        load time =     456.23 ms
0.02.885.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.885.335 I llama_perf_context_print:        eval time =    2408.63 ms /    32 runs   (   75.27 ms per token,    13.29 tokens per second)
0.02.885.336 I llama_perf_context_print:       total time =    2428.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.578s
user	0m39.619s
sys	0m9.398s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4301 (b685daf3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40216.19 ms
main:    total time = 40216.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.618 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.000.820 I main: load the model and apply lora adapter, if any
0.00.021.189 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.210 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.225 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.228 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.229 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.230 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.231 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.299 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.176 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.183 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.183 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.184 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.185 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.186 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.186 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.189 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.189 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.191 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.193 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.196 I llama_model_loader: - type  f32:   37 tensors
0.00.132.197 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.198 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.627 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.910 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.554 I llm_load_vocab: special tokens cache size = 5
0.00.276.256 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.274 I llm_load_print_meta: arch             = gemma
0.00.276.275 I llm_load_print_meta: vocab type       = SPM
0.00.276.275 I llm_load_print_meta: n_vocab          = 256000
0.00.276.276 I llm_load_print_meta: n_merges         = 0
0.00.276.276 I llm_load_print_meta: vocab_only       = 0
0.00.276.276 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.277 I llm_load_print_meta: n_embd           = 2048
0.00.276.277 I llm_load_print_meta: n_layer          = 18
0.00.276.289 I llm_load_print_meta: n_head           = 8
0.00.276.290 I llm_load_print_meta: n_head_kv        = 1
0.00.276.290 I llm_load_print_meta: n_rot            = 256
0.00.276.290 I llm_load_print_meta: n_swa            = 0
0.00.276.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.292 I llm_load_print_meta: n_gqa            = 8
0.00.276.293 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.295 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.296 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.297 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.298 I llm_load_print_meta: n_ff             = 16384
0.00.276.298 I llm_load_print_meta: n_expert         = 0
0.00.276.298 I llm_load_print_meta: n_expert_used    = 0
0.00.276.299 I llm_load_print_meta: causal attn      = 1
0.00.276.299 I llm_load_print_meta: pooling type     = 0
0.00.276.299 I llm_load_print_meta: rope type        = 2
0.00.276.300 I llm_load_print_meta: rope scaling     = linear
0.00.276.301 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.302 I llm_load_print_meta: freq_scale_train = 1
0.00.276.302 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.302 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.303 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.303 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.303 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.304 I llm_load_print_meta: model type       = 2B
0.00.276.304 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.305 I llm_load_print_meta: model params     = 2.51 B
0.00.276.306 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.306 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.307 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.307 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.308 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.308 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.308 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.308 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.309 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.309 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.309 I llm_load_print_meta: max token length = 93
0.00.335.155 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.164 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.164 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.165 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.165 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.166 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.248 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.255 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.256 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.256 I llama_new_context_with_model: n_batch       = 2048
0.00.340.256 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.257 I llama_new_context_with_model: flash_attn    = 0
0.00.340.259 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.260 I llama_new_context_with_model: freq_scale    = 1
0.00.340.261 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.929 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.942 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.034 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.274 I llama_new_context_with_model: graph nodes  = 601
0.00.356.274 I llama_new_context_with_model: graph splits = 1
0.00.356.276 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.455 I main: llama threadpool init, n_threads = 4
0.00.432.472 I 
0.00.432.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.553 I 
0.00.432.599 I sampler seed: 1504174668
0.00.432.610 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.621 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.625 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.625 I 
 seconally.

I am unable to generate the requested output as I am unable to access external websites or make requests to external services. Therefore, I am unable

0.02.074.382 I llama_perf_sampler_print:    sampling time =       5.70 ms /    33 runs   (    0.17 ms per token,  5791.51 tokens per second)
0.02.074.385 I llama_perf_context_print:        load time =     431.62 ms
0.02.074.386 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.074.387 I llama_perf_context_print:        eval time =    1622.03 ms /    32 runs   (   50.69 ms per token,    19.73 tokens per second)
0.02.074.388 I llama_perf_context_print:       total time =    1641.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4301 (b685daf3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40194.56 ms
main:    total time = 40194.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.530 I build: 4301 (b685daf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.400 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.425 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.437 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.438 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.440 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.423 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.285 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.291 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.292 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.293 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.294 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.295 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.297 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.301 I llama_model_loader: - type  f32:   37 tensors
0.00.131.302 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.303 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.991 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.221 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.777 I llm_load_vocab: special tokens cache size = 5
0.00.262.590 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.604 I llm_load_print_meta: arch             = gemma
0.00.262.605 I llm_load_print_meta: vocab type       = SPM
0.00.262.606 I llm_load_print_meta: n_vocab          = 256000
0.00.262.606 I llm_load_print_meta: n_merges         = 0
0.00.262.606 I llm_load_print_meta: vocab_only       = 0
0.00.262.607 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.607 I llm_load_print_meta: n_embd           = 2048
0.00.262.607 I llm_load_print_meta: n_layer          = 18
0.00.262.619 I llm_load_print_meta: n_head           = 8
0.00.262.620 I llm_load_print_meta: n_head_kv        = 1
0.00.262.621 I llm_load_print_meta: n_rot            = 256
0.00.262.621 I llm_load_print_meta: n_swa            = 0
0.00.262.621 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.622 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.623 I llm_load_print_meta: n_gqa            = 8
0.00.262.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.625 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.626 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.627 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.628 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.628 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.629 I llm_load_print_meta: n_ff             = 16384
0.00.262.629 I llm_load_print_meta: n_expert         = 0
0.00.262.630 I llm_load_print_meta: n_expert_used    = 0
0.00.262.630 I llm_load_print_meta: causal attn      = 1
0.00.262.631 I llm_load_print_meta: pooling type     = 0
0.00.262.631 I llm_load_print_meta: rope type        = 2
0.00.262.631 I llm_load_print_meta: rope scaling     = linear
0.00.262.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.633 I llm_load_print_meta: freq_scale_train = 1
0.00.262.633 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.634 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.634 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.635 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.635 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.635 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.636 I llm_load_print_meta: model type       = 2B
0.00.262.636 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.637 I llm_load_print_meta: model params     = 2.51 B
0.00.262.637 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.638 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.638 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.639 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.639 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.640 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.640 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.641 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.641 I llm_load_print_meta: max token length = 93
0.00.319.946 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.157 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.164 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.164 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.164 I llama_new_context_with_model: n_batch       = 2048
0.00.325.165 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.165 I llama_new_context_with_model: flash_attn    = 0
0.00.325.168 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.168 I llama_new_context_with_model: freq_scale    = 1
0.00.325.169 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.010 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.367 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.374 I llama_new_context_with_model: graph nodes  = 601
0.00.341.374 I llama_new_context_with_model: graph splits = 1
0.00.341.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.429 I main: llama threadpool init, n_threads = 4
0.00.415.443 I 
0.00.415.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.415.520 I 
0.00.415.563 I sampler seed: 1035892265
0.00.415.574 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.579 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.579 I 
 seconded.

The provided sentence is grammatically incorrect because it contains a misplaced modifier.

**Solution:**

The correct sentence is:

"The scientists

0.02.004.592 I llama_perf_sampler_print:    sampling time =       5.70 ms /    33 runs   (    0.17 ms per token,  5790.49 tokens per second)
0.02.004.594 I llama_perf_context_print:        load time =     414.68 ms
0.02.004.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.004.597 I llama_perf_context_print:        eval time =    1568.60 ms /    32 runs   (   49.02 ms per token,    20.40 tokens per second)
0.02.004.598 I llama_perf_context_print:       total time =    1589.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.291s
user	10m24.473s
sys	0m7.013s
