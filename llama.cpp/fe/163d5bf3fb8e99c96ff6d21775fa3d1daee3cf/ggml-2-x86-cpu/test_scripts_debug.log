+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.738 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.957 I main: llama backend init
0.00.000.966 I main: load the model and apply lora adapter, if any
0.00.088.156 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.088.179 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.088.300 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.338 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.344 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.352 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.364 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.088.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.088.393 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.088.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.088.398 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.088.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.309.286 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.895 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.936 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.434.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.434.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.434.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.434.958 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.434.961 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.434.976 I llama_model_loader: - type  f32:   37 tensors
0.00.434.982 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.020 I print_info: file format = GGUF V3 (latest)
0.00.435.023 I print_info: file type   = Q8_0
0.00.435.027 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.713.628 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.851.803 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.853.243 I load: special tokens cache size = 5
0.01.087.072 I load: token to piece cache size = 1.6014 MB
0.01.087.191 I print_info: arch             = gemma
0.01.087.194 I print_info: vocab_only       = 0
0.01.087.195 I print_info: n_ctx_train      = 8192
0.01.087.196 I print_info: n_embd           = 2048
0.01.087.197 I print_info: n_layer          = 18
0.01.087.291 I print_info: n_head           = 8
0.01.087.304 I print_info: n_head_kv        = 1
0.01.087.305 I print_info: n_rot            = 256
0.01.087.305 I print_info: n_swa            = 0
0.01.087.306 I print_info: n_embd_head_k    = 256
0.01.087.306 I print_info: n_embd_head_v    = 256
0.01.087.315 I print_info: n_gqa            = 8
0.01.087.323 I print_info: n_embd_k_gqa     = 256
0.01.087.334 I print_info: n_embd_v_gqa     = 256
0.01.087.336 I print_info: f_norm_eps       = 0.0e+00
0.01.087.338 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.087.339 I print_info: f_clamp_kqv      = 0.0e+00
0.01.087.340 I print_info: f_max_alibi_bias = 0.0e+00
0.01.087.341 I print_info: f_logit_scale    = 0.0e+00
0.01.087.348 I print_info: n_ff             = 16384
0.01.087.349 I print_info: n_expert         = 0
0.01.087.350 I print_info: n_expert_used    = 0
0.01.087.350 I print_info: causal attn      = 1
0.01.087.351 I print_info: pooling type     = 0
0.01.087.352 I print_info: rope type        = 2
0.01.087.353 I print_info: rope scaling     = linear
0.01.087.355 I print_info: freq_base_train  = 10000.0
0.01.087.356 I print_info: freq_scale_train = 1
0.01.087.358 I print_info: n_ctx_orig_yarn  = 8192
0.01.087.359 I print_info: rope_finetuned   = unknown
0.01.087.361 I print_info: ssm_d_conv       = 0
0.01.087.362 I print_info: ssm_d_inner      = 0
0.01.087.363 I print_info: ssm_d_state      = 0
0.01.087.364 I print_info: ssm_dt_rank      = 0
0.01.087.365 I print_info: ssm_dt_b_c_rms   = 0
0.01.087.367 I print_info: model type       = 2B
0.01.087.371 I print_info: model params     = 2.51 B
0.01.087.371 I print_info: general.name     = gemma-1.1-2b-it
0.01.087.377 I print_info: vocab type       = SPM
0.01.087.382 I print_info: n_vocab          = 256000
0.01.087.386 I print_info: n_merges         = 0
0.01.087.387 I print_info: BOS token        = 2 '<bos>'
0.01.087.387 I print_info: EOS token        = 1 '<eos>'
0.01.087.388 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.087.389 I print_info: UNK token        = 3 '<unk>'
0.01.087.390 I print_info: PAD token        = 0 '<pad>'
0.01.087.391 I print_info: LF token         = 227 '<0x0A>'
0.01.087.401 I print_info: EOG token        = 1 '<eos>'
0.01.087.403 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.087.403 I print_info: max token length = 93
0.01.087.406 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.199.587 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.199.597 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.199.598 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.199.599 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.199.600 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.199.602 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.207.323 I llama_init_from_model: n_seq_max     = 1
0.01.207.333 I llama_init_from_model: n_ctx         = 4096
0.01.207.334 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.207.335 I llama_init_from_model: n_batch       = 2048
0.01.207.335 I llama_init_from_model: n_ubatch      = 512
0.01.207.336 I llama_init_from_model: flash_attn    = 0
0.01.207.341 I llama_init_from_model: freq_base     = 10000.0
0.01.207.342 I llama_init_from_model: freq_scale    = 1
0.01.207.343 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.207.460 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.227.246 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.227.306 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.227.467 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.231.368 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.231.371 I llama_init_from_model: graph nodes  = 601
0.01.231.372 I llama_init_from_model: graph splits = 1
0.01.231.407 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.231.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.872.447 I main: llama threadpool init, n_threads = 4
0.01.872.463 I 
0.01.872.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.872.598 I 
0.01.872.889 I sampler seed: 1914586508
0.01.872.906 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.872.921 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.872.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.872.926 I 
 increasities from the 20th century.

I am unable to access the requested content.
I do not have access to personal information or external links

0.15.454.901 I llama_perf_sampler_print:    sampling time =      50.02 ms /    33 runs   (    1.52 ms per token,   659.80 tokens per second)
0.15.454.905 I llama_perf_context_print:        load time =    1844.44 ms
0.15.454.921 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.454.923 I llama_perf_context_print:        eval time =   13493.89 ms /    32 runs   (  421.68 ms per token,     2.37 tokens per second)
0.15.454.924 I llama_perf_context_print:       total time =   13609.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.923 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.150 I main: llama backend init
0.00.001.159 I main: load the model and apply lora adapter, if any
0.00.087.942 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.088.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.091 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.096 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.103 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.105 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.112 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.088.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.088.124 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.088.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.088.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.088.129 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.302.262 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.404.400 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.427.580 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.427.592 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.427.594 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.427.596 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.427.598 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.427.600 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.427.602 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.427.607 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.427.609 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.427.611 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.427.613 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.427.615 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.427.625 I llama_model_loader: - type  f32:   37 tensors
0.00.427.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.646 I print_info: file format = GGUF V3 (latest)
0.00.427.649 I print_info: file type   = Q8_0
0.00.427.652 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.700.556 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.827.354 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.828.445 I load: special tokens cache size = 5
0.01.059.716 I load: token to piece cache size = 1.6014 MB
0.01.059.822 I print_info: arch             = gemma
0.01.059.823 I print_info: vocab_only       = 0
0.01.059.824 I print_info: n_ctx_train      = 8192
0.01.059.824 I print_info: n_embd           = 2048
0.01.059.825 I print_info: n_layer          = 18
0.01.059.913 I print_info: n_head           = 8
0.01.059.925 I print_info: n_head_kv        = 1
0.01.059.926 I print_info: n_rot            = 256
0.01.059.927 I print_info: n_swa            = 0
0.01.059.927 I print_info: n_embd_head_k    = 256
0.01.059.927 I print_info: n_embd_head_v    = 256
0.01.059.933 I print_info: n_gqa            = 8
0.01.059.939 I print_info: n_embd_k_gqa     = 256
0.01.059.944 I print_info: n_embd_v_gqa     = 256
0.01.059.946 I print_info: f_norm_eps       = 0.0e+00
0.01.059.947 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.059.948 I print_info: f_clamp_kqv      = 0.0e+00
0.01.059.948 I print_info: f_max_alibi_bias = 0.0e+00
0.01.059.948 I print_info: f_logit_scale    = 0.0e+00
0.01.059.953 I print_info: n_ff             = 16384
0.01.059.954 I print_info: n_expert         = 0
0.01.059.954 I print_info: n_expert_used    = 0
0.01.059.955 I print_info: causal attn      = 1
0.01.059.955 I print_info: pooling type     = 0
0.01.059.956 I print_info: rope type        = 2
0.01.059.956 I print_info: rope scaling     = linear
0.01.059.958 I print_info: freq_base_train  = 10000.0
0.01.059.959 I print_info: freq_scale_train = 1
0.01.059.960 I print_info: n_ctx_orig_yarn  = 8192
0.01.059.960 I print_info: rope_finetuned   = unknown
0.01.059.972 I print_info: ssm_d_conv       = 0
0.01.059.973 I print_info: ssm_d_inner      = 0
0.01.059.973 I print_info: ssm_d_state      = 0
0.01.059.974 I print_info: ssm_dt_rank      = 0
0.01.059.975 I print_info: ssm_dt_b_c_rms   = 0
0.01.059.977 I print_info: model type       = 2B
0.01.059.978 I print_info: model params     = 2.51 B
0.01.059.978 I print_info: general.name     = gemma-1.1-2b-it
0.01.059.983 I print_info: vocab type       = SPM
0.01.059.986 I print_info: n_vocab          = 256000
0.01.059.988 I print_info: n_merges         = 0
0.01.060.002 I print_info: BOS token        = 2 '<bos>'
0.01.060.006 I print_info: EOS token        = 1 '<eos>'
0.01.060.006 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.060.007 I print_info: UNK token        = 3 '<unk>'
0.01.060.007 I print_info: PAD token        = 0 '<pad>'
0.01.060.008 I print_info: LF token         = 227 '<0x0A>'
0.01.060.016 I print_info: EOG token        = 1 '<eos>'
0.01.060.018 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.060.018 I print_info: max token length = 93
0.01.060.029 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.162.805 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.170.047 I llama_init_from_model: n_seq_max     = 1
0.01.170.053 I llama_init_from_model: n_ctx         = 4096
0.01.170.053 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.170.054 I llama_init_from_model: n_batch       = 2048
0.01.170.054 I llama_init_from_model: n_ubatch      = 512
0.01.170.055 I llama_init_from_model: flash_attn    = 0
0.01.170.058 I llama_init_from_model: freq_base     = 10000.0
0.01.170.058 I llama_init_from_model: freq_scale    = 1
0.01.170.059 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.170.155 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.187.370 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.187.414 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.187.553 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.190.946 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.190.951 I llama_init_from_model: graph nodes  = 601
0.01.190.951 I llama_init_from_model: graph splits = 1
0.01.190.981 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.190.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.869.041 I main: llama threadpool init, n_threads = 4
0.01.869.058 I 
0.01.869.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.869.167 I 
0.01.869.428 I sampler seed: 1866857326
0.01.869.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.869.451 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.869.455 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.869.455 I 
 increasities that affect the quality of life for many people.

**1. Air pollution:**

- Respiratory problems
- Heart disease
- Increased hospitalizations

0.15.443.684 I llama_perf_sampler_print:    sampling time =      50.01 ms /    33 runs   (    1.52 ms per token,   659.85 tokens per second)
0.15.443.687 I llama_perf_context_print:        load time =    1840.86 ms
0.15.443.689 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.443.705 I llama_perf_context_print:        eval time =   13486.80 ms /    32 runs   (  421.46 ms per token,     2.37 tokens per second)
0.15.443.707 I llama_perf_context_print:       total time =   13601.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.798 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.040 I main: llama backend init
0.00.001.050 I main: load the model and apply lora adapter, if any
0.00.088.069 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.088.084 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.088.199 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.088.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.088.262 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.088.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.088.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.088.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.287.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.412.700 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.412.710 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.412.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.412.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.412.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.412.718 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.412.721 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.412.725 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.412.727 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.412.729 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.412.732 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.412.733 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.412.743 I llama_model_loader: - type  f32:   37 tensors
0.00.412.745 I llama_model_loader: - type q8_0:  127 tensors
0.00.412.765 I print_info: file format = GGUF V3 (latest)
0.00.412.766 I print_info: file type   = Q8_0
0.00.412.768 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.679.335 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.806.279 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.807.664 I load: special tokens cache size = 5
0.01.030.415 I load: token to piece cache size = 1.6014 MB
0.01.030.517 I print_info: arch             = gemma
0.01.030.518 I print_info: vocab_only       = 0
0.01.030.519 I print_info: n_ctx_train      = 8192
0.01.030.519 I print_info: n_embd           = 2048
0.01.030.520 I print_info: n_layer          = 18
0.01.030.609 I print_info: n_head           = 8
0.01.030.621 I print_info: n_head_kv        = 1
0.01.030.623 I print_info: n_rot            = 256
0.01.030.623 I print_info: n_swa            = 0
0.01.030.640 I print_info: n_embd_head_k    = 256
0.01.030.643 I print_info: n_embd_head_v    = 256
0.01.030.649 I print_info: n_gqa            = 8
0.01.030.653 I print_info: n_embd_k_gqa     = 256
0.01.030.658 I print_info: n_embd_v_gqa     = 256
0.01.030.661 I print_info: f_norm_eps       = 0.0e+00
0.01.030.662 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.030.663 I print_info: f_clamp_kqv      = 0.0e+00
0.01.030.663 I print_info: f_max_alibi_bias = 0.0e+00
0.01.030.663 I print_info: f_logit_scale    = 0.0e+00
0.01.030.669 I print_info: n_ff             = 16384
0.01.030.669 I print_info: n_expert         = 0
0.01.030.669 I print_info: n_expert_used    = 0
0.01.030.670 I print_info: causal attn      = 1
0.01.030.670 I print_info: pooling type     = 0
0.01.030.671 I print_info: rope type        = 2
0.01.030.671 I print_info: rope scaling     = linear
0.01.030.673 I print_info: freq_base_train  = 10000.0
0.01.030.674 I print_info: freq_scale_train = 1
0.01.030.674 I print_info: n_ctx_orig_yarn  = 8192
0.01.030.675 I print_info: rope_finetuned   = unknown
0.01.030.676 I print_info: ssm_d_conv       = 0
0.01.030.676 I print_info: ssm_d_inner      = 0
0.01.030.676 I print_info: ssm_d_state      = 0
0.01.030.679 I print_info: ssm_dt_rank      = 0
0.01.030.680 I print_info: ssm_dt_b_c_rms   = 0
0.01.030.681 I print_info: model type       = 2B
0.01.030.682 I print_info: model params     = 2.51 B
0.01.030.683 I print_info: general.name     = gemma-1.1-2b-it
0.01.030.687 I print_info: vocab type       = SPM
0.01.030.689 I print_info: n_vocab          = 256000
0.01.030.694 I print_info: n_merges         = 0
0.01.030.695 I print_info: BOS token        = 2 '<bos>'
0.01.030.695 I print_info: EOS token        = 1 '<eos>'
0.01.030.696 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.030.696 I print_info: UNK token        = 3 '<unk>'
0.01.030.712 I print_info: PAD token        = 0 '<pad>'
0.01.030.714 I print_info: LF token         = 227 '<0x0A>'
0.01.030.722 I print_info: EOG token        = 1 '<eos>'
0.01.030.724 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.030.724 I print_info: max token length = 93
0.01.030.726 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.112.416 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.112.426 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.112.427 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.112.428 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.112.429 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.112.429 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.119.559 I llama_init_from_model: n_seq_max     = 1
0.01.119.565 I llama_init_from_model: n_ctx         = 4096
0.01.119.565 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.119.566 I llama_init_from_model: n_batch       = 2048
0.01.119.567 I llama_init_from_model: n_ubatch      = 512
0.01.119.567 I llama_init_from_model: flash_attn    = 0
0.01.119.570 I llama_init_from_model: freq_base     = 10000.0
0.01.119.571 I llama_init_from_model: freq_scale    = 1
0.01.119.572 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.119.673 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.138.159 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.138.211 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.138.372 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.141.889 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.141.893 I llama_init_from_model: graph nodes  = 601
0.01.141.894 I llama_init_from_model: graph splits = 1
0.01.141.924 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.141.927 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.779.410 I main: llama threadpool init, n_threads = 4
0.01.779.427 I 
0.01.779.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.779.544 I 
0.01.779.821 I sampler seed: 77185674
0.01.779.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.779.846 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.779.849 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.779.849 I 
 increasities

I am unable to generate a response as the context provided contains inappropriate and sexually suggestive language. I am programmed to uphold ethical guidelines and cannot generate responses

0.15.402.175 I llama_perf_sampler_print:    sampling time =      49.97 ms /    33 runs   (    1.51 ms per token,   660.42 tokens per second)
0.15.402.180 I llama_perf_context_print:        load time =    1751.32 ms
0.15.402.182 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.402.184 I llama_perf_context_print:        eval time =   13534.43 ms /    32 runs   (  422.95 ms per token,     2.36 tokens per second)
0.15.402.185 I llama_perf_context_print:       total time =   13649.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.702 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.000.940 I main: load the model and apply lora adapter, if any
0.00.086.727 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.744 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.867 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.894 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.911 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.935 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.958 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.966 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.968 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.969 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.311.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.413.746 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.436.859 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.436.874 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.436.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.436.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.436.887 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.436.889 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.436.891 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.436.896 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.436.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.436.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.436.902 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.436.904 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.436.915 I llama_model_loader: - type  f32:   37 tensors
0.00.436.917 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.938 I print_info: file format = GGUF V3 (latest)
0.00.436.939 I print_info: file type   = Q8_0
0.00.436.942 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.708.999 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.834.133 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.835.280 I load: special tokens cache size = 5
0.01.069.964 I load: token to piece cache size = 1.6014 MB
0.01.070.063 I print_info: arch             = gemma
0.01.070.064 I print_info: vocab_only       = 0
0.01.070.065 I print_info: n_ctx_train      = 8192
0.01.070.065 I print_info: n_embd           = 2048
0.01.070.065 I print_info: n_layer          = 18
0.01.070.155 I print_info: n_head           = 8
0.01.070.166 I print_info: n_head_kv        = 1
0.01.070.168 I print_info: n_rot            = 256
0.01.070.168 I print_info: n_swa            = 0
0.01.070.169 I print_info: n_embd_head_k    = 256
0.01.070.170 I print_info: n_embd_head_v    = 256
0.01.070.176 I print_info: n_gqa            = 8
0.01.070.183 I print_info: n_embd_k_gqa     = 256
0.01.070.191 I print_info: n_embd_v_gqa     = 256
0.01.070.194 I print_info: f_norm_eps       = 0.0e+00
0.01.070.196 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.070.198 I print_info: f_clamp_kqv      = 0.0e+00
0.01.070.199 I print_info: f_max_alibi_bias = 0.0e+00
0.01.070.199 I print_info: f_logit_scale    = 0.0e+00
0.01.070.207 I print_info: n_ff             = 16384
0.01.070.208 I print_info: n_expert         = 0
0.01.070.209 I print_info: n_expert_used    = 0
0.01.070.210 I print_info: causal attn      = 1
0.01.070.211 I print_info: pooling type     = 0
0.01.070.212 I print_info: rope type        = 2
0.01.070.213 I print_info: rope scaling     = linear
0.01.070.215 I print_info: freq_base_train  = 10000.0
0.01.070.217 I print_info: freq_scale_train = 1
0.01.070.218 I print_info: n_ctx_orig_yarn  = 8192
0.01.070.218 I print_info: rope_finetuned   = unknown
0.01.070.220 I print_info: ssm_d_conv       = 0
0.01.070.221 I print_info: ssm_d_inner      = 0
0.01.070.222 I print_info: ssm_d_state      = 0
0.01.070.223 I print_info: ssm_dt_rank      = 0
0.01.070.223 I print_info: ssm_dt_b_c_rms   = 0
0.01.070.229 I print_info: model type       = 2B
0.01.070.230 I print_info: model params     = 2.51 B
0.01.070.231 I print_info: general.name     = gemma-1.1-2b-it
0.01.070.236 I print_info: vocab type       = SPM
0.01.070.238 I print_info: n_vocab          = 256000
0.01.070.242 I print_info: n_merges         = 0
0.01.070.243 I print_info: BOS token        = 2 '<bos>'
0.01.070.244 I print_info: EOS token        = 1 '<eos>'
0.01.070.245 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.070.246 I print_info: UNK token        = 3 '<unk>'
0.01.070.246 I print_info: PAD token        = 0 '<pad>'
0.01.070.250 I print_info: LF token         = 227 '<0x0A>'
0.01.070.259 I print_info: EOG token        = 1 '<eos>'
0.01.070.269 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.070.270 I print_info: max token length = 93
0.01.070.273 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.144.066 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.144.082 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.151.471 I llama_init_from_model: n_seq_max     = 1
0.01.151.480 I llama_init_from_model: n_ctx         = 4096
0.01.151.481 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.151.481 I llama_init_from_model: n_batch       = 2048
0.01.151.483 I llama_init_from_model: n_ubatch      = 512
0.01.151.483 I llama_init_from_model: flash_attn    = 0
0.01.151.488 I llama_init_from_model: freq_base     = 10000.0
0.01.151.489 I llama_init_from_model: freq_scale    = 1
0.01.151.489 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.151.600 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.169.807 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.169.861 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.170.024 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.173.549 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.173.553 I llama_init_from_model: graph nodes  = 601
0.01.173.553 I llama_init_from_model: graph splits = 1
0.01.173.587 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.173.591 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.813.444 I main: llama threadpool init, n_threads = 4
0.01.813.458 I 
0.01.813.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.813.587 I 
0.01.813.865 I sampler seed: 1482345705
0.01.813.880 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.813.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.813.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.813.896 I 
 increasities, the vast majority of the population could not tell you what a donkey is, let alone explain its purpose or how it is used. [end of text]


0.14.665.347 I llama_perf_sampler_print:    sampling time =      46.88 ms /    31 runs   (    1.51 ms per token,   661.29 tokens per second)
0.14.665.351 I llama_perf_context_print:        load time =    1785.57 ms
0.14.665.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.665.354 I llama_perf_context_print:        eval time =   12769.58 ms /    30 runs   (  425.65 ms per token,     2.35 tokens per second)
0.14.665.355 I llama_perf_context_print:       total time =   12878.71 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m12.985s
user	3m50.757s
sys	0m10.430s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4730 (fe163d5b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187374.02 ms
main:    total time = 187374.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.764 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.987 I main: llama backend init
0.00.000.995 I main: load the model and apply lora adapter, if any
0.00.087.041 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.087.053 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.165 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.191 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.206 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.220 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.233 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.238 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.241 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.286.990 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.412.986 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.003 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.005 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.007 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.009 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.011 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.015 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.020 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.022 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.413.024 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.413.026 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.028 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.413.030 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.413.040 I llama_model_loader: - type  f32:   37 tensors
0.00.413.042 I llama_model_loader: - type q4_K:  108 tensors
0.00.413.042 I llama_model_loader: - type q6_K:   19 tensors
0.00.413.062 I print_info: file format = GGUF V3 (latest)
0.00.413.066 I print_info: file type   = Q4_K - Medium
0.00.413.068 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.686.071 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.816.132 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.317 I load: special tokens cache size = 5
0.01.047.819 I load: token to piece cache size = 1.6014 MB
0.01.047.913 I print_info: arch             = gemma
0.01.047.914 I print_info: vocab_only       = 0
0.01.047.915 I print_info: n_ctx_train      = 8192
0.01.047.915 I print_info: n_embd           = 2048
0.01.047.915 I print_info: n_layer          = 18
0.01.048.001 I print_info: n_head           = 8
0.01.048.013 I print_info: n_head_kv        = 1
0.01.048.014 I print_info: n_rot            = 256
0.01.048.014 I print_info: n_swa            = 0
0.01.048.015 I print_info: n_embd_head_k    = 256
0.01.048.015 I print_info: n_embd_head_v    = 256
0.01.048.020 I print_info: n_gqa            = 8
0.01.048.025 I print_info: n_embd_k_gqa     = 256
0.01.048.030 I print_info: n_embd_v_gqa     = 256
0.01.048.031 I print_info: f_norm_eps       = 0.0e+00
0.01.048.033 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.048.033 I print_info: f_clamp_kqv      = 0.0e+00
0.01.048.034 I print_info: f_max_alibi_bias = 0.0e+00
0.01.048.035 I print_info: f_logit_scale    = 0.0e+00
0.01.048.040 I print_info: n_ff             = 16384
0.01.048.040 I print_info: n_expert         = 0
0.01.048.041 I print_info: n_expert_used    = 0
0.01.048.042 I print_info: causal attn      = 1
0.01.048.042 I print_info: pooling type     = 0
0.01.048.042 I print_info: rope type        = 2
0.01.048.043 I print_info: rope scaling     = linear
0.01.048.047 I print_info: freq_base_train  = 10000.0
0.01.048.047 I print_info: freq_scale_train = 1
0.01.048.049 I print_info: n_ctx_orig_yarn  = 8192
0.01.048.049 I print_info: rope_finetuned   = unknown
0.01.048.050 I print_info: ssm_d_conv       = 0
0.01.048.050 I print_info: ssm_d_inner      = 0
0.01.048.051 I print_info: ssm_d_state      = 0
0.01.048.051 I print_info: ssm_dt_rank      = 0
0.01.048.067 I print_info: ssm_dt_b_c_rms   = 0
0.01.048.069 I print_info: model type       = 2B
0.01.048.070 I print_info: model params     = 2.51 B
0.01.048.071 I print_info: general.name     = gemma-1.1-2b-it
0.01.048.075 I print_info: vocab type       = SPM
0.01.048.077 I print_info: n_vocab          = 256000
0.01.048.080 I print_info: n_merges         = 0
0.01.048.081 I print_info: BOS token        = 2 '<bos>'
0.01.048.081 I print_info: EOS token        = 1 '<eos>'
0.01.048.082 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.048.083 I print_info: UNK token        = 3 '<unk>'
0.01.048.083 I print_info: PAD token        = 0 '<pad>'
0.01.048.084 I print_info: LF token         = 227 '<0x0A>'
0.01.048.092 I print_info: EOG token        = 1 '<eos>'
0.01.048.094 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.048.094 I print_info: max token length = 93
0.01.048.096 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.115.855 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.115.865 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.115.866 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.115.867 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.115.868 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.115.868 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.123.142 I llama_init_from_model: n_seq_max     = 1
0.01.123.147 I llama_init_from_model: n_ctx         = 4096
0.01.123.148 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.123.148 I llama_init_from_model: n_batch       = 2048
0.01.123.149 I llama_init_from_model: n_ubatch      = 512
0.01.123.149 I llama_init_from_model: flash_attn    = 0
0.01.123.153 I llama_init_from_model: freq_base     = 10000.0
0.01.123.154 I llama_init_from_model: freq_scale    = 1
0.01.123.154 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.123.252 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.140.784 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.140.832 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.140.979 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.144.396 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.144.400 I llama_init_from_model: graph nodes  = 601
0.01.144.400 I llama_init_from_model: graph splits = 1
0.01.144.429 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.144.432 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.759.509 I main: llama threadpool init, n_threads = 4
0.01.759.523 I 
0.01.759.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.759.636 I 
0.01.759.915 I sampler seed: 723621321
0.01.759.928 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.759.952 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.759.956 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.759.956 I 
 maneutruing, or exaggerating the severity of a situation to provoke a desired emotional response. [end of text]


0.08.393.855 I llama_perf_sampler_print:    sampling time =      29.84 ms /    20 runs   (    1.49 ms per token,   670.29 tokens per second)
0.08.393.858 I llama_perf_context_print:        load time =    1731.54 ms
0.08.393.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.393.877 I llama_perf_context_print:        eval time =    6580.41 ms /    19 runs   (  346.34 ms per token,     2.89 tokens per second)
0.08.393.878 I llama_perf_context_print:       total time =    6661.20 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4730 (fe163d5b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187336.34 ms
main:    total time = 187336.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.747 I build: 4730 (fe163d5b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.966 I main: llama backend init
0.00.000.973 I main: load the model and apply lora adapter, if any
0.00.086.864 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.026 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.032 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.034 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.038 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.054 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.057 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.287.541 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.412.664 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.412.676 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.412.678 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.412.680 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.412.682 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.412.684 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.412.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.412.690 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.412.692 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.412.694 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.412.703 I llama_model_loader: - type  f32:   37 tensors
0.00.412.706 I llama_model_loader: - type q4_K:  108 tensors
0.00.412.706 I llama_model_loader: - type q6_K:   19 tensors
0.00.412.726 I print_info: file format = GGUF V3 (latest)
0.00.412.727 I print_info: file type   = Q4_K - Medium
0.00.412.729 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.704.922 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.844.738 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.846.078 I load: special tokens cache size = 5
0.01.078.378 I load: token to piece cache size = 1.6014 MB
0.01.078.469 I print_info: arch             = gemma
0.01.078.471 I print_info: vocab_only       = 0
0.01.078.472 I print_info: n_ctx_train      = 8192
0.01.078.472 I print_info: n_embd           = 2048
0.01.078.472 I print_info: n_layer          = 18
0.01.078.562 I print_info: n_head           = 8
0.01.078.575 I print_info: n_head_kv        = 1
0.01.078.576 I print_info: n_rot            = 256
0.01.078.579 I print_info: n_swa            = 0
0.01.078.579 I print_info: n_embd_head_k    = 256
0.01.078.579 I print_info: n_embd_head_v    = 256
0.01.078.584 I print_info: n_gqa            = 8
0.01.078.589 I print_info: n_embd_k_gqa     = 256
0.01.078.594 I print_info: n_embd_v_gqa     = 256
0.01.078.596 I print_info: f_norm_eps       = 0.0e+00
0.01.078.597 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.078.598 I print_info: f_clamp_kqv      = 0.0e+00
0.01.078.598 I print_info: f_max_alibi_bias = 0.0e+00
0.01.078.599 I print_info: f_logit_scale    = 0.0e+00
0.01.078.604 I print_info: n_ff             = 16384
0.01.078.617 I print_info: n_expert         = 0
0.01.078.620 I print_info: n_expert_used    = 0
0.01.078.620 I print_info: causal attn      = 1
0.01.078.620 I print_info: pooling type     = 0
0.01.078.621 I print_info: rope type        = 2
0.01.078.621 I print_info: rope scaling     = linear
0.01.078.623 I print_info: freq_base_train  = 10000.0
0.01.078.624 I print_info: freq_scale_train = 1
0.01.078.624 I print_info: n_ctx_orig_yarn  = 8192
0.01.078.625 I print_info: rope_finetuned   = unknown
0.01.078.637 I print_info: ssm_d_conv       = 0
0.01.078.645 I print_info: ssm_d_inner      = 0
0.01.078.653 I print_info: ssm_d_state      = 0
0.01.078.656 I print_info: ssm_dt_rank      = 0
0.01.078.657 I print_info: ssm_dt_b_c_rms   = 0
0.01.078.658 I print_info: model type       = 2B
0.01.078.659 I print_info: model params     = 2.51 B
0.01.078.659 I print_info: general.name     = gemma-1.1-2b-it
0.01.078.665 I print_info: vocab type       = SPM
0.01.078.667 I print_info: n_vocab          = 256000
0.01.078.670 I print_info: n_merges         = 0
0.01.078.671 I print_info: BOS token        = 2 '<bos>'
0.01.078.671 I print_info: EOS token        = 1 '<eos>'
0.01.078.672 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.078.673 I print_info: UNK token        = 3 '<unk>'
0.01.078.673 I print_info: PAD token        = 0 '<pad>'
0.01.078.674 I print_info: LF token         = 227 '<0x0A>'
0.01.078.681 I print_info: EOG token        = 1 '<eos>'
0.01.078.682 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.078.683 I print_info: max token length = 93
0.01.078.687 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.142.484 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.149.551 I llama_init_from_model: n_seq_max     = 1
0.01.149.556 I llama_init_from_model: n_ctx         = 4096
0.01.149.557 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.149.557 I llama_init_from_model: n_batch       = 2048
0.01.149.557 I llama_init_from_model: n_ubatch      = 512
0.01.149.558 I llama_init_from_model: flash_attn    = 0
0.01.149.560 I llama_init_from_model: freq_base     = 10000.0
0.01.149.561 I llama_init_from_model: freq_scale    = 1
0.01.149.562 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.149.652 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.166.544 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.166.592 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.166.744 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.170.505 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.170.509 I llama_init_from_model: graph nodes  = 601
0.01.170.510 I llama_init_from_model: graph splits = 1
0.01.170.538 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.170.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.781.987 I main: llama threadpool init, n_threads = 4
0.01.782.003 I 
0.01.782.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.782.124 I 
0.01.782.403 I sampler seed: 777631176
0.01.782.417 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.782.427 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.782.430 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.782.430 I 
 seconal and alliteration.

**Main Idea:**

The passage is about the importance of education in shaping individuals and societies. It emphasizes the transformative power of

0.12.831.310 I llama_perf_sampler_print:    sampling time =      49.97 ms /    33 runs   (    1.51 ms per token,   660.41 tokens per second)
0.12.831.326 I llama_perf_context_print:        load time =    1753.86 ms
0.12.831.328 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.831.331 I llama_perf_context_print:        eval time =   10961.11 ms /    32 runs   (  342.53 ms per token,     2.92 tokens per second)
0.12.831.332 I llama_perf_context_print:       total time =   11076.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.660s
user	46m27.853s
sys	0m7.240s
