+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.619 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.287 I main: llama backend init
0.00.001.295 I main: load the model and apply lora adapter, if any
0.00.021.871 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.882 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.898 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.899 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.903 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.904 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.905 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.906 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.907 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.907 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.911 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.912 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.913 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.913 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.914 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.299 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.199 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.199 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.206 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.207 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.208 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.208 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.210 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.213 I llama_model_loader: - type  f32:   37 tensors
0.00.133.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.191 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.995 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.636 I llm_load_vocab: special tokens cache size = 5
0.00.283.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.367 I llm_load_print_meta: arch             = gemma
0.00.283.368 I llm_load_print_meta: vocab type       = SPM
0.00.283.368 I llm_load_print_meta: n_vocab          = 256000
0.00.283.369 I llm_load_print_meta: n_merges         = 0
0.00.283.369 I llm_load_print_meta: vocab_only       = 0
0.00.283.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.370 I llm_load_print_meta: n_embd           = 2048
0.00.283.370 I llm_load_print_meta: n_layer          = 18
0.00.283.383 I llm_load_print_meta: n_head           = 8
0.00.283.384 I llm_load_print_meta: n_head_kv        = 1
0.00.283.384 I llm_load_print_meta: n_rot            = 256
0.00.283.385 I llm_load_print_meta: n_swa            = 0
0.00.283.385 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.386 I llm_load_print_meta: n_gqa            = 8
0.00.283.387 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.389 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.390 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.391 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.391 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.392 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.393 I llm_load_print_meta: n_ff             = 16384
0.00.283.393 I llm_load_print_meta: n_expert         = 0
0.00.283.394 I llm_load_print_meta: n_expert_used    = 0
0.00.283.394 I llm_load_print_meta: causal attn      = 1
0.00.283.394 I llm_load_print_meta: pooling type     = 0
0.00.283.394 I llm_load_print_meta: rope type        = 2
0.00.283.395 I llm_load_print_meta: rope scaling     = linear
0.00.283.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.397 I llm_load_print_meta: freq_scale_train = 1
0.00.283.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.397 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.397 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.398 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.398 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.398 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.398 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.399 I llm_load_print_meta: model type       = 2B
0.00.283.399 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.400 I llm_load_print_meta: model params     = 2.51 B
0.00.283.401 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.401 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.402 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.402 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.402 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.403 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.403 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.404 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.404 I llm_load_print_meta: max token length = 93
0.00.382.531 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.382.540 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.382.541 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.382.542 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.382.542 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.382.543 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.733 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.740 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.740 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.741 I llama_new_context_with_model: n_batch       = 2048
0.00.387.741 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.742 I llama_new_context_with_model: flash_attn    = 0
0.00.387.744 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.744 I llama_new_context_with_model: freq_scale    = 1
0.00.387.745 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.248 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.265 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.595 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.602 I llama_new_context_with_model: graph nodes  = 601
0.00.403.602 I llama_new_context_with_model: graph splits = 1
0.00.403.604 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.136 I main: llama threadpool init, n_threads = 4
0.00.489.150 I 
0.00.489.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.489.229 I 
0.00.489.272 I sampler seed: 1638785604
0.00.489.283 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.288 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.289 I 
 increasels in the forest. The forest is teeming with magical flora and fauna.

**Flora:**

* Enchanted willow with iridescent leaves that glow in the moonlight

0.02.801.251 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6633.17 tokens per second)
0.02.801.253 I llama_perf_context_print:        load time =     487.82 ms
0.02.801.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.801.256 I llama_perf_context_print:        eval time =    2292.77 ms /    32 runs   (   71.65 ms per token,    13.96 tokens per second)
0.02.801.257 I llama_perf_context_print:       total time =    2312.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.555 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.256 I main: llama backend init
0.00.001.263 I main: load the model and apply lora adapter, if any
0.00.021.577 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.609 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.610 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.611 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.620 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.747 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.530 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.435 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.441 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.442 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.443 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.444 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.445 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.447 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.447 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.449 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.449 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.453 I llama_model_loader: - type  f32:   37 tensors
0.00.133.454 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.029 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.366 I llm_load_vocab: special tokens cache size = 5
0.00.279.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.862 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.863 I llm_load_print_meta: arch             = gemma
0.00.279.864 I llm_load_print_meta: vocab type       = SPM
0.00.279.864 I llm_load_print_meta: n_vocab          = 256000
0.00.279.865 I llm_load_print_meta: n_merges         = 0
0.00.279.865 I llm_load_print_meta: vocab_only       = 0
0.00.279.866 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.866 I llm_load_print_meta: n_embd           = 2048
0.00.279.866 I llm_load_print_meta: n_layer          = 18
0.00.279.878 I llm_load_print_meta: n_head           = 8
0.00.279.879 I llm_load_print_meta: n_head_kv        = 1
0.00.279.880 I llm_load_print_meta: n_rot            = 256
0.00.279.880 I llm_load_print_meta: n_swa            = 0
0.00.279.880 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.881 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.882 I llm_load_print_meta: n_gqa            = 8
0.00.279.883 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.884 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.885 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.886 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.886 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.887 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.888 I llm_load_print_meta: n_ff             = 16384
0.00.279.889 I llm_load_print_meta: n_expert         = 0
0.00.279.889 I llm_load_print_meta: n_expert_used    = 0
0.00.279.889 I llm_load_print_meta: causal attn      = 1
0.00.279.889 I llm_load_print_meta: pooling type     = 0
0.00.279.890 I llm_load_print_meta: rope type        = 2
0.00.279.890 I llm_load_print_meta: rope scaling     = linear
0.00.279.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.892 I llm_load_print_meta: freq_scale_train = 1
0.00.279.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.895 I llm_load_print_meta: model type       = 2B
0.00.279.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.896 I llm_load_print_meta: model params     = 2.51 B
0.00.279.897 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.899 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.901 I llm_load_print_meta: max token length = 93
0.00.380.319 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.422 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.430 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.430 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.431 I llama_new_context_with_model: n_batch       = 2048
0.00.389.432 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.432 I llama_new_context_with_model: flash_attn    = 0
0.00.389.436 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.437 I llama_new_context_with_model: freq_scale    = 1
0.00.389.439 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.091 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.200 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.464 I llama_new_context_with_model: graph nodes  = 601
0.00.406.465 I llama_new_context_with_model: graph splits = 1
0.00.406.467 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.079 I main: llama threadpool init, n_threads = 4
0.00.500.093 I 
0.00.500.175 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.500.180 I 
0.00.500.233 I sampler seed: 2957415298
0.00.500.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.247 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.257 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.261 I 
 increably.

I am unable to locate the requested information.

I apologize for any inconvenience. Could you please provide more context or specify the information you are

0.02.737.208 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7001.91 tokens per second)
0.02.737.211 I llama_perf_context_print:        load time =     498.80 ms
0.02.737.212 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.214 I llama_perf_context_print:        eval time =    2217.94 ms /    32 runs   (   69.31 ms per token,    14.43 tokens per second)
0.02.737.215 I llama_perf_context_print:       total time =    2237.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.575 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.262 I main: llama backend init
0.00.001.269 I main: load the model and apply lora adapter, if any
0.00.021.779 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.789 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.797 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.801 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.802 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.806 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.806 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.808 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.808 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.809 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.813 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.815 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.816 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.413 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.094 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.103 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.103 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.104 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.108 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.109 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.110 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.111 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.115 I llama_model_loader: - type  f32:   37 tensors
0.00.133.116 I llama_model_loader: - type q8_0:  127 tensors
0.00.231.863 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.287.386 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.288.125 I llm_load_vocab: special tokens cache size = 5
0.00.309.063 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.309.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.309.086 I llm_load_print_meta: arch             = gemma
0.00.309.087 I llm_load_print_meta: vocab type       = SPM
0.00.309.087 I llm_load_print_meta: n_vocab          = 256000
0.00.309.088 I llm_load_print_meta: n_merges         = 0
0.00.309.088 I llm_load_print_meta: vocab_only       = 0
0.00.309.088 I llm_load_print_meta: n_ctx_train      = 8192
0.00.309.089 I llm_load_print_meta: n_embd           = 2048
0.00.309.089 I llm_load_print_meta: n_layer          = 18
0.00.309.101 I llm_load_print_meta: n_head           = 8
0.00.309.102 I llm_load_print_meta: n_head_kv        = 1
0.00.309.103 I llm_load_print_meta: n_rot            = 256
0.00.309.103 I llm_load_print_meta: n_swa            = 0
0.00.309.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.309.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.309.105 I llm_load_print_meta: n_gqa            = 8
0.00.309.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.309.107 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.309.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.309.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.309.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.309.110 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.309.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.309.112 I llm_load_print_meta: n_ff             = 16384
0.00.309.112 I llm_load_print_meta: n_expert         = 0
0.00.309.112 I llm_load_print_meta: n_expert_used    = 0
0.00.309.113 I llm_load_print_meta: causal attn      = 1
0.00.309.113 I llm_load_print_meta: pooling type     = 0
0.00.309.113 I llm_load_print_meta: rope type        = 2
0.00.309.114 I llm_load_print_meta: rope scaling     = linear
0.00.309.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.309.115 I llm_load_print_meta: freq_scale_train = 1
0.00.309.116 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.309.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.309.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.309.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.309.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.309.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.309.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.309.118 I llm_load_print_meta: model type       = 2B
0.00.309.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.309.119 I llm_load_print_meta: model params     = 2.51 B
0.00.309.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.309.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.309.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.309.121 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.309.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.309.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.309.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.309.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.309.123 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.309.124 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.309.124 I llm_load_print_meta: max token length = 93
0.00.382.590 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.382.598 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.382.599 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.382.599 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.382.600 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.382.601 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.387.798 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.805 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.805 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.806 I llama_new_context_with_model: n_batch       = 2048
0.00.387.806 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.807 I llama_new_context_with_model: flash_attn    = 0
0.00.387.810 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.811 I llama_new_context_with_model: freq_scale    = 1
0.00.387.812 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.448 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.861 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.868 I llama_new_context_with_model: graph nodes  = 601
0.00.404.869 I llama_new_context_with_model: graph splits = 1
0.00.404.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.602 I main: llama threadpool init, n_threads = 4
0.00.493.619 I 
0.00.493.705 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.493.708 I 
0.00.493.754 I sampler seed: 2879898929
0.00.493.768 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.782 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.786 I 
 increably, but the system is unstable, and soon, it collapses.

What is the problem?

The problem is that the system is recursively dependent on

0.02.809.822 I llama_perf_sampler_print:    sampling time =       5.32 ms /    33 runs   (    0.16 ms per token,  6206.51 tokens per second)
0.02.809.825 I llama_perf_context_print:        load time =     492.32 ms
0.02.809.827 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.809.829 I llama_perf_context_print:        eval time =    2295.73 ms /    32 runs   (   71.74 ms per token,    13.94 tokens per second)
0.02.809.830 I llama_perf_context_print:       total time =    2316.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.188 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.892 I main: llama backend init
0.00.000.901 I main: load the model and apply lora adapter, if any
0.00.021.103 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.113 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.120 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.131 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.135 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.136 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.136 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.137 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.137 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.138 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.142 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.366 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.433 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.307 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.314 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.315 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.316 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.317 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.318 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.322 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.323 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.323 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.324 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.325 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.328 I llama_model_loader: - type  f32:   37 tensors
0.00.132.329 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.392 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.103 I llm_load_vocab: special tokens cache size = 5
0.00.278.002 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.026 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.027 I llm_load_print_meta: arch             = gemma
0.00.278.028 I llm_load_print_meta: vocab type       = SPM
0.00.278.029 I llm_load_print_meta: n_vocab          = 256000
0.00.278.030 I llm_load_print_meta: n_merges         = 0
0.00.278.030 I llm_load_print_meta: vocab_only       = 0
0.00.278.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.031 I llm_load_print_meta: n_embd           = 2048
0.00.278.031 I llm_load_print_meta: n_layer          = 18
0.00.278.045 I llm_load_print_meta: n_head           = 8
0.00.278.046 I llm_load_print_meta: n_head_kv        = 1
0.00.278.046 I llm_load_print_meta: n_rot            = 256
0.00.278.046 I llm_load_print_meta: n_swa            = 0
0.00.278.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.048 I llm_load_print_meta: n_gqa            = 8
0.00.278.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.054 I llm_load_print_meta: n_ff             = 16384
0.00.278.055 I llm_load_print_meta: n_expert         = 0
0.00.278.055 I llm_load_print_meta: n_expert_used    = 0
0.00.278.055 I llm_load_print_meta: causal attn      = 1
0.00.278.056 I llm_load_print_meta: pooling type     = 0
0.00.278.056 I llm_load_print_meta: rope type        = 2
0.00.278.057 I llm_load_print_meta: rope scaling     = linear
0.00.278.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.059 I llm_load_print_meta: freq_scale_train = 1
0.00.278.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.061 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.061 I llm_load_print_meta: model type       = 2B
0.00.278.062 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.063 I llm_load_print_meta: model params     = 2.51 B
0.00.278.064 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.064 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.065 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.065 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.066 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.066 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.066 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.067 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.067 I llm_load_print_meta: max token length = 93
0.00.349.245 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.253 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.388 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.389 I llama_new_context_with_model: n_batch       = 2048
0.00.354.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.389 I llama_new_context_with_model: flash_attn    = 0
0.00.354.393 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.393 I llama_new_context_with_model: freq_scale    = 1
0.00.354.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.721 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.734 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.829 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.098 I llama_new_context_with_model: graph nodes  = 601
0.00.371.098 I llama_new_context_with_model: graph splits = 1
0.00.371.100 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.822 I main: llama threadpool init, n_threads = 4
0.00.460.838 I 
0.00.460.913 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.917 I 
0.00.460.959 I sampler seed: 1282171941
0.00.460.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.982 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.985 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.986 I 
 seconary axis (CSA) is defined as the set of all points that are a distance d from the centroid of the body. 

a) If the

0.02.898.265 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6402.79 tokens per second)
0.02.898.267 I llama_perf_context_print:        load time =     459.91 ms
0.02.898.268 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.898.270 I llama_perf_context_print:        eval time =    2417.75 ms /    32 runs   (   75.55 ms per token,    13.24 tokens per second)
0.02.898.271 I llama_perf_context_print:       total time =    2437.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.954s
user	0m40.272s
sys	0m9.557s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4167 (fe48dbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40260.16 ms
main:    total time = 40260.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.257 I main: llama backend init
0.00.001.267 I main: load the model and apply lora adapter, if any
0.00.022.132 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.157 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.163 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.164 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.165 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.166 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.166 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.167 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.174 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.174 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.502 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.557 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.559 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.563 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.564 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.568 I llama_model_loader: - type  f32:   37 tensors
0.00.133.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.569 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.654 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.275 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.025 I llm_load_vocab: special tokens cache size = 5
0.00.292.912 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.932 I llm_load_print_meta: arch             = gemma
0.00.292.933 I llm_load_print_meta: vocab type       = SPM
0.00.292.934 I llm_load_print_meta: n_vocab          = 256000
0.00.292.935 I llm_load_print_meta: n_merges         = 0
0.00.292.935 I llm_load_print_meta: vocab_only       = 0
0.00.292.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.936 I llm_load_print_meta: n_embd           = 2048
0.00.292.936 I llm_load_print_meta: n_layer          = 18
0.00.292.948 I llm_load_print_meta: n_head           = 8
0.00.292.949 I llm_load_print_meta: n_head_kv        = 1
0.00.292.949 I llm_load_print_meta: n_rot            = 256
0.00.292.949 I llm_load_print_meta: n_swa            = 0
0.00.292.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.951 I llm_load_print_meta: n_gqa            = 8
0.00.292.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.953 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.954 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.955 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.956 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.957 I llm_load_print_meta: n_ff             = 16384
0.00.292.958 I llm_load_print_meta: n_expert         = 0
0.00.292.958 I llm_load_print_meta: n_expert_used    = 0
0.00.292.958 I llm_load_print_meta: causal attn      = 1
0.00.292.958 I llm_load_print_meta: pooling type     = 0
0.00.292.959 I llm_load_print_meta: rope type        = 2
0.00.292.959 I llm_load_print_meta: rope scaling     = linear
0.00.292.960 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.961 I llm_load_print_meta: freq_scale_train = 1
0.00.292.961 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.961 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.962 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.963 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.963 I llm_load_print_meta: model type       = 2B
0.00.292.964 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.292.965 I llm_load_print_meta: model params     = 2.51 B
0.00.292.965 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.292.966 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.966 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.967 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.968 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.969 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.969 I llm_load_print_meta: max token length = 93
0.00.351.869 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.351.877 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.351.878 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.351.879 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.351.880 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.351.880 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.357.183 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.191 I llama_new_context_with_model: n_batch       = 2048
0.00.357.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.193 I llama_new_context_with_model: flash_attn    = 0
0.00.357.196 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.197 I llama_new_context_with_model: freq_scale    = 1
0.00.357.198 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.302 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.317 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.406 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.658 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.662 I llama_new_context_with_model: graph nodes  = 601
0.00.373.662 I llama_new_context_with_model: graph splits = 1
0.00.373.664 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.990 I main: llama threadpool init, n_threads = 4
0.00.450.006 I 
0.00.450.080 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.083 I 
0.00.450.130 I sampler seed: 2109177963
0.00.450.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.145 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.146 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.149 I 
 squaRED is a global leader in the production and supply of high-quality, innovative, and sustainable packaging materials and systems.

**What is the main idea

0.02.129.421 I llama_perf_sampler_print:    sampling time =       5.27 ms /    33 runs   (    0.16 ms per token,  6258.30 tokens per second)
0.02.129.424 I llama_perf_context_print:        load time =     448.71 ms
0.02.129.425 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.129.426 I llama_perf_context_print:        eval time =    1659.93 ms /    32 runs   (   51.87 ms per token,    19.28 tokens per second)
0.02.129.427 I llama_perf_context_print:       total time =    1679.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4167 (fe48dbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40241.41 ms
main:    total time = 40241.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.605 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.330 I main: llama backend init
0.00.001.337 I main: load the model and apply lora adapter, if any
0.00.022.133 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.149 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.159 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.160 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.164 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.165 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.166 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.167 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.167 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.168 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.173 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.174 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.252 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.549 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.560 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.561 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.562 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.565 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.569 I llama_model_loader: - type  f32:   37 tensors
0.00.133.571 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.572 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.398 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.526 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.143 I llm_load_vocab: special tokens cache size = 5
0.00.279.757 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.775 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.776 I llm_load_print_meta: arch             = gemma
0.00.279.777 I llm_load_print_meta: vocab type       = SPM
0.00.279.777 I llm_load_print_meta: n_vocab          = 256000
0.00.279.778 I llm_load_print_meta: n_merges         = 0
0.00.279.778 I llm_load_print_meta: vocab_only       = 0
0.00.279.779 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.779 I llm_load_print_meta: n_embd           = 2048
0.00.279.779 I llm_load_print_meta: n_layer          = 18
0.00.279.792 I llm_load_print_meta: n_head           = 8
0.00.279.793 I llm_load_print_meta: n_head_kv        = 1
0.00.279.793 I llm_load_print_meta: n_rot            = 256
0.00.279.793 I llm_load_print_meta: n_swa            = 0
0.00.279.794 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.794 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.795 I llm_load_print_meta: n_gqa            = 8
0.00.279.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.800 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.801 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.802 I llm_load_print_meta: n_ff             = 16384
0.00.279.802 I llm_load_print_meta: n_expert         = 0
0.00.279.802 I llm_load_print_meta: n_expert_used    = 0
0.00.279.803 I llm_load_print_meta: causal attn      = 1
0.00.279.803 I llm_load_print_meta: pooling type     = 0
0.00.279.803 I llm_load_print_meta: rope type        = 2
0.00.279.804 I llm_load_print_meta: rope scaling     = linear
0.00.279.806 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.806 I llm_load_print_meta: freq_scale_train = 1
0.00.279.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.807 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.807 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.808 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.808 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.808 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.809 I llm_load_print_meta: model type       = 2B
0.00.279.809 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.810 I llm_load_print_meta: model params     = 2.51 B
0.00.279.811 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.812 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.813 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.814 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.814 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.815 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.815 I llm_load_print_meta: max token length = 93
0.00.333.929 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.338.968 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.975 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.975 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.975 I llama_new_context_with_model: n_batch       = 2048
0.00.338.976 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.976 I llama_new_context_with_model: flash_attn    = 0
0.00.338.979 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.980 I llama_new_context_with_model: freq_scale    = 1
0.00.338.981 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.103 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.210 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.454 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.460 I llama_new_context_with_model: graph nodes  = 601
0.00.355.461 I llama_new_context_with_model: graph splits = 1
0.00.355.463 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.139 I main: llama threadpool init, n_threads = 4
0.00.431.156 I 
0.00.431.237 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.431.240 I 
0.00.431.285 I sampler seed: 2398918420
0.00.431.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.303 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.304 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.304 I 
 seconally to the following questions:
**a) What is the role of a facilitator in a meeting?**
**b) What are some of the

0.02.078.249 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6242.91 tokens per second)
0.02.078.251 I llama_perf_context_print:        load time =     429.78 ms
0.02.078.252 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.254 I llama_perf_context_print:        eval time =    1627.21 ms /    32 runs   (   50.85 ms per token,    19.67 tokens per second)
0.02.078.255 I llama_perf_context_print:       total time =    1647.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.546s
user	10m25.333s
sys	0m7.333s
