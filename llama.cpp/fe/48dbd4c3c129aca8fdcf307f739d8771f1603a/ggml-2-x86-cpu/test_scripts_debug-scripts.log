+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.421 I main: llama backend init
0.00.001.430 I main: load the model and apply lora adapter, if any
0.00.023.674 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.687 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.778 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.790 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.792 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.799 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.803 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.805 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.806 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.807 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.808 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.816 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.817 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.819 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.821 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.822 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.901 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.902 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.360.904 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.913 I llama_model_loader: - type  f32:   37 tensors
0.00.360.916 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.059 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.107 I llm_load_vocab: special tokens cache size = 5
0.00.885.003 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.885.075 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.885.076 I llm_load_print_meta: arch             = gemma
0.00.885.077 I llm_load_print_meta: vocab type       = SPM
0.00.885.078 I llm_load_print_meta: n_vocab          = 256000
0.00.885.081 I llm_load_print_meta: n_merges         = 0
0.00.885.082 I llm_load_print_meta: vocab_only       = 0
0.00.885.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.885.082 I llm_load_print_meta: n_embd           = 2048
0.00.885.083 I llm_load_print_meta: n_layer          = 18
0.00.885.151 I llm_load_print_meta: n_head           = 8
0.00.885.158 I llm_load_print_meta: n_head_kv        = 1
0.00.885.158 I llm_load_print_meta: n_rot            = 256
0.00.885.159 I llm_load_print_meta: n_swa            = 0
0.00.885.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.885.159 I llm_load_print_meta: n_embd_head_v    = 256
0.00.885.179 I llm_load_print_meta: n_gqa            = 8
0.00.885.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.885.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.885.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.885.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.885.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.885.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.885.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.885.199 I llm_load_print_meta: n_ff             = 16384
0.00.885.200 I llm_load_print_meta: n_expert         = 0
0.00.885.215 I llm_load_print_meta: n_expert_used    = 0
0.00.885.216 I llm_load_print_meta: causal attn      = 1
0.00.885.217 I llm_load_print_meta: pooling type     = 0
0.00.885.218 I llm_load_print_meta: rope type        = 2
0.00.885.218 I llm_load_print_meta: rope scaling     = linear
0.00.885.220 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.885.221 I llm_load_print_meta: freq_scale_train = 1
0.00.885.221 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.885.230 I llm_load_print_meta: rope_finetuned   = unknown
0.00.885.232 I llm_load_print_meta: ssm_d_conv       = 0
0.00.885.232 I llm_load_print_meta: ssm_d_inner      = 0
0.00.885.233 I llm_load_print_meta: ssm_d_state      = 0
0.00.885.233 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.885.234 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.885.235 I llm_load_print_meta: model type       = 2B
0.00.885.236 I llm_load_print_meta: model ftype      = Q8_0
0.00.885.238 I llm_load_print_meta: model params     = 2.51 B
0.00.885.250 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.885.255 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.885.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.885.256 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.885.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.885.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.885.258 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.885.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.885.267 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.885.269 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.885.270 I llm_load_print_meta: max token length = 93
0.00.987.001 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.987.012 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.987.013 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.987.014 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.987.015 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.987.015 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.992.846 I llama_new_context_with_model: n_seq_max     = 1
0.00.992.855 I llama_new_context_with_model: n_ctx         = 4096
0.00.992.855 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.992.855 I llama_new_context_with_model: n_batch       = 2048
0.00.992.856 I llama_new_context_with_model: n_ubatch      = 512
0.00.992.856 I llama_new_context_with_model: flash_attn    = 0
0.00.992.859 I llama_new_context_with_model: freq_base     = 10000.0
0.00.992.860 I llama_new_context_with_model: freq_scale    = 1
0.00.992.860 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.007.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.007.927 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.008.059 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.010.700 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.010.704 I llama_new_context_with_model: graph nodes  = 601
0.01.010.705 I llama_new_context_with_model: graph splits = 1
0.01.010.728 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.621.559 I main: llama threadpool init, n_threads = 4
0.01.621.574 I 
0.01.621.688 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.621.691 I 
0.01.621.927 I sampler seed: 3524966226
0.01.621.941 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.621.951 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.621.953 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.621.953 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.10.488.977 I llama_perf_sampler_print:    sampling time =      32.30 ms /    22 runs   (    1.47 ms per token,   681.11 tokens per second)
0.10.488.980 I llama_perf_context_print:        load time =    1620.04 ms
0.10.489.013 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.489.016 I llama_perf_context_print:        eval time =    8807.32 ms /    21 runs   (  419.40 ms per token,     2.38 tokens per second)
0.10.489.017 I llama_perf_context_print:       total time =    8867.43 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.442 I main: llama backend init
0.00.001.450 I main: load the model and apply lora adapter, if any
0.00.023.943 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.049 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.068 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.105 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.080 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.089 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.091 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.094 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.095 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.096 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.101 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.105 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.107 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.115 I llama_model_loader: - type  f32:   37 tensors
0.00.357.117 I llama_model_loader: - type q8_0:  127 tensors
0.00.595.666 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.726 I llm_load_vocab: special tokens cache size = 5
0.00.862.295 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.371 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.371 I llm_load_print_meta: arch             = gemma
0.00.862.372 I llm_load_print_meta: vocab type       = SPM
0.00.862.373 I llm_load_print_meta: n_vocab          = 256000
0.00.862.375 I llm_load_print_meta: n_merges         = 0
0.00.862.376 I llm_load_print_meta: vocab_only       = 0
0.00.862.376 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.376 I llm_load_print_meta: n_embd           = 2048
0.00.862.377 I llm_load_print_meta: n_layer          = 18
0.00.862.444 I llm_load_print_meta: n_head           = 8
0.00.862.478 I llm_load_print_meta: n_head_kv        = 1
0.00.862.479 I llm_load_print_meta: n_rot            = 256
0.00.862.480 I llm_load_print_meta: n_swa            = 0
0.00.862.480 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.486 I llm_load_print_meta: n_gqa            = 8
0.00.862.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.499 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.500 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.501 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.516 I llm_load_print_meta: n_ff             = 16384
0.00.862.517 I llm_load_print_meta: n_expert         = 0
0.00.862.525 I llm_load_print_meta: n_expert_used    = 0
0.00.862.525 I llm_load_print_meta: causal attn      = 1
0.00.862.526 I llm_load_print_meta: pooling type     = 0
0.00.862.526 I llm_load_print_meta: rope type        = 2
0.00.862.527 I llm_load_print_meta: rope scaling     = linear
0.00.862.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.530 I llm_load_print_meta: freq_scale_train = 1
0.00.862.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.532 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.533 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.535 I llm_load_print_meta: model type       = 2B
0.00.862.536 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.537 I llm_load_print_meta: model params     = 2.51 B
0.00.862.547 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.547 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.547 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.553 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.554 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.561 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.563 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.571 I llm_load_print_meta: max token length = 93
0.00.959.292 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.965.251 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.258 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.259 I llama_new_context_with_model: n_batch       = 2048
0.00.965.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.261 I llama_new_context_with_model: flash_attn    = 0
0.00.965.264 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.265 I llama_new_context_with_model: freq_scale    = 1
0.00.965.266 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.312 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.981.358 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.981.489 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.008 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.012 I llama_new_context_with_model: graph nodes  = 601
0.00.984.012 I llama_new_context_with_model: graph splits = 1
0.00.984.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.594.785 I main: llama threadpool init, n_threads = 4
0.01.594.801 I 
0.01.594.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.594.919 I 
0.01.595.154 I sampler seed: 2375578566
0.01.595.169 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.595.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.595.182 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.595.182 I 
 increasements have been observed in the development of antibiotic resistance in bacteria.

**a) Explain the phenomenon of antibiotic resistance.**
**b) Describe the major

0.15.211.550 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.05 tokens per second)
0.15.211.553 I llama_perf_context_print:        load time =    1593.24 ms
0.15.211.554 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.211.569 I llama_perf_context_print:        eval time =   13524.94 ms /    32 runs   (  422.65 ms per token,     2.37 tokens per second)
0.15.211.571 I llama_perf_context_print:       total time =   13616.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.435 I main: llama backend init
0.00.001.445 I main: load the model and apply lora adapter, if any
0.00.025.651 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.662 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.779 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.784 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.792 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.794 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.795 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.797 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.799 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.807 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.811 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.814 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.815 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.409 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.814 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.832 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.836 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.840 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.364.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.852 I llama_model_loader: - type  f32:   37 tensors
0.00.364.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.612.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.684.394 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.685.489 I llm_load_vocab: special tokens cache size = 5
0.00.887.177 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.887.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.887.252 I llm_load_print_meta: arch             = gemma
0.00.887.254 I llm_load_print_meta: vocab type       = SPM
0.00.887.255 I llm_load_print_meta: n_vocab          = 256000
0.00.887.257 I llm_load_print_meta: n_merges         = 0
0.00.887.258 I llm_load_print_meta: vocab_only       = 0
0.00.887.258 I llm_load_print_meta: n_ctx_train      = 8192
0.00.887.258 I llm_load_print_meta: n_embd           = 2048
0.00.887.259 I llm_load_print_meta: n_layer          = 18
0.00.887.325 I llm_load_print_meta: n_head           = 8
0.00.887.332 I llm_load_print_meta: n_head_kv        = 1
0.00.887.332 I llm_load_print_meta: n_rot            = 256
0.00.887.333 I llm_load_print_meta: n_swa            = 0
0.00.887.333 I llm_load_print_meta: n_embd_head_k    = 256
0.00.887.333 I llm_load_print_meta: n_embd_head_v    = 256
0.00.887.338 I llm_load_print_meta: n_gqa            = 8
0.00.887.343 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.887.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.887.363 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.887.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.887.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.887.387 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.887.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.887.393 I llm_load_print_meta: n_ff             = 16384
0.00.887.394 I llm_load_print_meta: n_expert         = 0
0.00.887.394 I llm_load_print_meta: n_expert_used    = 0
0.00.887.398 I llm_load_print_meta: causal attn      = 1
0.00.887.398 I llm_load_print_meta: pooling type     = 0
0.00.887.399 I llm_load_print_meta: rope type        = 2
0.00.887.399 I llm_load_print_meta: rope scaling     = linear
0.00.887.401 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.887.401 I llm_load_print_meta: freq_scale_train = 1
0.00.887.402 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.887.402 I llm_load_print_meta: rope_finetuned   = unknown
0.00.887.402 I llm_load_print_meta: ssm_d_conv       = 0
0.00.887.402 I llm_load_print_meta: ssm_d_inner      = 0
0.00.887.403 I llm_load_print_meta: ssm_d_state      = 0
0.00.887.403 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.887.403 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.887.404 I llm_load_print_meta: model type       = 2B
0.00.887.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.887.415 I llm_load_print_meta: model params     = 2.51 B
0.00.887.424 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.887.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.887.428 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.887.428 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.887.429 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.887.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.887.430 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.887.430 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.887.437 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.887.438 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.887.438 I llm_load_print_meta: max token length = 93
0.00.963.396 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.963.406 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.963.407 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.963.408 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.963.409 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.963.410 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.969.235 I llama_new_context_with_model: n_seq_max     = 1
0.00.969.243 I llama_new_context_with_model: n_ctx         = 4096
0.00.969.243 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.969.243 I llama_new_context_with_model: n_batch       = 2048
0.00.969.244 I llama_new_context_with_model: n_ubatch      = 512
0.00.969.244 I llama_new_context_with_model: flash_attn    = 0
0.00.969.249 I llama_new_context_with_model: freq_base     = 10000.0
0.00.969.249 I llama_new_context_with_model: freq_scale    = 1
0.00.969.250 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.984.459 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.984.502 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.984.635 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.987.354 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.987.359 I llama_new_context_with_model: graph nodes  = 601
0.00.987.359 I llama_new_context_with_model: graph splits = 1
0.00.987.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.596.540 I main: llama threadpool init, n_threads = 4
0.01.596.556 I 
0.01.596.671 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.596.675 I 
0.01.596.932 I sampler seed: 303033760
0.01.596.946 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.596.958 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.596.958 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.596.958 I 
 increamically with each subsequent question. [end of text]


0.04.977.461 I llama_perf_sampler_print:    sampling time =      12.36 ms /     9 runs   (    1.37 ms per token,   728.04 tokens per second)
0.04.977.478 I llama_perf_context_print:        load time =    1595.00 ms
0.04.977.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.977.481 I llama_perf_context_print:        eval time =    3357.29 ms /     8 runs   (  419.66 ms per token,     2.38 tokens per second)
0.04.977.482 I llama_perf_context_print:       total time =    3380.93 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.402 I main: llama backend init
0.00.001.411 I main: load the model and apply lora adapter, if any
0.00.023.742 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.752 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.845 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.857 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.866 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.870 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.871 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.873 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.874 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.875 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.882 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.886 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.888 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.910 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.536 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.036 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.047 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.049 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.050 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.051 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.059 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.060 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.063 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.065 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.073 I llama_model_loader: - type  f32:   37 tensors
0.00.354.076 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.465 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.670.341 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.671.441 I llm_load_vocab: special tokens cache size = 5
0.00.872.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.404 I llm_load_print_meta: arch             = gemma
0.00.872.405 I llm_load_print_meta: vocab type       = SPM
0.00.872.406 I llm_load_print_meta: n_vocab          = 256000
0.00.872.408 I llm_load_print_meta: n_merges         = 0
0.00.872.409 I llm_load_print_meta: vocab_only       = 0
0.00.872.409 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.410 I llm_load_print_meta: n_embd           = 2048
0.00.872.410 I llm_load_print_meta: n_layer          = 18
0.00.872.476 I llm_load_print_meta: n_head           = 8
0.00.872.499 I llm_load_print_meta: n_head_kv        = 1
0.00.872.500 I llm_load_print_meta: n_rot            = 256
0.00.872.501 I llm_load_print_meta: n_swa            = 0
0.00.872.501 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.502 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.508 I llm_load_print_meta: n_gqa            = 8
0.00.872.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.517 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.518 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.540 I llm_load_print_meta: n_ff             = 16384
0.00.872.541 I llm_load_print_meta: n_expert         = 0
0.00.872.541 I llm_load_print_meta: n_expert_used    = 0
0.00.872.542 I llm_load_print_meta: causal attn      = 1
0.00.872.543 I llm_load_print_meta: pooling type     = 0
0.00.872.544 I llm_load_print_meta: rope type        = 2
0.00.872.544 I llm_load_print_meta: rope scaling     = linear
0.00.872.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.547 I llm_load_print_meta: freq_scale_train = 1
0.00.872.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.548 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.548 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.549 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.550 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.551 I llm_load_print_meta: model type       = 2B
0.00.872.559 I llm_load_print_meta: model ftype      = Q8_0
0.00.872.560 I llm_load_print_meta: model params     = 2.51 B
0.00.872.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.872.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.572 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.584 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.585 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.586 I llm_load_print_meta: max token length = 93
0.00.945.568 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.945.580 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.951.377 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.384 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.385 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.385 I llama_new_context_with_model: n_batch       = 2048
0.00.951.386 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.386 I llama_new_context_with_model: flash_attn    = 0
0.00.951.389 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.390 I llama_new_context_with_model: freq_scale    = 1
0.00.951.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.966.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.402 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.406 I llama_new_context_with_model: graph nodes  = 601
0.00.969.407 I llama_new_context_with_model: graph splits = 1
0.00.969.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.581.276 I main: llama threadpool init, n_threads = 4
0.01.581.291 I 
0.01.581.403 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.581.407 I 
0.01.581.641 I sampler seed: 1268458450
0.01.581.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.667 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.668 I 
 increably, a smile twisting her lips into a knowing smirk. "The only thing constant in this ever-changing world is change itself."

Her voice echoed

0.15.078.089 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.41 tokens per second)
0.15.078.092 I llama_perf_context_print:        load time =    1579.77 ms
0.15.078.109 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.078.110 I llama_perf_context_print:        eval time =   13407.72 ms /    32 runs   (  418.99 ms per token,     2.39 tokens per second)
0.15.078.111 I llama_perf_context_print:       total time =   13496.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.592s
user	2m51.270s
sys	0m9.540s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4167 (fe48dbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185649.21 ms
main:    total time = 185649.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.422 I main: llama backend init
0.00.001.431 I main: load the model and apply lora adapter, if any
0.00.023.881 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.895 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.008 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.021 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.040 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.054 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.056 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.057 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.248.786 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.350.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.374.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.374.083 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.374.084 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.374.086 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.374.087 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.374.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.374.090 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.374.095 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.374.096 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.374.098 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.374.099 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.374.101 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.374.110 I llama_model_loader: - type  f32:   37 tensors
0.00.374.113 I llama_model_loader: - type q4_K:  108 tensors
0.00.374.114 I llama_model_loader: - type q6_K:   19 tensors
0.00.627.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.694.534 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.695.526 I llm_load_vocab: special tokens cache size = 5
0.00.900.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.900.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.900.499 I llm_load_print_meta: arch             = gemma
0.00.900.500 I llm_load_print_meta: vocab type       = SPM
0.00.900.500 I llm_load_print_meta: n_vocab          = 256000
0.00.900.502 I llm_load_print_meta: n_merges         = 0
0.00.900.503 I llm_load_print_meta: vocab_only       = 0
0.00.900.503 I llm_load_print_meta: n_ctx_train      = 8192
0.00.900.504 I llm_load_print_meta: n_embd           = 2048
0.00.900.504 I llm_load_print_meta: n_layer          = 18
0.00.900.569 I llm_load_print_meta: n_head           = 8
0.00.900.578 I llm_load_print_meta: n_head_kv        = 1
0.00.900.579 I llm_load_print_meta: n_rot            = 256
0.00.900.579 I llm_load_print_meta: n_swa            = 0
0.00.900.579 I llm_load_print_meta: n_embd_head_k    = 256
0.00.900.580 I llm_load_print_meta: n_embd_head_v    = 256
0.00.900.585 I llm_load_print_meta: n_gqa            = 8
0.00.900.590 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.900.595 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.900.599 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.900.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.900.601 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.900.601 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.900.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.900.606 I llm_load_print_meta: n_ff             = 16384
0.00.900.607 I llm_load_print_meta: n_expert         = 0
0.00.900.607 I llm_load_print_meta: n_expert_used    = 0
0.00.900.608 I llm_load_print_meta: causal attn      = 1
0.00.900.609 I llm_load_print_meta: pooling type     = 0
0.00.900.609 I llm_load_print_meta: rope type        = 2
0.00.900.610 I llm_load_print_meta: rope scaling     = linear
0.00.900.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.900.613 I llm_load_print_meta: freq_scale_train = 1
0.00.900.613 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.900.625 I llm_load_print_meta: rope_finetuned   = unknown
0.00.900.626 I llm_load_print_meta: ssm_d_conv       = 0
0.00.900.627 I llm_load_print_meta: ssm_d_inner      = 0
0.00.900.627 I llm_load_print_meta: ssm_d_state      = 0
0.00.900.627 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.900.628 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.900.629 I llm_load_print_meta: model type       = 2B
0.00.900.630 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.900.631 I llm_load_print_meta: model params     = 2.51 B
0.00.900.640 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.900.641 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.900.642 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.900.643 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.900.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.900.646 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.900.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.900.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.900.653 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.900.655 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.900.656 I llm_load_print_meta: max token length = 93
0.00.961.906 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.961.917 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.961.917 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.961.918 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.961.919 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.961.919 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.967.860 I llama_new_context_with_model: n_seq_max     = 1
0.00.967.868 I llama_new_context_with_model: n_ctx         = 4096
0.00.967.869 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.967.869 I llama_new_context_with_model: n_batch       = 2048
0.00.967.870 I llama_new_context_with_model: n_ubatch      = 512
0.00.967.870 I llama_new_context_with_model: flash_attn    = 0
0.00.967.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.967.875 I llama_new_context_with_model: freq_scale    = 1
0.00.967.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.982.808 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.982.849 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.982.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.985.543 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.985.547 I llama_new_context_with_model: graph nodes  = 601
0.00.985.547 I llama_new_context_with_model: graph splits = 1
0.00.985.570 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.570.668 I main: llama threadpool init, n_threads = 4
0.01.570.686 I 
0.01.570.804 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.570.807 I 
0.01.571.036 I sampler seed: 2996423849
0.01.571.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.060 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.063 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.063 I 
 maneuvously!

I apologize, but I am unable to generate responses that contain offensive or inappropriate language. My purpose is to assist users with tasks and provide

0.12.713.143 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.29 tokens per second)
0.12.713.147 I llama_perf_context_print:        load time =    1569.14 ms
0.12.713.149 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.713.151 I llama_perf_context_print:        eval time =   11052.49 ms /    32 runs   (  345.39 ms per token,     2.90 tokens per second)
0.12.713.152 I llama_perf_context_print:       total time =   11142.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4167 (fe48dbd4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185553.07 ms
main:    total time = 185553.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 4167 (fe48dbd4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.411 I main: llama backend init
0.00.001.420 I main: load the model and apply lora adapter, if any
0.00.026.386 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.497 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.521 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.532 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.533 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.536 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.537 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.539 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.540 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.555 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.592 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.347 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.360 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.361 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.362 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.364 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.366 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.382 I llama_model_loader: - type  f32:   37 tensors
0.00.357.384 I llama_model_loader: - type q4_K:  108 tensors
0.00.357.385 I llama_model_loader: - type q6_K:   19 tensors
0.00.596.075 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.664.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.665.390 I llm_load_vocab: special tokens cache size = 5
0.00.856.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.682 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.687 I llm_load_print_meta: arch             = gemma
0.00.856.687 I llm_load_print_meta: vocab type       = SPM
0.00.856.688 I llm_load_print_meta: n_vocab          = 256000
0.00.856.690 I llm_load_print_meta: n_merges         = 0
0.00.856.691 I llm_load_print_meta: vocab_only       = 0
0.00.856.691 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.692 I llm_load_print_meta: n_embd           = 2048
0.00.856.692 I llm_load_print_meta: n_layer          = 18
0.00.856.759 I llm_load_print_meta: n_head           = 8
0.00.856.769 I llm_load_print_meta: n_head_kv        = 1
0.00.856.770 I llm_load_print_meta: n_rot            = 256
0.00.856.771 I llm_load_print_meta: n_swa            = 0
0.00.856.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.771 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.777 I llm_load_print_meta: n_gqa            = 8
0.00.856.782 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.788 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.803 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.803 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.803 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.804 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.809 I llm_load_print_meta: n_ff             = 16384
0.00.856.810 I llm_load_print_meta: n_expert         = 0
0.00.856.810 I llm_load_print_meta: n_expert_used    = 0
0.00.856.823 I llm_load_print_meta: causal attn      = 1
0.00.856.824 I llm_load_print_meta: pooling type     = 0
0.00.856.832 I llm_load_print_meta: rope type        = 2
0.00.856.835 I llm_load_print_meta: rope scaling     = linear
0.00.856.837 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.837 I llm_load_print_meta: freq_scale_train = 1
0.00.856.838 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.838 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.838 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.839 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.839 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.839 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.839 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.840 I llm_load_print_meta: model type       = 2B
0.00.856.842 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.856.843 I llm_load_print_meta: model params     = 2.51 B
0.00.856.853 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.856.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.854 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.855 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.856 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.859 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.865 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.866 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.867 I llm_load_print_meta: max token length = 93
0.00.913.291 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.919.150 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.160 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.160 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.161 I llama_new_context_with_model: n_batch       = 2048
0.00.919.161 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.162 I llama_new_context_with_model: flash_attn    = 0
0.00.919.167 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.167 I llama_new_context_with_model: freq_scale    = 1
0.00.919.168 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.781 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.825 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.555 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.559 I llama_new_context_with_model: graph nodes  = 601
0.00.937.559 I llama_new_context_with_model: graph splits = 1
0.00.937.582 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.521.629 I main: llama threadpool init, n_threads = 4
0.01.521.645 I 
0.01.521.768 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.521.773 I 
0.01.522.009 I sampler seed: 3776791247
0.01.522.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.522.033 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.522.035 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.522.036 I 
 seconals on the edge of the forest.

Answer: Elk.

Explanation: Elk is a large herbivore found in forests and grasslands. They are known

0.12.654.733 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.47 tokens per second)
0.12.654.737 I llama_perf_context_print:        load time =    1520.12 ms
0.12.654.738 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.654.740 I llama_perf_context_print:        eval time =   11044.23 ms /    32 runs   (  345.13 ms per token,     2.90 tokens per second)
0.12.654.741 I llama_perf_context_print:       total time =   11133.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.475s
user	46m42.435s
sys	0m6.477s
