+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.504 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.520 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.528 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.537 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.537 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.538 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.538 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.539 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.543 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.078 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.044 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.923 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.923 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.924 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.928 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.929 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.930 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.931 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.932 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.935 I llama_model_loader: - type  f32:   37 tensors
0.00.131.935 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.763 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.985 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.595 I llm_load_vocab: special tokens cache size = 5
0.00.267.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.848 I llm_load_print_meta: arch             = gemma
0.00.267.848 I llm_load_print_meta: vocab type       = SPM
0.00.267.849 I llm_load_print_meta: n_vocab          = 256000
0.00.267.849 I llm_load_print_meta: n_merges         = 0
0.00.267.850 I llm_load_print_meta: vocab_only       = 0
0.00.267.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.850 I llm_load_print_meta: n_embd           = 2048
0.00.267.851 I llm_load_print_meta: n_layer          = 18
0.00.267.862 I llm_load_print_meta: n_head           = 8
0.00.267.863 I llm_load_print_meta: n_head_kv        = 1
0.00.267.863 I llm_load_print_meta: n_rot            = 256
0.00.267.864 I llm_load_print_meta: n_swa            = 0
0.00.267.864 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.865 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.866 I llm_load_print_meta: n_gqa            = 8
0.00.267.867 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.867 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.868 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.870 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.870 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.870 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.871 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.872 I llm_load_print_meta: n_ff             = 16384
0.00.267.872 I llm_load_print_meta: n_expert         = 0
0.00.267.872 I llm_load_print_meta: n_expert_used    = 0
0.00.267.872 I llm_load_print_meta: causal attn      = 1
0.00.267.873 I llm_load_print_meta: pooling type     = 0
0.00.267.873 I llm_load_print_meta: rope type        = 2
0.00.267.873 I llm_load_print_meta: rope scaling     = linear
0.00.267.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.875 I llm_load_print_meta: freq_scale_train = 1
0.00.267.876 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.877 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.878 I llm_load_print_meta: model type       = 2B
0.00.267.879 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.880 I llm_load_print_meta: model params     = 2.51 B
0.00.267.880 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.881 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.881 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.882 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.882 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.883 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.883 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.884 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.884 I llm_load_print_meta: max token length = 93
0.00.368.856 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.863 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.864 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.864 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.865 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.865 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.121 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.128 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.128 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.128 I llama_new_context_with_model: n_batch       = 2048
0.00.374.129 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.129 I llama_new_context_with_model: flash_attn    = 0
0.00.374.132 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.133 I llama_new_context_with_model: freq_scale    = 1
0.00.374.134 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.566 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.578 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.985 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.990 I llama_new_context_with_model: graph nodes  = 601
0.00.389.991 I llama_new_context_with_model: graph splits = 1
0.00.389.993 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.205 I main: llama threadpool init, n_threads = 4
0.00.474.220 I 
0.00.474.291 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.294 I 
0.00.474.342 I sampler seed: 4089556836
0.00.474.353 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.364 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.368 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.368 I 
 increably. [end of text]


0.00.753.674 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.753.676 I llama_perf_context_print:        load time =     473.46 ms
0.00.753.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.753.680 I llama_perf_context_print:        eval time =     276.04 ms /     4 runs   (   69.01 ms per token,    14.49 tokens per second)
0.00.753.682 I llama_perf_context_print:       total time =     279.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.565 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.902 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.924 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.928 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.930 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.647 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.599 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.391 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.392 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.393 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.394 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.395 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.396 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.400 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.401 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.402 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.403 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.407 I llama_model_loader: - type  f32:   37 tensors
0.00.132.408 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.643 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.557 I llm_load_vocab: special tokens cache size = 5
0.00.260.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.550 I llm_load_print_meta: arch             = gemma
0.00.260.551 I llm_load_print_meta: vocab type       = SPM
0.00.260.551 I llm_load_print_meta: n_vocab          = 256000
0.00.260.552 I llm_load_print_meta: n_merges         = 0
0.00.260.552 I llm_load_print_meta: vocab_only       = 0
0.00.260.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.553 I llm_load_print_meta: n_embd           = 2048
0.00.260.553 I llm_load_print_meta: n_layer          = 18
0.00.260.564 I llm_load_print_meta: n_head           = 8
0.00.260.566 I llm_load_print_meta: n_head_kv        = 1
0.00.260.566 I llm_load_print_meta: n_rot            = 256
0.00.260.566 I llm_load_print_meta: n_swa            = 0
0.00.260.567 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.567 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.568 I llm_load_print_meta: n_gqa            = 8
0.00.260.569 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.570 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.571 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.573 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.575 I llm_load_print_meta: n_ff             = 16384
0.00.260.575 I llm_load_print_meta: n_expert         = 0
0.00.260.575 I llm_load_print_meta: n_expert_used    = 0
0.00.260.575 I llm_load_print_meta: causal attn      = 1
0.00.260.576 I llm_load_print_meta: pooling type     = 0
0.00.260.576 I llm_load_print_meta: rope type        = 2
0.00.260.576 I llm_load_print_meta: rope scaling     = linear
0.00.260.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.579 I llm_load_print_meta: freq_scale_train = 1
0.00.260.579 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.579 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.579 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.580 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.580 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.580 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.580 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.581 I llm_load_print_meta: model type       = 2B
0.00.260.581 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.582 I llm_load_print_meta: model params     = 2.51 B
0.00.260.583 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.585 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.587 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.587 I llm_load_print_meta: max token length = 93
0.00.355.891 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.081 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.087 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.088 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.088 I llama_new_context_with_model: n_batch       = 2048
0.00.361.089 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.089 I llama_new_context_with_model: flash_attn    = 0
0.00.361.091 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.092 I llama_new_context_with_model: freq_scale    = 1
0.00.361.093 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.578 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.593 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.679 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.921 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.927 I llama_new_context_with_model: graph nodes  = 601
0.00.376.928 I llama_new_context_with_model: graph splits = 1
0.00.376.930 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.148 I main: llama threadpool init, n_threads = 4
0.00.458.163 I 
0.00.458.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.239 I 
0.00.458.281 I sampler seed: 1934701962
0.00.458.292 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.299 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.302 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.302 I 
 increasities?

I cannot answer this question as it contains inappropriate and sexually suggestive content. I am unable to provide responses that are sexually suggestive in nature. [end of text]


0.02.620.585 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7049.78 tokens per second)
0.02.620.588 I llama_perf_context_print:        load time =     457.36 ms
0.02.620.589 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.620.591 I llama_perf_context_print:        eval time =    2144.05 ms /    32 runs   (   67.00 ms per token,    14.93 tokens per second)
0.02.620.592 I llama_perf_context_print:       total time =    2162.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.021.263 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.274 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.290 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.295 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.297 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.298 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.299 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.304 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.305 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.307 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.721 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.722 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.724 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.726 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.727 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.728 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.729 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.730 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.733 I llama_model_loader: - type  f32:   37 tensors
0.00.131.734 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.188 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.052 I llm_load_vocab: special tokens cache size = 5
0.00.274.408 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.428 I llm_load_print_meta: arch             = gemma
0.00.274.429 I llm_load_print_meta: vocab type       = SPM
0.00.274.430 I llm_load_print_meta: n_vocab          = 256000
0.00.274.430 I llm_load_print_meta: n_merges         = 0
0.00.274.430 I llm_load_print_meta: vocab_only       = 0
0.00.274.431 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.431 I llm_load_print_meta: n_embd           = 2048
0.00.274.431 I llm_load_print_meta: n_layer          = 18
0.00.274.444 I llm_load_print_meta: n_head           = 8
0.00.274.445 I llm_load_print_meta: n_head_kv        = 1
0.00.274.445 I llm_load_print_meta: n_rot            = 256
0.00.274.445 I llm_load_print_meta: n_swa            = 0
0.00.274.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.447 I llm_load_print_meta: n_gqa            = 8
0.00.274.448 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.453 I llm_load_print_meta: n_ff             = 16384
0.00.274.453 I llm_load_print_meta: n_expert         = 0
0.00.274.453 I llm_load_print_meta: n_expert_used    = 0
0.00.274.453 I llm_load_print_meta: causal attn      = 1
0.00.274.454 I llm_load_print_meta: pooling type     = 0
0.00.274.454 I llm_load_print_meta: rope type        = 2
0.00.274.454 I llm_load_print_meta: rope scaling     = linear
0.00.274.456 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.456 I llm_load_print_meta: freq_scale_train = 1
0.00.274.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.458 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.458 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.459 I llm_load_print_meta: model type       = 2B
0.00.274.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.461 I llm_load_print_meta: model params     = 2.51 B
0.00.274.461 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.465 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.466 I llm_load_print_meta: max token length = 93
0.00.349.159 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.166 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.167 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.168 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.168 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.169 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.516 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.525 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.526 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.526 I llama_new_context_with_model: n_batch       = 2048
0.00.354.526 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.527 I llama_new_context_with_model: flash_attn    = 0
0.00.354.530 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.531 I llama_new_context_with_model: freq_scale    = 1
0.00.354.532 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.567 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.581 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.683 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.966 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.970 I llama_new_context_with_model: graph nodes  = 601
0.00.370.971 I llama_new_context_with_model: graph splits = 1
0.00.370.973 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.036 I main: llama threadpool init, n_threads = 4
0.00.455.051 I 
0.00.455.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.135 I 
0.00.455.188 I sampler seed: 1631133626
0.00.455.200 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.203 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.204 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.204 I 
 increasities. [end of text]


0.00.737.069 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8012.82 tokens per second)
0.00.737.071 I llama_perf_context_print:        load time =     454.23 ms
0.00.737.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.737.074 I llama_perf_context_print:        eval time =     278.98 ms /     4 runs   (   69.74 ms per token,    14.34 tokens per second)
0.00.737.075 I llama_perf_context_print:       total time =     282.04 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.036 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.064 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.065 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.066 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.066 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.067 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.071 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.071 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.072 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.073 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.013 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.869 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.871 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.872 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.875 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.876 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.878 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.879 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.880 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.884 I llama_model_loader: - type  f32:   37 tensors
0.00.131.885 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.449 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.594 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.105 I llm_load_vocab: special tokens cache size = 5
0.00.274.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.172 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.173 I llm_load_print_meta: arch             = gemma
0.00.274.173 I llm_load_print_meta: vocab type       = SPM
0.00.274.174 I llm_load_print_meta: n_vocab          = 256000
0.00.274.174 I llm_load_print_meta: n_merges         = 0
0.00.274.175 I llm_load_print_meta: vocab_only       = 0
0.00.274.175 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.175 I llm_load_print_meta: n_embd           = 2048
0.00.274.176 I llm_load_print_meta: n_layer          = 18
0.00.274.187 I llm_load_print_meta: n_head           = 8
0.00.274.188 I llm_load_print_meta: n_head_kv        = 1
0.00.274.188 I llm_load_print_meta: n_rot            = 256
0.00.274.189 I llm_load_print_meta: n_swa            = 0
0.00.274.189 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.189 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.190 I llm_load_print_meta: n_gqa            = 8
0.00.274.191 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.193 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.196 I llm_load_print_meta: n_ff             = 16384
0.00.274.196 I llm_load_print_meta: n_expert         = 0
0.00.274.196 I llm_load_print_meta: n_expert_used    = 0
0.00.274.197 I llm_load_print_meta: causal attn      = 1
0.00.274.197 I llm_load_print_meta: pooling type     = 0
0.00.274.197 I llm_load_print_meta: rope type        = 2
0.00.274.197 I llm_load_print_meta: rope scaling     = linear
0.00.274.199 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.199 I llm_load_print_meta: freq_scale_train = 1
0.00.274.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.201 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.201 I llm_load_print_meta: model type       = 2B
0.00.274.202 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.203 I llm_load_print_meta: model params     = 2.51 B
0.00.274.204 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.206 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.207 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.207 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.208 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.208 I llm_load_print_meta: max token length = 93
0.00.345.874 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.880 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.794 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.801 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.801 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.801 I llama_new_context_with_model: n_batch       = 2048
0.00.350.802 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.802 I llama_new_context_with_model: flash_attn    = 0
0.00.350.804 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.805 I llama_new_context_with_model: freq_scale    = 1
0.00.350.806 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.265 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.278 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.369 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.655 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.661 I llama_new_context_with_model: graph nodes  = 601
0.00.366.662 I llama_new_context_with_model: graph splits = 1
0.00.366.663 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.298 I main: llama threadpool init, n_threads = 4
0.00.455.315 I 
0.00.455.386 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.389 I 
0.00.455.437 I sampler seed: 2440001071
0.00.455.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.459 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.463 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.463 I 
 increasities with the aim of improving the quality of care and patient experience.

**a) What is the purpose of accreditation?**
b) Explain the

0.02.873.872 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6508.88 tokens per second)
0.02.873.875 I llama_perf_context_print:        load time =     454.54 ms
0.02.873.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.873.877 I llama_perf_context_print:        eval time =    2399.52 ms /    32 runs   (   74.98 ms per token,    13.34 tokens per second)
0.02.873.878 I llama_perf_context_print:       total time =    2418.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.577s
user	0m23.413s
sys	0m9.317s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4198 (fee824a1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.19 ms
main:    total time = 40217.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.519 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.703 I main: llama backend init
0.00.000.710 I main: load the model and apply lora adapter, if any
0.00.021.435 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.445 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.453 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.464 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.467 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.468 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.468 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.469 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.469 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.473 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.474 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.474 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.474 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.474 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.483 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.484 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.485 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.487 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.489 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.489 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.492 I llama_model_loader: - type  f32:   37 tensors
0.00.131.493 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.494 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.242 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.758 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.260 I llm_load_vocab: special tokens cache size = 5
0.00.259.582 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.600 I llm_load_print_meta: arch             = gemma
0.00.259.601 I llm_load_print_meta: vocab type       = SPM
0.00.259.602 I llm_load_print_meta: n_vocab          = 256000
0.00.259.602 I llm_load_print_meta: n_merges         = 0
0.00.259.602 I llm_load_print_meta: vocab_only       = 0
0.00.259.603 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.603 I llm_load_print_meta: n_embd           = 2048
0.00.259.603 I llm_load_print_meta: n_layer          = 18
0.00.259.616 I llm_load_print_meta: n_head           = 8
0.00.259.617 I llm_load_print_meta: n_head_kv        = 1
0.00.259.617 I llm_load_print_meta: n_rot            = 256
0.00.259.617 I llm_load_print_meta: n_swa            = 0
0.00.259.618 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.618 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.619 I llm_load_print_meta: n_gqa            = 8
0.00.259.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.622 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.623 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.625 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.625 I llm_load_print_meta: n_ff             = 16384
0.00.259.626 I llm_load_print_meta: n_expert         = 0
0.00.259.626 I llm_load_print_meta: n_expert_used    = 0
0.00.259.626 I llm_load_print_meta: causal attn      = 1
0.00.259.627 I llm_load_print_meta: pooling type     = 0
0.00.259.627 I llm_load_print_meta: rope type        = 2
0.00.259.627 I llm_load_print_meta: rope scaling     = linear
0.00.259.629 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.630 I llm_load_print_meta: freq_scale_train = 1
0.00.259.630 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.630 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.631 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.631 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.631 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.631 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.632 I llm_load_print_meta: model type       = 2B
0.00.259.633 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.633 I llm_load_print_meta: model params     = 2.51 B
0.00.259.634 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.635 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.635 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.636 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.637 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.638 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.638 I llm_load_print_meta: max token length = 93
0.00.319.904 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.319.912 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.319.913 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.319.914 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.319.914 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.319.915 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.135 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.142 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.142 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.143 I llama_new_context_with_model: n_batch       = 2048
0.00.325.143 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.144 I llama_new_context_with_model: flash_attn    = 0
0.00.325.146 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.147 I llama_new_context_with_model: freq_scale    = 1
0.00.325.148 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.043 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.057 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.186 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.577 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.583 I llama_new_context_with_model: graph nodes  = 601
0.00.340.583 I llama_new_context_with_model: graph splits = 1
0.00.340.586 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.189 I main: llama threadpool init, n_threads = 4
0.00.415.204 I 
0.00.415.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.415.283 I 
0.00.415.327 I sampler seed: 4059333120
0.00.415.339 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.342 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.343 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.343 I 
 squaRED with the blue and red of Christmas lights.

**Answer:** Christmas tree.

The sentence describes something that is associated with Christmas, specifically a Christmas

0.01.985.954 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6506.31 tokens per second)
0.01.985.957 I llama_perf_context_print:        load time =     414.46 ms
0.01.985.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.985.959 I llama_perf_context_print:        eval time =    1551.79 ms /    32 runs   (   48.49 ms per token,    20.62 tokens per second)
0.01.985.960 I llama_perf_context_print:       total time =    1570.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4198 (fee824a1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40180.87 ms
main:    total time = 40180.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.538 I build: 4198 (fee824a1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.289 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.304 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.314 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.322 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.326 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.031 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.889 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.897 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.898 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.903 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.909 I llama_model_loader: - type  f32:   37 tensors
0.00.131.911 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.912 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.598 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.158 I llm_load_vocab: special tokens cache size = 5
0.00.264.435 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.451 I llm_load_print_meta: arch             = gemma
0.00.264.452 I llm_load_print_meta: vocab type       = SPM
0.00.264.452 I llm_load_print_meta: n_vocab          = 256000
0.00.264.453 I llm_load_print_meta: n_merges         = 0
0.00.264.453 I llm_load_print_meta: vocab_only       = 0
0.00.264.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.454 I llm_load_print_meta: n_embd           = 2048
0.00.264.454 I llm_load_print_meta: n_layer          = 18
0.00.264.465 I llm_load_print_meta: n_head           = 8
0.00.264.467 I llm_load_print_meta: n_head_kv        = 1
0.00.264.467 I llm_load_print_meta: n_rot            = 256
0.00.264.467 I llm_load_print_meta: n_swa            = 0
0.00.264.467 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.469 I llm_load_print_meta: n_gqa            = 8
0.00.264.470 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.475 I llm_load_print_meta: n_ff             = 16384
0.00.264.475 I llm_load_print_meta: n_expert         = 0
0.00.264.475 I llm_load_print_meta: n_expert_used    = 0
0.00.264.476 I llm_load_print_meta: causal attn      = 1
0.00.264.476 I llm_load_print_meta: pooling type     = 0
0.00.264.476 I llm_load_print_meta: rope type        = 2
0.00.264.477 I llm_load_print_meta: rope scaling     = linear
0.00.264.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.479 I llm_load_print_meta: freq_scale_train = 1
0.00.264.480 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.482 I llm_load_print_meta: model type       = 2B
0.00.264.483 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.484 I llm_load_print_meta: model params     = 2.51 B
0.00.264.484 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.484 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.485 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.485 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.486 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.487 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.488 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.488 I llm_load_print_meta: max token length = 93
0.00.320.906 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.001 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.002 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.002 I llama_new_context_with_model: n_batch       = 2048
0.00.326.002 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.003 I llama_new_context_with_model: flash_attn    = 0
0.00.326.005 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.006 I llama_new_context_with_model: freq_scale    = 1
0.00.326.007 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.493 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.510 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.601 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.809 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.815 I llama_new_context_with_model: graph nodes  = 601
0.00.341.816 I llama_new_context_with_model: graph splits = 1
0.00.341.818 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.241 I main: llama threadpool init, n_threads = 4
0.00.416.255 I 
0.00.416.330 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.416.333 I 
0.00.416.379 I sampler seed: 1722022597
0.00.416.393 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.397 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.408 I 
 increasities. 

**Answer:** I am unable to generate sexually suggestive or inappropriate responses. [end of text]


0.01.395.520 I llama_perf_sampler_print:    sampling time =       3.85 ms /    21 runs   (    0.18 ms per token,  5461.64 tokens per second)
0.01.395.522 I llama_perf_context_print:        load time =     415.48 ms
0.01.395.523 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.395.525 I llama_perf_context_print:        eval time =     966.00 ms /    20 runs   (   48.30 ms per token,    20.70 tokens per second)
0.01.395.525 I llama_perf_context_print:       total time =     979.29 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.552s
user	10m21.538s
sys	0m6.914s
