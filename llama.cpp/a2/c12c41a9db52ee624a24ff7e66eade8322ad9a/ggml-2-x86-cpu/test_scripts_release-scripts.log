+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.020.987 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.999 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.010 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.027 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.028 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.276 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.005 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.870 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.877 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.879 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.879 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.882 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.883 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.883 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.884 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.888 I llama_model_loader: - type  f32:   37 tensors
0.00.130.889 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.239 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.715 I llm_load_vocab: special tokens cache size = 5
0.00.282.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.944 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.945 I llm_load_print_meta: arch             = gemma
0.00.282.945 I llm_load_print_meta: vocab type       = SPM
0.00.282.946 I llm_load_print_meta: n_vocab          = 256000
0.00.282.946 I llm_load_print_meta: n_merges         = 0
0.00.282.947 I llm_load_print_meta: vocab_only       = 0
0.00.282.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.947 I llm_load_print_meta: n_embd           = 2048
0.00.282.947 I llm_load_print_meta: n_layer          = 18
0.00.282.959 I llm_load_print_meta: n_head           = 8
0.00.282.960 I llm_load_print_meta: n_head_kv        = 1
0.00.282.961 I llm_load_print_meta: n_rot            = 256
0.00.282.961 I llm_load_print_meta: n_swa            = 0
0.00.282.961 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.962 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.963 I llm_load_print_meta: n_gqa            = 8
0.00.282.964 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.964 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.965 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.967 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.968 I llm_load_print_meta: n_ff             = 16384
0.00.282.968 I llm_load_print_meta: n_expert         = 0
0.00.282.968 I llm_load_print_meta: n_expert_used    = 0
0.00.282.969 I llm_load_print_meta: causal attn      = 1
0.00.282.969 I llm_load_print_meta: pooling type     = 0
0.00.282.969 I llm_load_print_meta: rope type        = 2
0.00.282.970 I llm_load_print_meta: rope scaling     = linear
0.00.282.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.972 I llm_load_print_meta: freq_scale_train = 1
0.00.282.972 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.973 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.973 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.973 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.973 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.974 I llm_load_print_meta: model type       = 2B
0.00.282.975 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.975 I llm_load_print_meta: model params     = 2.51 B
0.00.282.976 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.977 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.978 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.978 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.978 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.979 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.979 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.979 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.980 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.980 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.980 I llm_load_print_meta: max token length = 93
0.00.382.789 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.382.797 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.382.798 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.382.799 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.382.799 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.382.800 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.032 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.032 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.033 I llama_new_context_with_model: n_batch       = 2048
0.00.388.033 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.034 I llama_new_context_with_model: flash_attn    = 0
0.00.388.037 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.038 I llama_new_context_with_model: freq_scale    = 1
0.00.388.039 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.059 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.402.606 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.621 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.020 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.027 I llama_new_context_with_model: graph nodes  = 601
0.00.404.027 I llama_new_context_with_model: graph splits = 1
0.00.404.030 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.404.030 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.642 I main: llama threadpool init, n_threads = 4
0.00.489.657 I 
0.00.489.732 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.735 I 
0.00.489.773 I sampler seed: 3890558897
0.00.489.784 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.796 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.799 I 
 increamically.

I. The koala's diet primarily consists of leaves from Eucalyptus trees.
II. Koalas are nocturnal animals that spend most of their

0.02.763.177 I llama_perf_sampler_print:    sampling time =       5.39 ms /    33 runs   (    0.16 ms per token,  6122.45 tokens per second)
0.02.763.180 I llama_perf_context_print:        load time =     488.89 ms
0.02.763.181 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.183 I llama_perf_context_print:        eval time =    2253.86 ms /    32 runs   (   70.43 ms per token,    14.20 tokens per second)
0.02.763.183 I llama_perf_context_print:       total time =    2273.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.180 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.353 I main: llama backend init
0.00.000.362 I main: load the model and apply lora adapter, if any
0.00.020.802 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.834 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.845 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.850 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.853 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.855 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.856 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.857 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.864 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.017 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.858 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.863 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.864 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.865 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.865 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.866 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.867 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.870 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.871 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.872 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.877 I llama_model_loader: - type  f32:   37 tensors
0.00.130.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.172 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.351 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.941 I llm_load_vocab: special tokens cache size = 5
0.00.282.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.875 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.876 I llm_load_print_meta: arch             = gemma
0.00.282.877 I llm_load_print_meta: vocab type       = SPM
0.00.282.877 I llm_load_print_meta: n_vocab          = 256000
0.00.282.878 I llm_load_print_meta: n_merges         = 0
0.00.282.878 I llm_load_print_meta: vocab_only       = 0
0.00.282.878 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.879 I llm_load_print_meta: n_embd           = 2048
0.00.282.879 I llm_load_print_meta: n_layer          = 18
0.00.282.891 I llm_load_print_meta: n_head           = 8
0.00.282.892 I llm_load_print_meta: n_head_kv        = 1
0.00.282.893 I llm_load_print_meta: n_rot            = 256
0.00.282.893 I llm_load_print_meta: n_swa            = 0
0.00.282.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.894 I llm_load_print_meta: n_gqa            = 8
0.00.282.895 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.897 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.899 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.899 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.900 I llm_load_print_meta: n_ff             = 16384
0.00.282.901 I llm_load_print_meta: n_expert         = 0
0.00.282.901 I llm_load_print_meta: n_expert_used    = 0
0.00.282.901 I llm_load_print_meta: causal attn      = 1
0.00.282.902 I llm_load_print_meta: pooling type     = 0
0.00.282.902 I llm_load_print_meta: rope type        = 2
0.00.282.902 I llm_load_print_meta: rope scaling     = linear
0.00.282.904 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.905 I llm_load_print_meta: freq_scale_train = 1
0.00.282.905 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.905 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.906 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.906 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.906 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.907 I llm_load_print_meta: model type       = 2B
0.00.282.907 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.908 I llm_load_print_meta: model params     = 2.51 B
0.00.282.909 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.909 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.910 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.910 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.911 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.911 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.912 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.913 I llm_load_print_meta: max token length = 93
0.00.378.440 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.622 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.629 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.630 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.630 I llama_new_context_with_model: n_batch       = 2048
0.00.383.631 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.631 I llama_new_context_with_model: flash_attn    = 0
0.00.383.636 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.637 I llama_new_context_with_model: freq_scale    = 1
0.00.383.638 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.660 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.399.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.531 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.961 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.966 I llama_new_context_with_model: graph nodes  = 601
0.00.400.966 I llama_new_context_with_model: graph splits = 1
0.00.400.969 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.969 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.720 I main: llama threadpool init, n_threads = 4
0.00.484.735 I 
0.00.484.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.826 I 
0.00.484.868 I sampler seed: 362056575
0.00.484.879 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.890 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.894 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.894 I 
 increasities as a form of religious experience. [end of text]


0.01.176.608 I llama_perf_sampler_print:    sampling time =       1.70 ms /    11 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.01.176.610 I llama_perf_context_print:        load time =     484.34 ms
0.01.176.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.176.613 I llama_perf_context_print:        eval time =     685.13 ms /    10 runs   (   68.51 ms per token,    14.60 tokens per second)
0.01.176.614 I llama_perf_context_print:       total time =     691.90 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.553 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.419 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.430 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.452 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.459 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.467 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.470 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.592 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.677 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.563 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.564 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.568 I llama_model_loader: - type  f32:   37 tensors
0.00.132.570 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.081 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.724 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.400 I llm_load_vocab: special tokens cache size = 5
0.00.278.872 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.888 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.888 I llm_load_print_meta: arch             = gemma
0.00.278.889 I llm_load_print_meta: vocab type       = SPM
0.00.278.890 I llm_load_print_meta: n_vocab          = 256000
0.00.278.890 I llm_load_print_meta: n_merges         = 0
0.00.278.890 I llm_load_print_meta: vocab_only       = 0
0.00.278.891 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.891 I llm_load_print_meta: n_embd           = 2048
0.00.278.891 I llm_load_print_meta: n_layer          = 18
0.00.278.904 I llm_load_print_meta: n_head           = 8
0.00.278.905 I llm_load_print_meta: n_head_kv        = 1
0.00.278.905 I llm_load_print_meta: n_rot            = 256
0.00.278.905 I llm_load_print_meta: n_swa            = 0
0.00.278.906 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.906 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.907 I llm_load_print_meta: n_gqa            = 8
0.00.278.908 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.909 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.910 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.912 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.912 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.912 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.913 I llm_load_print_meta: n_ff             = 16384
0.00.278.914 I llm_load_print_meta: n_expert         = 0
0.00.278.914 I llm_load_print_meta: n_expert_used    = 0
0.00.278.914 I llm_load_print_meta: causal attn      = 1
0.00.278.915 I llm_load_print_meta: pooling type     = 0
0.00.278.915 I llm_load_print_meta: rope type        = 2
0.00.278.915 I llm_load_print_meta: rope scaling     = linear
0.00.278.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.918 I llm_load_print_meta: freq_scale_train = 1
0.00.278.918 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.919 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.919 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.919 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.919 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.919 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.920 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.920 I llm_load_print_meta: model type       = 2B
0.00.278.921 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.921 I llm_load_print_meta: model params     = 2.51 B
0.00.278.922 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.923 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.924 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.925 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.926 I llm_load_print_meta: max token length = 93
0.00.357.303 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.310 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.311 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.312 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.312 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.313 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.362.626 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.633 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.634 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.634 I llama_new_context_with_model: n_batch       = 2048
0.00.362.635 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.635 I llama_new_context_with_model: flash_attn    = 0
0.00.362.638 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.639 I llama_new_context_with_model: freq_scale    = 1
0.00.362.640 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.663 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.377.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.265 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.665 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.671 I llama_new_context_with_model: graph nodes  = 601
0.00.378.672 I llama_new_context_with_model: graph splits = 1
0.00.378.674 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.674 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.631 I main: llama threadpool init, n_threads = 4
0.00.463.650 I 
0.00.463.740 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.745 I 
0.00.463.797 I sampler seed: 2384093280
0.00.463.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.825 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.827 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.827 I 
 increasities, and other forms of sexual harassment can have devastating consequences for victims, including long-term physical and emotional health problems.

**What are the legal

0.02.742.622 I llama_perf_sampler_print:    sampling time =       5.68 ms /    33 runs   (    0.17 ms per token,  5809.86 tokens per second)
0.02.742.625 I llama_perf_context_print:        load time =     462.84 ms
0.02.742.626 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.742.627 I llama_perf_context_print:        eval time =    2258.29 ms /    32 runs   (   70.57 ms per token,    14.17 tokens per second)
0.02.742.628 I llama_perf_context_print:       total time =    2279.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.583 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.021.140 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.169 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.170 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.176 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.177 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.178 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.183 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.185 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.299 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.345 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.279 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.280 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.281 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.282 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.283 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.284 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.288 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.289 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.290 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.291 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.292 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.296 I llama_model_loader: - type  f32:   37 tensors
0.00.131.297 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.219 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.978 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.645 I llm_load_vocab: special tokens cache size = 5
0.00.290.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.968 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.969 I llm_load_print_meta: arch             = gemma
0.00.290.970 I llm_load_print_meta: vocab type       = SPM
0.00.290.970 I llm_load_print_meta: n_vocab          = 256000
0.00.290.971 I llm_load_print_meta: n_merges         = 0
0.00.290.971 I llm_load_print_meta: vocab_only       = 0
0.00.290.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.971 I llm_load_print_meta: n_embd           = 2048
0.00.290.972 I llm_load_print_meta: n_layer          = 18
0.00.290.983 I llm_load_print_meta: n_head           = 8
0.00.290.984 I llm_load_print_meta: n_head_kv        = 1
0.00.290.984 I llm_load_print_meta: n_rot            = 256
0.00.290.984 I llm_load_print_meta: n_swa            = 0
0.00.290.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.986 I llm_load_print_meta: n_gqa            = 8
0.00.290.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.988 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.990 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.990 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.990 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.991 I llm_load_print_meta: n_ff             = 16384
0.00.290.991 I llm_load_print_meta: n_expert         = 0
0.00.290.992 I llm_load_print_meta: n_expert_used    = 0
0.00.290.992 I llm_load_print_meta: causal attn      = 1
0.00.290.992 I llm_load_print_meta: pooling type     = 0
0.00.290.993 I llm_load_print_meta: rope type        = 2
0.00.290.993 I llm_load_print_meta: rope scaling     = linear
0.00.290.994 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.995 I llm_load_print_meta: freq_scale_train = 1
0.00.290.995 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.996 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.996 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.996 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.996 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.997 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.997 I llm_load_print_meta: model type       = 2B
0.00.290.998 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.999 I llm_load_print_meta: model params     = 2.51 B
0.00.291.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.000 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.001 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.002 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.003 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.004 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.004 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.005 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.005 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.006 I llm_load_print_meta: max token length = 93
0.00.362.567 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.362.573 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.367.836 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.843 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.843 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.844 I llama_new_context_with_model: n_batch       = 2048
0.00.367.844 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.845 I llama_new_context_with_model: flash_attn    = 0
0.00.367.848 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.848 I llama_new_context_with_model: freq_scale    = 1
0.00.367.849 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.869 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.382.351 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.363 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.456 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.724 I llama_new_context_with_model: graph nodes  = 601
0.00.383.725 I llama_new_context_with_model: graph splits = 1
0.00.383.727 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.383.727 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.533 I main: llama threadpool init, n_threads = 4
0.00.473.551 I 
0.00.473.624 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.628 I 
0.00.473.670 I sampler seed: 159382534
0.00.473.680 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.683 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.683 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.684 I 
 increasities in the early 20th century.

**Answer:**
I cannot find any information that supports your claim. [end of text]


0.02.542.689 I llama_perf_sampler_print:    sampling time =       5.23 ms /    28 runs   (    0.19 ms per token,  5351.68 tokens per second)
0.02.542.691 I llama_perf_context_print:        load time =     472.73 ms
0.02.542.692 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.542.694 I llama_perf_context_print:        eval time =    2050.98 ms /    27 runs   (   75.96 ms per token,    13.16 tokens per second)
0.02.542.694 I llama_perf_context_print:       total time =    2069.16 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.083s
user	0m32.244s
sys	0m9.463s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4385 (a2c12c41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40314.86 ms
main:    total time = 40314.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.172 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.020.594 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.616 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.630 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.636 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.637 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.638 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.638 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.639 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.642 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.643 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.644 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.645 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.945 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.950 I llama_model_loader: - type  f32:   37 tensors
0.00.129.951 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.952 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.587 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.698 I llm_load_vocab: special tokens cache size = 5
0.00.270.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.733 I llm_load_print_meta: arch             = gemma
0.00.270.733 I llm_load_print_meta: vocab type       = SPM
0.00.270.734 I llm_load_print_meta: n_vocab          = 256000
0.00.270.735 I llm_load_print_meta: n_merges         = 0
0.00.270.735 I llm_load_print_meta: vocab_only       = 0
0.00.270.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.736 I llm_load_print_meta: n_embd           = 2048
0.00.270.736 I llm_load_print_meta: n_layer          = 18
0.00.270.748 I llm_load_print_meta: n_head           = 8
0.00.270.749 I llm_load_print_meta: n_head_kv        = 1
0.00.270.749 I llm_load_print_meta: n_rot            = 256
0.00.270.749 I llm_load_print_meta: n_swa            = 0
0.00.270.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.751 I llm_load_print_meta: n_gqa            = 8
0.00.270.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.755 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.757 I llm_load_print_meta: n_ff             = 16384
0.00.270.757 I llm_load_print_meta: n_expert         = 0
0.00.270.757 I llm_load_print_meta: n_expert_used    = 0
0.00.270.758 I llm_load_print_meta: causal attn      = 1
0.00.270.758 I llm_load_print_meta: pooling type     = 0
0.00.270.758 I llm_load_print_meta: rope type        = 2
0.00.270.759 I llm_load_print_meta: rope scaling     = linear
0.00.270.761 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.762 I llm_load_print_meta: freq_scale_train = 1
0.00.270.762 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.764 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.764 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.764 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.765 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.765 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.774 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.774 I llm_load_print_meta: model type       = 2B
0.00.270.775 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.776 I llm_load_print_meta: model params     = 2.51 B
0.00.270.777 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.777 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.778 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.778 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.778 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.779 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.780 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.781 I llm_load_print_meta: max token length = 93
0.00.330.256 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.265 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.266 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.266 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.267 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.268 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.420 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.429 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.429 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.430 I llama_new_context_with_model: n_batch       = 2048
0.00.335.430 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.430 I llama_new_context_with_model: flash_attn    = 0
0.00.335.434 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.435 I llama_new_context_with_model: freq_scale    = 1
0.00.335.436 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.457 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.351.308 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.324 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.419 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.761 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.768 I llama_new_context_with_model: graph nodes  = 601
0.00.352.768 I llama_new_context_with_model: graph splits = 1
0.00.352.771 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.724 I main: llama threadpool init, n_threads = 4
0.00.430.739 I 
0.00.430.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.815 I 
0.00.430.856 I sampler seed: 1830163680
0.00.430.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.879 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.882 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.882 I 
 seconal year of life.

**The first four months of pregnancy are critical for fetal development.**

**True or False?**

**Answer:** True

0.02.055.976 I llama_perf_sampler_print:    sampling time =       5.60 ms /    33 runs   (    0.17 ms per token,  5888.65 tokens per second)
0.02.055.978 I llama_perf_context_print:        load time =     430.34 ms
0.02.055.980 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.055.982 I llama_perf_context_print:        eval time =    1605.23 ms /    32 runs   (   50.16 ms per token,    19.93 tokens per second)
0.02.055.983 I llama_perf_context_print:       total time =    1625.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4385 (a2c12c41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40237.36 ms
main:    total time = 40237.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.592 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.281 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.307 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.315 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.315 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.316 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.316 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.317 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.321 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.323 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.775 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.086 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.086 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.087 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.089 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.092 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.092 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.096 I llama_model_loader: - type  f32:   37 tensors
0.00.131.097 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.098 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.108 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.715 I llm_load_vocab: special tokens cache size = 5
0.00.287.882 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.904 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.904 I llm_load_print_meta: arch             = gemma
0.00.287.906 I llm_load_print_meta: vocab type       = SPM
0.00.287.907 I llm_load_print_meta: n_vocab          = 256000
0.00.287.908 I llm_load_print_meta: n_merges         = 0
0.00.287.908 I llm_load_print_meta: vocab_only       = 0
0.00.287.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.909 I llm_load_print_meta: n_embd           = 2048
0.00.287.909 I llm_load_print_meta: n_layer          = 18
0.00.287.920 I llm_load_print_meta: n_head           = 8
0.00.287.921 I llm_load_print_meta: n_head_kv        = 1
0.00.287.921 I llm_load_print_meta: n_rot            = 256
0.00.287.922 I llm_load_print_meta: n_swa            = 0
0.00.287.922 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.922 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.924 I llm_load_print_meta: n_gqa            = 8
0.00.287.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.928 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.929 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.930 I llm_load_print_meta: n_ff             = 16384
0.00.287.930 I llm_load_print_meta: n_expert         = 0
0.00.287.930 I llm_load_print_meta: n_expert_used    = 0
0.00.287.931 I llm_load_print_meta: causal attn      = 1
0.00.287.931 I llm_load_print_meta: pooling type     = 0
0.00.287.931 I llm_load_print_meta: rope type        = 2
0.00.287.933 I llm_load_print_meta: rope scaling     = linear
0.00.287.935 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.936 I llm_load_print_meta: freq_scale_train = 1
0.00.287.936 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.937 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.940 I llm_load_print_meta: model type       = 2B
0.00.287.940 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.287.941 I llm_load_print_meta: model params     = 2.51 B
0.00.287.942 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.287.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.943 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.944 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.946 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.947 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.947 I llm_load_print_meta: max token length = 93
0.00.345.480 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.350.580 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.587 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.587 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.587 I llama_new_context_with_model: n_batch       = 2048
0.00.350.588 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.589 I llama_new_context_with_model: flash_attn    = 0
0.00.350.590 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.591 I llama_new_context_with_model: freq_scale    = 1
0.00.350.592 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.611 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.474 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.578 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.798 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.805 I llama_new_context_with_model: graph nodes  = 601
0.00.366.805 I llama_new_context_with_model: graph splits = 1
0.00.366.808 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.808 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.473 I main: llama threadpool init, n_threads = 4
0.00.441.489 I 
0.00.441.564 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.567 I 
0.00.441.611 I sampler seed: 362853967
0.00.441.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.627 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.627 I 
 seconded.

I cannot find the specified file. Please check the following locations:

* Your personal computer
* The designated cloud storage location
* The

0.02.049.799 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6010.93 tokens per second)
0.02.049.801 I llama_perf_context_print:        load time =     440.66 ms
0.02.049.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.049.804 I llama_perf_context_print:        eval time =    1588.02 ms /    32 runs   (   49.63 ms per token,    20.15 tokens per second)
0.02.049.804 I llama_perf_context_print:       total time =    1608.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.479s
user	10m24.444s
sys	0m7.071s
