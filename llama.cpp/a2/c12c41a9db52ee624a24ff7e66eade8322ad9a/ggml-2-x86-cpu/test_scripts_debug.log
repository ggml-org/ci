+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.023.460 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.472 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.579 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.584 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.586 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.589 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.590 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.592 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.145 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.513 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.376.656 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.376.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.376.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.376.671 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.376.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.376.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.376.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.376.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.376.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.376.682 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.376.683 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.376.685 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.376.694 I llama_model_loader: - type  f32:   37 tensors
0.00.376.696 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.816 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.418 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.454 I llm_load_vocab: special tokens cache size = 5
0.00.900.837 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.900.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.900.916 I llm_load_print_meta: arch             = gemma
0.00.900.917 I llm_load_print_meta: vocab type       = SPM
0.00.900.917 I llm_load_print_meta: n_vocab          = 256000
0.00.900.920 I llm_load_print_meta: n_merges         = 0
0.00.900.920 I llm_load_print_meta: vocab_only       = 0
0.00.900.921 I llm_load_print_meta: n_ctx_train      = 8192
0.00.900.921 I llm_load_print_meta: n_embd           = 2048
0.00.900.921 I llm_load_print_meta: n_layer          = 18
0.00.900.990 I llm_load_print_meta: n_head           = 8
0.00.900.998 I llm_load_print_meta: n_head_kv        = 1
0.00.900.998 I llm_load_print_meta: n_rot            = 256
0.00.900.999 I llm_load_print_meta: n_swa            = 0
0.00.900.999 I llm_load_print_meta: n_embd_head_k    = 256
0.00.900.999 I llm_load_print_meta: n_embd_head_v    = 256
0.00.901.004 I llm_load_print_meta: n_gqa            = 8
0.00.901.009 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.901.014 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.901.015 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.901.016 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.901.017 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.901.017 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.901.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.901.024 I llm_load_print_meta: n_ff             = 16384
0.00.901.025 I llm_load_print_meta: n_expert         = 0
0.00.901.025 I llm_load_print_meta: n_expert_used    = 0
0.00.901.026 I llm_load_print_meta: causal attn      = 1
0.00.901.026 I llm_load_print_meta: pooling type     = 0
0.00.901.034 I llm_load_print_meta: rope type        = 2
0.00.901.034 I llm_load_print_meta: rope scaling     = linear
0.00.901.036 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.901.037 I llm_load_print_meta: freq_scale_train = 1
0.00.901.038 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.901.038 I llm_load_print_meta: rope_finetuned   = unknown
0.00.901.039 I llm_load_print_meta: ssm_d_conv       = 0
0.00.901.039 I llm_load_print_meta: ssm_d_inner      = 0
0.00.901.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.901.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.901.042 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.901.043 I llm_load_print_meta: model type       = 2B
0.00.901.044 I llm_load_print_meta: model ftype      = Q8_0
0.00.901.045 I llm_load_print_meta: model params     = 2.51 B
0.00.901.047 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.901.047 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.901.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.901.048 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.901.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.901.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.901.052 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.901.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.901.058 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.901.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.901.060 I llm_load_print_meta: max token length = 93
0.01.003.077 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.003.085 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.003.086 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.003.087 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.003.087 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.003.088 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.008.946 I llama_new_context_with_model: n_seq_max     = 1
0.01.008.953 I llama_new_context_with_model: n_ctx         = 4096
0.01.008.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.008.954 I llama_new_context_with_model: n_batch       = 2048
0.01.008.954 I llama_new_context_with_model: n_ubatch      = 512
0.01.008.954 I llama_new_context_with_model: flash_attn    = 0
0.01.008.957 I llama_new_context_with_model: freq_base     = 10000.0
0.01.008.957 I llama_new_context_with_model: freq_scale    = 1
0.01.008.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.009.044 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.023.920 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.023.959 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.024.080 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.026.799 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.026.805 I llama_new_context_with_model: graph nodes  = 601
0.01.026.805 I llama_new_context_with_model: graph splits = 1
0.01.026.829 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.026.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.637.635 I main: llama threadpool init, n_threads = 4
0.01.637.653 I 
0.01.637.780 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.637.784 I 
0.01.638.058 I sampler seed: 4075195151
0.01.638.072 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.638.082 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.638.086 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.638.086 I 
 increasels, and a variety of other mythical creatures. [end of text]


0.06.700.127 I llama_perf_sampler_print:    sampling time =      18.81 ms /    13 runs   (    1.45 ms per token,   691.27 tokens per second)
0.06.700.143 I llama_perf_context_print:        load time =    1636.63 ms
0.06.700.145 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.700.147 I llama_perf_context_print:        eval time =    5027.49 ms /    12 runs   (  418.96 ms per token,     2.39 tokens per second)
0.06.700.147 I llama_perf_context_print:       total time =    5062.50 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.268 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.395 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.397 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.401 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.404 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.405 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.407 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.409 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.412 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.428 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.433 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.790 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.225 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.244 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.245 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.249 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.251 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.252 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.253 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.255 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.265 I llama_model_loader: - type  f32:   37 tensors
0.00.351.267 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.958 I llm_load_vocab: special tokens cache size = 5
0.00.846.233 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.309 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.310 I llm_load_print_meta: arch             = gemma
0.00.846.311 I llm_load_print_meta: vocab type       = SPM
0.00.846.312 I llm_load_print_meta: n_vocab          = 256000
0.00.846.315 I llm_load_print_meta: n_merges         = 0
0.00.846.315 I llm_load_print_meta: vocab_only       = 0
0.00.846.316 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.316 I llm_load_print_meta: n_embd           = 2048
0.00.846.317 I llm_load_print_meta: n_layer          = 18
0.00.846.383 I llm_load_print_meta: n_head           = 8
0.00.846.390 I llm_load_print_meta: n_head_kv        = 1
0.00.846.391 I llm_load_print_meta: n_rot            = 256
0.00.846.391 I llm_load_print_meta: n_swa            = 0
0.00.846.392 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.392 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.397 I llm_load_print_meta: n_gqa            = 8
0.00.846.402 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.409 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.412 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.413 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.414 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.420 I llm_load_print_meta: n_ff             = 16384
0.00.846.420 I llm_load_print_meta: n_expert         = 0
0.00.846.421 I llm_load_print_meta: n_expert_used    = 0
0.00.846.421 I llm_load_print_meta: causal attn      = 1
0.00.846.422 I llm_load_print_meta: pooling type     = 0
0.00.846.422 I llm_load_print_meta: rope type        = 2
0.00.846.423 I llm_load_print_meta: rope scaling     = linear
0.00.846.425 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.425 I llm_load_print_meta: freq_scale_train = 1
0.00.846.426 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.426 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.426 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.426 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.427 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.428 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.429 I llm_load_print_meta: model type       = 2B
0.00.846.430 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.431 I llm_load_print_meta: model params     = 2.51 B
0.00.846.433 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.433 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.434 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.434 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.435 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.435 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.436 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.437 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.443 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.445 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.445 I llm_load_print_meta: max token length = 93
0.00.941.752 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.947.794 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.804 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.804 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.805 I llama_new_context_with_model: n_batch       = 2048
0.00.947.805 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.806 I llama_new_context_with_model: flash_attn    = 0
0.00.947.809 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.810 I llama_new_context_with_model: freq_scale    = 1
0.00.947.811 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.947.910 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.963.896 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.943 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.069 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.966.762 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.966.766 I llama_new_context_with_model: graph nodes  = 601
0.00.966.767 I llama_new_context_with_model: graph splits = 1
0.00.966.791 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.966.794 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.295 I main: llama threadpool init, n_threads = 4
0.01.576.313 I 
0.01.576.433 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.437 I 
0.01.576.672 I sampler seed: 4046006684
0.01.576.685 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.697 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.698 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.698 I 
 increasities, and the like.

I am unable to access the requested information as it appears to be private. [end of text]


0.11.653.795 I llama_perf_sampler_print:    sampling time =      37.41 ms /    25 runs   (    1.50 ms per token,   668.25 tokens per second)
0.11.653.798 I llama_perf_context_print:        load time =    1575.36 ms
0.11.653.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.653.801 I llama_perf_context_print:        eval time =   10009.43 ms /    24 runs   (  417.06 ms per token,     2.40 tokens per second)
0.11.653.802 I llama_perf_context_print:       total time =   10077.51 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.909 I main: load the model and apply lora adapter, if any
0.00.023.624 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.638 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.762 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.767 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.772 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.782 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.784 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.796 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.804 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.822 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.267.533 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.376.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.400.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.400.341 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.400.342 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.400.344 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.400.345 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.400.347 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.400.348 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.400.352 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.400.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.400.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.400.356 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.400.358 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.400.365 I llama_model_loader: - type  f32:   37 tensors
0.00.400.368 I llama_model_loader: - type q8_0:  127 tensors
0.00.657.813 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.725.470 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.726.487 I llm_load_vocab: special tokens cache size = 5
0.00.945.829 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.945.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.945.902 I llm_load_print_meta: arch             = gemma
0.00.945.903 I llm_load_print_meta: vocab type       = SPM
0.00.945.904 I llm_load_print_meta: n_vocab          = 256000
0.00.945.906 I llm_load_print_meta: n_merges         = 0
0.00.945.907 I llm_load_print_meta: vocab_only       = 0
0.00.945.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.945.908 I llm_load_print_meta: n_embd           = 2048
0.00.945.908 I llm_load_print_meta: n_layer          = 18
0.00.945.976 I llm_load_print_meta: n_head           = 8
0.00.945.983 I llm_load_print_meta: n_head_kv        = 1
0.00.945.984 I llm_load_print_meta: n_rot            = 256
0.00.945.989 I llm_load_print_meta: n_swa            = 0
0.00.945.989 I llm_load_print_meta: n_embd_head_k    = 256
0.00.945.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.945.995 I llm_load_print_meta: n_gqa            = 8
0.00.946.001 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.946.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.946.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.946.008 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.946.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.946.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.946.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.946.015 I llm_load_print_meta: n_ff             = 16384
0.00.946.016 I llm_load_print_meta: n_expert         = 0
0.00.946.017 I llm_load_print_meta: n_expert_used    = 0
0.00.946.017 I llm_load_print_meta: causal attn      = 1
0.00.946.019 I llm_load_print_meta: pooling type     = 0
0.00.946.020 I llm_load_print_meta: rope type        = 2
0.00.946.020 I llm_load_print_meta: rope scaling     = linear
0.00.946.022 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.946.022 I llm_load_print_meta: freq_scale_train = 1
0.00.946.023 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.946.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.946.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.946.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.946.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.946.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.946.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.946.038 I llm_load_print_meta: model type       = 2B
0.00.946.039 I llm_load_print_meta: model ftype      = Q8_0
0.00.946.040 I llm_load_print_meta: model params     = 2.51 B
0.00.946.041 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.946.042 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.946.042 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.946.043 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.946.043 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.946.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.946.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.946.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.946.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.946.051 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.946.052 I llm_load_print_meta: max token length = 93
0.01.027.462 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.027.470 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.027.471 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.027.472 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.027.472 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.027.473 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.033.785 I llama_new_context_with_model: n_seq_max     = 1
0.01.033.794 I llama_new_context_with_model: n_ctx         = 4096
0.01.033.794 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.033.795 I llama_new_context_with_model: n_batch       = 2048
0.01.033.795 I llama_new_context_with_model: n_ubatch      = 512
0.01.033.796 I llama_new_context_with_model: flash_attn    = 0
0.01.033.799 I llama_new_context_with_model: freq_base     = 10000.0
0.01.033.799 I llama_new_context_with_model: freq_scale    = 1
0.01.033.800 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.033.899 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.049.462 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.049.509 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.049.633 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.052.300 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.052.305 I llama_new_context_with_model: graph nodes  = 601
0.01.052.305 I llama_new_context_with_model: graph splits = 1
0.01.052.330 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.052.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.663.010 I main: llama threadpool init, n_threads = 4
0.01.663.027 I 
0.01.663.177 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.663.182 I 
0.01.663.441 I sampler seed: 4134341857
0.01.663.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.663.473 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.663.475 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.663.475 I 
 increasively in complexity as you iterate through the list, using Python's list comprehensions and functions.

```python
my_list = [1,

0.15.329.596 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.20 tokens per second)
0.15.329.608 I llama_perf_context_print:        load time =    1661.99 ms
0.15.329.610 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.329.613 I llama_perf_context_print:        eval time =   13577.12 ms /    32 runs   (  424.28 ms per token,     2.36 tokens per second)
0.15.329.614 I llama_perf_context_print:       total time =   13666.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.351 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.363 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.453 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.465 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.469 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.473 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.476 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.477 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.479 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.480 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.486 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.490 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.493 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.185 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.538 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.564 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.565 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.567 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.576 I llama_model_loader: - type  f32:   37 tensors
0.00.352.579 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.294 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.287 I llm_load_vocab: special tokens cache size = 5
0.00.863.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.692 I llm_load_print_meta: arch             = gemma
0.00.863.693 I llm_load_print_meta: vocab type       = SPM
0.00.863.694 I llm_load_print_meta: n_vocab          = 256000
0.00.863.697 I llm_load_print_meta: n_merges         = 0
0.00.863.697 I llm_load_print_meta: vocab_only       = 0
0.00.863.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.698 I llm_load_print_meta: n_embd           = 2048
0.00.863.698 I llm_load_print_meta: n_layer          = 18
0.00.863.765 I llm_load_print_meta: n_head           = 8
0.00.863.772 I llm_load_print_meta: n_head_kv        = 1
0.00.863.773 I llm_load_print_meta: n_rot            = 256
0.00.863.773 I llm_load_print_meta: n_swa            = 0
0.00.863.773 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.774 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.796 I llm_load_print_meta: n_gqa            = 8
0.00.863.803 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.809 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.810 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.812 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.829 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.838 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.848 I llm_load_print_meta: n_ff             = 16384
0.00.863.849 I llm_load_print_meta: n_expert         = 0
0.00.863.850 I llm_load_print_meta: n_expert_used    = 0
0.00.863.850 I llm_load_print_meta: causal attn      = 1
0.00.863.851 I llm_load_print_meta: pooling type     = 0
0.00.863.854 I llm_load_print_meta: rope type        = 2
0.00.863.855 I llm_load_print_meta: rope scaling     = linear
0.00.863.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.857 I llm_load_print_meta: freq_scale_train = 1
0.00.863.857 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.857 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.858 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.858 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.858 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.859 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.859 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.860 I llm_load_print_meta: model type       = 2B
0.00.863.861 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.862 I llm_load_print_meta: model params     = 2.51 B
0.00.863.862 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.863 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.864 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.864 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.865 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.865 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.866 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.872 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.874 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.874 I llm_load_print_meta: max token length = 93
0.00.936.846 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.936.857 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.942.887 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.895 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.895 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.895 I llama_new_context_with_model: n_batch       = 2048
0.00.942.896 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.896 I llama_new_context_with_model: flash_attn    = 0
0.00.942.899 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.900 I llama_new_context_with_model: freq_scale    = 1
0.00.942.901 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.996 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.957.883 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.921 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.041 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.639 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.644 I llama_new_context_with_model: graph nodes  = 601
0.00.960.645 I llama_new_context_with_model: graph splits = 1
0.00.960.669 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.960.673 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.215 I main: llama threadpool init, n_threads = 4
0.01.573.232 I 
0.01.573.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.573.367 I 
0.01.573.612 I sampler seed: 1309894578
0.01.573.627 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.637 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.641 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.642 I 
 increably, and with a gleeful grin, beckoned me to join her on a journey beyond the horizon.

Who is she?

The context does

0.15.115.567 I llama_perf_sampler_print:    sampling time =      49.81 ms /    33 runs   (    1.51 ms per token,   662.49 tokens per second)
0.15.115.570 I llama_perf_context_print:        load time =    1572.24 ms
0.15.115.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.115.585 I llama_perf_context_print:        eval time =   13450.92 ms /    32 runs   (  420.34 ms per token,     2.38 tokens per second)
0.15.115.587 I llama_perf_context_print:       total time =   13542.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.491s
user	3m3.197s
sys	0m9.503s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4385 (a2c12c41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185691.46 ms
main:    total time = 185691.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.718 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.000.934 I main: load the model and apply lora adapter, if any
0.00.023.780 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.794 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.895 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.909 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.911 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.916 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.918 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.919 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.921 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.924 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.926 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.935 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.939 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.336 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.347.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.371.783 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.371.797 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.371.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.371.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.371.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.371.802 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.371.804 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.371.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.371.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.371.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.371.825 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.371.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.371.841 I llama_model_loader: - type  f32:   37 tensors
0.00.371.844 I llama_model_loader: - type q4_K:  108 tensors
0.00.371.845 I llama_model_loader: - type q6_K:   19 tensors
0.00.613.769 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.682.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.683.513 I llm_load_vocab: special tokens cache size = 5
0.00.892.883 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.892.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.892.957 I llm_load_print_meta: arch             = gemma
0.00.892.958 I llm_load_print_meta: vocab type       = SPM
0.00.892.959 I llm_load_print_meta: n_vocab          = 256000
0.00.892.961 I llm_load_print_meta: n_merges         = 0
0.00.892.962 I llm_load_print_meta: vocab_only       = 0
0.00.892.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.892.963 I llm_load_print_meta: n_embd           = 2048
0.00.892.963 I llm_load_print_meta: n_layer          = 18
0.00.893.029 I llm_load_print_meta: n_head           = 8
0.00.893.036 I llm_load_print_meta: n_head_kv        = 1
0.00.893.036 I llm_load_print_meta: n_rot            = 256
0.00.893.037 I llm_load_print_meta: n_swa            = 0
0.00.893.037 I llm_load_print_meta: n_embd_head_k    = 256
0.00.893.037 I llm_load_print_meta: n_embd_head_v    = 256
0.00.893.042 I llm_load_print_meta: n_gqa            = 8
0.00.893.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.893.052 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.893.053 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.893.055 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.893.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.893.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.893.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.893.062 I llm_load_print_meta: n_ff             = 16384
0.00.893.063 I llm_load_print_meta: n_expert         = 0
0.00.893.063 I llm_load_print_meta: n_expert_used    = 0
0.00.893.064 I llm_load_print_meta: causal attn      = 1
0.00.893.064 I llm_load_print_meta: pooling type     = 0
0.00.893.065 I llm_load_print_meta: rope type        = 2
0.00.893.066 I llm_load_print_meta: rope scaling     = linear
0.00.893.068 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.893.068 I llm_load_print_meta: freq_scale_train = 1
0.00.893.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.893.069 I llm_load_print_meta: rope_finetuned   = unknown
0.00.893.069 I llm_load_print_meta: ssm_d_conv       = 0
0.00.893.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.893.071 I llm_load_print_meta: ssm_d_state      = 0
0.00.893.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.893.072 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.893.073 I llm_load_print_meta: model type       = 2B
0.00.893.074 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.893.080 I llm_load_print_meta: model params     = 2.51 B
0.00.893.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.893.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.893.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.893.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.893.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.893.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.893.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.893.084 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.893.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.893.093 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.893.093 I llm_load_print_meta: max token length = 93
0.00.955.976 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.955.988 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.955.989 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.955.989 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.955.990 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.955.991 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.961.886 I llama_new_context_with_model: n_seq_max     = 1
0.00.961.894 I llama_new_context_with_model: n_ctx         = 4096
0.00.961.895 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.961.895 I llama_new_context_with_model: n_batch       = 2048
0.00.961.895 I llama_new_context_with_model: n_ubatch      = 512
0.00.961.896 I llama_new_context_with_model: flash_attn    = 0
0.00.961.899 I llama_new_context_with_model: freq_base     = 10000.0
0.00.961.899 I llama_new_context_with_model: freq_scale    = 1
0.00.961.900 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.996 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.977.352 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.395 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.195 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.199 I llama_new_context_with_model: graph nodes  = 601
0.00.980.200 I llama_new_context_with_model: graph splits = 1
0.00.980.225 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.980.226 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.532 I main: llama threadpool init, n_threads = 4
0.01.559.552 I 
0.01.559.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.559.678 I 
0.01.559.907 I sampler seed: 2818376194
0.01.559.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.933 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.934 I 
 maneutruing.

**Answer:**

I'm unable to provide an answer as the question contains sexually suggestive and inappropriate content. My purpose is to assist

0.12.657.045 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.76 tokens per second)
0.12.657.062 I llama_perf_context_print:        load time =    1558.49 ms
0.12.657.064 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.657.065 I llama_perf_context_print:        eval time =   11007.63 ms /    32 runs   (  343.99 ms per token,     2.91 tokens per second)
0.12.657.067 I llama_perf_context_print:       total time =   11097.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4385 (a2c12c41)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185890.57 ms
main:    total time = 185890.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 4385 (a2c12c41) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.923 I main: llama backend init
0.00.000.931 I main: load the model and apply lora adapter, if any
0.00.023.242 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.347 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.371 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.382 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.384 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.393 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.404 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.343 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.831 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.845 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.846 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.855 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.856 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.866 I llama_model_loader: - type  f32:   37 tensors
0.00.351.869 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.870 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.958 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.441 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.482 I llm_load_vocab: special tokens cache size = 5
0.00.871.392 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.871.467 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.871.468 I llm_load_print_meta: arch             = gemma
0.00.871.469 I llm_load_print_meta: vocab type       = SPM
0.00.871.471 I llm_load_print_meta: n_vocab          = 256000
0.00.871.473 I llm_load_print_meta: n_merges         = 0
0.00.871.474 I llm_load_print_meta: vocab_only       = 0
0.00.871.474 I llm_load_print_meta: n_ctx_train      = 8192
0.00.871.474 I llm_load_print_meta: n_embd           = 2048
0.00.871.475 I llm_load_print_meta: n_layer          = 18
0.00.871.540 I llm_load_print_meta: n_head           = 8
0.00.871.547 I llm_load_print_meta: n_head_kv        = 1
0.00.871.548 I llm_load_print_meta: n_rot            = 256
0.00.871.548 I llm_load_print_meta: n_swa            = 0
0.00.871.549 I llm_load_print_meta: n_embd_head_k    = 256
0.00.871.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.871.554 I llm_load_print_meta: n_gqa            = 8
0.00.871.559 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.871.564 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.871.566 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.871.567 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.871.567 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.871.568 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.871.568 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.871.573 I llm_load_print_meta: n_ff             = 16384
0.00.871.574 I llm_load_print_meta: n_expert         = 0
0.00.871.574 I llm_load_print_meta: n_expert_used    = 0
0.00.871.575 I llm_load_print_meta: causal attn      = 1
0.00.871.575 I llm_load_print_meta: pooling type     = 0
0.00.871.576 I llm_load_print_meta: rope type        = 2
0.00.871.576 I llm_load_print_meta: rope scaling     = linear
0.00.871.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.871.579 I llm_load_print_meta: freq_scale_train = 1
0.00.871.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.871.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.871.580 I llm_load_print_meta: ssm_d_conv       = 0
0.00.871.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.871.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.871.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.871.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.871.583 I llm_load_print_meta: model type       = 2B
0.00.871.584 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.871.585 I llm_load_print_meta: model params     = 2.51 B
0.00.871.586 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.871.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.871.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.871.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.871.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.871.590 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.871.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.871.591 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.871.596 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.871.597 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.871.598 I llm_load_print_meta: max token length = 93
0.00.930.524 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.936.571 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.578 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.578 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.579 I llama_new_context_with_model: n_batch       = 2048
0.00.936.579 I llama_new_context_with_model: n_ubatch      = 512
0.00.936.579 I llama_new_context_with_model: flash_attn    = 0
0.00.936.582 I llama_new_context_with_model: freq_base     = 10000.0
0.00.936.583 I llama_new_context_with_model: freq_scale    = 1
0.00.936.584 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.675 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.951.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.951.781 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.951.900 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.954.515 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.954.519 I llama_new_context_with_model: graph nodes  = 601
0.00.954.519 I llama_new_context_with_model: graph splits = 1
0.00.954.544 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.954.548 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.540.156 I main: llama threadpool init, n_threads = 4
0.01.540.171 I 
0.01.540.298 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.540.303 I 
0.01.540.552 I sampler seed: 4249405013
0.01.540.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.576 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.581 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.581 I 
 increasities?

The provided text does not contain any information regarding the increasities, so I am unable to extract the requested data from the provided context. [end of text]


0.12.727.613 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.83 tokens per second)
0.12.727.616 I llama_perf_context_print:        load time =    1539.13 ms
0.12.727.632 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.727.634 I llama_perf_context_print:        eval time =   11097.46 ms /    32 runs   (  346.80 ms per token,     2.88 tokens per second)
0.12.727.635 I llama_perf_context_print:       total time =   11187.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.865s
user	46m45.228s
sys	0m6.363s
