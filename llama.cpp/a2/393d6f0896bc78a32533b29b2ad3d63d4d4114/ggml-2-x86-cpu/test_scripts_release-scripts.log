+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.591 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.022.505 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.563 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.570 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.581 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.582 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.584 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.585 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.585 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.590 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.592 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.608 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.027 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.922 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.937 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.942 I llama_model_loader: - type  f32:   37 tensors
0.00.133.945 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.961 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.996 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.811 I llm_load_vocab: special tokens cache size = 5
0.00.267.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.554 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.554 I llm_load_print_meta: arch             = gemma
0.00.267.555 I llm_load_print_meta: vocab type       = SPM
0.00.267.555 I llm_load_print_meta: n_vocab          = 256000
0.00.267.556 I llm_load_print_meta: n_merges         = 0
0.00.267.556 I llm_load_print_meta: vocab_only       = 0
0.00.267.557 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.557 I llm_load_print_meta: n_embd           = 2048
0.00.267.558 I llm_load_print_meta: n_layer          = 18
0.00.267.571 I llm_load_print_meta: n_head           = 8
0.00.267.572 I llm_load_print_meta: n_head_kv        = 1
0.00.267.572 I llm_load_print_meta: n_rot            = 256
0.00.267.572 I llm_load_print_meta: n_swa            = 0
0.00.267.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.574 I llm_load_print_meta: n_gqa            = 8
0.00.267.575 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.576 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.578 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.578 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.579 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.580 I llm_load_print_meta: n_ff             = 16384
0.00.267.580 I llm_load_print_meta: n_expert         = 0
0.00.267.580 I llm_load_print_meta: n_expert_used    = 0
0.00.267.581 I llm_load_print_meta: causal attn      = 1
0.00.267.581 I llm_load_print_meta: pooling type     = 0
0.00.267.581 I llm_load_print_meta: rope type        = 2
0.00.267.581 I llm_load_print_meta: rope scaling     = linear
0.00.267.583 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.584 I llm_load_print_meta: freq_scale_train = 1
0.00.267.584 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.584 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.585 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.586 I llm_load_print_meta: model type       = 2B
0.00.267.587 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.587 I llm_load_print_meta: model params     = 2.51 B
0.00.267.588 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.589 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.590 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.591 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.592 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.592 I llm_load_print_meta: max token length = 93
0.00.267.628 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.367.336 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.367.345 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.367.346 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.367.346 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.367.347 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.367.348 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.372.612 I llama_new_context_with_model: n_ctx      = 8192
0.00.372.619 I llama_new_context_with_model: n_batch    = 2048
0.00.372.620 I llama_new_context_with_model: n_ubatch   = 512
0.00.372.621 I llama_new_context_with_model: flash_attn = 0
0.00.372.624 I llama_new_context_with_model: freq_base  = 10000.0
0.00.372.625 I llama_new_context_with_model: freq_scale = 1
0.00.403.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.938 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.034 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.902 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.911 I llama_new_context_with_model: graph nodes  = 601
0.00.404.912 I llama_new_context_with_model: graph splits = 1
0.00.404.914 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.102 I main: llama threadpool init, n_threads = 4
0.00.500.114 I 
0.00.500.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.195 I 
0.00.500.234 I sampler seed: 1292419410
0.00.500.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.244 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.500.245 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively from 2015 to 2020.

What was the average increase per year?

To calculate the average increase per year

0.02.815.363 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6745.71 tokens per second)
0.02.815.366 I llama_perf_context_print:        load time =     498.20 ms
0.02.815.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.815.369 I llama_perf_context_print:        eval time =    2295.79 ms /    32 runs   (   71.74 ms per token,    13.94 tokens per second)
0.02.815.370 I llama_perf_context_print:       total time =    2315.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.582 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.021.974 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.997 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.998 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.003 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.004 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.005 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.005 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.006 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.006 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.014 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.497 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.391 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.399 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.400 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.401 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.402 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.403 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.404 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.408 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.408 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.410 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.412 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.416 I llama_model_loader: - type  f32:   37 tensors
0.00.132.419 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.500 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.003 I llm_load_vocab: special tokens cache size = 5
0.00.255.593 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.255.612 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.255.613 I llm_load_print_meta: arch             = gemma
0.00.255.614 I llm_load_print_meta: vocab type       = SPM
0.00.255.615 I llm_load_print_meta: n_vocab          = 256000
0.00.255.615 I llm_load_print_meta: n_merges         = 0
0.00.255.615 I llm_load_print_meta: vocab_only       = 0
0.00.255.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.255.616 I llm_load_print_meta: n_embd           = 2048
0.00.255.616 I llm_load_print_meta: n_layer          = 18
0.00.255.628 I llm_load_print_meta: n_head           = 8
0.00.255.629 I llm_load_print_meta: n_head_kv        = 1
0.00.255.629 I llm_load_print_meta: n_rot            = 256
0.00.255.629 I llm_load_print_meta: n_swa            = 0
0.00.255.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.255.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.255.631 I llm_load_print_meta: n_gqa            = 8
0.00.255.632 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.255.633 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.255.634 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.255.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.255.635 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.255.635 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.255.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.255.637 I llm_load_print_meta: n_ff             = 16384
0.00.255.637 I llm_load_print_meta: n_expert         = 0
0.00.255.637 I llm_load_print_meta: n_expert_used    = 0
0.00.255.638 I llm_load_print_meta: causal attn      = 1
0.00.255.638 I llm_load_print_meta: pooling type     = 0
0.00.255.638 I llm_load_print_meta: rope type        = 2
0.00.255.639 I llm_load_print_meta: rope scaling     = linear
0.00.255.640 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.255.641 I llm_load_print_meta: freq_scale_train = 1
0.00.255.641 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.255.641 I llm_load_print_meta: rope_finetuned   = unknown
0.00.255.642 I llm_load_print_meta: ssm_d_conv       = 0
0.00.255.642 I llm_load_print_meta: ssm_d_inner      = 0
0.00.255.642 I llm_load_print_meta: ssm_d_state      = 0
0.00.255.642 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.255.643 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.255.643 I llm_load_print_meta: model type       = 2B
0.00.255.644 I llm_load_print_meta: model ftype      = Q8_0
0.00.255.645 I llm_load_print_meta: model params     = 2.51 B
0.00.255.645 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.255.646 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.255.647 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.255.647 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.255.647 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.255.647 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.255.648 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.255.648 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.255.648 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.255.649 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.255.649 I llm_load_print_meta: max token length = 93
0.00.255.669 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.349.813 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.354.961 I llama_new_context_with_model: n_ctx      = 8192
0.00.354.968 I llama_new_context_with_model: n_batch    = 2048
0.00.354.968 I llama_new_context_with_model: n_ubatch   = 512
0.00.354.969 I llama_new_context_with_model: flash_attn = 0
0.00.354.972 I llama_new_context_with_model: freq_base  = 10000.0
0.00.354.973 I llama_new_context_with_model: freq_scale = 1
0.00.385.616 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.637 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.764 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.765 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.774 I llama_new_context_with_model: graph nodes  = 601
0.00.386.775 I llama_new_context_with_model: graph splits = 1
0.00.386.777 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.288 I main: llama threadpool init, n_threads = 4
0.00.477.311 I 
0.00.477.392 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.395 I 
0.00.477.425 I sampler seed: 2987153113
0.00.477.435 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.439 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.477.439 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities by listing the specific verbs used.

I am unable to provide a list of verbs as I do not have access to personal information or external data sources

0.02.729.860 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6183.25 tokens per second)
0.02.729.863 I llama_perf_context_print:        load time =     475.38 ms
0.02.729.864 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.865 I llama_perf_context_print:        eval time =    2232.88 ms /    32 runs   (   69.78 ms per token,    14.33 tokens per second)
0.02.729.866 I llama_perf_context_print:       total time =    2252.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.609 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.819 I main: llama backend init
0.00.001.913 I main: load the model and apply lora adapter, if any
0.00.022.173 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.225 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.242 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.250 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.251 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.259 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.940 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.985 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.994 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.002 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.003 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.007 I llama_model_loader: - type  f32:   37 tensors
0.00.133.010 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.857 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.221.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.222.318 I llm_load_vocab: special tokens cache size = 5
0.00.240.887 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.240.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.240.905 I llm_load_print_meta: arch             = gemma
0.00.240.906 I llm_load_print_meta: vocab type       = SPM
0.00.240.907 I llm_load_print_meta: n_vocab          = 256000
0.00.240.907 I llm_load_print_meta: n_merges         = 0
0.00.240.908 I llm_load_print_meta: vocab_only       = 0
0.00.240.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.240.908 I llm_load_print_meta: n_embd           = 2048
0.00.240.909 I llm_load_print_meta: n_layer          = 18
0.00.240.922 I llm_load_print_meta: n_head           = 8
0.00.240.923 I llm_load_print_meta: n_head_kv        = 1
0.00.240.923 I llm_load_print_meta: n_rot            = 256
0.00.240.923 I llm_load_print_meta: n_swa            = 0
0.00.240.924 I llm_load_print_meta: n_embd_head_k    = 256
0.00.240.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.240.925 I llm_load_print_meta: n_gqa            = 8
0.00.240.926 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.240.927 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.240.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.240.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.240.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.240.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.240.930 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.240.931 I llm_load_print_meta: n_ff             = 16384
0.00.240.932 I llm_load_print_meta: n_expert         = 0
0.00.240.932 I llm_load_print_meta: n_expert_used    = 0
0.00.240.932 I llm_load_print_meta: causal attn      = 1
0.00.240.933 I llm_load_print_meta: pooling type     = 0
0.00.240.933 I llm_load_print_meta: rope type        = 2
0.00.240.933 I llm_load_print_meta: rope scaling     = linear
0.00.240.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.240.935 I llm_load_print_meta: freq_scale_train = 1
0.00.240.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.240.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.240.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.240.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.240.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.240.936 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.240.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.240.937 I llm_load_print_meta: model type       = 2B
0.00.240.938 I llm_load_print_meta: model ftype      = Q8_0
0.00.240.939 I llm_load_print_meta: model params     = 2.51 B
0.00.240.940 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.240.940 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.240.941 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.240.941 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.240.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.240.941 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.240.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.240.942 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.240.943 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.240.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.240.943 I llm_load_print_meta: max token length = 93
0.00.240.962 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.316.858 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.316.866 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.316.867 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.316.867 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.316.867 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.316.868 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.321.942 I llama_new_context_with_model: n_ctx      = 8192
0.00.321.948 I llama_new_context_with_model: n_batch    = 2048
0.00.321.949 I llama_new_context_with_model: n_ubatch   = 512
0.00.321.949 I llama_new_context_with_model: flash_attn = 0
0.00.321.952 I llama_new_context_with_model: freq_base  = 10000.0
0.00.321.953 I llama_new_context_with_model: freq_scale = 1
0.00.351.529 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.351.544 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.351.640 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.508 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.352.515 I llama_new_context_with_model: graph nodes  = 601
0.00.352.515 I llama_new_context_with_model: graph splits = 1
0.00.352.517 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.899 I main: llama threadpool init, n_threads = 4
0.00.446.913 I 
0.00.446.987 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.990 I 
0.00.447.018 I sampler seed: 835907067
0.00.447.028 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.042 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.045 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively to the question.

**Q:** What is the difference between a physical scientist and a mathematician?

**A:**

* **Physical scientists**

0.02.765.767 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6471.86 tokens per second)
0.02.765.770 I llama_perf_context_print:        load time =     444.97 ms
0.02.765.772 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.765.774 I llama_perf_context_print:        eval time =    2299.60 ms /    32 runs   (   71.86 ms per token,    13.92 tokens per second)
0.02.765.775 I llama_perf_context_print:       total time =    2318.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.542 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.022.044 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.103 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.118 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.128 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.132 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.139 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.153 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.029 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.113 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.113 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.114 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.114 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.116 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.121 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.122 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.123 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.125 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.129 I llama_model_loader: - type  f32:   37 tensors
0.00.135.132 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.108 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.236.614 I llm_load_vocab: special tokens cache size = 5
0.00.255.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.255.648 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.255.649 I llm_load_print_meta: arch             = gemma
0.00.255.650 I llm_load_print_meta: vocab type       = SPM
0.00.255.651 I llm_load_print_meta: n_vocab          = 256000
0.00.255.652 I llm_load_print_meta: n_merges         = 0
0.00.255.652 I llm_load_print_meta: vocab_only       = 0
0.00.255.652 I llm_load_print_meta: n_ctx_train      = 8192
0.00.255.653 I llm_load_print_meta: n_embd           = 2048
0.00.255.653 I llm_load_print_meta: n_layer          = 18
0.00.255.669 I llm_load_print_meta: n_head           = 8
0.00.255.670 I llm_load_print_meta: n_head_kv        = 1
0.00.255.671 I llm_load_print_meta: n_rot            = 256
0.00.255.672 I llm_load_print_meta: n_swa            = 0
0.00.255.673 I llm_load_print_meta: n_embd_head_k    = 256
0.00.255.674 I llm_load_print_meta: n_embd_head_v    = 256
0.00.255.675 I llm_load_print_meta: n_gqa            = 8
0.00.255.676 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.255.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.255.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.255.681 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.255.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.255.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.255.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.255.685 I llm_load_print_meta: n_ff             = 16384
0.00.255.686 I llm_load_print_meta: n_expert         = 0
0.00.255.687 I llm_load_print_meta: n_expert_used    = 0
0.00.255.687 I llm_load_print_meta: causal attn      = 1
0.00.255.688 I llm_load_print_meta: pooling type     = 0
0.00.255.689 I llm_load_print_meta: rope type        = 2
0.00.255.689 I llm_load_print_meta: rope scaling     = linear
0.00.255.691 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.255.692 I llm_load_print_meta: freq_scale_train = 1
0.00.255.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.255.694 I llm_load_print_meta: rope_finetuned   = unknown
0.00.255.694 I llm_load_print_meta: ssm_d_conv       = 0
0.00.255.695 I llm_load_print_meta: ssm_d_inner      = 0
0.00.255.696 I llm_load_print_meta: ssm_d_state      = 0
0.00.255.696 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.255.697 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.255.698 I llm_load_print_meta: model type       = 2B
0.00.255.699 I llm_load_print_meta: model ftype      = Q8_0
0.00.255.700 I llm_load_print_meta: model params     = 2.51 B
0.00.255.701 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.255.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.255.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.255.704 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.255.705 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.255.706 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.255.706 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.255.707 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.255.708 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.255.709 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.255.710 I llm_load_print_meta: max token length = 93
0.00.255.736 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.326.116 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.326.125 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.331.121 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.128 I llama_new_context_with_model: n_batch    = 2048
0.00.331.129 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.129 I llama_new_context_with_model: flash_attn = 0
0.00.331.132 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.132 I llama_new_context_with_model: freq_scale = 1
0.00.361.526 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.542 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.644 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.504 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.512 I llama_new_context_with_model: graph nodes  = 601
0.00.362.512 I llama_new_context_with_model: graph splits = 1
0.00.362.514 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.907 I main: llama threadpool init, n_threads = 4
0.00.468.922 I 
0.00.469.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.007 I 
0.00.469.041 I sampler seed: 208982227
0.00.469.054 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.066 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.469.070 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and misinterpretations of the Bible.

**Response:**

**1. Understanding and Contextualization:**

- Recognize the importance of understanding the

0.02.975.648 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6454.14 tokens per second)
0.02.975.651 I llama_perf_context_print:        load time =     467.00 ms
0.02.975.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.975.654 I llama_perf_context_print:        eval time =    2487.81 ms /    32 runs   (   77.74 ms per token,    12.86 tokens per second)
0.02.975.655 I llama_perf_context_print:       total time =    2506.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m21.167s
user	0m40.547s
sys	0m9.718s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3808 (a2393d6f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32088.79 ms
main:    total time = 32088.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.024.669 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.722 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.739 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.743 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.744 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.744 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.745 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.747 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.752 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.753 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.753 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.754 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.755 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.292 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.293 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.294 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.295 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.295 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.298 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.299 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.299 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.300 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.140.301 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.140.305 I llama_model_loader: - type  f32:   37 tensors
0.00.140.307 I llama_model_loader: - type q4_K:  108 tensors
0.00.140.308 I llama_model_loader: - type q6_K:   19 tensors
0.00.225.191 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.153 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.953 I llm_load_vocab: special tokens cache size = 5
0.00.267.517 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.535 I llm_load_print_meta: arch             = gemma
0.00.267.536 I llm_load_print_meta: vocab type       = SPM
0.00.267.536 I llm_load_print_meta: n_vocab          = 256000
0.00.267.537 I llm_load_print_meta: n_merges         = 0
0.00.267.537 I llm_load_print_meta: vocab_only       = 0
0.00.267.538 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.538 I llm_load_print_meta: n_embd           = 2048
0.00.267.538 I llm_load_print_meta: n_layer          = 18
0.00.267.552 I llm_load_print_meta: n_head           = 8
0.00.267.553 I llm_load_print_meta: n_head_kv        = 1
0.00.267.553 I llm_load_print_meta: n_rot            = 256
0.00.267.553 I llm_load_print_meta: n_swa            = 0
0.00.267.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.555 I llm_load_print_meta: n_gqa            = 8
0.00.267.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.561 I llm_load_print_meta: n_ff             = 16384
0.00.267.561 I llm_load_print_meta: n_expert         = 0
0.00.267.562 I llm_load_print_meta: n_expert_used    = 0
0.00.267.562 I llm_load_print_meta: causal attn      = 1
0.00.267.562 I llm_load_print_meta: pooling type     = 0
0.00.267.563 I llm_load_print_meta: rope type        = 2
0.00.267.563 I llm_load_print_meta: rope scaling     = linear
0.00.267.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.565 I llm_load_print_meta: freq_scale_train = 1
0.00.267.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.567 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.568 I llm_load_print_meta: model type       = 2B
0.00.267.568 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.569 I llm_load_print_meta: model params     = 2.51 B
0.00.267.570 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.571 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.571 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.573 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.573 I llm_load_print_meta: max token length = 93
0.00.267.595 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.329.352 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.329.362 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.329.363 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.329.364 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.329.364 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.329.365 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.334.709 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.718 I llama_new_context_with_model: n_batch    = 2048
0.00.334.718 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.719 I llama_new_context_with_model: flash_attn = 0
0.00.334.722 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.723 I llama_new_context_with_model: freq_scale = 1
0.00.366.044 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.366.069 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.366.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.248 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.367.257 I llama_new_context_with_model: graph nodes  = 601
0.00.367.258 I llama_new_context_with_model: graph splits = 1
0.00.367.260 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.805 I main: llama threadpool init, n_threads = 4
0.00.451.819 I 
0.00.451.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.896 I 
0.00.451.923 I sampler seed: 2195807893
0.00.451.932 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.935 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.451.936 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded
I am unable to provide an answer to your question as it requires access to personally identifiable information. Sharing personally identifiable information is against my safety principles.

0.02.133.992 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6402.79 tokens per second)
0.02.133.994 I llama_perf_context_print:        load time =     449.93 ms
0.02.133.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.133.996 I llama_perf_context_print:        eval time =    1662.93 ms /    32 runs   (   51.97 ms per token,    19.24 tokens per second)
0.02.133.997 I llama_perf_context_print:       total time =    1682.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3808 (a2393d6f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32179.55 ms
main:    total time = 32179.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 3808 (a2393d6f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.969 I main: load the model and apply lora adapter, if any
0.00.022.199 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.226 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.231 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.236 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.251 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.253 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.254 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.255 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.105 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.417 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.350 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.351 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.352 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.355 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.360 I llama_model_loader: - type  f32:   37 tensors
0.00.133.363 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.364 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.656 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.458 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.395 I llm_load_vocab: special tokens cache size = 5
0.00.259.142 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.158 I llm_load_print_meta: arch             = gemma
0.00.259.158 I llm_load_print_meta: vocab type       = SPM
0.00.259.159 I llm_load_print_meta: n_vocab          = 256000
0.00.259.159 I llm_load_print_meta: n_merges         = 0
0.00.259.160 I llm_load_print_meta: vocab_only       = 0
0.00.259.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.161 I llm_load_print_meta: n_embd           = 2048
0.00.259.161 I llm_load_print_meta: n_layer          = 18
0.00.259.175 I llm_load_print_meta: n_head           = 8
0.00.259.176 I llm_load_print_meta: n_head_kv        = 1
0.00.259.177 I llm_load_print_meta: n_rot            = 256
0.00.259.177 I llm_load_print_meta: n_swa            = 0
0.00.259.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.180 I llm_load_print_meta: n_gqa            = 8
0.00.259.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.184 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.189 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.190 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.191 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.192 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.194 I llm_load_print_meta: n_ff             = 16384
0.00.259.195 I llm_load_print_meta: n_expert         = 0
0.00.259.195 I llm_load_print_meta: n_expert_used    = 0
0.00.259.199 I llm_load_print_meta: causal attn      = 1
0.00.259.199 I llm_load_print_meta: pooling type     = 0
0.00.259.200 I llm_load_print_meta: rope type        = 2
0.00.259.200 I llm_load_print_meta: rope scaling     = linear
0.00.259.202 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.203 I llm_load_print_meta: freq_scale_train = 1
0.00.259.203 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.205 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.206 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.207 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.209 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.210 I llm_load_print_meta: model type       = 2B
0.00.259.211 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.212 I llm_load_print_meta: model params     = 2.51 B
0.00.259.213 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.214 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.214 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.215 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.215 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.216 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.216 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.217 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.218 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.219 I llm_load_print_meta: max token length = 93
0.00.259.243 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.596.744 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.601.927 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.934 I llama_new_context_with_model: n_batch    = 2048
0.00.601.934 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.935 I llama_new_context_with_model: flash_attn = 0
0.00.601.938 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.939 I llama_new_context_with_model: freq_scale = 1
0.00.634.122 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.634.141 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.634.261 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.635.189 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.635.196 I llama_new_context_with_model: graph nodes  = 601
0.00.635.197 I llama_new_context_with_model: graph splits = 1
0.00.635.199 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.725.063 I main: llama threadpool init, n_threads = 4
0.00.725.077 I 
0.00.725.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.725.166 I 
0.00.725.219 I sampler seed: 432694880
0.00.725.229 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.725.233 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.725.234 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompsively, a comprehensive analysis of the potential for AI-generated art and its impact on creative professionals.

**1. Potential for AI-Generated Art:**

0.02.425.085 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6832.30 tokens per second)
0.02.425.087 I llama_perf_context_print:        load time =     723.08 ms
0.02.425.088 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.425.090 I llama_perf_context_print:        eval time =    1681.12 ms /    32 runs   (   52.54 ms per token,    19.03 tokens per second)
0.02.425.091 I llama_perf_context_print:       total time =    1700.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.730s
user	8m15.895s
sys	0m7.275s
