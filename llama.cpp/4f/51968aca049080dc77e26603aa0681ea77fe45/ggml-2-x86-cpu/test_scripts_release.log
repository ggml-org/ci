+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.453 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.479 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.485 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.490 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.495 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.496 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.497 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.498 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.814 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.815 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.816 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.816 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.817 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.818 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.820 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.821 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.822 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.822 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.823 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.827 I llama_model_loader: - type  f32:   37 tensors
0.00.132.828 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.860 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.539 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.141 I llm_load_vocab: special tokens cache size = 5
0.00.270.186 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.201 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.202 I llm_load_print_meta: arch             = gemma
0.00.270.202 I llm_load_print_meta: vocab type       = SPM
0.00.270.202 I llm_load_print_meta: n_vocab          = 256000
0.00.270.203 I llm_load_print_meta: n_merges         = 0
0.00.270.203 I llm_load_print_meta: vocab_only       = 0
0.00.270.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.204 I llm_load_print_meta: n_embd           = 2048
0.00.270.204 I llm_load_print_meta: n_layer          = 18
0.00.270.215 I llm_load_print_meta: n_head           = 8
0.00.270.216 I llm_load_print_meta: n_head_kv        = 1
0.00.270.216 I llm_load_print_meta: n_rot            = 256
0.00.270.216 I llm_load_print_meta: n_swa            = 0
0.00.270.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.217 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.218 I llm_load_print_meta: n_gqa            = 8
0.00.270.219 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.220 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.221 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.222 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.223 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.223 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.223 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.224 I llm_load_print_meta: n_ff             = 16384
0.00.270.225 I llm_load_print_meta: n_expert         = 0
0.00.270.225 I llm_load_print_meta: n_expert_used    = 0
0.00.270.225 I llm_load_print_meta: causal attn      = 1
0.00.270.226 I llm_load_print_meta: pooling type     = 0
0.00.270.226 I llm_load_print_meta: rope type        = 2
0.00.270.226 I llm_load_print_meta: rope scaling     = linear
0.00.270.228 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.228 I llm_load_print_meta: freq_scale_train = 1
0.00.270.228 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.229 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.229 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.229 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.230 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.230 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.230 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.230 I llm_load_print_meta: model type       = 2B
0.00.270.231 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.232 I llm_load_print_meta: model params     = 2.51 B
0.00.270.233 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.233 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.233 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.234 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.236 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.236 I llm_load_print_meta: max token length = 93
0.00.370.862 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.870 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.871 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.872 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.872 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.873 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.017 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.023 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.024 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.025 I llama_new_context_with_model: n_batch       = 2048
0.00.376.025 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.026 I llama_new_context_with_model: flash_attn    = 0
0.00.376.028 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.029 I llama_new_context_with_model: freq_scale    = 1
0.00.376.030 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.662 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.062 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.069 I llama_new_context_with_model: graph nodes  = 601
0.00.392.070 I llama_new_context_with_model: graph splits = 1
0.00.392.072 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.072 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.754 I main: llama threadpool init, n_threads = 4
0.00.477.771 I 
0.00.477.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.850 I 
0.00.477.892 I sampler seed: 3426508630
0.00.477.903 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.916 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.920 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.920 I 
 increasities
I am unable to access the requested context or data. Please provide the necessary information for me to assist you. [end of text]


0.02.314.854 I llama_perf_sampler_print:    sampling time =       4.11 ms /    27 runs   (    0.15 ms per token,  6570.94 tokens per second)
0.02.314.856 I llama_perf_context_print:        load time =     476.97 ms
0.02.314.857 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.314.859 I llama_perf_context_print:        eval time =    1821.45 ms /    26 runs   (   70.06 ms per token,    14.27 tokens per second)
0.02.314.859 I llama_perf_context_print:       total time =    1837.11 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.169 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.383 I main: load the model and apply lora adapter, if any
0.00.020.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.586 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.588 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.592 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.592 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.593 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.594 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.595 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.599 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.600 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.601 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.601 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.323 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.365 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.367 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.367 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.368 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.374 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.374 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.378 I llama_model_loader: - type  f32:   37 tensors
0.00.131.379 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.948 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.105 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.667 I llm_load_vocab: special tokens cache size = 5
0.00.267.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.581 I llm_load_print_meta: arch             = gemma
0.00.267.581 I llm_load_print_meta: vocab type       = SPM
0.00.267.582 I llm_load_print_meta: n_vocab          = 256000
0.00.267.582 I llm_load_print_meta: n_merges         = 0
0.00.267.582 I llm_load_print_meta: vocab_only       = 0
0.00.267.583 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.583 I llm_load_print_meta: n_embd           = 2048
0.00.267.583 I llm_load_print_meta: n_layer          = 18
0.00.267.594 I llm_load_print_meta: n_head           = 8
0.00.267.595 I llm_load_print_meta: n_head_kv        = 1
0.00.267.596 I llm_load_print_meta: n_rot            = 256
0.00.267.596 I llm_load_print_meta: n_swa            = 0
0.00.267.596 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.596 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.597 I llm_load_print_meta: n_gqa            = 8
0.00.267.598 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.599 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.600 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.601 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.602 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.602 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.603 I llm_load_print_meta: n_ff             = 16384
0.00.267.604 I llm_load_print_meta: n_expert         = 0
0.00.267.604 I llm_load_print_meta: n_expert_used    = 0
0.00.267.604 I llm_load_print_meta: causal attn      = 1
0.00.267.604 I llm_load_print_meta: pooling type     = 0
0.00.267.604 I llm_load_print_meta: rope type        = 2
0.00.267.605 I llm_load_print_meta: rope scaling     = linear
0.00.267.606 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.607 I llm_load_print_meta: freq_scale_train = 1
0.00.267.607 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.608 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.609 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.609 I llm_load_print_meta: model type       = 2B
0.00.267.610 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.611 I llm_load_print_meta: model params     = 2.51 B
0.00.267.611 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.612 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.612 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.613 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.613 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.613 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.615 I llm_load_print_meta: max token length = 93
0.00.361.851 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.987 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.992 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.993 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.993 I llama_new_context_with_model: n_batch       = 2048
0.00.366.994 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.994 I llama_new_context_with_model: flash_attn    = 0
0.00.366.996 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.997 I llama_new_context_with_model: freq_scale    = 1
0.00.366.998 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.034 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.047 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.471 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.475 I llama_new_context_with_model: graph nodes  = 601
0.00.383.475 I llama_new_context_with_model: graph splits = 1
0.00.383.478 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.383.478 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.965 I main: llama threadpool init, n_threads = 4
0.00.464.981 I 
0.00.465.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.059 I 
0.00.465.107 I sampler seed: 1458417010
0.00.465.118 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.131 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.134 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.135 I 
 maneuvred. [end of text]


0.00.810.883 I llama_perf_sampler_print:    sampling time =       0.81 ms /     6 runs   (    0.13 ms per token,  7453.42 tokens per second)
0.00.810.885 I llama_perf_context_print:        load time =     464.57 ms
0.00.810.886 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.810.887 I llama_perf_context_print:        eval time =     341.79 ms /     5 runs   (   68.36 ms per token,    14.63 tokens per second)
0.00.810.888 I llama_perf_context_print:       total time =     345.92 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.332 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.342 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.357 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.363 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.364 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.365 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.370 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.370 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.371 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.372 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.780 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.647 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.659 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.661 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.666 I llama_model_loader: - type  f32:   37 tensors
0.00.132.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.174 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.463 I llm_load_vocab: special tokens cache size = 5
0.00.277.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.125 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.126 I llm_load_print_meta: arch             = gemma
0.00.277.126 I llm_load_print_meta: vocab type       = SPM
0.00.277.127 I llm_load_print_meta: n_vocab          = 256000
0.00.277.128 I llm_load_print_meta: n_merges         = 0
0.00.277.128 I llm_load_print_meta: vocab_only       = 0
0.00.277.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.128 I llm_load_print_meta: n_embd           = 2048
0.00.277.129 I llm_load_print_meta: n_layer          = 18
0.00.277.140 I llm_load_print_meta: n_head           = 8
0.00.277.141 I llm_load_print_meta: n_head_kv        = 1
0.00.277.142 I llm_load_print_meta: n_rot            = 256
0.00.277.142 I llm_load_print_meta: n_swa            = 0
0.00.277.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.143 I llm_load_print_meta: n_gqa            = 8
0.00.277.144 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.145 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.150 I llm_load_print_meta: n_ff             = 16384
0.00.277.150 I llm_load_print_meta: n_expert         = 0
0.00.277.150 I llm_load_print_meta: n_expert_used    = 0
0.00.277.151 I llm_load_print_meta: causal attn      = 1
0.00.277.151 I llm_load_print_meta: pooling type     = 0
0.00.277.151 I llm_load_print_meta: rope type        = 2
0.00.277.151 I llm_load_print_meta: rope scaling     = linear
0.00.277.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.153 I llm_load_print_meta: freq_scale_train = 1
0.00.277.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.154 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.156 I llm_load_print_meta: model type       = 2B
0.00.277.156 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.157 I llm_load_print_meta: model params     = 2.51 B
0.00.277.158 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.159 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.159 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.159 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.160 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.160 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.161 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.161 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.162 I llm_load_print_meta: max token length = 93
0.00.354.082 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.089 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.090 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.090 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.091 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.092 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.269 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.276 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.277 I llama_new_context_with_model: n_batch       = 2048
0.00.359.277 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.278 I llama_new_context_with_model: flash_attn    = 0
0.00.359.280 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.281 I llama_new_context_with_model: freq_scale    = 1
0.00.359.282 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.770 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.783 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.871 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.100 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.106 I llama_new_context_with_model: graph nodes  = 601
0.00.375.107 I llama_new_context_with_model: graph splits = 1
0.00.375.109 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.109 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.289 I main: llama threadpool init, n_threads = 4
0.00.461.307 I 
0.00.461.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.384 I 
0.00.461.424 I sampler seed: 1771124016
0.00.461.435 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.447 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.451 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.451 I 
 increasities, but you know better than to engage in such behavior.

I am unable to provide personal responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.675.600 I llama_perf_sampler_print:    sampling time =       4.79 ms /    32 runs   (    0.15 ms per token,  6681.98 tokens per second)
0.02.675.602 I llama_perf_context_print:        load time =     460.51 ms
0.02.675.603 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.605 I llama_perf_context_print:        eval time =    2195.25 ms /    31 runs   (   70.81 ms per token,    14.12 tokens per second)
0.02.675.606 I llama_perf_context_print:       total time =    2214.32 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.558 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.683 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.695 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.722 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.728 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.728 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.729 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.730 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.731 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.737 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.738 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.739 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.740 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.741 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.535 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.651 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.652 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.657 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.658 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.659 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.659 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.664 I llama_model_loader: - type  f32:   37 tensors
0.00.132.665 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.635 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.173 I llm_load_vocab: special tokens cache size = 5
0.00.269.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.865 I llm_load_print_meta: arch             = gemma
0.00.269.866 I llm_load_print_meta: vocab type       = SPM
0.00.269.867 I llm_load_print_meta: n_vocab          = 256000
0.00.269.867 I llm_load_print_meta: n_merges         = 0
0.00.269.867 I llm_load_print_meta: vocab_only       = 0
0.00.269.868 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.868 I llm_load_print_meta: n_embd           = 2048
0.00.269.869 I llm_load_print_meta: n_layer          = 18
0.00.269.884 I llm_load_print_meta: n_head           = 8
0.00.269.886 I llm_load_print_meta: n_head_kv        = 1
0.00.269.886 I llm_load_print_meta: n_rot            = 256
0.00.269.887 I llm_load_print_meta: n_swa            = 0
0.00.269.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.888 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.890 I llm_load_print_meta: n_gqa            = 8
0.00.269.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.894 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.896 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.897 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.901 I llm_load_print_meta: n_ff             = 16384
0.00.269.902 I llm_load_print_meta: n_expert         = 0
0.00.269.902 I llm_load_print_meta: n_expert_used    = 0
0.00.269.903 I llm_load_print_meta: causal attn      = 1
0.00.269.904 I llm_load_print_meta: pooling type     = 0
0.00.269.905 I llm_load_print_meta: rope type        = 2
0.00.269.905 I llm_load_print_meta: rope scaling     = linear
0.00.269.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.909 I llm_load_print_meta: freq_scale_train = 1
0.00.269.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.910 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.911 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.913 I llm_load_print_meta: model type       = 2B
0.00.269.914 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.915 I llm_load_print_meta: model params     = 2.51 B
0.00.269.917 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.918 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.918 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.919 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.919 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.919 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.920 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.922 I llm_load_print_meta: max token length = 93
0.00.341.102 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.109 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.462 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.468 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.469 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.469 I llama_new_context_with_model: n_batch       = 2048
0.00.346.470 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.470 I llama_new_context_with_model: flash_attn    = 0
0.00.346.472 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.473 I llama_new_context_with_model: freq_scale    = 1
0.00.346.474 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.830 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.845 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.931 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.143 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.151 I llama_new_context_with_model: graph nodes  = 601
0.00.362.151 I llama_new_context_with_model: graph splits = 1
0.00.362.154 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.154 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.179 I main: llama threadpool init, n_threads = 4
0.00.451.194 I 
0.00.451.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.288 I 
0.00.451.336 I sampler seed: 885083329
0.00.451.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.356 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.360 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.360 I 
 seconded questions and provide succinct answers.

**Question 1:** What is the purpose of an insurance policy?

**Answer:** An insurance policy provides financial

0.02.880.990 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6535.95 tokens per second)
0.02.880.992 I llama_perf_context_print:        load time =     450.37 ms
0.02.880.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.880.995 I llama_perf_context_print:        eval time =    2409.86 ms /    32 runs   (   75.31 ms per token,    13.28 tokens per second)
0.02.880.995 I llama_perf_context_print:       total time =    2429.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.195s
user	0m30.149s
sys	0m9.441s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4340 (4f51968a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40358.76 ms
main:    total time = 40358.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.168 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.196 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.201 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.203 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.216 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.217 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.613 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.174 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.083 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.084 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.085 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.085 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.091 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.095 I llama_model_loader: - type  f32:   37 tensors
0.00.133.097 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.097 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.208 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.029 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.565 I llm_load_vocab: special tokens cache size = 5
0.00.270.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.430 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.430 I llm_load_print_meta: arch             = gemma
0.00.270.431 I llm_load_print_meta: vocab type       = SPM
0.00.270.431 I llm_load_print_meta: n_vocab          = 256000
0.00.270.432 I llm_load_print_meta: n_merges         = 0
0.00.270.432 I llm_load_print_meta: vocab_only       = 0
0.00.270.432 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.432 I llm_load_print_meta: n_embd           = 2048
0.00.270.433 I llm_load_print_meta: n_layer          = 18
0.00.270.444 I llm_load_print_meta: n_head           = 8
0.00.270.445 I llm_load_print_meta: n_head_kv        = 1
0.00.270.445 I llm_load_print_meta: n_rot            = 256
0.00.270.445 I llm_load_print_meta: n_swa            = 0
0.00.270.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.447 I llm_load_print_meta: n_gqa            = 8
0.00.270.448 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.452 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.452 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.453 I llm_load_print_meta: n_ff             = 16384
0.00.270.454 I llm_load_print_meta: n_expert         = 0
0.00.270.454 I llm_load_print_meta: n_expert_used    = 0
0.00.270.454 I llm_load_print_meta: causal attn      = 1
0.00.270.454 I llm_load_print_meta: pooling type     = 0
0.00.270.455 I llm_load_print_meta: rope type        = 2
0.00.270.455 I llm_load_print_meta: rope scaling     = linear
0.00.270.456 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.457 I llm_load_print_meta: freq_scale_train = 1
0.00.270.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.457 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.458 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.458 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.459 I llm_load_print_meta: model type       = 2B
0.00.270.460 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.461 I llm_load_print_meta: model params     = 2.51 B
0.00.270.461 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.463 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.463 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.464 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.465 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.465 I llm_load_print_meta: max token length = 93
0.00.329.326 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.329.333 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.329.334 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.329.334 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.329.335 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.329.335 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.565 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.572 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.572 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.573 I llama_new_context_with_model: n_batch       = 2048
0.00.334.573 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.574 I llama_new_context_with_model: flash_attn    = 0
0.00.334.577 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.578 I llama_new_context_with_model: freq_scale    = 1
0.00.334.578 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.713 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.727 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.158 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.164 I llama_new_context_with_model: graph nodes  = 601
0.00.350.165 I llama_new_context_with_model: graph splits = 1
0.00.350.167 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.688 I main: llama threadpool init, n_threads = 4
0.00.425.705 I 
0.00.425.782 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.785 I 
0.00.425.825 I sampler seed: 1140003720
0.00.425.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.840 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.840 I 
 encompates the following:

**a. Emotional and psychological impact**
**b. Social and cultural impact**
**c. Legal and ethical considerations**

0.02.008.566 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6355.93 tokens per second)
0.02.008.568 I llama_perf_context_print:        load time =     424.90 ms
0.02.008.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.008.570 I llama_perf_context_print:        eval time =    1564.43 ms /    32 runs   (   48.89 ms per token,    20.45 tokens per second)
0.02.008.571 I llama_perf_context_print:       total time =    1582.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4340 (4f51968a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40158.66 ms
main:    total time = 40158.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 4340 (4f51968a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.597 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.615 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.622 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.623 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.627 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.629 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.630 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.634 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.635 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.637 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.591 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.486 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.487 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.488 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.490 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.491 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.495 I llama_model_loader: - type  f32:   37 tensors
0.00.132.497 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.497 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.788 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.622 I llm_load_vocab: special tokens cache size = 5
0.00.276.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.381 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.383 I llm_load_print_meta: arch             = gemma
0.00.276.384 I llm_load_print_meta: vocab type       = SPM
0.00.276.384 I llm_load_print_meta: n_vocab          = 256000
0.00.276.385 I llm_load_print_meta: n_merges         = 0
0.00.276.385 I llm_load_print_meta: vocab_only       = 0
0.00.276.385 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.386 I llm_load_print_meta: n_embd           = 2048
0.00.276.386 I llm_load_print_meta: n_layer          = 18
0.00.276.397 I llm_load_print_meta: n_head           = 8
0.00.276.398 I llm_load_print_meta: n_head_kv        = 1
0.00.276.398 I llm_load_print_meta: n_rot            = 256
0.00.276.399 I llm_load_print_meta: n_swa            = 0
0.00.276.399 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.410 I llm_load_print_meta: n_gqa            = 8
0.00.276.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.414 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.417 I llm_load_print_meta: n_ff             = 16384
0.00.276.418 I llm_load_print_meta: n_expert         = 0
0.00.276.418 I llm_load_print_meta: n_expert_used    = 0
0.00.276.419 I llm_load_print_meta: causal attn      = 1
0.00.276.419 I llm_load_print_meta: pooling type     = 0
0.00.276.419 I llm_load_print_meta: rope type        = 2
0.00.276.420 I llm_load_print_meta: rope scaling     = linear
0.00.276.422 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.423 I llm_load_print_meta: freq_scale_train = 1
0.00.276.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.424 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.424 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.425 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.425 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.426 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.430 I llm_load_print_meta: model type       = 2B
0.00.276.430 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.431 I llm_load_print_meta: model params     = 2.51 B
0.00.276.432 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.432 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.433 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.434 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.434 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.435 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.436 I llm_load_print_meta: max token length = 93
0.00.334.395 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.616 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.622 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.623 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.623 I llama_new_context_with_model: n_batch       = 2048
0.00.339.623 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.624 I llama_new_context_with_model: flash_attn    = 0
0.00.339.626 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.627 I llama_new_context_with_model: freq_scale    = 1
0.00.339.628 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.194 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.296 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.550 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.555 I llama_new_context_with_model: graph nodes  = 601
0.00.355.556 I llama_new_context_with_model: graph splits = 1
0.00.355.558 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.558 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.187 I main: llama threadpool init, n_threads = 4
0.00.429.205 I 
0.00.429.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.284 I 
0.00.429.325 I sampler seed: 1776497955
0.00.429.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.344 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.347 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.347 I 
 seconde, je suis à la recherche de des informations sur les possibilités de développement de la recherche en sciences humaines, et je suis intéressée par les changements qui

0.02.014.188 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6303.72 tokens per second)
0.02.014.191 I llama_perf_context_print:        load time =     428.37 ms
0.02.014.192 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.014.193 I llama_perf_context_print:        eval time =    1565.89 ms /    32 runs   (   48.93 ms per token,    20.44 tokens per second)
0.02.014.194 I llama_perf_context_print:       total time =    1585.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.350s
user	10m23.762s
sys	0m7.041s
