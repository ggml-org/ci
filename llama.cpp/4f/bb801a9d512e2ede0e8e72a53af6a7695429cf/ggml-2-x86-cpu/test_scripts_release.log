+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.507 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.524 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.532 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.540 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.541 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.542 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.542 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.546 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.547 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.548 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.548 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.549 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.103 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.103 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.104 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.108 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.109 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.111 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.112 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.116 I llama_model_loader: - type  f32:   37 tensors
0.00.131.117 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.002 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.763 I llm_load_vocab: special tokens cache size = 5
0.00.279.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.226 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.227 I llm_load_print_meta: arch             = gemma
0.00.279.228 I llm_load_print_meta: vocab type       = SPM
0.00.279.228 I llm_load_print_meta: n_vocab          = 256000
0.00.279.228 I llm_load_print_meta: n_merges         = 0
0.00.279.229 I llm_load_print_meta: vocab_only       = 0
0.00.279.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.229 I llm_load_print_meta: n_embd           = 2048
0.00.279.230 I llm_load_print_meta: n_layer          = 18
0.00.279.243 I llm_load_print_meta: n_head           = 8
0.00.279.244 I llm_load_print_meta: n_head_kv        = 1
0.00.279.244 I llm_load_print_meta: n_rot            = 256
0.00.279.244 I llm_load_print_meta: n_swa            = 0
0.00.279.245 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.245 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.246 I llm_load_print_meta: n_gqa            = 8
0.00.279.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.248 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.252 I llm_load_print_meta: n_ff             = 16384
0.00.279.252 I llm_load_print_meta: n_expert         = 0
0.00.279.253 I llm_load_print_meta: n_expert_used    = 0
0.00.279.253 I llm_load_print_meta: causal attn      = 1
0.00.279.254 I llm_load_print_meta: pooling type     = 0
0.00.279.254 I llm_load_print_meta: rope type        = 2
0.00.279.254 I llm_load_print_meta: rope scaling     = linear
0.00.279.255 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.256 I llm_load_print_meta: freq_scale_train = 1
0.00.279.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.256 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.257 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.257 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.257 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.258 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.258 I llm_load_print_meta: model type       = 2B
0.00.279.259 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.260 I llm_load_print_meta: model params     = 2.51 B
0.00.279.261 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.262 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.262 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.263 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.263 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.263 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.264 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.264 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.265 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.265 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.266 I llm_load_print_meta: max token length = 93
0.00.378.719 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.727 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.727 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.728 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.729 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.729 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.988 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.995 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.995 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.996 I llama_new_context_with_model: n_batch       = 2048
0.00.383.996 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.997 I llama_new_context_with_model: flash_attn    = 0
0.00.384.000 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.001 I llama_new_context_with_model: freq_scale    = 1
0.00.384.002 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.732 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.746 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.838 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.108 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.114 I llama_new_context_with_model: graph nodes  = 601
0.00.400.114 I llama_new_context_with_model: graph splits = 1
0.00.400.117 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.117 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.361 I main: llama threadpool init, n_threads = 4
0.00.486.376 I 
0.00.486.453 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.457 I 
0.00.486.497 I sampler seed: 98917798
0.00.486.509 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.520 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.524 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.524 I 
 increasities, and the like, are all considered forms of _____.

A) Deviance
B) Socialization
C) Normative behavior
D

0.02.763.241 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6426.48 tokens per second)
0.02.763.243 I llama_perf_context_print:        load time =     485.59 ms
0.02.763.244 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.246 I llama_perf_context_print:        eval time =    2257.56 ms /    32 runs   (   70.55 ms per token,    14.17 tokens per second)
0.02.763.247 I llama_perf_context_print:       total time =    2276.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.304 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.336 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.342 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.345 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.346 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.347 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.348 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.353 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.354 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.354 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.355 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.364 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.365 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.366 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.366 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.371 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.372 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.373 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.374 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.378 I llama_model_loader: - type  f32:   37 tensors
0.00.131.379 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.583 I llm_load_vocab: special tokens cache size = 5
0.00.278.845 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.865 I llm_load_print_meta: arch             = gemma
0.00.278.865 I llm_load_print_meta: vocab type       = SPM
0.00.278.866 I llm_load_print_meta: n_vocab          = 256000
0.00.278.866 I llm_load_print_meta: n_merges         = 0
0.00.278.867 I llm_load_print_meta: vocab_only       = 0
0.00.278.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.867 I llm_load_print_meta: n_embd           = 2048
0.00.278.867 I llm_load_print_meta: n_layer          = 18
0.00.278.879 I llm_load_print_meta: n_head           = 8
0.00.278.880 I llm_load_print_meta: n_head_kv        = 1
0.00.278.881 I llm_load_print_meta: n_rot            = 256
0.00.278.881 I llm_load_print_meta: n_swa            = 0
0.00.278.881 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.881 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.882 I llm_load_print_meta: n_gqa            = 8
0.00.278.883 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.884 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.885 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.886 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.887 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.887 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.888 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.889 I llm_load_print_meta: n_ff             = 16384
0.00.278.889 I llm_load_print_meta: n_expert         = 0
0.00.278.889 I llm_load_print_meta: n_expert_used    = 0
0.00.278.890 I llm_load_print_meta: causal attn      = 1
0.00.278.890 I llm_load_print_meta: pooling type     = 0
0.00.278.890 I llm_load_print_meta: rope type        = 2
0.00.278.890 I llm_load_print_meta: rope scaling     = linear
0.00.278.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.892 I llm_load_print_meta: freq_scale_train = 1
0.00.278.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.895 I llm_load_print_meta: model type       = 2B
0.00.278.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.896 I llm_load_print_meta: model params     = 2.51 B
0.00.278.897 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.898 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.899 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.900 I llm_load_print_meta: max token length = 93
0.00.371.630 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.377.010 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.019 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.019 I llama_new_context_with_model: n_batch       = 2048
0.00.377.020 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.020 I llama_new_context_with_model: flash_attn    = 0
0.00.377.023 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.024 I llama_new_context_with_model: freq_scale    = 1
0.00.377.025 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.056 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.070 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.437 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.443 I llama_new_context_with_model: graph nodes  = 601
0.00.394.443 I llama_new_context_with_model: graph splits = 1
0.00.394.446 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.446 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.109 I main: llama threadpool init, n_threads = 4
0.00.479.124 I 
0.00.479.202 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.206 I 
0.00.479.248 I sampler seed: 2145880424
0.00.479.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.265 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.265 I 
 increably, the vibrant hues of the sunset painting the sky with a spectacle of breathtaking artistry.

The sun dipped below the horizon, casting long shadows that danced

0.02.703.059 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7115.14 tokens per second)
0.02.703.061 I llama_perf_context_print:        load time =     478.35 ms
0.02.703.063 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.064 I llama_perf_context_print:        eval time =    2205.28 ms /    32 runs   (   68.91 ms per token,    14.51 tokens per second)
0.02.703.065 I llama_perf_context_print:       total time =    2223.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.544 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.143 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.166 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.178 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.183 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.183 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.184 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.185 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.192 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.193 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.199 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.200 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.305 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.457 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.394 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.402 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.403 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.404 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.404 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.405 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.406 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.408 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.409 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.409 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.410 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.411 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.415 I llama_model_loader: - type  f32:   37 tensors
0.00.132.416 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.856 I llm_load_vocab: special tokens cache size = 5
0.00.282.150 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.168 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.169 I llm_load_print_meta: arch             = gemma
0.00.282.169 I llm_load_print_meta: vocab type       = SPM
0.00.282.170 I llm_load_print_meta: n_vocab          = 256000
0.00.282.170 I llm_load_print_meta: n_merges         = 0
0.00.282.171 I llm_load_print_meta: vocab_only       = 0
0.00.282.171 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.172 I llm_load_print_meta: n_embd           = 2048
0.00.282.172 I llm_load_print_meta: n_layer          = 18
0.00.282.184 I llm_load_print_meta: n_head           = 8
0.00.282.185 I llm_load_print_meta: n_head_kv        = 1
0.00.282.185 I llm_load_print_meta: n_rot            = 256
0.00.282.186 I llm_load_print_meta: n_swa            = 0
0.00.282.186 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.186 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.187 I llm_load_print_meta: n_gqa            = 8
0.00.282.188 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.191 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.192 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.193 I llm_load_print_meta: n_ff             = 16384
0.00.282.194 I llm_load_print_meta: n_expert         = 0
0.00.282.194 I llm_load_print_meta: n_expert_used    = 0
0.00.282.195 I llm_load_print_meta: causal attn      = 1
0.00.282.195 I llm_load_print_meta: pooling type     = 0
0.00.282.195 I llm_load_print_meta: rope type        = 2
0.00.282.195 I llm_load_print_meta: rope scaling     = linear
0.00.282.196 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.197 I llm_load_print_meta: freq_scale_train = 1
0.00.282.197 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.198 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.198 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.198 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.198 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.199 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.199 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.199 I llm_load_print_meta: model type       = 2B
0.00.282.200 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.201 I llm_load_print_meta: model params     = 2.51 B
0.00.282.202 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.202 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.203 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.203 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.204 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.204 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.205 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.206 I llm_load_print_meta: max token length = 93
0.00.359.456 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.462 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.463 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.463 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.464 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.464 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.908 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.916 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.916 I llama_new_context_with_model: n_batch       = 2048
0.00.364.917 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.917 I llama_new_context_with_model: flash_attn    = 0
0.00.364.920 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.921 I llama_new_context_with_model: freq_scale    = 1
0.00.364.922 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.603 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.619 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.990 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.996 I llama_new_context_with_model: graph nodes  = 601
0.00.380.997 I llama_new_context_with_model: graph splits = 1
0.00.380.999 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.381.000 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.113 I main: llama threadpool init, n_threads = 4
0.00.468.129 I 
0.00.468.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.214 I 
0.00.468.265 I sampler seed: 1072766184
0.00.468.277 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.288 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.291 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.292 I 
 increably. [end of text]


0.00.763.148 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8025.68 tokens per second)
0.00.763.151 I llama_perf_context_print:        load time =     467.33 ms
0.00.763.152 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.763.154 I llama_perf_context_print:        eval time =     291.68 ms /     4 runs   (   72.92 ms per token,    13.71 tokens per second)
0.00.763.155 I llama_perf_context_print:       total time =     295.04 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.570 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.141 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.175 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.176 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.177 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.178 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.178 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.179 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.183 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.186 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.689 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.758 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.767 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.767 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.768 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.768 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.772 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.773 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.774 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.774 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.777 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.780 I llama_model_loader: - type  f32:   37 tensors
0.00.131.782 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.372 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.701 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.302 I llm_load_vocab: special tokens cache size = 5
0.00.282.598 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.614 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.615 I llm_load_print_meta: arch             = gemma
0.00.282.616 I llm_load_print_meta: vocab type       = SPM
0.00.282.617 I llm_load_print_meta: n_vocab          = 256000
0.00.282.617 I llm_load_print_meta: n_merges         = 0
0.00.282.618 I llm_load_print_meta: vocab_only       = 0
0.00.282.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.618 I llm_load_print_meta: n_embd           = 2048
0.00.282.619 I llm_load_print_meta: n_layer          = 18
0.00.282.630 I llm_load_print_meta: n_head           = 8
0.00.282.631 I llm_load_print_meta: n_head_kv        = 1
0.00.282.631 I llm_load_print_meta: n_rot            = 256
0.00.282.631 I llm_load_print_meta: n_swa            = 0
0.00.282.632 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.632 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.633 I llm_load_print_meta: n_gqa            = 8
0.00.282.634 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.635 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.637 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.637 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.637 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.638 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.639 I llm_load_print_meta: n_ff             = 16384
0.00.282.639 I llm_load_print_meta: n_expert         = 0
0.00.282.639 I llm_load_print_meta: n_expert_used    = 0
0.00.282.640 I llm_load_print_meta: causal attn      = 1
0.00.282.640 I llm_load_print_meta: pooling type     = 0
0.00.282.641 I llm_load_print_meta: rope type        = 2
0.00.282.642 I llm_load_print_meta: rope scaling     = linear
0.00.282.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.643 I llm_load_print_meta: freq_scale_train = 1
0.00.282.644 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.645 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.645 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.646 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.646 I llm_load_print_meta: model type       = 2B
0.00.282.647 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.648 I llm_load_print_meta: model params     = 2.51 B
0.00.282.649 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.650 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.650 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.651 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.651 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.652 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.652 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.653 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.653 I llm_load_print_meta: max token length = 93
0.00.354.143 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.150 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.368 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.375 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.376 I llama_new_context_with_model: n_batch       = 2048
0.00.359.376 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.377 I llama_new_context_with_model: flash_attn    = 0
0.00.359.379 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.380 I llama_new_context_with_model: freq_scale    = 1
0.00.359.382 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.151 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.166 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.256 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.500 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.506 I llama_new_context_with_model: graph nodes  = 601
0.00.375.506 I llama_new_context_with_model: graph splits = 1
0.00.375.510 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.510 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.961 I main: llama threadpool init, n_threads = 4
0.00.463.977 I 
0.00.464.052 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.055 I 
0.00.464.097 I sampler seed: 3332601125
0.00.464.109 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.120 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.124 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.124 I 
 increasities and challenges to the authority of the state.

**Answer:**

**The right to dissent and challenge authority is essential for the health and functioning of

0.02.925.340 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6777.57 tokens per second)
0.02.925.344 I llama_perf_context_print:        load time =     463.18 ms
0.02.925.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.925.348 I llama_perf_context_print:        eval time =    2441.87 ms /    32 runs   (   76.31 ms per token,    13.10 tokens per second)
0.02.925.349 I llama_perf_context_print:       total time =    2461.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.747s
user	0m32.009s
sys	0m9.429s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4344 (4fbb801a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40348.01 ms
main:    total time = 40348.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.400 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.410 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.424 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.425 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.429 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.430 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.431 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.432 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.440 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.031 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.728 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.632 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.633 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.634 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.634 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.635 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.637 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.643 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.647 I llama_model_loader: - type  f32:   37 tensors
0.00.131.649 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.649 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.610 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.572 I llm_load_vocab: special tokens cache size = 5
0.00.268.949 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.966 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.966 I llm_load_print_meta: arch             = gemma
0.00.268.967 I llm_load_print_meta: vocab type       = SPM
0.00.268.968 I llm_load_print_meta: n_vocab          = 256000
0.00.268.968 I llm_load_print_meta: n_merges         = 0
0.00.268.970 I llm_load_print_meta: vocab_only       = 0
0.00.268.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.985 I llm_load_print_meta: n_embd           = 2048
0.00.268.985 I llm_load_print_meta: n_layer          = 18
0.00.268.996 I llm_load_print_meta: n_head           = 8
0.00.268.997 I llm_load_print_meta: n_head_kv        = 1
0.00.268.998 I llm_load_print_meta: n_rot            = 256
0.00.268.998 I llm_load_print_meta: n_swa            = 0
0.00.268.998 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.003 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.005 I llm_load_print_meta: n_gqa            = 8
0.00.269.006 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.010 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.011 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.012 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.013 I llm_load_print_meta: n_ff             = 16384
0.00.269.013 I llm_load_print_meta: n_expert         = 0
0.00.269.013 I llm_load_print_meta: n_expert_used    = 0
0.00.269.014 I llm_load_print_meta: causal attn      = 1
0.00.269.014 I llm_load_print_meta: pooling type     = 0
0.00.269.014 I llm_load_print_meta: rope type        = 2
0.00.269.015 I llm_load_print_meta: rope scaling     = linear
0.00.269.016 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.017 I llm_load_print_meta: freq_scale_train = 1
0.00.269.017 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.017 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.018 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.019 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.019 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.019 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.020 I llm_load_print_meta: model type       = 2B
0.00.269.021 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.022 I llm_load_print_meta: model params     = 2.51 B
0.00.269.022 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.023 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.023 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.023 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.024 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.024 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.024 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.025 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.025 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.026 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.026 I llm_load_print_meta: max token length = 93
0.00.328.923 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.932 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.933 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.934 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.934 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.935 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.238 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.245 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.246 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.246 I llama_new_context_with_model: n_batch       = 2048
0.00.334.247 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.247 I llama_new_context_with_model: flash_attn    = 0
0.00.334.251 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.251 I llama_new_context_with_model: freq_scale    = 1
0.00.334.252 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.804 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.818 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.916 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.209 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.215 I llama_new_context_with_model: graph nodes  = 601
0.00.350.216 I llama_new_context_with_model: graph splits = 1
0.00.350.219 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.482 I main: llama threadpool init, n_threads = 4
0.00.426.497 I 
0.00.426.574 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.578 I 
0.00.426.625 I sampler seed: 798319550
0.00.426.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.642 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.642 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.643 I 
 encompates the capabilities and limitations of this toolset.

**Capabilities:**

* **Automated data processing:**
    * Data extraction from various sources
    

0.02.050.465 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6137.25 tokens per second)
0.02.050.467 I llama_perf_context_print:        load time =     425.73 ms
0.02.050.469 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.050.471 I llama_perf_context_print:        eval time =    1603.52 ms /    32 runs   (   50.11 ms per token,    19.96 tokens per second)
0.02.050.472 I llama_perf_context_print:       total time =    1623.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4344 (4fbb801a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40263.69 ms
main:    total time = 40263.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4344 (4fbb801a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.177 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.208 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.212 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.220 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.693 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.120 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.956 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.962 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.962 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.963 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.964 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.965 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.966 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.968 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.970 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.972 I llama_model_loader: - type  f32:   37 tensors
0.00.130.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.974 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.385 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.674 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.230 I llm_load_vocab: special tokens cache size = 5
0.00.267.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.305 I llm_load_print_meta: arch             = gemma
0.00.267.305 I llm_load_print_meta: vocab type       = SPM
0.00.267.306 I llm_load_print_meta: n_vocab          = 256000
0.00.267.306 I llm_load_print_meta: n_merges         = 0
0.00.267.307 I llm_load_print_meta: vocab_only       = 0
0.00.267.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.308 I llm_load_print_meta: n_embd           = 2048
0.00.267.308 I llm_load_print_meta: n_layer          = 18
0.00.267.318 I llm_load_print_meta: n_head           = 8
0.00.267.319 I llm_load_print_meta: n_head_kv        = 1
0.00.267.320 I llm_load_print_meta: n_rot            = 256
0.00.267.320 I llm_load_print_meta: n_swa            = 0
0.00.267.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.320 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.321 I llm_load_print_meta: n_gqa            = 8
0.00.267.322 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.323 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.324 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.325 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.326 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.326 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.327 I llm_load_print_meta: n_ff             = 16384
0.00.267.327 I llm_load_print_meta: n_expert         = 0
0.00.267.327 I llm_load_print_meta: n_expert_used    = 0
0.00.267.328 I llm_load_print_meta: causal attn      = 1
0.00.267.328 I llm_load_print_meta: pooling type     = 0
0.00.267.328 I llm_load_print_meta: rope type        = 2
0.00.267.329 I llm_load_print_meta: rope scaling     = linear
0.00.267.330 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.330 I llm_load_print_meta: freq_scale_train = 1
0.00.267.331 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.331 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.331 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.332 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.332 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.333 I llm_load_print_meta: model type       = 2B
0.00.267.333 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.334 I llm_load_print_meta: model params     = 2.51 B
0.00.267.335 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.336 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.336 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.337 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.337 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.338 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.338 I llm_load_print_meta: max token length = 93
0.00.325.828 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.055 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.061 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.061 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.061 I llama_new_context_with_model: n_batch       = 2048
0.00.331.062 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.062 I llama_new_context_with_model: flash_attn    = 0
0.00.331.064 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.065 I llama_new_context_with_model: freq_scale    = 1
0.00.331.066 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.650 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.663 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.760 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.072 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.078 I llama_new_context_with_model: graph nodes  = 601
0.00.347.078 I llama_new_context_with_model: graph splits = 1
0.00.347.081 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.081 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.243 I main: llama threadpool init, n_threads = 4
0.00.422.262 I 
0.00.422.339 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.342 I 
0.00.422.386 I sampler seed: 1078132139
0.00.422.398 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.411 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.415 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.415 I 
 fufilling sounds as you reach the end of the tunnel.

This soundscape evokes a sense of mystery and intrigue, inviting the listener to explore the unknown depths

0.02.000.758 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5927.79 tokens per second)
0.02.000.760 I llama_perf_context_print:        load time =     421.48 ms
0.02.000.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.764 I llama_perf_context_print:        eval time =    1558.97 ms /    32 runs   (   48.72 ms per token,    20.53 tokens per second)
0.02.000.765 I llama_perf_context_print:       total time =    1578.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.509s
user	10m24.358s
sys	0m7.115s
