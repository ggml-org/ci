+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.642 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.847 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.945 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.974 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.976 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.977 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.712 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.721 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.722 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.733 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.743 I llama_model_loader: - type  f32:   37 tensors
0.00.274.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.463 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.329 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.344 I llm_load_vocab: special tokens cache size = 5
0.00.612.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.541 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.541 I llm_load_print_meta: arch             = gemma
0.00.612.542 I llm_load_print_meta: vocab type       = SPM
0.00.612.543 I llm_load_print_meta: n_vocab          = 256000
0.00.612.545 I llm_load_print_meta: n_merges         = 0
0.00.612.546 I llm_load_print_meta: vocab_only       = 0
0.00.612.546 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.546 I llm_load_print_meta: n_embd           = 2048
0.00.612.547 I llm_load_print_meta: n_layer          = 18
0.00.612.611 I llm_load_print_meta: n_head           = 8
0.00.612.619 I llm_load_print_meta: n_head_kv        = 1
0.00.612.619 I llm_load_print_meta: n_rot            = 256
0.00.612.620 I llm_load_print_meta: n_swa            = 0
0.00.612.620 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.625 I llm_load_print_meta: n_gqa            = 8
0.00.612.642 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.647 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.648 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.650 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.650 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.651 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.656 I llm_load_print_meta: n_ff             = 16384
0.00.612.656 I llm_load_print_meta: n_expert         = 0
0.00.612.657 I llm_load_print_meta: n_expert_used    = 0
0.00.612.657 I llm_load_print_meta: causal attn      = 1
0.00.612.657 I llm_load_print_meta: pooling type     = 0
0.00.612.658 I llm_load_print_meta: rope type        = 2
0.00.612.663 I llm_load_print_meta: rope scaling     = linear
0.00.612.664 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.665 I llm_load_print_meta: freq_scale_train = 1
0.00.612.665 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.666 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.666 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.677 I llm_load_print_meta: model type       = 2B
0.00.612.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.679 I llm_load_print_meta: model params     = 2.51 B
0.00.612.684 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.686 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.687 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.688 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.700 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.701 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.716 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.717 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.723 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.724 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.725 I llm_load_print_meta: max token length = 93
0.00.612.895 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.632 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.711.644 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.711.645 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.711.645 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.711.646 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.711.647 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.717.290 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.299 I llama_new_context_with_model: n_batch    = 2048
0.00.717.299 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.300 I llama_new_context_with_model: flash_attn = 0
0.00.717.302 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.303 I llama_new_context_with_model: freq_scale = 1
0.00.747.763 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.806 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.923 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.346 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.352 I llama_new_context_with_model: graph nodes  = 601
0.00.749.352 I llama_new_context_with_model: graph splits = 1
0.00.749.368 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.941 I main: llama threadpool init, n_threads = 4
0.01.359.953 I 
0.01.360.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.070 I 
0.01.360.253 I sampler seed: 1646213776
0.01.360.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.274 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.277 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.278 I 
 seconary to the primary data used in the study.

In the context of conducting a qualitative study, what are some examples of secondary data that could be used

0.14.862.767 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.30 tokens per second)
0.14.862.771 I llama_perf_context_print:        load time =    1357.09 ms
0.14.862.772 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.862.774 I llama_perf_context_print:        eval time =   13408.44 ms /    32 runs   (  419.01 ms per token,     2.39 tokens per second)
0.14.862.799 I llama_perf_context_print:       total time =   13502.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.711 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.817 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.818 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.825 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.826 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.827 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.837 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.838 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.846 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.848 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.849 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.849 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.850 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.756 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.857 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.167 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.175 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.176 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.178 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.179 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.180 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.184 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.186 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.186 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.196 I llama_model_loader: - type  f32:   37 tensors
0.00.274.200 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.330 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.154 I llm_load_vocab: special tokens cache size = 5
0.00.605.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.531 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.532 I llm_load_print_meta: arch             = gemma
0.00.605.532 I llm_load_print_meta: vocab type       = SPM
0.00.605.533 I llm_load_print_meta: n_vocab          = 256000
0.00.605.536 I llm_load_print_meta: n_merges         = 0
0.00.605.536 I llm_load_print_meta: vocab_only       = 0
0.00.605.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.537 I llm_load_print_meta: n_embd           = 2048
0.00.605.537 I llm_load_print_meta: n_layer          = 18
0.00.605.602 I llm_load_print_meta: n_head           = 8
0.00.605.609 I llm_load_print_meta: n_head_kv        = 1
0.00.605.609 I llm_load_print_meta: n_rot            = 256
0.00.605.610 I llm_load_print_meta: n_swa            = 0
0.00.605.611 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.612 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.616 I llm_load_print_meta: n_gqa            = 8
0.00.605.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.630 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.631 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.631 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.636 I llm_load_print_meta: n_ff             = 16384
0.00.605.637 I llm_load_print_meta: n_expert         = 0
0.00.605.638 I llm_load_print_meta: n_expert_used    = 0
0.00.605.638 I llm_load_print_meta: causal attn      = 1
0.00.605.639 I llm_load_print_meta: pooling type     = 0
0.00.605.639 I llm_load_print_meta: rope type        = 2
0.00.605.639 I llm_load_print_meta: rope scaling     = linear
0.00.605.641 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.642 I llm_load_print_meta: freq_scale_train = 1
0.00.605.642 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.643 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.660 I llm_load_print_meta: model type       = 2B
0.00.605.662 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.663 I llm_load_print_meta: model params     = 2.51 B
0.00.605.664 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.664 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.665 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.666 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.667 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.673 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.674 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.675 I llm_load_print_meta: max token length = 93
0.00.605.846 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.784 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.705.410 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.417 I llama_new_context_with_model: n_batch    = 2048
0.00.705.417 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.418 I llama_new_context_with_model: flash_attn = 0
0.00.705.420 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.421 I llama_new_context_with_model: freq_scale = 1
0.00.734.551 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.595 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.088 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.093 I llama_new_context_with_model: graph nodes  = 601
0.00.736.093 I llama_new_context_with_model: graph splits = 1
0.00.736.110 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.223 I main: llama threadpool init, n_threads = 4
0.01.349.235 I 
0.01.349.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.352 I 
0.01.349.536 I sampler seed: 1105432456
0.01.349.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.556 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.557 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.557 I 
 increably. I'm just a humble observer, catching glimpses of the world through a lens of curiosity. [end of text]


0.11.082.464 I llama_perf_sampler_print:    sampling time =      35.52 ms /    24 runs   (    1.48 ms per token,   675.75 tokens per second)
0.11.082.467 I llama_perf_context_print:        load time =    1346.37 ms
0.11.082.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.082.482 I llama_perf_context_print:        eval time =    9664.93 ms /    23 runs   (  420.21 ms per token,     2.38 tokens per second)
0.11.082.484 I llama_perf_context_print:       total time =    9733.25 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.251 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.266 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.272 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.277 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.285 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.294 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.300 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.302 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.304 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.099 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.454 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.463 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.464 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.466 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.467 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.468 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.469 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.472 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.473 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.474 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.475 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.274.476 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.485 I llama_model_loader: - type  f32:   37 tensors
0.00.274.489 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.305 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.898 I llm_load_vocab: special tokens cache size = 5
0.00.615.074 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.148 I llm_load_print_meta: arch             = gemma
0.00.615.149 I llm_load_print_meta: vocab type       = SPM
0.00.615.150 I llm_load_print_meta: n_vocab          = 256000
0.00.615.152 I llm_load_print_meta: n_merges         = 0
0.00.615.152 I llm_load_print_meta: vocab_only       = 0
0.00.615.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.153 I llm_load_print_meta: n_embd           = 2048
0.00.615.153 I llm_load_print_meta: n_layer          = 18
0.00.615.215 I llm_load_print_meta: n_head           = 8
0.00.615.222 I llm_load_print_meta: n_head_kv        = 1
0.00.615.223 I llm_load_print_meta: n_rot            = 256
0.00.615.223 I llm_load_print_meta: n_swa            = 0
0.00.615.223 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.224 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.228 I llm_load_print_meta: n_gqa            = 8
0.00.615.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.237 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.239 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.240 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.241 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.241 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.241 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.247 I llm_load_print_meta: n_ff             = 16384
0.00.615.248 I llm_load_print_meta: n_expert         = 0
0.00.615.249 I llm_load_print_meta: n_expert_used    = 0
0.00.615.249 I llm_load_print_meta: causal attn      = 1
0.00.615.249 I llm_load_print_meta: pooling type     = 0
0.00.615.250 I llm_load_print_meta: rope type        = 2
0.00.615.250 I llm_load_print_meta: rope scaling     = linear
0.00.615.252 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.252 I llm_load_print_meta: freq_scale_train = 1
0.00.615.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.253 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.253 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.253 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.254 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.254 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.254 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.255 I llm_load_print_meta: model type       = 2B
0.00.615.256 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.256 I llm_load_print_meta: model params     = 2.51 B
0.00.615.257 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.257 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.258 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.258 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.267 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.268 I llm_load_print_meta: max token length = 93
0.00.615.454 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.767 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.693.778 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.779 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.693.779 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.693.780 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.781 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.699.687 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.696 I llama_new_context_with_model: n_batch    = 2048
0.00.699.696 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.697 I llama_new_context_with_model: flash_attn = 0
0.00.699.700 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.701 I llama_new_context_with_model: freq_scale = 1
0.00.729.714 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.756 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.876 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.287 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.292 I llama_new_context_with_model: graph nodes  = 601
0.00.731.292 I llama_new_context_with_model: graph splits = 1
0.00.731.310 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.055 I main: llama threadpool init, n_threads = 4
0.01.343.069 I 
0.01.343.195 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.199 I 
0.01.343.392 I sampler seed: 71393338
0.01.343.404 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.412 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.413 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.414 I 
 maneuvignon blanc.

I cannot find any information about this particular wine anywhere online. Does anyone have any insights or suggestions on where I might find more information?

0.14.795.393 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.05 tokens per second)
0.14.795.406 I llama_perf_context_print:        load time =    1340.13 ms
0.14.795.408 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.795.410 I llama_perf_context_print:        eval time =   13357.97 ms /    32 runs   (  417.44 ms per token,     2.40 tokens per second)
0.14.795.411 I llama_perf_context_print:       total time =   13452.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.531 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.832 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.838 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.840 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.841 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.843 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.845 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.852 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.858 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.859 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.166.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.272.912 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.291.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.291.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.291.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.291.203 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.291.204 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.291.205 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.291.206 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.291.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.291.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.291.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.291.214 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.291.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.291.224 I llama_model_loader: - type  f32:   37 tensors
0.00.291.228 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.097 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.815 I llm_load_vocab: special tokens cache size = 5
0.00.637.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.916 I llm_load_print_meta: arch             = gemma
0.00.637.917 I llm_load_print_meta: vocab type       = SPM
0.00.637.919 I llm_load_print_meta: n_vocab          = 256000
0.00.637.921 I llm_load_print_meta: n_merges         = 0
0.00.637.922 I llm_load_print_meta: vocab_only       = 0
0.00.637.923 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.924 I llm_load_print_meta: n_embd           = 2048
0.00.637.924 I llm_load_print_meta: n_layer          = 18
0.00.637.997 I llm_load_print_meta: n_head           = 8
0.00.638.009 I llm_load_print_meta: n_head_kv        = 1
0.00.638.013 I llm_load_print_meta: n_rot            = 256
0.00.638.013 I llm_load_print_meta: n_swa            = 0
0.00.638.014 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.022 I llm_load_print_meta: n_gqa            = 8
0.00.638.029 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.042 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.045 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.053 I llm_load_print_meta: n_ff             = 16384
0.00.638.055 I llm_load_print_meta: n_expert         = 0
0.00.638.055 I llm_load_print_meta: n_expert_used    = 0
0.00.638.056 I llm_load_print_meta: causal attn      = 1
0.00.638.057 I llm_load_print_meta: pooling type     = 0
0.00.638.058 I llm_load_print_meta: rope type        = 2
0.00.638.058 I llm_load_print_meta: rope scaling     = linear
0.00.638.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.061 I llm_load_print_meta: freq_scale_train = 1
0.00.638.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.064 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.067 I llm_load_print_meta: model type       = 2B
0.00.638.069 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.073 I llm_load_print_meta: model params     = 2.51 B
0.00.638.074 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.075 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.076 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.077 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.077 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.079 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.079 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.087 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.089 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.090 I llm_load_print_meta: max token length = 93
0.00.638.289 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.296 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.715.305 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.720.852 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.859 I llama_new_context_with_model: n_batch    = 2048
0.00.720.859 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.860 I llama_new_context_with_model: flash_attn = 0
0.00.720.863 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.863 I llama_new_context_with_model: freq_scale = 1
0.00.751.312 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.357 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.838 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.843 I llama_new_context_with_model: graph nodes  = 601
0.00.752.843 I llama_new_context_with_model: graph splits = 1
0.00.752.859 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.395.554 I main: llama threadpool init, n_threads = 4
0.01.395.566 I 
0.01.395.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.395.677 I 
0.01.395.855 I sampler seed: 210949337
0.01.395.867 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.395.874 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.395.876 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.395.876 I 
 increasively. 

I'm not sure what to make of this situation. On the one hand, it seems like a clear violation of privacy. On

0.15.028.307 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.15 tokens per second)
0.15.028.332 I llama_perf_context_print:        load time =    1392.69 ms
0.15.028.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.028.336 I llama_perf_context_print:        eval time =   13538.86 ms /    32 runs   (  423.09 ms per token,     2.36 tokens per second)
0.15.028.337 I llama_perf_context_print:       total time =   13632.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.347s
user	3m34.039s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3958 (4ff7fe1f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198785.60 ms
main:    total time = 198785.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.716 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.926 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.026 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.028 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.031 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.035 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.037 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.039 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.045 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.047 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.049 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.050 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.824 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.738 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.009 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.010 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.011 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.012 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.022 I llama_model_loader: - type  f32:   37 tensors
0.00.274.026 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.027 I llama_model_loader: - type q6_K:   19 tensors
0.00.457.521 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.893 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.811 I llm_load_vocab: special tokens cache size = 5
0.00.628.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.179 I llm_load_print_meta: arch             = gemma
0.00.628.179 I llm_load_print_meta: vocab type       = SPM
0.00.628.180 I llm_load_print_meta: n_vocab          = 256000
0.00.628.182 I llm_load_print_meta: n_merges         = 0
0.00.628.183 I llm_load_print_meta: vocab_only       = 0
0.00.628.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.184 I llm_load_print_meta: n_embd           = 2048
0.00.628.184 I llm_load_print_meta: n_layer          = 18
0.00.628.259 I llm_load_print_meta: n_head           = 8
0.00.628.268 I llm_load_print_meta: n_head_kv        = 1
0.00.628.269 I llm_load_print_meta: n_rot            = 256
0.00.628.269 I llm_load_print_meta: n_swa            = 0
0.00.628.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.275 I llm_load_print_meta: n_gqa            = 8
0.00.628.281 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.286 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.288 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.289 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.290 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.290 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.291 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.296 I llm_load_print_meta: n_ff             = 16384
0.00.628.297 I llm_load_print_meta: n_expert         = 0
0.00.628.297 I llm_load_print_meta: n_expert_used    = 0
0.00.628.298 I llm_load_print_meta: causal attn      = 1
0.00.628.298 I llm_load_print_meta: pooling type     = 0
0.00.628.299 I llm_load_print_meta: rope type        = 2
0.00.628.299 I llm_load_print_meta: rope scaling     = linear
0.00.628.301 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.302 I llm_load_print_meta: freq_scale_train = 1
0.00.628.302 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.303 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.303 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.304 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.304 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.305 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.311 I llm_load_print_meta: model type       = 2B
0.00.628.312 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.628.313 I llm_load_print_meta: model params     = 2.51 B
0.00.628.325 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.628.326 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.326 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.328 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.337 I llm_load_print_meta: max token length = 93
0.00.628.507 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.505 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.690.516 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.690.516 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.690.517 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.690.518 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.690.518 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.696.150 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.156 I llama_new_context_with_model: n_batch    = 2048
0.00.696.157 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.157 I llama_new_context_with_model: flash_attn = 0
0.00.696.159 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.160 I llama_new_context_with_model: freq_scale = 1
0.00.725.173 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.217 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.722 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.727 I llama_new_context_with_model: graph nodes  = 601
0.00.726.728 I llama_new_context_with_model: graph splits = 1
0.00.726.744 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.477 I main: llama threadpool init, n_threads = 4
0.01.311.490 I 
0.01.311.602 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.606 I 
0.01.311.787 I sampler seed: 2726271574
0.01.311.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.807 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.807 I 
 maneupher.

**Answer:**

I am unable to access personal or sensitive information, including usernames, passwords, or personal data. [end of text]


0.10.880.658 I llama_perf_sampler_print:    sampling time =      43.12 ms /    29 runs   (    1.49 ms per token,   672.54 tokens per second)
0.10.880.662 I llama_perf_context_print:        load time =    1308.60 ms
0.10.880.664 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.880.666 I llama_perf_context_print:        eval time =    9486.60 ms /    28 runs   (  338.81 ms per token,     2.95 tokens per second)
0.10.880.667 I llama_perf_context_print:       total time =    9569.19 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3958 (4ff7fe1f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198765.11 ms
main:    total time = 198765.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3958 (4ff7fe1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.890 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.007 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.013 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.014 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.017 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.018 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.025 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.026 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.028 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.029 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.169.958 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.271.247 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.289.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.289.874 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.289.875 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.289.876 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.289.877 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.289.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.289.879 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.289.883 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.289.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.289.892 I llama_model_loader: - type  f32:   37 tensors
0.00.289.896 I llama_model_loader: - type q4_K:  108 tensors
0.00.289.896 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.065 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.711 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.686 I llm_load_vocab: special tokens cache size = 5
0.00.630.997 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.070 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.071 I llm_load_print_meta: arch             = gemma
0.00.631.072 I llm_load_print_meta: vocab type       = SPM
0.00.631.073 I llm_load_print_meta: n_vocab          = 256000
0.00.631.075 I llm_load_print_meta: n_merges         = 0
0.00.631.076 I llm_load_print_meta: vocab_only       = 0
0.00.631.076 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.076 I llm_load_print_meta: n_embd           = 2048
0.00.631.077 I llm_load_print_meta: n_layer          = 18
0.00.631.146 I llm_load_print_meta: n_head           = 8
0.00.631.154 I llm_load_print_meta: n_head_kv        = 1
0.00.631.156 I llm_load_print_meta: n_rot            = 256
0.00.631.157 I llm_load_print_meta: n_swa            = 0
0.00.631.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.162 I llm_load_print_meta: n_gqa            = 8
0.00.631.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.177 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.178 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.178 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.179 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.179 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.184 I llm_load_print_meta: n_ff             = 16384
0.00.631.184 I llm_load_print_meta: n_expert         = 0
0.00.631.187 I llm_load_print_meta: n_expert_used    = 0
0.00.631.188 I llm_load_print_meta: causal attn      = 1
0.00.631.188 I llm_load_print_meta: pooling type     = 0
0.00.631.189 I llm_load_print_meta: rope type        = 2
0.00.631.189 I llm_load_print_meta: rope scaling     = linear
0.00.631.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.192 I llm_load_print_meta: freq_scale_train = 1
0.00.631.192 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.193 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.193 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.193 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.194 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.195 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.195 I llm_load_print_meta: model type       = 2B
0.00.631.197 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.631.198 I llm_load_print_meta: model params     = 2.51 B
0.00.631.199 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.631.200 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.201 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.201 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.203 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.203 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.209 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.211 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.211 I llm_load_print_meta: max token length = 93
0.00.631.384 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.007 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.696.706 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.714 I llama_new_context_with_model: n_batch    = 2048
0.00.696.715 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.715 I llama_new_context_with_model: flash_attn = 0
0.00.696.719 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.719 I llama_new_context_with_model: freq_scale = 1
0.00.727.302 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.348 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.803 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.808 I llama_new_context_with_model: graph nodes  = 601
0.00.728.808 I llama_new_context_with_model: graph splits = 1
0.00.728.824 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.013 I main: llama threadpool init, n_threads = 4
0.01.309.026 I 
0.01.309.130 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.134 I 
0.01.309.311 I sampler seed: 2517214667
0.01.309.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.331 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.334 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.334 I 
 increasities that have plagued the global economy for decades. These include unsustainable debt levels, inflation, interest rate volatility, and income inequality.

What are the potential

0.12.211.513 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.84 tokens per second)
0.12.211.519 I llama_perf_context_print:        load time =    1306.12 ms
0.12.211.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.211.522 I llama_perf_context_print:        eval time =   10807.86 ms /    32 runs   (  337.75 ms per token,     2.96 tokens per second)
0.12.211.523 I llama_perf_context_print:       total time =   10902.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.542s
user	50m6.462s
sys	0m6.452s
