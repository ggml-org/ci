+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.875 I main: load the model and apply lora adapter, if any
0.00.022.635 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.642 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.659 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.670 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.674 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.674 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.675 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.239 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.283 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.214 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.217 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.221 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.222 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.223 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.223 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.229 I llama_model_loader: - type  f32:   37 tensors
0.00.133.231 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.348 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.727 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.238 I llm_load_vocab: special tokens cache size = 5
0.00.264.850 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.866 I llm_load_print_meta: arch             = gemma
0.00.264.867 I llm_load_print_meta: vocab type       = SPM
0.00.264.867 I llm_load_print_meta: n_vocab          = 256000
0.00.264.868 I llm_load_print_meta: n_merges         = 0
0.00.264.868 I llm_load_print_meta: vocab_only       = 0
0.00.264.868 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.869 I llm_load_print_meta: n_embd           = 2048
0.00.264.869 I llm_load_print_meta: n_layer          = 18
0.00.264.881 I llm_load_print_meta: n_head           = 8
0.00.264.882 I llm_load_print_meta: n_head_kv        = 1
0.00.264.882 I llm_load_print_meta: n_rot            = 256
0.00.264.883 I llm_load_print_meta: n_swa            = 0
0.00.264.883 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.883 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.884 I llm_load_print_meta: n_gqa            = 8
0.00.264.885 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.886 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.888 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.888 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.888 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.889 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.890 I llm_load_print_meta: n_ff             = 16384
0.00.264.890 I llm_load_print_meta: n_expert         = 0
0.00.264.890 I llm_load_print_meta: n_expert_used    = 0
0.00.264.891 I llm_load_print_meta: causal attn      = 1
0.00.264.891 I llm_load_print_meta: pooling type     = 0
0.00.264.891 I llm_load_print_meta: rope type        = 2
0.00.264.891 I llm_load_print_meta: rope scaling     = linear
0.00.264.893 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.894 I llm_load_print_meta: freq_scale_train = 1
0.00.264.894 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.894 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.895 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.895 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.895 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.896 I llm_load_print_meta: model type       = 2B
0.00.264.896 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.897 I llm_load_print_meta: model params     = 2.51 B
0.00.264.898 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.898 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.899 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.899 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.900 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.900 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.900 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.901 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.901 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.901 I llm_load_print_meta: max token length = 93
0.00.372.951 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.372.958 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.372.959 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.372.960 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.372.961 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.372.961 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.283 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.288 I llama_new_context_with_model: n_batch    = 2048
0.00.378.288 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.289 I llama_new_context_with_model: flash_attn = 0
0.00.378.292 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.293 I llama_new_context_with_model: freq_scale = 1
0.00.406.686 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.701 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.793 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.029 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.034 I llama_new_context_with_model: graph nodes  = 601
0.00.408.035 I llama_new_context_with_model: graph splits = 1
0.00.408.037 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.564 I main: llama threadpool init, n_threads = 4
0.00.499.578 I 
0.00.499.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.656 I 
0.00.499.700 I sampler seed: 507465166
0.00.499.710 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.718 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.719 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.719 I 
 maneuvously.

I apologize, but I am unable to generate creative or inappropriate content. My purpose is to assist with tasks and provide information within the boundaries

0.02.792.076 I llama_perf_sampler_print:    sampling time =       5.64 ms /    33 runs   (    0.17 ms per token,  5847.95 tokens per second)
0.02.792.078 I llama_perf_context_print:        load time =     497.66 ms
0.02.792.079 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.792.080 I llama_perf_context_print:        eval time =    2272.51 ms /    32 runs   (   71.02 ms per token,    14.08 tokens per second)
0.02.792.081 I llama_perf_context_print:       total time =    2292.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.856 I main: load the model and apply lora adapter, if any
0.00.022.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.500 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.510 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.514 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.518 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.519 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.522 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.523 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.524 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.524 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.528 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.529 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.529 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.530 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.790 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.481 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.382 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.383 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.384 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.385 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.386 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.388 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.389 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.389 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.390 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.391 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.394 I llama_model_loader: - type  f32:   37 tensors
0.00.132.395 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.113 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.177 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.748 I llm_load_vocab: special tokens cache size = 5
0.00.278.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.644 I llm_load_print_meta: arch             = gemma
0.00.278.645 I llm_load_print_meta: vocab type       = SPM
0.00.278.646 I llm_load_print_meta: n_vocab          = 256000
0.00.278.646 I llm_load_print_meta: n_merges         = 0
0.00.278.647 I llm_load_print_meta: vocab_only       = 0
0.00.278.647 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.647 I llm_load_print_meta: n_embd           = 2048
0.00.278.648 I llm_load_print_meta: n_layer          = 18
0.00.278.660 I llm_load_print_meta: n_head           = 8
0.00.278.661 I llm_load_print_meta: n_head_kv        = 1
0.00.278.662 I llm_load_print_meta: n_rot            = 256
0.00.278.662 I llm_load_print_meta: n_swa            = 0
0.00.278.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.662 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.663 I llm_load_print_meta: n_gqa            = 8
0.00.278.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.670 I llm_load_print_meta: n_ff             = 16384
0.00.278.670 I llm_load_print_meta: n_expert         = 0
0.00.278.670 I llm_load_print_meta: n_expert_used    = 0
0.00.278.671 I llm_load_print_meta: causal attn      = 1
0.00.278.671 I llm_load_print_meta: pooling type     = 0
0.00.278.671 I llm_load_print_meta: rope type        = 2
0.00.278.672 I llm_load_print_meta: rope scaling     = linear
0.00.278.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.674 I llm_load_print_meta: freq_scale_train = 1
0.00.278.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.676 I llm_load_print_meta: model type       = 2B
0.00.278.677 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.677 I llm_load_print_meta: model params     = 2.51 B
0.00.278.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.682 I llm_load_print_meta: max token length = 93
0.00.377.492 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.717 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.722 I llama_new_context_with_model: n_batch    = 2048
0.00.382.723 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.723 I llama_new_context_with_model: flash_attn = 0
0.00.382.726 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.727 I llama_new_context_with_model: freq_scale = 1
0.00.411.919 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.411.934 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.023 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.239 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.413.245 I llama_new_context_with_model: graph nodes  = 601
0.00.413.246 I llama_new_context_with_model: graph splits = 1
0.00.413.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.620 I main: llama threadpool init, n_threads = 4
0.00.501.635 I 
0.00.501.711 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.501.714 I 
0.00.501.758 I sampler seed: 906196494
0.00.501.770 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.501.780 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.501.781 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.501.781 I 
 increasities can cause severe complications and even death.

**What are some of the potential complications and risks associated with Crescenta?**

Crescenta is

0.02.739.978 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6027.40 tokens per second)
0.02.739.980 I llama_perf_context_print:        load time =     499.74 ms
0.02.739.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.983 I llama_perf_context_print:        eval time =    2217.63 ms /    32 runs   (   69.30 ms per token,    14.43 tokens per second)
0.02.739.983 I llama_perf_context_print:       total time =    2238.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.444 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.642 I main: llama backend init
0.00.001.769 I main: load the model and apply lora adapter, if any
0.00.022.571 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.580 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.588 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.598 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.602 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.603 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.603 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.604 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.604 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.605 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.609 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.610 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.611 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.611 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.611 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.909 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.800 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.801 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.802 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.803 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.806 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.807 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.807 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.808 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.811 I llama_model_loader: - type  f32:   37 tensors
0.00.132.812 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.917 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.895 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.532 I llm_load_vocab: special tokens cache size = 5
0.00.274.660 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.678 I llm_load_print_meta: arch             = gemma
0.00.274.679 I llm_load_print_meta: vocab type       = SPM
0.00.274.680 I llm_load_print_meta: n_vocab          = 256000
0.00.274.680 I llm_load_print_meta: n_merges         = 0
0.00.274.681 I llm_load_print_meta: vocab_only       = 0
0.00.274.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.681 I llm_load_print_meta: n_embd           = 2048
0.00.274.682 I llm_load_print_meta: n_layer          = 18
0.00.274.694 I llm_load_print_meta: n_head           = 8
0.00.274.695 I llm_load_print_meta: n_head_kv        = 1
0.00.274.695 I llm_load_print_meta: n_rot            = 256
0.00.274.695 I llm_load_print_meta: n_swa            = 0
0.00.274.696 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.696 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.697 I llm_load_print_meta: n_gqa            = 8
0.00.274.698 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.699 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.701 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.702 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.702 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.703 I llm_load_print_meta: n_ff             = 16384
0.00.274.703 I llm_load_print_meta: n_expert         = 0
0.00.274.704 I llm_load_print_meta: n_expert_used    = 0
0.00.274.704 I llm_load_print_meta: causal attn      = 1
0.00.274.704 I llm_load_print_meta: pooling type     = 0
0.00.274.705 I llm_load_print_meta: rope type        = 2
0.00.274.705 I llm_load_print_meta: rope scaling     = linear
0.00.274.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.707 I llm_load_print_meta: freq_scale_train = 1
0.00.274.707 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.708 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.708 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.710 I llm_load_print_meta: model type       = 2B
0.00.274.710 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.711 I llm_load_print_meta: model params     = 2.51 B
0.00.274.712 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.714 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.715 I llm_load_print_meta: max token length = 93
0.00.371.886 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.371.892 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.371.893 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.371.893 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.371.894 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.371.894 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.377.153 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.160 I llama_new_context_with_model: n_batch    = 2048
0.00.377.161 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.161 I llama_new_context_with_model: flash_attn = 0
0.00.377.165 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.166 I llama_new_context_with_model: freq_scale = 1
0.00.407.078 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.092 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.481 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.488 I llama_new_context_with_model: graph nodes  = 601
0.00.408.489 I llama_new_context_with_model: graph splits = 1
0.00.408.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.607 I main: llama threadpool init, n_threads = 4
0.00.503.622 I 
0.00.503.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.503.700 I 
0.00.503.757 I sampler seed: 61653899
0.00.503.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.774 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.775 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.775 I 
 increably!

I am unable to generate a response due to the provided context being inappropriate. [end of text]


0.01.876.213 I llama_perf_sampler_print:    sampling time =       3.55 ms /    21 runs   (    0.17 ms per token,  5917.16 tokens per second)
0.01.876.215 I llama_perf_context_print:        load time =     501.82 ms
0.01.876.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.876.217 I llama_perf_context_print:        eval time =    1358.83 ms /    20 runs   (   67.94 ms per token,    14.72 tokens per second)
0.01.876.218 I llama_perf_context_print:       total time =    1372.61 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.001.939 I main: load the model and apply lora adapter, if any
0.00.022.400 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.424 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.436 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.440 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.441 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.444 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.451 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.452 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.534 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.408 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.414 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.415 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.422 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.427 I llama_model_loader: - type  f32:   37 tensors
0.00.132.428 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.237 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.468 I llm_load_vocab: special tokens cache size = 5
0.00.268.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.247 I llm_load_print_meta: arch             = gemma
0.00.268.248 I llm_load_print_meta: vocab type       = SPM
0.00.268.249 I llm_load_print_meta: n_vocab          = 256000
0.00.268.249 I llm_load_print_meta: n_merges         = 0
0.00.268.249 I llm_load_print_meta: vocab_only       = 0
0.00.268.250 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.250 I llm_load_print_meta: n_embd           = 2048
0.00.268.250 I llm_load_print_meta: n_layer          = 18
0.00.268.264 I llm_load_print_meta: n_head           = 8
0.00.268.265 I llm_load_print_meta: n_head_kv        = 1
0.00.268.265 I llm_load_print_meta: n_rot            = 256
0.00.268.266 I llm_load_print_meta: n_swa            = 0
0.00.268.266 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.266 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.267 I llm_load_print_meta: n_gqa            = 8
0.00.268.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.269 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.270 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.271 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.272 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.272 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.273 I llm_load_print_meta: n_ff             = 16384
0.00.268.274 I llm_load_print_meta: n_expert         = 0
0.00.268.274 I llm_load_print_meta: n_expert_used    = 0
0.00.268.275 I llm_load_print_meta: causal attn      = 1
0.00.268.275 I llm_load_print_meta: pooling type     = 0
0.00.268.275 I llm_load_print_meta: rope type        = 2
0.00.268.276 I llm_load_print_meta: rope scaling     = linear
0.00.268.277 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.278 I llm_load_print_meta: freq_scale_train = 1
0.00.268.278 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.278 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.278 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.279 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.279 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.280 I llm_load_print_meta: model type       = 2B
0.00.268.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.282 I llm_load_print_meta: model params     = 2.51 B
0.00.268.283 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.284 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.284 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.285 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.286 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.286 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.286 I llm_load_print_meta: max token length = 93
0.00.352.368 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.352.375 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.641 I llama_new_context_with_model: n_ctx      = 8192
0.00.357.647 I llama_new_context_with_model: n_batch    = 2048
0.00.357.648 I llama_new_context_with_model: n_ubatch   = 512
0.00.357.648 I llama_new_context_with_model: flash_attn = 0
0.00.357.650 I llama_new_context_with_model: freq_base  = 10000.0
0.00.357.651 I llama_new_context_with_model: freq_scale = 1
0.00.386.333 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.386.348 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.386.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.671 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.387.678 I llama_new_context_with_model: graph nodes  = 601
0.00.387.679 I llama_new_context_with_model: graph splits = 1
0.00.387.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.783 I main: llama threadpool init, n_threads = 4
0.00.481.794 I 
0.00.481.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.481.880 I 
0.00.481.930 I sampler seed: 3146530992
0.00.481.942 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.946 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.947 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.947 I 
 increably.

I am unable to access the requested resource. Please try again later.

I am unable to access the requested resource. Please try again later

0.02.676.512 I llama_perf_sampler_print:    sampling time =       5.53 ms /    33 runs   (    0.17 ms per token,  5968.53 tokens per second)
0.02.676.514 I llama_perf_context_print:        load time =     479.82 ms
0.02.676.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.676.517 I llama_perf_context_print:        eval time =    2174.69 ms /    32 runs   (   67.96 ms per token,    14.71 tokens per second)
0.02.676.519 I llama_perf_context_print:       total time =    2194.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.760s
user	0m35.276s
sys	0m9.653s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4003 (0bafad0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32030.13 ms
main:    total time = 32030.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.022.432 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.443 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.464 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.467 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.468 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.472 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.472 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.473 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.477 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.477 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.220 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.226 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.227 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.230 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.234 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.235 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.236 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.237 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.238 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.241 I llama_model_loader: - type  f32:   37 tensors
0.00.132.242 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.243 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.455 I llm_load_vocab: special tokens cache size = 5
0.00.264.982 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.997 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.998 I llm_load_print_meta: arch             = gemma
0.00.264.999 I llm_load_print_meta: vocab type       = SPM
0.00.264.999 I llm_load_print_meta: n_vocab          = 256000
0.00.265.000 I llm_load_print_meta: n_merges         = 0
0.00.265.000 I llm_load_print_meta: vocab_only       = 0
0.00.265.001 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.001 I llm_load_print_meta: n_embd           = 2048
0.00.265.001 I llm_load_print_meta: n_layer          = 18
0.00.265.015 I llm_load_print_meta: n_head           = 8
0.00.265.016 I llm_load_print_meta: n_head_kv        = 1
0.00.265.017 I llm_load_print_meta: n_rot            = 256
0.00.265.017 I llm_load_print_meta: n_swa            = 0
0.00.265.017 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.017 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.018 I llm_load_print_meta: n_gqa            = 8
0.00.265.019 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.020 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.021 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.023 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.023 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.025 I llm_load_print_meta: n_ff             = 16384
0.00.265.025 I llm_load_print_meta: n_expert         = 0
0.00.265.026 I llm_load_print_meta: n_expert_used    = 0
0.00.265.026 I llm_load_print_meta: causal attn      = 1
0.00.265.027 I llm_load_print_meta: pooling type     = 0
0.00.265.028 I llm_load_print_meta: rope type        = 2
0.00.265.028 I llm_load_print_meta: rope scaling     = linear
0.00.265.029 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.030 I llm_load_print_meta: freq_scale_train = 1
0.00.265.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.032 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.032 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.032 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.032 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.033 I llm_load_print_meta: model type       = 2B
0.00.265.034 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.035 I llm_load_print_meta: model params     = 2.51 B
0.00.265.036 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.036 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.036 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.037 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.040 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.042 I llm_load_print_meta: max token length = 93
0.00.326.624 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.326.630 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.326.631 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.326.631 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.326.632 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.326.633 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.762 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.768 I llama_new_context_with_model: n_batch    = 2048
0.00.331.768 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.769 I llama_new_context_with_model: flash_attn = 0
0.00.331.771 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.772 I llama_new_context_with_model: freq_scale = 1
0.00.360.401 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.360.414 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.360.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.781 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.361.787 I llama_new_context_with_model: graph nodes  = 601
0.00.361.788 I llama_new_context_with_model: graph splits = 1
0.00.361.789 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.409 I main: llama threadpool init, n_threads = 4
0.00.444.422 I 
0.00.444.497 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.501 I 
0.00.444.545 I sampler seed: 145108125
0.00.444.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.561 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.562 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.562 I 
 increasities is a common problem in the context of medical imaging. These artifacts can impact the accuracy and interpretability of medical images, making it important to identify and

0.02.116.731 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5935.25 tokens per second)
0.02.116.734 I llama_perf_context_print:        load time =     442.51 ms
0.02.116.735 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.116.738 I llama_perf_context_print:        eval time =    1651.57 ms /    32 runs   (   51.61 ms per token,    19.38 tokens per second)
0.02.116.739 I llama_perf_context_print:       total time =    1672.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4003 (0bafad0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32077.39 ms
main:    total time = 32077.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.545 I build: 4003 (0bafad0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.845 I main: load the model and apply lora adapter, if any
0.00.022.814 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.829 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.839 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.841 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.845 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.846 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.848 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.849 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.849 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.853 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.853 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.854 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.855 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.630 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.277 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.156 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.161 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.162 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.163 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.163 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.164 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.165 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.168 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.172 I llama_model_loader: - type  f32:   37 tensors
0.00.133.173 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.174 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.910 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.444 I llm_load_vocab: special tokens cache size = 5
0.00.268.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.912 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.913 I llm_load_print_meta: arch             = gemma
0.00.268.914 I llm_load_print_meta: vocab type       = SPM
0.00.268.914 I llm_load_print_meta: n_vocab          = 256000
0.00.268.915 I llm_load_print_meta: n_merges         = 0
0.00.268.915 I llm_load_print_meta: vocab_only       = 0
0.00.268.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.916 I llm_load_print_meta: n_embd           = 2048
0.00.268.916 I llm_load_print_meta: n_layer          = 18
0.00.268.928 I llm_load_print_meta: n_head           = 8
0.00.268.929 I llm_load_print_meta: n_head_kv        = 1
0.00.268.930 I llm_load_print_meta: n_rot            = 256
0.00.268.930 I llm_load_print_meta: n_swa            = 0
0.00.268.930 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.931 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.931 I llm_load_print_meta: n_gqa            = 8
0.00.268.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.934 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.936 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.937 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.937 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.938 I llm_load_print_meta: n_ff             = 16384
0.00.268.938 I llm_load_print_meta: n_expert         = 0
0.00.268.939 I llm_load_print_meta: n_expert_used    = 0
0.00.268.939 I llm_load_print_meta: causal attn      = 1
0.00.268.939 I llm_load_print_meta: pooling type     = 0
0.00.268.939 I llm_load_print_meta: rope type        = 2
0.00.268.940 I llm_load_print_meta: rope scaling     = linear
0.00.268.941 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.942 I llm_load_print_meta: freq_scale_train = 1
0.00.268.942 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.943 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.943 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.943 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.943 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.944 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.944 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.944 I llm_load_print_meta: model type       = 2B
0.00.268.945 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.946 I llm_load_print_meta: model params     = 2.51 B
0.00.268.947 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.947 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.948 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.950 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.951 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.951 I llm_load_print_meta: max token length = 93
0.00.330.849 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.060 I llama_new_context_with_model: n_ctx      = 8192
0.00.336.066 I llama_new_context_with_model: n_batch    = 2048
0.00.336.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.336.067 I llama_new_context_with_model: flash_attn = 0
0.00.336.069 I llama_new_context_with_model: freq_base  = 10000.0
0.00.336.070 I llama_new_context_with_model: freq_scale = 1
0.00.365.166 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.182 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.524 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.531 I llama_new_context_with_model: graph nodes  = 601
0.00.366.532 I llama_new_context_with_model: graph splits = 1
0.00.366.534 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.032 I main: llama threadpool init, n_threads = 4
0.00.448.046 I 
0.00.448.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.123 I 
0.00.448.164 I sampler seed: 3823601652
0.00.448.173 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.176 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.177 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.177 I 
 maneurages and puns.

**Answer the following questions about puns and wordplay:**

1. **Explain the difference between puns and wordplay.**


2

0.02.113.466 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6036.22 tokens per second)
0.02.113.469 I llama_perf_context_print:        load time =     446.17 ms
0.02.113.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.113.472 I llama_perf_context_print:        eval time =    1645.09 ms /    32 runs   (   51.41 ms per token,    19.45 tokens per second)
0.02.113.472 I llama_perf_context_print:       total time =    1665.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.187s
user	8m14.721s
sys	0m7.027s
