Requirement already satisfied: numpy~=1.24.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 1)) (1.24.4)
Requirement already satisfied: sentencepiece~=0.1.98 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 2)) (0.1.99)
Requirement already satisfied: transformers<5.0.0,>=4.35.2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (4.38.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 4)) (0.7.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.1.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.1.2)
Requirement already satisfied: einops~=0.7.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 3)) (0.7.0)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (4.66.2)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (6.0.1)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2.31.0)
Requirement already satisfied: tokenizers<0.19,>=0.14 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.15.2)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.4.2)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.13.1)
Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.20.3)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (23.2)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2023.12.25)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.12)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.2.1)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2024.2.0)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.1.3)
Requirement already satisfied: typing-extensions in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (4.9.0)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.1.5)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2024.2.2)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.6)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2.2.1)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.3.2)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.7.0) (1.24.4)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.7.0-py3-none-any.whl size=3229 sha256=e77d3489e0beea138863799a05abb421092af60b67ffc67b376508ee3f0720bf
  Stored in directory: /tmp/pip-ephem-wheel-cache-j130j4vn/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.7.0
    Uninstalling gguf-0.7.0:
      Successfully uninstalled gguf-0.7.0
Successfully installed gguf-0.7.0
+ gg_run_ctest_debug
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_debug.log
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-debug
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m0.772s
user	0m0.421s
sys	0m0.355s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_debug-make.log
+ make -j
[  0%] Generating build details from Git
[  3%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  1%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  3%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  4%] Built target ggml
[  5%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  6%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  6%] Linking C static library libggml_static.a
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  8%] Built target build_info
[  8%] Built target ggml_static
[  8%] Built target gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target llama
[ 13%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 13%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 13%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 14%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 15%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 16%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 17%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/quantize
[ 21%] Linking CXX executable ../../bin/quantize-stats
[ 22%] Linking CXX executable ../../bin/benchmark
[ 22%] Built target llava
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Built target common
[ 23%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 33%] Linking CXX executable ../bin/test-quantize-fns
[ 34%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 36%] Linking CXX executable ../bin/test-quantize-perf
[ 37%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 38%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 38%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 39%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 40%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 40%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 41%] Linking CXX executable ../bin/test-chat-template
[ 42%] Linking CXX executable ../bin/test-sampling
[ 43%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 43%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 45%] Linking CXX executable ../bin/test-grammar-parser
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 48%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 53%] Linking CXX executable ../bin/test-backend-ops
[ 55%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 55%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 56%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 57%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 58%] Linking CXX executable ../bin/test-rope
[ 59%] Linking CXX executable ../bin/test-autorelease
[ 60%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 61%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 61%] Linking CXX executable ../bin/test-grad0
[ 62%] Built target quantize
[ 63%] Linking CXX executable ../../bin/baby-llama
[ 64%] Linking CXX executable ../../bin/batched
[ 64%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 64%] Linking CXX executable ../../bin/batched-bench
[ 65%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 65%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 66%] Linking CXX executable ../../bin/beam-search
[ 66%] Built target test-quantize-perf
[ 67%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 68%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 69%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 70%] Linking CXX executable ../../bin/embedding
[ 70%] Built target test-quantize-fns
[ 71%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 71%] Built target quantize-stats
[ 71%] Linking CXX executable ../../bin/finetune
[ 72%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 72%] Built target test-grammar-parser
[ 74%] Linking CXX executable ../../bin/llava-cli
[ 73%] Linking CXX executable ../../bin/infill
[ 75%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 75%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 75%] Built target test-grad0
[ 75%] Linking CXX executable ../../bin/tokenize
[ 76%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 76%] Built target test-rope
[ 77%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 78%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 79%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 81%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 82%] Linking CXX executable ../../bin/perplexity
[ 82%] Linking CXX executable ../../bin/parallel
[ 84%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 84%] Linking CXX executable ../../bin/save-load-state
[ 83%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 84%] Linking CXX executable ../../bin/passkey
[ 85%] Linking CXX executable ../../bin/main
[ 86%] Linking CXX executable ../../bin/simple
[ 87%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 89%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 88%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 90%] Linking CXX executable ../../bin/lookup
[ 91%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 92%] Linking CXX executable ../../bin/train-text-from-scratch
[ 93%] Linking CXX executable ../../bin/speculative
[ 94%] Linking CXX executable ../../bin/imatrix
[ 94%] Built target test-backend-ops
[ 95%] Linking CXX executable ../../bin/lookahead
[ 96%] Linking CXX executable ../../bin/vdot
[ 97%] Linking CXX executable ../../bin/q8dot
[ 98%] Built target convert-llama2c-to-ggml
[ 98%] Linking CXX executable ../../bin/export-lora
[ 99%] Linking CXX executable ../../bin/server
[ 99%] Built target test-chat-template
[ 99%] Built target test-sampling
[ 99%] Built target vdot
[ 99%] Built target q8dot
[ 99%] Built target test-tokenizer-0-llama
[ 99%] Built target test-tokenizer-0-falcon
[ 99%] Built target export-lora
[ 99%] Built target test-model-load-cancel
[ 99%] Built target test-tokenizer-1-llama
[ 99%] Built target test-autorelease
[ 99%] Built target test-tokenizer-1-bpe
[ 99%] Built target batched
[ 99%] Built target batched-bench
[ 99%] Built target beam-search
[ 99%] Built target baby-llama
[ 99%] Built target infill
[ 99%] Built target llava-cli
[ 99%] Built target tokenize
[ 99%] Built target embedding
[ 99%] Built target finetune
[ 99%] Built target passkey
[ 99%] Built target imatrix
[ 99%] Built target simple
[ 99%] Built target save-load-state
[ 99%] Built target parallel
[ 99%] Built target perplexity
[ 99%] Built target lookahead
[ 99%] Built target speculative
[ 99%] Built target train-text-from-scratch
[ 99%] Built target lookup
[ 99%] Built target llama-bench
[ 99%] Built target main
[ 99%] Built target server
[100%] Linking CXX executable ../bin/test-llama-grammar
[100%] Built target test-llama-grammar

real	0m24.141s
user	0m38.753s
sys	0m6.946s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-quantize-fns
 1/21 Test  #1: test-quantize-fns ...................   Passed   14.50 sec
      Start  2: test-quantize-perf
 2/21 Test  #2: test-quantize-perf ..................   Passed   10.83 sec
      Start  3: test-sampling
 3/21 Test  #3: test-sampling .......................   Passed    0.03 sec
      Start  4: test-chat-template
 4/21 Test  #4: test-chat-template ..................   Passed    0.01 sec
      Start  5: test-tokenizer-0-llama
 5/21 Test  #5: test-tokenizer-0-llama ..............   Passed    0.17 sec
      Start  6: test-tokenizer-0-falcon
 6/21 Test  #6: test-tokenizer-0-falcon .............   Passed    1.05 sec
      Start  7: test-tokenizer-1-llama
 7/21 Test  #7: test-tokenizer-1-llama ..............   Passed    2.72 sec
      Start  8: test-tokenizer-1-baichuan
 8/21 Test  #8: test-tokenizer-1-baichuan ...........   Passed    3.07 sec
      Start  9: test-tokenizer-1-falcon
 9/21 Test  #9: test-tokenizer-1-falcon .............   Passed    6.20 sec
      Start 10: test-tokenizer-1-aquila
10/21 Test #10: test-tokenizer-1-aquila .............   Passed    9.15 sec
      Start 11: test-tokenizer-1-mpt
11/21 Test #11: test-tokenizer-1-mpt ................   Passed    5.05 sec
      Start 12: test-tokenizer-1-stablelm-3b-4e1t
12/21 Test #12: test-tokenizer-1-stablelm-3b-4e1t ...   Passed    5.02 sec
      Start 13: test-tokenizer-1-gpt-neox
13/21 Test #13: test-tokenizer-1-gpt-neox ...........   Passed    5.04 sec
      Start 14: test-tokenizer-1-refact
14/21 Test #14: test-tokenizer-1-refact .............   Passed    4.80 sec
      Start 15: test-tokenizer-1-starcoder
15/21 Test #15: test-tokenizer-1-starcoder ..........   Passed    4.79 sec
      Start 16: test-tokenizer-1-gpt2
16/21 Test #16: test-tokenizer-1-gpt2 ...............   Passed    5.08 sec
      Start 17: test-grammar-parser
17/21 Test #17: test-grammar-parser .................   Passed    0.00 sec
      Start 18: test-llama-grammar
18/21 Test #18: test-llama-grammar ..................   Passed    0.00 sec
      Start 19: test-grad0
19/21 Test #19: test-grad0 ..........................   Passed    3.08 sec
      Start 20: test-backend-ops
20/21 Test #20: test-backend-ops ....................   Passed  129.84 sec
      Start 21: test-rope
21/21 Test #21: test-rope ...........................   Passed    0.08 sec

100% tests passed, 0 tests failed out of 21

Label Time Summary:
main    = 210.53 sec*proc (21 tests)

Total Test time (real) = 210.54 sec

real	3m30.551s
user	6m7.010s
sys	0m16.194s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_release.log
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.764s
user	0m0.438s
sys	0m0.330s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_release-make.log
+ make -j
[  2%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  2%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  5%] Built target ggml
[  5%] Built target build_info
[  5%] Linking C static library libggml_static.a
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  7%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  8%] Built target ggml_static
[  8%] Built target gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target llama
[ 11%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 13%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 13%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 11%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 14%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 15%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 17%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/quantize
[ 21%] Linking CXX executable ../../bin/quantize-stats
[ 21%] Built target llava
[ 22%] Linking CXX executable ../../bin/benchmark
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target common
[ 23%] Built target llava_static
[ 23%] Built target benchmark
[ 23%] Built target quantize
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 27%] Built target quantize-stats
[ 27%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 37%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 38%] Linking CXX executable ../bin/test-quantize-fns
[ 39%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 39%] Linking CXX executable ../bin/test-quantize-perf
[ 40%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 41%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 42%] Linking CXX executable ../bin/test-sampling
[ 43%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 44%] Linking CXX executable ../bin/test-grammar-parser
[ 45%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 46%] Linking CXX executable ../bin/test-chat-template
[ 47%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 49%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 50%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 50%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 50%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 53%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 54%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 55%] Linking CXX executable ../../bin/baby-llama
[ 53%] Linking CXX executable ../bin/test-grad0
[ 56%] Linking CXX executable ../bin/test-backend-ops
[ 57%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 58%] Linking CXX executable ../bin/test-rope
[ 59%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 60%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 61%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 63%] Linking CXX executable ../../bin/batched
[ 64%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 65%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 65%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 66%] Linking CXX executable ../../bin/beam-search
[ 66%] Built target test-quantize-fns
[ 66%] Linking CXX executable ../../bin/finetune
[ 67%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 68%] Linking CXX executable ../../bin/embedding
[ 68%] Built target test-grammar-parser
[ 69%] Linking CXX executable ../bin/test-autorelease
[ 69%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 70%] Linking CXX executable ../../bin/llava-cli
[ 70%] Linking CXX executable ../../bin/batched-bench
[ 71%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 72%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 73%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 74%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 75%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 75%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 76%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 76%] Built target test-sampling
[ 78%] Linking CXX executable ../../bin/infill
[ 78%] Built target test-tokenizer-1-bpe
[ 78%] Built target test-grad0
[ 78%] Linking CXX executable ../../bin/tokenize
[ 77%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-bench
[ 78%] Built target test-quantize-perf
[ 79%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 79%] Built target test-tokenizer-0-llama
[ 78%] Linking CXX executable ../../bin/passkey
[ 79%] Linking CXX executable ../../bin/save-load-state
[ 79%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 80%] Linking CXX executable ../../bin/lookup
[ 81%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 81%] Built target test-rope
[ 82%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 83%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 84%] Linking CXX executable ../../bin/perplexity
[ 85%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 86%] Linking CXX executable ../../bin/parallel
[ 87%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 88%] Linking CXX executable ../../bin/main
[ 88%] Built target test-chat-template
[ 88%] Built target test-tokenizer-1-llama
[ 89%] Linking CXX executable ../../bin/simple
[ 89%] Built target convert-llama2c-to-ggml
[ 90%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 90%] Built target beam-search
[ 90%] Built target baby-llama
[ 91%] Linking CXX executable ../../bin/speculative
[ 92%] Linking CXX executable ../../bin/lookahead
[ 93%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 94%] Linking CXX executable ../../bin/export-lora
[ 94%] Built target test-tokenizer-0-falcon
[ 94%] Built target batched
[ 95%] Linking CXX executable ../../bin/train-text-from-scratch
[ 96%] Linking CXX executable ../../bin/server
[ 96%] Built target test-model-load-cancel
[ 96%] Built target embedding
[ 96%] Built target test-backend-ops
[ 97%] Linking CXX executable ../../bin/imatrix
[ 98%] Linking CXX executable ../../bin/vdot
[ 99%] Linking CXX executable ../../bin/q8dot
[ 99%] Built target llava-cli
[ 99%] Built target infill
[ 99%] Built target finetune
[ 99%] Built target test-autorelease
[ 99%] Built target simple
[ 99%] Built target llama-bench
[ 99%] Built target passkey
[ 99%] Built target export-lora
[ 99%] Built target batched-bench
[ 99%] Built target perplexity
[ 99%] Built target tokenize
[ 99%] Built target save-load-state
[ 99%] Built target q8dot
[ 99%] Built target parallel
[ 99%] Built target lookup
[ 99%] Built target train-text-from-scratch
[ 99%] Built target lookahead
[ 99%] Built target main
[ 99%] Built target speculative
[ 99%] Built target vdot
[ 99%] Built target imatrix
[ 99%] Built target server
[100%] Linking CXX executable ../bin/test-llama-grammar
[100%] Built target test-llama-grammar

real	0m52.946s
user	0m56.403s
sys	0m5.243s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-quantize-fns
 1/21 Test  #1: test-quantize-fns ...................   Passed    8.25 sec
      Start  2: test-quantize-perf
 2/21 Test  #2: test-quantize-perf ..................   Passed    5.59 sec
      Start  3: test-sampling
 3/21 Test  #3: test-sampling .......................   Passed    0.01 sec
      Start  4: test-chat-template
 4/21 Test  #4: test-chat-template ..................   Passed    0.00 sec
      Start  5: test-tokenizer-0-llama
 5/21 Test  #5: test-tokenizer-0-llama ..............   Passed    0.05 sec
      Start  6: test-tokenizer-0-falcon
 6/21 Test  #6: test-tokenizer-0-falcon .............   Passed    0.28 sec
      Start  7: test-tokenizer-1-llama
 7/21 Test  #7: test-tokenizer-1-llama ..............   Passed    0.40 sec
      Start  8: test-tokenizer-1-baichuan
 8/21 Test  #8: test-tokenizer-1-baichuan ...........   Passed    0.48 sec
      Start  9: test-tokenizer-1-falcon
 9/21 Test  #9: test-tokenizer-1-falcon .............   Passed    1.02 sec
      Start 10: test-tokenizer-1-aquila
10/21 Test #10: test-tokenizer-1-aquila .............   Passed    1.60 sec
      Start 11: test-tokenizer-1-mpt
11/21 Test #11: test-tokenizer-1-mpt ................   Passed    0.80 sec
      Start 12: test-tokenizer-1-stablelm-3b-4e1t
12/21 Test #12: test-tokenizer-1-stablelm-3b-4e1t ...   Passed    0.80 sec
      Start 13: test-tokenizer-1-gpt-neox
13/21 Test #13: test-tokenizer-1-gpt-neox ...........   Passed    0.80 sec
      Start 14: test-tokenizer-1-refact
14/21 Test #14: test-tokenizer-1-refact .............   Passed    0.78 sec
      Start 15: test-tokenizer-1-starcoder
15/21 Test #15: test-tokenizer-1-starcoder ..........   Passed    0.75 sec
      Start 16: test-tokenizer-1-gpt2
16/21 Test #16: test-tokenizer-1-gpt2 ...............   Passed    0.80 sec
      Start 17: test-grammar-parser
17/21 Test #17: test-grammar-parser .................   Passed    0.00 sec
      Start 18: test-llama-grammar
18/21 Test #18: test-llama-grammar ..................   Passed    0.00 sec
      Start 19: test-grad0
19/21 Test #19: test-grad0 ..........................   Passed    2.93 sec
      Start 20: test-backend-ops
20/21 Test #20: test-backend-ops ....................   Passed   32.59 sec
      Start 21: test-rope
21/21 Test #21: test-rope ...........................   Passed    0.05 sec

100% tests passed, 0 tests failed out of 21

Label Time Summary:
main    =  57.99 sec*proc (21 tests)

Total Test time (real) =  58.00 sec

real	0m58.009s
user	1m7.356s
sys	0m9.789s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/embd_bge_small.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model:
2024-03-07 14:57:00 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:00 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.761s
user	0m0.420s
sys	0m0.345s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/embd_bge_small-make.log
+ make -j
[  1%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  5%] Built target build_info
[  5%] Built target ggml
[  6%] Linking C static library libggml_static.a
[  7%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target ggml_static
[  9%] Built target llama
[  9%] Built target gguf
[ 10%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 11%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 11%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 12%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 14%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 15%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 17%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 18%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 21%] Linking CXX executable ../../bin/benchmark
[ 21%] Linking CXX executable ../../bin/quantize
[ 21%] Built target llava
[ 22%] Linking CXX executable ../../bin/quantize-stats
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target common
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Built target quantize
[ 23%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 26%] Built target quantize-stats
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 37%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 38%] Linking CXX executable ../bin/test-sampling
[ 38%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 39%] Linking CXX executable ../bin/test-quantize-fns
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 40%] Linking CXX executable ../bin/test-quantize-perf
[ 41%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 42%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 43%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 44%] Linking CXX executable ../bin/test-chat-template
[ 44%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 44%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 45%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 48%] Linking CXX executable ../bin/test-grammar-parser
[ 48%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 51%] Linking CXX executable ../bin/test-llama-grammar
[ 51%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 53%] Linking CXX executable ../bin/test-backend-ops
[ 54%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 56%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-rope
[ 59%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 60%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 61%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 61%] Linking CXX executable ../bin/test-grad0
[ 62%] Linking CXX executable ../../bin/baby-llama
[ 63%] Linking CXX executable ../bin/test-autorelease
[ 64%] Linking CXX executable ../../bin/beam-search
[ 65%] Linking CXX executable ../../bin/batched
[ 67%] Linking CXX executable ../bin/test-model-load-cancel
[ 66%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 68%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 69%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 69%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 70%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 69%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 70%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 71%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 71%] Built target test-grammar-parser
[ 71%] Built target test-quantize-perf
[ 71%] Built target test-quantize-fns
[ 71%] Linking CXX executable ../../bin/batched-bench
[ 71%] Linking CXX executable ../../bin/finetune
[ 72%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 73%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 73%] Linking CXX executable ../../bin/tokenize
[ 74%] Linking CXX executable ../../bin/infill
[ 75%] Linking CXX executable ../../bin/llava-cli
[ 75%] Built target test-tokenizer-0-falcon
[ 75%] Linking CXX executable ../../bin/llama-bench
[ 76%] Linking CXX executable ../../bin/embedding
[ 77%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 78%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 79%] Linking CXX executable ../../bin/main
[ 79%] Built target test-grad0
[ 79%] Built target test-sampling
[ 79%] Built target test-llama-grammar
[ 79%] Built target test-tokenizer-1-bpe
[ 80%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 81%] Linking CXX executable ../../bin/perplexity
[ 82%] Linking CXX executable ../../bin/parallel
[ 82%] Built target test-chat-template
[ 82%] Built target test-tokenizer-1-llama
[ 83%] Linking CXX executable ../../bin/simple
[ 83%] Built target test-backend-ops
[ 83%] Linking CXX executable ../../bin/save-load-state
[ 83%] Built target test-rope
[ 83%] Built target batched
[ 84%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 83%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 84%] Built target test-tokenizer-0-llama
[ 84%] Linking CXX executable ../../bin/passkey
[ 84%] Built target batched-bench
[ 84%] Built target baby-llama
[ 84%] Built target convert-llama2c-to-ggml
[ 85%] Linking CXX executable ../../bin/speculative
[ 86%] Linking CXX executable ../../bin/lookahead
[ 86%] Built target test-autorelease
[ 87%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 87%] Built target tokenize
[ 88%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 88%] Built target save-load-state
[ 89%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 89%] Built target test-model-load-cancel
[ 89%] Built target parallel
[ 90%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 90%] Built target finetune
[ 90%] Built target beam-search
[ 90%] Built target perplexity
[ 91%] Linking CXX executable ../../bin/lookup
[ 91%] Built target main
[ 91%] Built target infill
[ 92%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 92%] Built target embedding
[ 92%] Built target llava-cli
[ 93%] Linking CXX executable ../../bin/imatrix
[ 94%] Linking CXX executable ../../bin/server
[ 95%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 95%] Built target llama-bench
[ 96%] Linking CXX executable ../../bin/train-text-from-scratch
[ 96%] Built target passkey
[ 97%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 98%] Linking CXX executable ../../bin/vdot
[ 99%] Linking CXX executable ../../bin/export-lora
[ 99%] Built target speculative
[ 99%] Built target simple
[100%] Linking CXX executable ../../bin/q8dot
[100%] Built target lookup
[100%] Built target lookahead
[100%] Built target imatrix
[100%] Built target export-lora
[100%] Built target vdot
[100%] Built target train-text-from-scratch
[100%] Built target server
[100%] Built target q8dot

real	0m1.486s
user	0m5.408s
sys	0m4.566s
+ python3 ../convert-hf-to-gguf.py ../models-mnt/bge-small
/mnt/llama.cpp/venv/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()
Loading model: bge-small
gguf: This GGUF file is for Little Endian only
Set model parameters
Set model tokenizer
fname_tokenizer: ../models-mnt/bge-small
gguf: Setting special token type pad to 0
Exporting model to '../models-mnt/bge-small/ggml-model-f16.gguf'
gguf: loading model part 'pytorch_model.bin'
token_embd.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
position_embd.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
token_types.weight, n_dims = 2, torch.float32 --> <class 'numpy.float32'>
token_embd_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
token_embd_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
Model successfully exported to '../models-mnt/bge-small/ggml-model-f16.gguf'
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 19 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:   74 tensors
llama_model_quantize_internal ============ Strange model: n_attention_wv = 12, n_ffn_down = 24, hparams.n_layer = 12
llama_model_quantize_internal: meta size = 760800 bytes
[   1/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, quantizing to q8_0 .. size =    22.35 MiB ->    11.88 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   2/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f16, size =    0.375 MB
[   3/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   6/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.031 0.046 0.066 0.086 0.108 0.230 0.109 0.088 0.066 0.046 0.031 0.020 0.027 
[   7/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   8/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.046 0.067 0.089 0.107 0.227 0.107 0.087 0.068 0.047 0.031 0.019 0.027 
[   9/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  10/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.018 0.030 0.045 0.066 0.086 0.109 0.237 0.109 0.088 0.065 0.046 0.030 0.018 0.026 
[  11/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.032 0.048 0.066 0.089 0.106 0.228 0.107 0.088 0.066 0.047 0.031 0.019 0.028 
[  13/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  14/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  16/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.030 0.021 0.033 0.049 0.069 0.091 0.110 0.232 0.105 0.084 0.063 0.044 0.028 0.017 0.024 
[  17/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  18/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.026 0.041 0.061 0.087 0.114 0.259 0.115 0.087 0.061 0.041 0.026 0.016 0.025 
[  19/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  20/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.047 0.067 0.089 0.108 0.230 0.108 0.087 0.066 0.046 0.030 0.019 0.026 
[  23/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  24/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.045 0.064 0.088 0.109 0.240 0.108 0.088 0.065 0.046 0.029 0.018 0.026 
[  25/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  26/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.045 0.064 0.087 0.109 0.239 0.109 0.087 0.064 0.045 0.030 0.019 0.027 
[  27/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.090 0.107 0.226 0.106 0.089 0.066 0.047 0.031 0.020 0.027 
[  29/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  30/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  32/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.028 0.019 0.030 0.046 0.066 0.089 0.111 0.241 0.108 0.085 0.062 0.043 0.028 0.017 0.025 
[  33/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  34/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.025 0.039 0.059 0.085 0.116 0.269 0.115 0.086 0.060 0.040 0.025 0.015 0.025 
[  35/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  36/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.031 0.047 0.067 0.089 0.107 0.231 0.107 0.087 0.065 0.046 0.031 0.019 0.027 
[  39/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  40/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.046 0.065 0.088 0.110 0.237 0.109 0.088 0.064 0.045 0.029 0.018 0.027 
[  41/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  42/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.066 0.087 0.109 0.237 0.110 0.087 0.066 0.046 0.029 0.019 0.027 
[  43/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.021 0.032 0.048 0.066 0.087 0.107 0.224 0.104 0.089 0.067 0.049 0.032 0.020 0.027 
[  45/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  46/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  48/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.109 0.240 0.108 0.087 0.064 0.044 0.029 0.018 0.026 
[  49/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  50/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.058 0.085 0.116 0.273 0.116 0.086 0.059 0.039 0.024 0.016 0.025 
[  51/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  52/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.045 0.066 0.088 0.109 0.234 0.108 0.089 0.066 0.046 0.029 0.019 0.027 
[  55/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  56/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.044 0.063 0.087 0.111 0.247 0.114 0.088 0.062 0.043 0.028 0.017 0.026 
[  57/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  58/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.064 0.088 0.110 0.243 0.111 0.088 0.064 0.044 0.029 0.018 0.026 
[  59/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.047 0.068 0.087 0.106 0.225 0.106 0.088 0.068 0.046 0.031 0.020 0.027 
[  61/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  62/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  64/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.239 0.108 0.087 0.065 0.045 0.029 0.018 0.027 
[  65/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  66/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.059 0.086 0.115 0.269 0.115 0.086 0.060 0.040 0.025 0.015 0.025 
[  67/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  68/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.046 0.064 0.088 0.109 0.235 0.110 0.088 0.065 0.045 0.031 0.018 0.027 
[  71/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  72/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.027 0.043 0.064 0.088 0.111 0.245 0.112 0.087 0.064 0.043 0.028 0.017 0.026 
[  73/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  74/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.027 0.042 0.062 0.085 0.113 0.256 0.112 0.087 0.061 0.042 0.027 0.017 0.026 
[  75/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.048 0.067 0.089 0.105 0.226 0.107 0.088 0.066 0.047 0.032 0.020 0.027 
[  77/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  78/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  80/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.018 0.029 0.044 0.063 0.087 0.108 0.242 0.110 0.088 0.065 0.045 0.030 0.019 0.027 
[  81/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  82/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.024 0.038 0.059 0.085 0.116 0.275 0.116 0.086 0.059 0.038 0.024 0.015 0.025 
[  83/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  84/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.066 0.089 0.107 0.233 0.107 0.087 0.066 0.046 0.030 0.019 0.027 
[  87/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  88/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.044 0.064 0.088 0.111 0.240 0.110 0.087 0.064 0.045 0.029 0.018 0.026 
[  89/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  90/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.027 0.040 0.061 0.085 0.112 0.262 0.114 0.086 0.061 0.042 0.027 0.016 0.026 
[  91/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.086 0.105 0.225 0.105 0.089 0.067 0.048 0.032 0.020 0.027 
[  93/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  94/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  96/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.017 0.028 0.042 0.062 0.086 0.109 0.243 0.111 0.089 0.065 0.046 0.030 0.019 0.028 
[  97/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  98/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.040 0.060 0.087 0.115 0.267 0.116 0.086 0.060 0.040 0.025 0.015 0.025 
[  99/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 100/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.046 0.067 0.088 0.106 0.236 0.108 0.087 0.066 0.046 0.030 0.018 0.028 
[ 103/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 104/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.017 0.029 0.044 0.064 0.088 0.110 0.244 0.112 0.087 0.064 0.045 0.028 0.018 0.026 
[ 105/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 106/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.040 0.059 0.085 0.115 0.267 0.114 0.085 0.060 0.041 0.025 0.016 0.025 
[ 107/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.032 0.047 0.067 0.088 0.105 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 109/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 110/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 112/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.018 0.028 0.044 0.064 0.087 0.110 0.240 0.110 0.088 0.065 0.045 0.029 0.019 0.027 
[ 113/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 114/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.017 0.027 0.042 0.062 0.086 0.113 0.255 0.113 0.087 0.062 0.042 0.027 0.017 0.026 
[ 115/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 116/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.047 0.064 0.088 0.110 0.235 0.109 0.089 0.065 0.045 0.029 0.018 0.027 
[ 119/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 120/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.086 0.107 0.236 0.111 0.088 0.065 0.045 0.029 0.019 0.027 
[ 121/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 122/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.041 0.060 0.086 0.113 0.263 0.113 0.086 0.061 0.041 0.027 0.017 0.025 
[ 123/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.021 0.031 0.047 0.067 0.088 0.105 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 125/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 126/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 128/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.088 0.110 0.242 0.109 0.088 0.064 0.045 0.029 0.018 0.027 
[ 129/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 130/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.016 0.027 0.041 0.062 0.087 0.113 0.256 0.113 0.087 0.062 0.042 0.027 0.016 0.025 
[ 131/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 132/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.018 0.028 0.044 0.065 0.088 0.112 0.239 0.111 0.087 0.065 0.044 0.028 0.018 0.026 
[ 135/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 136/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.062 0.089 0.113 0.247 0.113 0.087 0.063 0.042 0.027 0.017 0.026 
[ 137/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 138/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.041 0.059 0.086 0.113 0.265 0.113 0.086 0.061 0.041 0.026 0.016 0.026 
[ 139/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.089 0.104 0.225 0.105 0.087 0.067 0.049 0.032 0.020 0.027 
[ 141/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 142/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 144/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.028 0.019 0.030 0.046 0.066 0.088 0.109 0.238 0.109 0.087 0.064 0.044 0.029 0.018 0.025 
[ 145/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 146/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.017 0.027 0.042 0.062 0.087 0.112 0.253 0.113 0.087 0.063 0.042 0.027 0.017 0.025 
[ 147/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 148/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.044 0.065 0.088 0.108 0.236 0.109 0.087 0.066 0.047 0.030 0.019 0.027 
[ 151/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 152/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.044 0.065 0.088 0.109 0.237 0.111 0.087 0.065 0.045 0.029 0.019 0.026 
[ 153/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 154/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.086 0.110 0.242 0.110 0.087 0.064 0.045 0.029 0.017 0.027 
[ 155/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.021 0.031 0.047 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.031 0.020 0.028 
[ 157/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 158/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 160/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.019 0.030 0.045 0.065 0.087 0.108 0.234 0.110 0.088 0.066 0.046 0.030 0.019 0.027 
[ 161/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 162/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.017 0.028 0.044 0.064 0.088 0.111 0.245 0.112 0.087 0.064 0.043 0.028 0.017 0.026 
[ 163/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 164/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.045 0.065 0.088 0.109 0.233 0.111 0.088 0.065 0.047 0.031 0.019 0.027 
[ 167/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 168/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.046 0.066 0.086 0.108 0.233 0.109 0.088 0.066 0.046 0.030 0.019 0.027 
[ 169/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 170/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.030 0.045 0.065 0.087 0.109 0.244 0.107 0.086 0.064 0.044 0.029 0.019 0.027 
[ 171/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.068 0.088 0.107 0.223 0.105 0.089 0.068 0.047 0.032 0.020 0.027 
[ 173/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 174/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 176/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.067 0.088 0.107 0.228 0.107 0.088 0.066 0.047 0.031 0.019 0.027 
[ 177/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 178/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.060 0.086 0.117 0.267 0.117 0.087 0.060 0.039 0.024 0.015 0.025 
[ 179/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 180/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.047 0.066 0.089 0.108 0.233 0.108 0.089 0.065 0.046 0.030 0.018 0.027 
[ 183/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 184/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.030 0.046 0.066 0.088 0.109 0.233 0.109 0.087 0.066 0.045 0.031 0.019 0.026 
[ 185/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 186/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.025 0.017 0.028 0.043 0.064 0.088 0.111 0.245 0.110 0.087 0.064 0.044 0.027 0.018 0.027 
[ 187/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.068 0.088 0.105 0.225 0.106 0.086 0.067 0.048 0.032 0.020 0.028 
[ 189/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 190/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 192/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.026 0.041 0.061 0.085 0.112 0.257 0.115 0.088 0.063 0.043 0.027 0.017 0.026 
[ 193/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 194/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.021 0.009 0.014 0.023 0.038 0.064 0.117 0.415 0.120 0.067 0.040 0.025 0.016 0.009 0.022 
[ 195/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 196/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_internal: model size  =    63.46 MB
llama_model_quantize_internal: quant size  =    34.00 MB
llama_model_quantize_internal: hist: 0.000 0.026 0.018 0.029 0.045 0.064 0.087 0.109 0.241 0.109 0.087 0.064 0.045 0.029 0.018 0.026 

main: quantize time =   164.42 ms
main:    total time =   164.42 ms
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/embd_bge_small-tg-f16.log
+ ./bin/embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is'
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823425
llama_model_loader: loaded meta data with 19 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:   74 tensors
llm_load_vocab: mismatch in special tokens definition ( 7104/30522 vs 5/30522 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 63.46 MiB (16.03 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: BOS token        = 101 '[CLS]'
llm_load_print_meta: EOS token        = 102 '[SEP]'
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors:        CPU buffer size =    63.46 MiB
.................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU input buffer size   =     2.76 MiB
llama_new_context_with_model:        CPU compute buffer size =    15.25 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
batch_decode: n_tokens = 9, n_seq = 1
embedding 0: -0.043948 -0.019905 0.007679 -0.000829 0.001340 -0.037080 0.109423 0.042604 0.092033 -0.015932 0.006757 -0.035726 -0.017879 0.015073 0.018116 0.015863 -0.011279 0.010438 -0.085219 -0.008459 0.091352 -0.017050 -0.060323 -0.024457 0.027513 0.076071 0.027996 -0.014593 0.017645 -0.033257 -0.037852 -0.019017 0.068697 -0.009816 -0.025023 0.072378 -0.046557 0.011012 -0.050266 0.047687 0.032382 -0.011754 0.022052 0.049622 0.010467 0.005793 -0.028853 0.008927 -0.018501 -0.051455 -0.046050 0.030482 -0.035434 0.054211 -0.069639 0.044265 0.029792 0.046331 0.073421 -0.042582 0.076083 0.038851 -0.181204 0.082459 0.042222 -0.064557 -0.060139 -0.017860 0.006507 0.005879 0.017161 -0.026599 0.064584 0.112597 0.035141 -0.067407 0.027080 -0.067288 -0.033510 -0.033229 0.033268 0.013521 -0.003327 -0.037495 -0.052107 0.055134 -0.001970 -0.038280 0.064414 0.028841 -0.043304 -0.029212 -0.039489 0.036319 0.008369 -0.015466 -0.036581 0.018139 0.028602 0.342829 -0.044470 0.056113 0.017633 -0.020895 -0.066802 0.000144 -0.037907 -0.030064 -0.008545 -0.021591 0.000545 -0.003214 0.003971 0.018929 -0.008575 0.025868 0.049409 0.000093 0.050943 -0.042503 -0.031897 0.023603 0.030698 -0.023147 -0.046246 -0.079287 0.115190 0.046729 0.027832 -0.040754 0.067790 -0.022930 0.010353 -0.032951 -0.018292 0.043841 0.024276 0.052384 0.007479 0.008921 0.011250 -0.074641 -0.065575 -0.026735 -0.041166 -0.023912 0.026693 0.006900 0.027763 0.052883 -0.036665 0.057709 -0.000165 0.031749 -0.019787 -0.022104 0.041051 -0.058917 0.019619 0.043130 0.043586 0.041579 -0.022511 0.027004 -0.021831 0.005441 -0.041290 -0.001254 0.024424 0.002050 0.044355 -0.022742 0.043702 0.064790 0.055440 0.037085 -0.000912 0.046125 0.045794 -0.008465 0.063082 -0.073207 -0.011962 0.032123 0.023942 0.014716 -0.033670 0.001125 -0.015836 -0.019014 0.047902 0.110803 0.028437 0.031342 -0.013276 -0.057501 0.006643 0.005143 -0.012259 -0.051429 -0.000996 -0.017679 -0.019415 -0.040928 0.009226 -0.057942 0.050958 0.052331 -0.009572 -0.040271 -0.014085 -0.024868 -0.017257 0.006307 0.006558 -0.026884 0.015619 0.030752 0.002553 0.023263 -0.022202 -0.098547 -0.051127 -0.278004 -0.014988 -0.061550 -0.027226 0.017645 -0.010944 -0.017099 0.035080 0.047007 -0.015397 0.015227 -0.025482 0.047860 -0.005973 -0.000737 -0.061009 -0.068940 -0.060337 -0.035960 0.043322 -0.055009 0.015035 0.000538 -0.058206 -0.010473 0.012651 0.151494 0.127109 -0.013580 0.041972 -0.025667 0.014009 -0.001022 -0.150459 0.044881 0.005317 -0.036277 -0.029792 -0.020179 -0.034896 0.010231 0.033550 -0.048199 -0.051810 -0.017477 -0.023500 0.047368 0.052055 -0.016799 -0.055456 0.025837 -0.005693 0.010705 0.038675 0.008178 -0.009761 -0.105760 -0.027428 -0.096114 0.025066 -0.011287 0.092358 0.056117 0.003743 0.027790 0.002082 -0.051101 -0.039907 -0.013556 -0.044944 -0.015378 0.002899 -0.043496 -0.077976 0.065217 -0.006878 -0.001661 -0.014632 0.071578 0.023719 -0.037169 0.009142 0.001579 -0.032287 0.015493 0.037889 0.000344 -0.053183 0.021335 -0.039809 0.000031 0.013421 0.019833 -0.057877 0.006499 -0.049542 -0.267865 0.039206 -0.067996 0.038250 -0.012338 0.041514 -0.016151 0.052373 -0.071331 0.011349 0.024730 -0.007237 0.082086 0.028547 -0.021504 0.040524 -0.004574 -0.074605 -0.014740 0.020058 0.002298 0.023143 0.197226 -0.043200 -0.026027 -0.004987 -0.019293 0.074248 0.001697 -0.031930 -0.036569 -0.045063 0.000529 -0.011562 0.018104 -0.029462 -0.008451 0.006409 0.050787 -0.014956 0.006234 0.026086 -0.030832 0.048031 0.114096 -0.040831 -0.011445 0.005431 -0.003609 0.025147 -0.059119 0.013750 -0.010376 0.038700 0.051448 0.035414 0.035035 -0.017020 0.026368 -0.014510 -0.050029 0.003238 0.054132 0.039712 -0.039149 



llama_print_timings:        load time =      39.84 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =      19.01 ms /     9 tokens (    2.11 ms per token,   473.48 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =      85.66 ms /    10 tokens

real	0m0.213s
user	0m0.192s
sys	0m0.092s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/embd_bge_small-tg-q8_0.log
+ ./bin/embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is'
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823425
llama_model_loader: loaded meta data with 20 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 7
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:    1 tensors
llama_model_loader: - type q8_0:   73 tensors
llm_load_vocab: mismatch in special tokens definition ( 7104/30522 vs 5/30522 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 34.00 MiB (8.59 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: BOS token        = 101 '[CLS]'
llm_load_print_meta: EOS token        = 102 '[SEP]'
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors:        CPU buffer size =    34.00 MiB
.................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU input buffer size   =     2.76 MiB
llama_new_context_with_model:        CPU compute buffer size =    15.25 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
batch_decode: n_tokens = 9, n_seq = 1
embedding 0: -0.045086 -0.020533 0.008834 -0.001631 0.001948 -0.037228 0.109266 0.043555 0.092185 -0.014685 0.005921 -0.036643 -0.018726 0.014280 0.017443 0.014272 -0.013004 0.010638 -0.085232 -0.007989 0.092512 -0.017233 -0.062377 -0.025422 0.028211 0.076240 0.027553 -0.015096 0.018058 -0.034108 -0.038266 -0.018102 0.068762 -0.010645 -0.023389 0.072429 -0.046993 0.010413 -0.050858 0.048954 0.033486 -0.012485 0.021953 0.049637 0.010406 0.005353 -0.029006 0.009037 -0.017624 -0.053764 -0.046107 0.030303 -0.034948 0.052517 -0.067822 0.042297 0.030087 0.046410 0.073452 -0.042147 0.075740 0.039397 -0.182057 0.081515 0.043184 -0.065947 -0.059476 -0.017847 0.006043 0.005269 0.018222 -0.027064 0.065357 0.112377 0.034764 -0.067581 0.027599 -0.067655 -0.034121 -0.033629 0.032910 0.015013 -0.004893 -0.037614 -0.051100 0.054468 -0.002068 -0.036659 0.063483 0.029047 -0.043461 -0.029522 -0.039914 0.036821 0.007734 -0.015512 -0.035106 0.018336 0.030439 0.345519 -0.043676 0.056786 0.016800 -0.021693 -0.063539 -0.000501 -0.037672 -0.029484 -0.009365 -0.019986 0.000882 -0.002363 0.003964 0.017889 -0.009724 0.024875 0.048984 -0.000352 0.049977 -0.042866 -0.030493 0.023565 0.030656 -0.023023 -0.043635 -0.079405 0.114337 0.046640 0.025940 -0.041067 0.067403 -0.022976 0.010508 -0.034081 -0.016397 0.044583 0.022204 0.051547 0.007555 0.007145 0.010334 -0.075145 -0.063886 -0.026484 -0.040076 -0.023620 0.027187 0.006225 0.027275 0.052110 -0.038515 0.058517 0.001798 0.032218 -0.018831 -0.021459 0.041985 -0.058365 0.019489 0.042549 0.043162 0.039834 -0.022190 0.028567 -0.023806 0.007164 -0.042015 0.000744 0.023764 0.002387 0.043531 -0.022996 0.043788 0.065429 0.056572 0.037819 0.000223 0.047875 0.045958 -0.009173 0.061044 -0.073118 -0.012190 0.033321 0.023072 0.014268 -0.033638 0.000559 -0.016351 -0.018181 0.048027 0.111118 0.028995 0.031528 -0.011655 -0.056649 0.004815 0.004678 -0.012887 -0.051726 -0.002868 -0.017258 -0.019418 -0.040411 0.010063 -0.058845 0.051489 0.052103 -0.010605 -0.039838 -0.014279 -0.024253 -0.015021 0.005222 0.006321 -0.027308 0.016053 0.030910 0.001239 0.024149 -0.021860 -0.096809 -0.051014 -0.277921 -0.012579 -0.061358 -0.026921 0.016628 -0.010109 -0.015795 0.034897 0.047987 -0.016960 0.014307 -0.024657 0.050360 -0.005470 -0.000172 -0.059462 -0.068246 -0.060515 -0.035180 0.044436 -0.054569 0.014668 -0.001006 -0.058356 -0.010585 0.011839 0.150087 0.125862 -0.013021 0.042346 -0.025612 0.014247 -0.000660 -0.150860 0.043666 0.006102 -0.036332 -0.030678 -0.019208 -0.035215 0.009597 0.034085 -0.049512 -0.052891 -0.015276 -0.024649 0.047915 0.050485 -0.017232 -0.057427 0.024435 -0.006191 0.012461 0.038429 0.007582 -0.008714 -0.106571 -0.027702 -0.097027 0.024599 -0.010958 0.092601 0.055515 0.004029 0.027999 0.002506 -0.050168 -0.039238 -0.013008 -0.045733 -0.014242 0.001397 -0.044086 -0.076614 0.065656 -0.006680 -0.001640 -0.016029 0.070587 0.024421 -0.036107 0.008337 0.001825 -0.033160 0.016393 0.038497 0.000613 -0.051801 0.020952 -0.039061 -0.000344 0.012305 0.020312 -0.057684 0.005251 -0.049951 -0.268833 0.038652 -0.066911 0.037426 -0.012166 0.041357 -0.015915 0.051063 -0.072363 0.013467 0.023933 -0.007385 0.081709 0.028934 -0.021470 0.041611 -0.003145 -0.074470 -0.015183 0.019093 0.002075 0.022787 0.195592 -0.042860 -0.024211 -0.004426 -0.020095 0.074431 0.002549 -0.032432 -0.036801 -0.045078 -0.000543 -0.010305 0.018429 -0.027496 -0.009409 0.006125 0.049799 -0.014567 0.005886 0.026618 -0.031892 0.048965 0.113371 -0.041240 -0.012298 0.005430 -0.002554 0.025291 -0.060279 0.013752 -0.009539 0.037908 0.050656 0.036010 0.036135 -0.017283 0.026363 -0.014852 -0.050117 0.004146 0.054250 0.040210 -0.039692 



llama_print_timings:        load time =      24.23 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =       9.11 ms /     9 tokens (    1.01 ms per token,   987.93 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =      76.25 ms /    10 tokens

real	0m0.188s
user	0m0.171s
sys	0m0.051s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_open_llama_3b_v2
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:06 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json [506/506] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:06 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json [593/593] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:06 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json [330/330] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 14:57:06 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json [137/137] -> "generation_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ head -n 60 models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ path_models=../models-mnt/open-llama/3B-v2
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_QKK_64=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.767s
user	0m0.432s
sys	0m0.339s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-make.log
+ make -j
[  4%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  4%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  5%] Built target ggml
[  5%] Built target build_info
[  6%] Linking C static library libggml_static.a
[  6%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  7%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  8%] Built target ggml_static
[  8%] Built target gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target llama
[ 11%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 12%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 13%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 13%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 14%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 15%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 17%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 18%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/benchmark
[ 21%] Linking CXX executable ../../bin/quantize
[ 22%] Linking CXX executable ../../bin/quantize-stats
[ 22%] Built target llava
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target common
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Built target quantize
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 28%] Built target quantize-stats
[ 29%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 36%] Linking CXX executable ../bin/test-sampling
[ 36%] Linking CXX executable ../bin/test-quantize-perf
[ 37%] Linking CXX executable ../bin/test-chat-template
[ 38%] Linking CXX executable ../bin/test-quantize-fns
[ 40%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 40%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 42%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 44%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 45%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 46%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 56%] Linking CXX executable ../bin/test-backend-ops
[ 53%] Linking CXX executable ../bin/test-grad0
[ 57%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 58%] Linking CXX executable ../bin/test-autorelease
[ 59%] Linking CXX executable ../bin/test-rope
[ 59%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 60%] Linking CXX executable ../bin/test-model-load-cancel
[ 61%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 61%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 62%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 63%] Linking CXX executable ../../bin/beam-search
[ 64%] Linking CXX executable ../../bin/batched
[ 64%] Linking CXX executable ../../bin/batched-bench
[ 65%] Linking CXX executable ../../bin/baby-llama
[ 66%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 67%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 68%] Linking CXX executable ../../bin/embedding
[ 69%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 69%] Built target test-quantize-perf
[ 69%] Built target test-sampling
[ 69%] Built target test-quantize-fns
[ 69%] Built target test-chat-template
[ 70%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 71%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 71%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 72%] Linking CXX executable ../../bin/simple
[ 73%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 73%] Linking CXX executable ../../bin/finetune
[ 74%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 75%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 75%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-bench
[ 76%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 76%] Built target test-tokenizer-1-llama
[ 77%] Linking CXX executable ../../bin/infill
[ 77%] Built target test-grammar-parser
[ 77%] Built target test-grad0
[ 78%] Linking CXX executable ../../bin/llava-cli
[ 79%] Linking CXX executable ../../bin/main
[ 79%] Built target test-tokenizer-0-llama
[ 79%] Linking CXX executable ../../bin/tokenize
[ 79%] Built target test-backend-ops
[ 80%] Linking CXX executable ../../bin/perplexity
[ 79%] Linking CXX executable ../../bin/save-load-state
[ 80%] Built target test-model-load-cancel
[ 80%] Built target test-rope
[ 80%] Built target test-tokenizer-1-bpe
[ 80%] Built target test-tokenizer-0-falcon
[ 80%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 81%] Linking CXX executable ../../bin/parallel
[ 81%] Built target test-autorelease
[ 82%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 82%] Built target convert-llama2c-to-ggml
[ 83%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 84%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 84%] Built target batched
[ 85%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 85%] Built target baby-llama
[ 85%] Built target batched-bench
[ 86%] Built target beam-search
[ 86%] Built target embedding
[ 88%] Linking CXX executable ../../bin/passkey
[ 88%] Linking CXX executable ../../bin/train-text-from-scratch
[ 86%] Linking CXX executable ../../bin/lookup
[ 89%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 90%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 87%] Linking CXX executable ../../bin/speculative
[ 91%] Linking CXX executable ../../bin/lookahead
[ 92%] Linking CXX executable ../../bin/server
[ 92%] Built target simple
[ 92%] Built target llava-cli
[ 92%] Built target perplexity
[ 93%] Linking CXX executable ../../bin/imatrix
[ 94%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 94%] Built target tokenize
[ 94%] Built target llama-bench
[ 95%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 95%] Built target finetune
[ 95%] Built target parallel
[ 96%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 96%] Built target infill
[ 96%] Built target save-load-state
[ 96%] Built target main
[ 97%] Linking CXX executable ../../bin/export-lora
[ 98%] Linking CXX executable ../../bin/vdot
[ 99%] Linking CXX executable ../../bin/q8dot
[ 99%] Built target lookup
[ 99%] Built target speculative
[ 99%] Built target passkey
[ 99%] Built target lookahead
[ 99%] Built target train-text-from-scratch
[ 99%] Built target server
[ 99%] Built target imatrix
[ 99%] Built target export-lora
[ 99%] Built target q8dot
[ 99%] Built target vdot
[100%] Linking CXX executable ../bin/test-llama-grammar
[100%] Built target test-llama-grammar

real	0m52.979s
user	0m56.419s
sys	0m5.408s
+ python3 ../convert.py ../models-mnt/open-llama/3B-v2
Loading model file ../models-mnt/open-llama/3B-v2/pytorch_model.bin
params = Params(n_vocab=32000, n_embd=3200, n_layer=26, n_ctx=2048, n_ff=8640, n_head=32, n_head_kv=32, n_experts=None, n_experts_used=None, f_norm_eps=1e-06, rope_scaling_type=None, f_rope_freq_base=None, f_rope_scale=None, n_orig_ctx=None, rope_finetuned=None, ftype=None, path_model=PosixPath('../models-mnt/open-llama/3B-v2'))
Found vocab files: {'spm': PosixPath('../models-mnt/open-llama/3B-v2/tokenizer.model'), 'bpe': None, 'hfft': None}
Loading vocab file PosixPath('../models-mnt/open-llama/3B-v2/tokenizer.model'), type 'spm'
Vocab info: <SentencePieceVocab with 32000 base tokens and 0 added tokens>
Special vocab info: <SpecialVocab with 0 merges, special tokens {'bos': 1, 'eos': 2, 'pad': 0}, add special tokens {'bos': True, 'eos': False}>
Permuting layer 0
Permuting layer 1
Permuting layer 2
Permuting layer 3
Permuting layer 4
Permuting layer 5
Permuting layer 6
Permuting layer 7
Permuting layer 8
Permuting layer 9
Permuting layer 10
Permuting layer 11
Permuting layer 12
Permuting layer 13
Permuting layer 14
Permuting layer 15
Permuting layer 16
Permuting layer 17
Permuting layer 18
Permuting layer 19
Permuting layer 20
Permuting layer 21
Permuting layer 22
Permuting layer 23
Permuting layer 24
Permuting layer 25
model.embed_tokens.weight                        -> token_embd.weight                        | F16    | [32000, 3200]
model.layers.0.self_attn.q_proj.weight           -> blk.0.attn_q.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.k_proj.weight           -> blk.0.attn_k.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.v_proj.weight           -> blk.0.attn_v.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.o_proj.weight           -> blk.0.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.0.attn_rot_embd
model.layers.0.mlp.gate_proj.weight              -> blk.0.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.0.mlp.down_proj.weight              -> blk.0.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.0.mlp.up_proj.weight                -> blk.0.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.0.input_layernorm.weight            -> blk.0.attn_norm.weight                   | F16    | [3200]
model.layers.0.post_attention_layernorm.weight   -> blk.0.ffn_norm.weight                    | F16    | [3200]
model.layers.1.self_attn.q_proj.weight           -> blk.1.attn_q.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.k_proj.weight           -> blk.1.attn_k.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.v_proj.weight           -> blk.1.attn_v.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.o_proj.weight           -> blk.1.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.1.attn_rot_embd
model.layers.1.mlp.gate_proj.weight              -> blk.1.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.1.mlp.down_proj.weight              -> blk.1.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.1.mlp.up_proj.weight                -> blk.1.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.1.input_layernorm.weight            -> blk.1.attn_norm.weight                   | F16    | [3200]
model.layers.1.post_attention_layernorm.weight   -> blk.1.ffn_norm.weight                    | F16    | [3200]
model.layers.2.self_attn.q_proj.weight           -> blk.2.attn_q.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.k_proj.weight           -> blk.2.attn_k.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.v_proj.weight           -> blk.2.attn_v.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.o_proj.weight           -> blk.2.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.2.attn_rot_embd
model.layers.2.mlp.gate_proj.weight              -> blk.2.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.2.mlp.down_proj.weight              -> blk.2.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.2.mlp.up_proj.weight                -> blk.2.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.2.input_layernorm.weight            -> blk.2.attn_norm.weight                   | F16    | [3200]
model.layers.2.post_attention_layernorm.weight   -> blk.2.ffn_norm.weight                    | F16    | [3200]
model.layers.3.self_attn.q_proj.weight           -> blk.3.attn_q.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.k_proj.weight           -> blk.3.attn_k.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.v_proj.weight           -> blk.3.attn_v.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.o_proj.weight           -> blk.3.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.3.attn_rot_embd
model.layers.3.mlp.gate_proj.weight              -> blk.3.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.3.mlp.down_proj.weight              -> blk.3.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.3.mlp.up_proj.weight                -> blk.3.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.3.input_layernorm.weight            -> blk.3.attn_norm.weight                   | F16    | [3200]
model.layers.3.post_attention_layernorm.weight   -> blk.3.ffn_norm.weight                    | F16    | [3200]
model.layers.4.self_attn.q_proj.weight           -> blk.4.attn_q.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.k_proj.weight           -> blk.4.attn_k.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.v_proj.weight           -> blk.4.attn_v.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.o_proj.weight           -> blk.4.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.4.attn_rot_embd
model.layers.4.mlp.gate_proj.weight              -> blk.4.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.4.mlp.down_proj.weight              -> blk.4.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.4.mlp.up_proj.weight                -> blk.4.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.4.input_layernorm.weight            -> blk.4.attn_norm.weight                   | F16    | [3200]
model.layers.4.post_attention_layernorm.weight   -> blk.4.ffn_norm.weight                    | F16    | [3200]
model.layers.5.self_attn.q_proj.weight           -> blk.5.attn_q.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.k_proj.weight           -> blk.5.attn_k.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.v_proj.weight           -> blk.5.attn_v.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.o_proj.weight           -> blk.5.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.5.attn_rot_embd
model.layers.5.mlp.gate_proj.weight              -> blk.5.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.5.mlp.down_proj.weight              -> blk.5.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.5.mlp.up_proj.weight                -> blk.5.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.5.input_layernorm.weight            -> blk.5.attn_norm.weight                   | F16    | [3200]
model.layers.5.post_attention_layernorm.weight   -> blk.5.ffn_norm.weight                    | F16    | [3200]
model.layers.6.self_attn.q_proj.weight           -> blk.6.attn_q.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.k_proj.weight           -> blk.6.attn_k.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.v_proj.weight           -> blk.6.attn_v.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.o_proj.weight           -> blk.6.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.6.attn_rot_embd
model.layers.6.mlp.gate_proj.weight              -> blk.6.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.6.mlp.down_proj.weight              -> blk.6.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.6.mlp.up_proj.weight                -> blk.6.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.6.input_layernorm.weight            -> blk.6.attn_norm.weight                   | F16    | [3200]
model.layers.6.post_attention_layernorm.weight   -> blk.6.ffn_norm.weight                    | F16    | [3200]
model.layers.7.self_attn.q_proj.weight           -> blk.7.attn_q.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.k_proj.weight           -> blk.7.attn_k.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.v_proj.weight           -> blk.7.attn_v.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.o_proj.weight           -> blk.7.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.7.attn_rot_embd
model.layers.7.mlp.gate_proj.weight              -> blk.7.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.7.mlp.down_proj.weight              -> blk.7.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.7.mlp.up_proj.weight                -> blk.7.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.7.input_layernorm.weight            -> blk.7.attn_norm.weight                   | F16    | [3200]
model.layers.7.post_attention_layernorm.weight   -> blk.7.ffn_norm.weight                    | F16    | [3200]
model.layers.8.self_attn.q_proj.weight           -> blk.8.attn_q.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.k_proj.weight           -> blk.8.attn_k.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.v_proj.weight           -> blk.8.attn_v.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.o_proj.weight           -> blk.8.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.8.attn_rot_embd
model.layers.8.mlp.gate_proj.weight              -> blk.8.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.8.mlp.down_proj.weight              -> blk.8.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.8.mlp.up_proj.weight                -> blk.8.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.8.input_layernorm.weight            -> blk.8.attn_norm.weight                   | F16    | [3200]
model.layers.8.post_attention_layernorm.weight   -> blk.8.ffn_norm.weight                    | F16    | [3200]
model.layers.9.self_attn.q_proj.weight           -> blk.9.attn_q.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.k_proj.weight           -> blk.9.attn_k.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.v_proj.weight           -> blk.9.attn_v.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.o_proj.weight           -> blk.9.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.9.attn_rot_embd
model.layers.9.mlp.gate_proj.weight              -> blk.9.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.9.mlp.down_proj.weight              -> blk.9.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.9.mlp.up_proj.weight                -> blk.9.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.9.input_layernorm.weight            -> blk.9.attn_norm.weight                   | F16    | [3200]
model.layers.9.post_attention_layernorm.weight   -> blk.9.ffn_norm.weight                    | F16    | [3200]
model.layers.10.self_attn.q_proj.weight          -> blk.10.attn_q.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.k_proj.weight          -> blk.10.attn_k.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.v_proj.weight          -> blk.10.attn_v.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.o_proj.weight          -> blk.10.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.10.attn_rot_embd
model.layers.10.mlp.gate_proj.weight             -> blk.10.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.10.mlp.down_proj.weight             -> blk.10.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.10.mlp.up_proj.weight               -> blk.10.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.10.input_layernorm.weight           -> blk.10.attn_norm.weight                  | F16    | [3200]
model.layers.10.post_attention_layernorm.weight  -> blk.10.ffn_norm.weight                   | F16    | [3200]
model.layers.11.self_attn.q_proj.weight          -> blk.11.attn_q.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.k_proj.weight          -> blk.11.attn_k.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.v_proj.weight          -> blk.11.attn_v.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.o_proj.weight          -> blk.11.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.11.attn_rot_embd
model.layers.11.mlp.gate_proj.weight             -> blk.11.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.11.mlp.down_proj.weight             -> blk.11.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.11.mlp.up_proj.weight               -> blk.11.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.11.input_layernorm.weight           -> blk.11.attn_norm.weight                  | F16    | [3200]
model.layers.11.post_attention_layernorm.weight  -> blk.11.ffn_norm.weight                   | F16    | [3200]
model.layers.12.self_attn.q_proj.weight          -> blk.12.attn_q.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.k_proj.weight          -> blk.12.attn_k.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.v_proj.weight          -> blk.12.attn_v.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.o_proj.weight          -> blk.12.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.12.attn_rot_embd
model.layers.12.mlp.gate_proj.weight             -> blk.12.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.12.mlp.down_proj.weight             -> blk.12.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.12.mlp.up_proj.weight               -> blk.12.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.12.input_layernorm.weight           -> blk.12.attn_norm.weight                  | F16    | [3200]
model.layers.12.post_attention_layernorm.weight  -> blk.12.ffn_norm.weight                   | F16    | [3200]
model.layers.13.self_attn.q_proj.weight          -> blk.13.attn_q.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.k_proj.weight          -> blk.13.attn_k.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.v_proj.weight          -> blk.13.attn_v.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.o_proj.weight          -> blk.13.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.13.attn_rot_embd
model.layers.13.mlp.gate_proj.weight             -> blk.13.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.13.mlp.down_proj.weight             -> blk.13.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.13.mlp.up_proj.weight               -> blk.13.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.13.input_layernorm.weight           -> blk.13.attn_norm.weight                  | F16    | [3200]
model.layers.13.post_attention_layernorm.weight  -> blk.13.ffn_norm.weight                   | F16    | [3200]
model.layers.14.self_attn.q_proj.weight          -> blk.14.attn_q.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.k_proj.weight          -> blk.14.attn_k.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.v_proj.weight          -> blk.14.attn_v.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.o_proj.weight          -> blk.14.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.14.attn_rot_embd
model.layers.14.mlp.gate_proj.weight             -> blk.14.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.14.mlp.down_proj.weight             -> blk.14.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.14.mlp.up_proj.weight               -> blk.14.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.14.input_layernorm.weight           -> blk.14.attn_norm.weight                  | F16    | [3200]
model.layers.14.post_attention_layernorm.weight  -> blk.14.ffn_norm.weight                   | F16    | [3200]
model.layers.15.self_attn.q_proj.weight          -> blk.15.attn_q.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.k_proj.weight          -> blk.15.attn_k.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.v_proj.weight          -> blk.15.attn_v.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.o_proj.weight          -> blk.15.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.15.attn_rot_embd
model.layers.15.mlp.gate_proj.weight             -> blk.15.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.15.mlp.down_proj.weight             -> blk.15.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.15.mlp.up_proj.weight               -> blk.15.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.15.input_layernorm.weight           -> blk.15.attn_norm.weight                  | F16    | [3200]
model.layers.15.post_attention_layernorm.weight  -> blk.15.ffn_norm.weight                   | F16    | [3200]
model.layers.16.self_attn.q_proj.weight          -> blk.16.attn_q.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.k_proj.weight          -> blk.16.attn_k.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.v_proj.weight          -> blk.16.attn_v.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.o_proj.weight          -> blk.16.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.16.attn_rot_embd
model.layers.16.mlp.gate_proj.weight             -> blk.16.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.16.mlp.down_proj.weight             -> blk.16.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.16.mlp.up_proj.weight               -> blk.16.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.16.input_layernorm.weight           -> blk.16.attn_norm.weight                  | F16    | [3200]
model.layers.16.post_attention_layernorm.weight  -> blk.16.ffn_norm.weight                   | F16    | [3200]
model.layers.17.self_attn.q_proj.weight          -> blk.17.attn_q.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.k_proj.weight          -> blk.17.attn_k.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.v_proj.weight          -> blk.17.attn_v.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.o_proj.weight          -> blk.17.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.17.attn_rot_embd
model.layers.17.mlp.gate_proj.weight             -> blk.17.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.17.mlp.down_proj.weight             -> blk.17.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.17.mlp.up_proj.weight               -> blk.17.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.17.input_layernorm.weight           -> blk.17.attn_norm.weight                  | F16    | [3200]
model.layers.17.post_attention_layernorm.weight  -> blk.17.ffn_norm.weight                   | F16    | [3200]
model.layers.18.self_attn.q_proj.weight          -> blk.18.attn_q.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.k_proj.weight          -> blk.18.attn_k.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.v_proj.weight          -> blk.18.attn_v.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.o_proj.weight          -> blk.18.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.18.attn_rot_embd
model.layers.18.mlp.gate_proj.weight             -> blk.18.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.18.mlp.down_proj.weight             -> blk.18.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.18.mlp.up_proj.weight               -> blk.18.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.18.input_layernorm.weight           -> blk.18.attn_norm.weight                  | F16    | [3200]
model.layers.18.post_attention_layernorm.weight  -> blk.18.ffn_norm.weight                   | F16    | [3200]
model.layers.19.self_attn.q_proj.weight          -> blk.19.attn_q.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.k_proj.weight          -> blk.19.attn_k.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.v_proj.weight          -> blk.19.attn_v.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.o_proj.weight          -> blk.19.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.19.attn_rot_embd
model.layers.19.mlp.gate_proj.weight             -> blk.19.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.19.mlp.down_proj.weight             -> blk.19.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.19.mlp.up_proj.weight               -> blk.19.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.19.input_layernorm.weight           -> blk.19.attn_norm.weight                  | F16    | [3200]
model.layers.19.post_attention_layernorm.weight  -> blk.19.ffn_norm.weight                   | F16    | [3200]
model.layers.20.self_attn.q_proj.weight          -> blk.20.attn_q.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.k_proj.weight          -> blk.20.attn_k.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.v_proj.weight          -> blk.20.attn_v.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.o_proj.weight          -> blk.20.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.20.attn_rot_embd
model.layers.20.mlp.gate_proj.weight             -> blk.20.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.20.mlp.down_proj.weight             -> blk.20.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.20.mlp.up_proj.weight               -> blk.20.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.20.input_layernorm.weight           -> blk.20.attn_norm.weight                  | F16    | [3200]
model.layers.20.post_attention_layernorm.weight  -> blk.20.ffn_norm.weight                   | F16    | [3200]
model.layers.21.self_attn.q_proj.weight          -> blk.21.attn_q.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.k_proj.weight          -> blk.21.attn_k.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.v_proj.weight          -> blk.21.attn_v.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.o_proj.weight          -> blk.21.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.21.attn_rot_embd
model.layers.21.mlp.gate_proj.weight             -> blk.21.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.21.mlp.down_proj.weight             -> blk.21.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.21.mlp.up_proj.weight               -> blk.21.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.21.input_layernorm.weight           -> blk.21.attn_norm.weight                  | F16    | [3200]
model.layers.21.post_attention_layernorm.weight  -> blk.21.ffn_norm.weight                   | F16    | [3200]
model.layers.22.self_attn.q_proj.weight          -> blk.22.attn_q.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.k_proj.weight          -> blk.22.attn_k.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.v_proj.weight          -> blk.22.attn_v.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.o_proj.weight          -> blk.22.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.22.attn_rot_embd
model.layers.22.mlp.gate_proj.weight             -> blk.22.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.22.mlp.down_proj.weight             -> blk.22.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.22.mlp.up_proj.weight               -> blk.22.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.22.input_layernorm.weight           -> blk.22.attn_norm.weight                  | F16    | [3200]
model.layers.22.post_attention_layernorm.weight  -> blk.22.ffn_norm.weight                   | F16    | [3200]
model.layers.23.self_attn.q_proj.weight          -> blk.23.attn_q.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.k_proj.weight          -> blk.23.attn_k.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.v_proj.weight          -> blk.23.attn_v.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.o_proj.weight          -> blk.23.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.23.attn_rot_embd
model.layers.23.mlp.gate_proj.weight             -> blk.23.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.23.mlp.down_proj.weight             -> blk.23.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.23.mlp.up_proj.weight               -> blk.23.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.23.input_layernorm.weight           -> blk.23.attn_norm.weight                  | F16    | [3200]
model.layers.23.post_attention_layernorm.weight  -> blk.23.ffn_norm.weight                   | F16    | [3200]
model.layers.24.self_attn.q_proj.weight          -> blk.24.attn_q.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.k_proj.weight          -> blk.24.attn_k.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.v_proj.weight          -> blk.24.attn_v.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.o_proj.weight          -> blk.24.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.24.attn_rot_embd
model.layers.24.mlp.gate_proj.weight             -> blk.24.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.24.mlp.down_proj.weight             -> blk.24.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.24.mlp.up_proj.weight               -> blk.24.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.24.input_layernorm.weight           -> blk.24.attn_norm.weight                  | F16    | [3200]
model.layers.24.post_attention_layernorm.weight  -> blk.24.ffn_norm.weight                   | F16    | [3200]
model.layers.25.self_attn.q_proj.weight          -> blk.25.attn_q.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.k_proj.weight          -> blk.25.attn_k.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.v_proj.weight          -> blk.25.attn_v.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.o_proj.weight          -> blk.25.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.25.attn_rot_embd
model.layers.25.mlp.gate_proj.weight             -> blk.25.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.25.mlp.down_proj.weight             -> blk.25.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.25.mlp.up_proj.weight               -> blk.25.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.25.input_layernorm.weight           -> blk.25.attn_norm.weight                  | F16    | [3200]
model.layers.25.post_attention_layernorm.weight  -> blk.25.ffn_norm.weight                   | F16    | [3200]
model.norm.weight                                -> output_norm.weight                       | F16    | [3200]
lm_head.weight                                   -> output.weight                            | F16    | [32000, 3200]
Writing ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf, format 1
Ignoring added_tokens.json since model matches vocab size without it.
gguf: This GGUF file is for Little Endian only
gguf: Setting special token type bos to 1
gguf: Setting special token type eos to 2
gguf: Setting special token type pad to 0
gguf: Setting add_bos_token to True
gguf: Setting add_eos_token to False
[  1/237] Writing tensor token_embd.weight                      | size  32000 x   3200  | type F16  | T+   0
[  2/237] Writing tensor blk.0.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[  3/237] Writing tensor blk.0.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[  4/237] Writing tensor blk.0.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[  5/237] Writing tensor blk.0.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[  6/237] Writing tensor blk.0.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[  7/237] Writing tensor blk.0.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[  8/237] Writing tensor blk.0.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[  9/237] Writing tensor blk.0.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 10/237] Writing tensor blk.0.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 11/237] Writing tensor blk.1.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 12/237] Writing tensor blk.1.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 13/237] Writing tensor blk.1.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 14/237] Writing tensor blk.1.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 15/237] Writing tensor blk.1.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[ 16/237] Writing tensor blk.1.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[ 17/237] Writing tensor blk.1.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[ 18/237] Writing tensor blk.1.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 19/237] Writing tensor blk.1.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 20/237] Writing tensor blk.2.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 21/237] Writing tensor blk.2.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 22/237] Writing tensor blk.2.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 23/237] Writing tensor blk.2.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 24/237] Writing tensor blk.2.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[ 25/237] Writing tensor blk.2.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[ 26/237] Writing tensor blk.2.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[ 27/237] Writing tensor blk.2.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 28/237] Writing tensor blk.2.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 29/237] Writing tensor blk.3.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 30/237] Writing tensor blk.3.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 31/237] Writing tensor blk.3.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 32/237] Writing tensor blk.3.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 33/237] Writing tensor blk.3.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 34/237] Writing tensor blk.3.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 35/237] Writing tensor blk.3.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 36/237] Writing tensor blk.3.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 37/237] Writing tensor blk.3.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 38/237] Writing tensor blk.4.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 39/237] Writing tensor blk.4.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 40/237] Writing tensor blk.4.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 41/237] Writing tensor blk.4.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 42/237] Writing tensor blk.4.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 43/237] Writing tensor blk.4.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 44/237] Writing tensor blk.4.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 45/237] Writing tensor blk.4.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 46/237] Writing tensor blk.4.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 47/237] Writing tensor blk.5.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 48/237] Writing tensor blk.5.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 49/237] Writing tensor blk.5.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 50/237] Writing tensor blk.5.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 51/237] Writing tensor blk.5.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 52/237] Writing tensor blk.5.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 53/237] Writing tensor blk.5.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 54/237] Writing tensor blk.5.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 55/237] Writing tensor blk.5.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 56/237] Writing tensor blk.6.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 57/237] Writing tensor blk.6.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 58/237] Writing tensor blk.6.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 59/237] Writing tensor blk.6.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 60/237] Writing tensor blk.6.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 61/237] Writing tensor blk.6.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 62/237] Writing tensor blk.6.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 63/237] Writing tensor blk.6.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 64/237] Writing tensor blk.6.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 65/237] Writing tensor blk.7.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 66/237] Writing tensor blk.7.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 67/237] Writing tensor blk.7.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 68/237] Writing tensor blk.7.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 69/237] Writing tensor blk.7.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 70/237] Writing tensor blk.7.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 71/237] Writing tensor blk.7.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 72/237] Writing tensor blk.7.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 73/237] Writing tensor blk.7.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 74/237] Writing tensor blk.8.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 75/237] Writing tensor blk.8.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 76/237] Writing tensor blk.8.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 77/237] Writing tensor blk.8.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 78/237] Writing tensor blk.8.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 79/237] Writing tensor blk.8.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 80/237] Writing tensor blk.8.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 81/237] Writing tensor blk.8.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 82/237] Writing tensor blk.8.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 83/237] Writing tensor blk.9.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 84/237] Writing tensor blk.9.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 85/237] Writing tensor blk.9.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 86/237] Writing tensor blk.9.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 87/237] Writing tensor blk.9.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 88/237] Writing tensor blk.9.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 89/237] Writing tensor blk.9.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   2
[ 90/237] Writing tensor blk.9.attn_norm.weight                 | size   3200           | type F32  | T+   2
[ 91/237] Writing tensor blk.9.ffn_norm.weight                  | size   3200           | type F32  | T+   2
[ 92/237] Writing tensor blk.10.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 93/237] Writing tensor blk.10.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 94/237] Writing tensor blk.10.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 95/237] Writing tensor blk.10.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[ 96/237] Writing tensor blk.10.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[ 97/237] Writing tensor blk.10.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[ 98/237] Writing tensor blk.10.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[ 99/237] Writing tensor blk.10.attn_norm.weight                | size   3200           | type F32  | T+   2
[100/237] Writing tensor blk.10.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[101/237] Writing tensor blk.11.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[102/237] Writing tensor blk.11.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[103/237] Writing tensor blk.11.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[104/237] Writing tensor blk.11.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[105/237] Writing tensor blk.11.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[106/237] Writing tensor blk.11.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[107/237] Writing tensor blk.11.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[108/237] Writing tensor blk.11.attn_norm.weight                | size   3200           | type F32  | T+   2
[109/237] Writing tensor blk.11.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[110/237] Writing tensor blk.12.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[111/237] Writing tensor blk.12.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[112/237] Writing tensor blk.12.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[113/237] Writing tensor blk.12.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[114/237] Writing tensor blk.12.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[115/237] Writing tensor blk.12.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[116/237] Writing tensor blk.12.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[117/237] Writing tensor blk.12.attn_norm.weight                | size   3200           | type F32  | T+   2
[118/237] Writing tensor blk.12.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[119/237] Writing tensor blk.13.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[120/237] Writing tensor blk.13.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[121/237] Writing tensor blk.13.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[122/237] Writing tensor blk.13.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[123/237] Writing tensor blk.13.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[124/237] Writing tensor blk.13.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[125/237] Writing tensor blk.13.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[126/237] Writing tensor blk.13.attn_norm.weight                | size   3200           | type F32  | T+   2
[127/237] Writing tensor blk.13.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[128/237] Writing tensor blk.14.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[129/237] Writing tensor blk.14.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[130/237] Writing tensor blk.14.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[131/237] Writing tensor blk.14.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[132/237] Writing tensor blk.14.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[133/237] Writing tensor blk.14.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[134/237] Writing tensor blk.14.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[135/237] Writing tensor blk.14.attn_norm.weight                | size   3200           | type F32  | T+   2
[136/237] Writing tensor blk.14.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[137/237] Writing tensor blk.15.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[138/237] Writing tensor blk.15.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[139/237] Writing tensor blk.15.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[140/237] Writing tensor blk.15.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[141/237] Writing tensor blk.15.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[142/237] Writing tensor blk.15.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[143/237] Writing tensor blk.15.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[144/237] Writing tensor blk.15.attn_norm.weight                | size   3200           | type F32  | T+   3
[145/237] Writing tensor blk.15.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[146/237] Writing tensor blk.16.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[147/237] Writing tensor blk.16.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[148/237] Writing tensor blk.16.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[149/237] Writing tensor blk.16.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[150/237] Writing tensor blk.16.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[151/237] Writing tensor blk.16.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[152/237] Writing tensor blk.16.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[153/237] Writing tensor blk.16.attn_norm.weight                | size   3200           | type F32  | T+   3
[154/237] Writing tensor blk.16.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[155/237] Writing tensor blk.17.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[156/237] Writing tensor blk.17.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[157/237] Writing tensor blk.17.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[158/237] Writing tensor blk.17.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[159/237] Writing tensor blk.17.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[160/237] Writing tensor blk.17.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[161/237] Writing tensor blk.17.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[162/237] Writing tensor blk.17.attn_norm.weight                | size   3200           | type F32  | T+   3
[163/237] Writing tensor blk.17.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[164/237] Writing tensor blk.18.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[165/237] Writing tensor blk.18.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[166/237] Writing tensor blk.18.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[167/237] Writing tensor blk.18.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[168/237] Writing tensor blk.18.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[169/237] Writing tensor blk.18.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[170/237] Writing tensor blk.18.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[171/237] Writing tensor blk.18.attn_norm.weight                | size   3200           | type F32  | T+   3
[172/237] Writing tensor blk.18.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[173/237] Writing tensor blk.19.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[174/237] Writing tensor blk.19.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[175/237] Writing tensor blk.19.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[176/237] Writing tensor blk.19.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[177/237] Writing tensor blk.19.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[178/237] Writing tensor blk.19.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[179/237] Writing tensor blk.19.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[180/237] Writing tensor blk.19.attn_norm.weight                | size   3200           | type F32  | T+   3
[181/237] Writing tensor blk.19.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[182/237] Writing tensor blk.20.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[183/237] Writing tensor blk.20.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[184/237] Writing tensor blk.20.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[185/237] Writing tensor blk.20.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[186/237] Writing tensor blk.20.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[187/237] Writing tensor blk.20.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[188/237] Writing tensor blk.20.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[189/237] Writing tensor blk.20.attn_norm.weight                | size   3200           | type F32  | T+   3
[190/237] Writing tensor blk.20.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[191/237] Writing tensor blk.21.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[192/237] Writing tensor blk.21.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[193/237] Writing tensor blk.21.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[194/237] Writing tensor blk.21.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[195/237] Writing tensor blk.21.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[196/237] Writing tensor blk.21.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[197/237] Writing tensor blk.21.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[198/237] Writing tensor blk.21.attn_norm.weight                | size   3200           | type F32  | T+   3
[199/237] Writing tensor blk.21.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[200/237] Writing tensor blk.22.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[201/237] Writing tensor blk.22.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[202/237] Writing tensor blk.22.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[203/237] Writing tensor blk.22.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[204/237] Writing tensor blk.22.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[205/237] Writing tensor blk.22.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[206/237] Writing tensor blk.22.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[207/237] Writing tensor blk.22.attn_norm.weight                | size   3200           | type F32  | T+   4
[208/237] Writing tensor blk.22.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[209/237] Writing tensor blk.23.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[210/237] Writing tensor blk.23.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[211/237] Writing tensor blk.23.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[212/237] Writing tensor blk.23.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[213/237] Writing tensor blk.23.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[214/237] Writing tensor blk.23.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[215/237] Writing tensor blk.23.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[216/237] Writing tensor blk.23.attn_norm.weight                | size   3200           | type F32  | T+   4
[217/237] Writing tensor blk.23.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[218/237] Writing tensor blk.24.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[219/237] Writing tensor blk.24.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[220/237] Writing tensor blk.24.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[221/237] Writing tensor blk.24.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[222/237] Writing tensor blk.24.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[223/237] Writing tensor blk.24.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[224/237] Writing tensor blk.24.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[225/237] Writing tensor blk.24.attn_norm.weight                | size   3200           | type F32  | T+   4
[226/237] Writing tensor blk.24.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[227/237] Writing tensor blk.25.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[228/237] Writing tensor blk.25.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[229/237] Writing tensor blk.25.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[230/237] Writing tensor blk.25.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[231/237] Writing tensor blk.25.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[232/237] Writing tensor blk.25.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[233/237] Writing tensor blk.25.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[234/237] Writing tensor blk.25.attn_norm.weight                | size   3200           | type F32  | T+   4
[235/237] Writing tensor blk.25.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[236/237] Writing tensor output_norm.weight                     | size   3200           | type F32  | T+   4
[237/237] Writing tensor output.weight                          | size  32000 x   3200  | type F16  | T+   4
Wrote ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf
+ model_f16=../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf
+ wiki_test_60=../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf q8_0
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q8_0 .. size =   195.31 MiB ->   103.76 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.018 0.028 0.044 0.063 0.087 0.110 0.246 0.110 0.087 0.063 0.044 0.028 0.018 0.026 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.025 0.017 0.027 0.042 0.062 0.087 0.113 0.255 0.112 0.087 0.062 0.042 0.027 0.017 0.025 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.087 0.108 0.238 0.108 0.087 0.065 0.046 0.030 0.019 0.027 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.063 0.088 0.111 0.246 0.111 0.088 0.063 0.044 0.028 0.017 0.026 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.028 0.020 0.032 0.049 0.067 0.088 0.105 0.223 0.105 0.088 0.067 0.049 0.032 0.020 0.028 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.028 0.020 0.032 0.049 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.107 0.229 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.031 0.047 0.066 0.088 0.107 0.230 0.107 0.088 0.066 0.047 0.031 0.019 0.027 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.234 0.108 0.088 0.066 0.046 0.030 0.019 0.027 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.088 0.111 0.242 0.110 0.088 0.064 0.044 0.029 0.018 0.026 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.228 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.087 0.067 0.048 0.032 0.020 0.027 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.087 0.106 0.228 0.106 0.088 0.066 0.048 0.032 0.020 0.027 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.087 0.106 0.230 0.106 0.087 0.066 0.047 0.031 0.020 0.027 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.087 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.229 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.229 0.106 0.087 0.066 0.048 0.031 0.020 0.027 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.087 0.066 0.047 0.031 0.020 0.027 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.066 0.048 0.032 0.020 0.027 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.105 0.088 0.066 0.048 0.032 0.020 0.027 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.228 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.067 0.047 0.031 0.020 0.027 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.087 0.106 0.229 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.233 0.108 0.088 0.066 0.046 0.030 0.019 0.027 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q8_0 .. size =   195.31 MiB ->   103.76 MiB | hist: 0.000 0.027 0.020 0.033 0.049 0.068 0.088 0.103 0.217 0.104 0.088 0.069 0.050 0.033 0.021 0.028 
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  3472.45 MB
llama_model_quantize_internal: hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 

main: quantize time =  9490.17 ms
main:    total time =  9490.17 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf q4_0
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_0 .. size =   195.31 MiB ->    54.93 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.023 0.035 0.053 0.074 0.098 0.119 0.129 0.119 0.098 0.074 0.053 0.035 0.023 0.019 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.013 0.021 0.034 0.051 0.073 0.099 0.122 0.134 0.123 0.099 0.073 0.051 0.033 0.021 0.017 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.024 0.037 0.054 0.075 0.097 0.115 0.125 0.115 0.096 0.075 0.054 0.037 0.024 0.020 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.022 0.035 0.052 0.074 0.099 0.120 0.128 0.119 0.099 0.075 0.052 0.035 0.022 0.018 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.026 0.040 0.057 0.077 0.096 0.110 0.115 0.110 0.096 0.077 0.057 0.040 0.026 0.021 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.026 0.039 0.057 0.077 0.096 0.110 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.119 0.112 0.097 0.076 0.056 0.038 0.025 0.020 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.113 0.120 0.113 0.097 0.076 0.056 0.038 0.024 0.020 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.024 0.037 0.055 0.076 0.097 0.114 0.122 0.114 0.097 0.076 0.055 0.037 0.024 0.020 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.023 0.035 0.053 0.075 0.098 0.118 0.126 0.118 0.098 0.075 0.053 0.035 0.023 0.019 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.076 0.056 0.039 0.025 0.021 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.076 0.056 0.039 0.025 0.021 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.118 0.112 0.097 0.076 0.056 0.039 0.025 0.021 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.112 0.096 0.077 0.057 0.039 0.025 0.021 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.120 0.112 0.096 0.076 0.056 0.038 0.025 0.020 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.110 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.096 0.112 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.038 0.025 0.021 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.057 0.039 0.025 0.021 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.096 0.077 0.057 0.039 0.025 0.021 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.097 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.077 0.056 0.038 0.025 0.021 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.076 0.056 0.038 0.025 0.021 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.015 0.024 0.037 0.055 0.076 0.097 0.114 0.121 0.114 0.098 0.076 0.055 0.037 0.024 0.020 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1866.13 MB
llama_model_quantize_internal: hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 

main: quantize time =  6691.40 ms
main:    total time =  6691.40 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf q4_1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_1 .. size =   195.31 MiB ->    61.04 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.068 0.051 0.037 0.025 0.040 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.037 0.052 0.068 0.083 0.095 0.101 0.102 0.095 0.083 0.068 0.052 0.037 0.024 0.040 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.036 0.050 0.066 0.083 0.097 0.105 0.105 0.097 0.082 0.066 0.050 0.036 0.024 0.040 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.035 0.050 0.067 0.083 0.097 0.104 0.104 0.097 0.083 0.067 0.050 0.036 0.024 0.040 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.101 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.050 0.067 0.083 0.096 0.104 0.104 0.096 0.083 0.067 0.050 0.036 0.024 0.040 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.035 0.050 0.067 0.083 0.097 0.104 0.104 0.097 0.083 0.067 0.050 0.036 0.024 0.040 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.026 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.026 0.040 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.095 0.083 0.067 0.052 0.037 0.025 0.040 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.026 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.026 0.040 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.094 0.083 0.067 0.051 0.037 0.025 0.040 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.102 0.101 0.095 0.083 0.067 0.052 0.037 0.025 0.040 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.101 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.068 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.038 0.025 0.040 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.025 0.040 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.025 0.040 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.101 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.052 0.037 0.025 0.040 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.024 0.036 0.051 0.067 0.083 0.096 0.103 0.103 0.096 0.083 0.067 0.050 0.036 0.025 0.040 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2064.25 MB
llama_model_quantize_internal: hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 

main: quantize time =  7295.98 ms
main:    total time =  7295.98 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf q5_0
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_0 .. size =   195.31 MiB ->    67.14 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.016 0.025 0.039 0.058 0.080 0.103 0.123 0.128 0.114 0.092 0.069 0.048 0.032 0.020 0.014 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.038 0.015 0.024 0.037 0.056 0.079 0.105 0.127 0.133 0.117 0.092 0.067 0.046 0.030 0.019 0.013 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.027 0.041 0.059 0.080 0.102 0.119 0.124 0.111 0.091 0.070 0.050 0.033 0.021 0.016 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.015 0.025 0.039 0.057 0.081 0.105 0.123 0.128 0.115 0.093 0.069 0.047 0.031 0.020 0.014 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.044 0.062 0.082 0.100 0.112 0.115 0.107 0.092 0.072 0.052 0.036 0.023 0.017 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.036 0.023 0.016 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.034 0.022 0.016 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.028 0.042 0.061 0.082 0.102 0.116 0.119 0.110 0.092 0.071 0.051 0.034 0.022 0.016 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.027 0.041 0.060 0.081 0.102 0.117 0.121 0.111 0.092 0.071 0.050 0.034 0.021 0.016 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.016 0.026 0.039 0.058 0.081 0.104 0.122 0.126 0.114 0.093 0.069 0.048 0.032 0.020 0.015 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.100 0.113 0.115 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.114 0.118 0.108 0.091 0.072 0.052 0.035 0.022 0.016 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.081 0.101 0.115 0.119 0.109 0.091 0.071 0.051 0.035 0.022 0.016 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.119 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.091 0.071 0.051 0.035 0.022 0.016 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.081 0.101 0.115 0.119 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.091 0.071 0.052 0.035 0.022 0.016 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.100 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.100 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.091 0.072 0.052 0.035 0.022 0.016 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.039 0.017 0.027 0.041 0.060 0.081 0.102 0.117 0.120 0.111 0.092 0.071 0.050 0.034 0.021 0.016 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2262.37 MB
llama_model_quantize_internal: hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 

main: quantize time =  7740.52 ms
main:    total time =  7740.52 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf q5_1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_1 .. size =   195.31 MiB ->    73.24 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.044 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.094 0.102 0.102 0.094 0.081 0.066 0.050 0.037 0.026 0.045 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.044 0.025 0.037 0.051 0.066 0.082 0.094 0.101 0.101 0.094 0.082 0.066 0.051 0.037 0.025 0.044 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.094 0.100 0.101 0.093 0.081 0.066 0.051 0.037 0.026 0.045 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.044 0.025 0.037 0.051 0.066 0.082 0.094 0.101 0.101 0.094 0.082 0.066 0.051 0.037 0.025 0.044 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.039 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.051 0.038 0.026 0.045 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.091 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.093 0.100 0.100 0.093 0.081 0.066 0.051 0.037 0.026 0.045 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2460.49 MB
llama_model_quantize_internal: hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 

main: quantize time =  8443.70 ms
main:    total time =  8443.70 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf q2_k
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q2_K .. size =   195.31 MiB ->    36.62 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1346.35 MB

main: quantize time = 25578.52 ms
main:    total time = 25578.52 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf q3_k
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q3_K .. size =   195.31 MiB ->    42.72 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1662.08 MB

main: quantize time = 23154.37 ms
main:    total time = 23154.37 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf q4_k
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_K .. size =   195.31 MiB ->    57.98 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2082.62 MB

main: quantize time = 40735.76 ms
main:    total time = 40735.76 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf q5_k
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_K .. size =   195.31 MiB ->    70.19 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2420.14 MB

main: quantize time = 27539.76 ms
main:    total time = 27539.76 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf q6_k
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2757.67 MB

main: quantize time = 26748.54 ms
main:    total time = 26748.54 ms
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love with everything you have and then some more!
It’s not easy, but it should be everyones goal in this lifetime because that means your soul has a purpose on Earth or at least deserves an adventure; especially if we are given so much freedom as humans do today (even though many still
llama_print_timings:        load time =    3229.08 ms
llama_print_timings:      sample time =      11.82 ms /    64 runs   (    0.18 ms per token,  5414.09 tokens per second)
llama_print_timings: prompt eval time =    2352.34 ms /     8 tokens (  294.04 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =   19722.41 ms /    63 runs   (  313.05 ms per token,     3.19 tokens per second)
llama_print_timings:       total time =   22098.54 ms /    71 tokens
Log end

real	0m25.614s
user	1m30.504s
sys	0m3.025s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love unconditionally, without expectations and with a deep sense of gratitude for what you have been given on this day in your life; every single one that God has created so far!
To be able to walk down from childhood years into adulthood feeling complete contentment about yourself as well as the world
llama_print_timings:        load time =    1600.28 ms
llama_print_timings:      sample time =      11.88 ms /    64 runs   (    0.19 ms per token,  5385.39 tokens per second)
llama_print_timings: prompt eval time =     925.29 ms /     8 tokens (  115.66 ms per token,     8.65 tokens per second)
llama_print_timings:        eval time =    8389.67 ms /    63 runs   (  133.17 ms per token,     7.51 tokens per second)
llama_print_timings:       total time =    9339.02 ms /    71 tokens
Log end

real	0m11.218s
user	0m38.042s
sys	0m1.738s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to experience all that this world has in store for us. To take risks, and make mistakes so we can grow as people who have been given a chance on earth with another opportunity at life after death comes knocking your door….
I love living here because there are no boundaries or limitations when it come s to the
llama_print_timings:        load time =    1013.28 ms
llama_print_timings:      sample time =      11.76 ms /    64 runs   (    0.18 ms per token,  5444.49 tokens per second)
llama_print_timings: prompt eval time =     965.26 ms /     8 tokens (  120.66 ms per token,     8.29 tokens per second)
llama_print_timings:        eval time =    7910.93 ms /    63 runs   (  125.57 ms per token,     7.96 tokens per second)
llama_print_timings:       total time =    8899.16 ms /    71 tokens
Log end

real	0m10.103s
user	0m36.278s
sys	0m1.064s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 3
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.02 GiB (5.05 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2064.25 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to make a difference, and that all people are created equal. My goal in this class will be for us to figure out how we can help each other as well as our community improve by doing what you love best: writing stories!
Mission Statement 2016-present day; I am the proud
llama_print_timings:        load time =    1024.88 ms
llama_print_timings:      sample time =      11.65 ms /    64 runs   (    0.18 ms per token,  5493.56 tokens per second)
llama_print_timings: prompt eval time =     920.43 ms /     8 tokens (  115.05 ms per token,     8.69 tokens per second)
llama_print_timings:        eval time =    7692.28 ms /    63 runs   (  122.10 ms per token,     8.19 tokens per second)
llama_print_timings:       total time =    8635.65 ms /    71 tokens
Log end

real	0m9.859s
user	0m35.213s
sys	0m1.076s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 8
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.21 GiB (5.54 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2262.37 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find and do your calling.
If you are not sure what that means, or if it’s a myth about how we all know who we were meant for in this world – then keep reading… because once upon an elvish time (I can see my family rolling their eyes at me) I was
llama_print_timings:        load time =    1250.76 ms
llama_print_timings:      sample time =      11.74 ms /    64 runs   (    0.18 ms per token,  5452.38 tokens per second)
llama_print_timings: prompt eval time =    1276.48 ms /     8 tokens (  159.56 ms per token,     6.27 tokens per second)
llama_print_timings:        eval time =   10497.74 ms /    63 runs   (  166.63 ms per token,     6.00 tokens per second)
llama_print_timings:       total time =   11797.53 ms /    71 tokens
Log end

real	0m13.264s
user	0m48.143s
sys	0m1.303s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 9
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.40 GiB (6.02 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2460.49 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find joy and share it with others.
I am a writer, photographer & graphic designer who loves adventure and getting lost in nature. My main focus for my personal work has been capturing moments through travel photography from around Asia: Singapore, Malaysia, Hong Kong, Thailand (Bangkok), Bali, Vietnam,
llama_print_timings:        load time =    1244.25 ms
llama_print_timings:      sample time =      12.26 ms /    64 runs   (    0.19 ms per token,  5219.80 tokens per second)
llama_print_timings: prompt eval time =    1243.52 ms /     8 tokens (  155.44 ms per token,     6.43 tokens per second)
llama_print_timings:        eval time =   10559.45 ms /    63 runs   (  167.61 ms per token,     5.97 tokens per second)
llama_print_timings:       total time =   11825.98 ms /    71 tokens
Log end

real	0m13.289s
user	0m48.343s
sys	0m1.201s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 10
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q2_K:  105 tensors
llama_model_loader: - type q3_K:   78 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.31 GiB (3.30 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1346.35 MiB
..............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to make it happen and not just for you but also with your children.
I am a 21st century woman, an urbanite who loves going out in nature even if only by walking up my neighbourhood hillock or taking public transport instead of driving around town on weekends! This blog aims at helping women like
llama_print_timings:        load time =     870.24 ms
llama_print_timings:      sample time =      12.12 ms /    64 runs   (    0.19 ms per token,  5282.71 tokens per second)
llama_print_timings: prompt eval time =    1211.15 ms /     8 tokens (  151.39 ms per token,     6.61 tokens per second)
llama_print_timings:        eval time =    9828.76 ms /    63 runs   (  156.01 ms per token,     6.41 tokens per second)
llama_print_timings:       total time =   11064.09 ms /    71 tokens
Log end

real	0m12.091s
user	0m44.986s
sys	0m1.017s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 12
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q3_K:  105 tensors
llama_model_loader: - type q4_K:   75 tensors
llama_model_loader: - type q5_K:    3 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.62 GiB (4.07 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1662.08 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to help others, but it’s so hard when you have a kid with autism.
I was asked what advice would I give my younger self and this came out – “It will get better!” This may be cliche in hindsight (and also very vague), because there are many different ways that things could
llama_print_timings:        load time =     981.76 ms
llama_print_timings:      sample time =      12.04 ms /    64 runs   (    0.19 ms per token,  5315.61 tokens per second)
llama_print_timings: prompt eval time =    1142.98 ms /     8 tokens (  142.87 ms per token,     7.00 tokens per second)
llama_print_timings:        eval time =    9372.37 ms /    63 runs   (  148.77 ms per token,     6.72 tokens per second)
llama_print_timings:       total time =   10539.68 ms /    71 tokens
Log end

real	0m11.698s
user	0m42.818s
sys	0m1.176s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 15
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.03 GiB (5.10 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2082.62 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love, live and serve.
I am a wife who loves my husband with all her heart! We are best friends…we have been together since we were 14 years old and married for almost ten years now!!! He supports me in every area; he’s an awesome cook (that I don’
llama_print_timings:        load time =    1103.31 ms
llama_print_timings:      sample time =      11.95 ms /    64 runs   (    0.19 ms per token,  5355.20 tokens per second)
llama_print_timings: prompt eval time =    1014.85 ms /     8 tokens (  126.86 ms per token,     7.88 tokens per second)
llama_print_timings:        eval time =    8390.08 ms /    63 runs   (  133.18 ms per token,     7.51 tokens per second)
llama_print_timings:       total time =    9428.23 ms /    71 tokens
Log end

real	0m10.732s
user	0m38.226s
sys	0m1.372s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.36 GiB (5.92 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2420.14 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find and follow your bliss.
Monday, November 25,: #143697) | Contact Support
Please refer to our Terms of Use for further information regarding our privacy policy.
- Type in an item number or a part name (i.e., "A0
llama_print_timings:        load time =    1324.59 ms
llama_print_timings:      sample time =      12.34 ms /    64 runs   (    0.19 ms per token,  5188.07 tokens per second)
llama_print_timings: prompt eval time =    1379.09 ms /     8 tokens (  172.39 ms per token,     5.80 tokens per second)
llama_print_timings:        eval time =   11193.52 ms /    63 runs   (  177.67 ms per token,     5.63 tokens per second)
llama_print_timings:       total time =   12596.94 ms /    71 tokens
Log end

real	0m14.138s
user	0m51.345s
sys	0m1.436s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 18
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q6_K:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.69 GiB (6.75 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2757.67 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love with everything you have and then some more!
My name's Alexandra, but my friends just call me Lexi or L.E.! :3 My nickname came from one day when in school everyone had trouble saying "Lex-" so they all started calling me that instead of
llama_print_timings:        load time =    1454.47 ms
llama_print_timings:      sample time =      11.90 ms /    64 runs   (    0.19 ms per token,  5377.70 tokens per second)
llama_print_timings: prompt eval time =    1412.94 ms /     8 tokens (  176.62 ms per token,     5.66 tokens per second)
llama_print_timings:        eval time =   11520.93 ms /    63 runs   (  182.87 ms per token,     5.47 tokens per second)
llama_print_timings:       total time =   12957.18 ms /    71 tokens
Log end

real	0m14.649s
user	0m52.779s
sys	0m1.627s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823824
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.86 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.58 seconds per pass - ETA 0.62 minutes
[1]4.2442,
llama_print_timings:        load time =    3138.96 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37580.69 ms /   128 tokens (  293.60 ms per token,     3.41 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37592.24 ms /   129 tokens

Final estimate: PPL = 4.2442 +/- 1.01574

real	0m41.010s
user	2m32.608s
sys	0m2.949s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823865
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.589 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.76 seconds per pass - ETA 0.23 minutes
[1]4.2615,
llama_print_timings:        load time =    1500.59 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14761.01 ms /   128 tokens (  115.32 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14772.20 ms /   129 tokens

Final estimate: PPL = 4.2615 +/- 1.02325

real	0m16.416s
user	0m59.757s
sys	0m1.669s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823881
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.905 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 15.48 seconds per pass - ETA 0.25 minutes
[1]4.1750,
llama_print_timings:        load time =     986.60 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   15482.52 ms /   128 tokens (  120.96 ms per token,     8.27 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   15493.93 ms /   129 tokens

Final estimate: PPL = 4.1750 +/- 0.98064

real	0m16.596s
user	1m2.651s
sys	0m1.116s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823898
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 3
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.02 GiB (5.05 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2064.25 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.85 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.77 seconds per pass - ETA 0.23 minutes
[1]4.3872,
llama_print_timings:        load time =    1036.83 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14766.18 ms /   128 tokens (  115.36 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14778.12 ms /   129 tokens

Final estimate: PPL = 4.3872 +/- 1.05084

real	0m15.934s
user	0m59.788s
sys	0m1.140s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823914
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 8
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.21 GiB (5.54 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2262.37 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.984 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 20.46 seconds per pass - ETA 0.33 minutes
[1]4.3466,
llama_print_timings:        load time =    1225.90 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   20458.13 ms /   128 tokens (  159.83 ms per token,     6.26 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   20469.88 ms /   129 tokens

Final estimate: PPL = 4.3466 +/- 1.04362

real	0m21.820s
user	1m22.998s
sys	0m1.180s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823936
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 9
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.40 GiB (6.02 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2460.49 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.787 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 19.87 seconds per pass - ETA 0.32 minutes
[1]4.2515,
llama_print_timings:        load time =    1267.25 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   19866.19 ms /   128 tokens (  155.20 ms per token,     6.44 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   19877.82 ms /   129 tokens

Final estimate: PPL = 4.2515 +/- 1.01921

real	0m21.269s
user	1m20.436s
sys	0m1.380s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823957
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 10
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q2_K:  105 tensors
llama_model_loader: - type q3_K:   78 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.31 GiB (3.30 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1346.35 MiB
..............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.642 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 19.35 seconds per pass - ETA 0.32 minutes
[1]5.6188,
llama_print_timings:        load time =     801.63 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   19345.25 ms /   128 tokens (  151.13 ms per token,     6.62 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   19356.89 ms /   129 tokens

Final estimate: PPL = 5.6188 +/- 1.37004

real	0m20.255s
user	1m18.148s
sys	0m1.044s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823977
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 12
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q3_K:  105 tensors
llama_model_loader: - type q4_K:   75 tensors
llama_model_loader: - type q5_K:    3 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.62 GiB (4.07 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1662.08 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.816 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 18.37 seconds per pass - ETA 0.30 minutes
[1]4.4258,
llama_print_timings:        load time =     945.08 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   18369.41 ms /   128 tokens (  143.51 ms per token,     6.97 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   18381.14 ms /   129 tokens

Final estimate: PPL = 4.4258 +/- 1.05707

real	0m19.434s
user	1m14.235s
sys	0m1.168s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709823997
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 15
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.03 GiB (5.10 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2082.62 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.94 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 16.22 seconds per pass - ETA 0.27 minutes
[1]4.1929,
llama_print_timings:        load time =    1095.72 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   16223.50 ms /   128 tokens (  126.75 ms per token,     7.89 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   16235.20 ms /   129 tokens

Final estimate: PPL = 4.1929 +/- 0.99765

real	0m17.449s
user	1m5.524s
sys	0m1.360s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824014
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.36 GiB (5.92 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2420.14 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.527 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 22.14 seconds per pass - ETA 0.37 minutes
[1]4.2316,
llama_print_timings:        load time =    1226.74 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   22138.00 ms /   128 tokens (  172.95 ms per token,     5.78 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   22148.68 ms /   129 tokens

Final estimate: PPL = 4.2316 +/- 1.00381

real	0m23.494s
user	1m29.534s
sys	0m1.412s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824038
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 18
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q6_K:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.69 GiB (6.75 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2757.67 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.761 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 22.66 seconds per pass - ETA 0.37 minutes
[1]4.2451,
llama_print_timings:        load time =    1413.60 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   22657.36 ms /   128 tokens (  177.01 ms per token,     5.65 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   22668.49 ms /   129 tokens

Final estimate: PPL = 4.2451 +/- 1.02166

real	0m24.212s
user	1m31.591s
sys	0m1.660s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-imatrix.log
+ ./bin/imatrix --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824062
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
compute_imatrix: tokenizing the input ..
compute_imatrix: tokenization took 9.548 ms
compute_imatrix: computing over 1 chunks with batch_size 128
compute_imatrix: 37.68 seconds per pass - ETA 0.62 minutes
[1]4.2442,
save_imatrix: stored collected data after 1 chunks in imatrix.dat

llama_print_timings:        load time =   40088.05 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37684.88 ms /   128 tokens (  294.41 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   40092.04 ms /   129 tokens

Final estimate: PPL = 4.2442 +/- 1.01574

real	0m40.370s
user	2m30.310s
sys	0m2.944s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-save-load-state.log
+ ./bin/save-load-state --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1
main : serialized state into 1798847 out of a maximum of 236003404 bytes
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1
main : deserialized state from 1798847 out of a maximum of 236003404 bytes

main : success

first run: The quick brown fox jumps over the lazy dog.
Los.
His is different, he


second run: The quick brown fox jumps over the lazy dog.
Los.
His is different, he

real	0m6.052s
user	0m19.394s
sys	0m1.156s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]4.2442,'
+ qnt=f16
++ echo '[1]4.2442,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2442
++ echo '4.2442 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 4.2442
+ return 0
  - f16 @ 4.2442 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]4.2615,'
+ qnt=q8_0
++ echo '[1]4.2615,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2615
++ echo '4.2615 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 4.2615
+ return 0
  - q8_0 @ 4.2615 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]4.1750,'
+ qnt=q4_0
++ echo '[1]4.1750,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.1750
++ echo '4.1750 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 4.1750
+ return 0
  - q4_0 @ 4.1750 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]4.3872,'
+ qnt=q4_1
++ echo '[1]4.3872,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.3872
++ echo '4.3872 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 4.3872
+ return 0
  - q4_1 @ 4.3872 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]4.3466,'
+ qnt=q5_0
++ echo '[1]4.3466,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.3466
++ echo '4.3466 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 4.3466
+ return 0
  - q5_0 @ 4.3466 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]4.2515,'
+ qnt=q5_1
++ echo '[1]4.2515,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2515
++ echo '4.2515 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 4.2515
+ return 0
  - q5_1 @ 4.2515 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
++ grep '^\[1\]'
+ check_ppl q2_k '[1]5.6188,'
+ qnt=q2_k
++ echo '[1]5.6188,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=5.6188
++ echo '5.6188 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q2_k 5.6188
+ return 0
  - q2_k @ 5.6188 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]4.4258,'
+ qnt=q3_k
++ echo '[1]4.4258,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.4258
++ echo '4.4258 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 4.4258
+ return 0
  - q3_k @ 4.4258 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]4.1929,'
+ qnt=q4_k
++ echo '[1]4.1929,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.1929
++ echo '4.1929 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 4.1929
+ return 0
  - q4_k @ 4.1929 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]4.2316,'
+ qnt=q5_k
++ echo '[1]4.2316,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2316
++ echo '4.2316 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 4.2316
+ return 0
  - q5_k @ 4.2316 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]4.2451,'
+ qnt=q6_k
++ echo '[1]4.2451,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2451
++ echo '4.2451 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 4.2451
+ return 0
  - q6_k @ 4.2451 OK
+ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-imatrix.log
+ grep Final
+ path_lora=../models-mnt/open-llama/3B-v2/lora
+ path_shakespeare=../models-mnt/shakespeare
+ shakespeare=../models-mnt/shakespeare/shakespeare.txt
+ lora_shakespeare=../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin
+ gg_wget ../models-mnt/open-llama/3B-v2/lora https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
+ local out=../models-mnt/open-llama/3B-v2/lora
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/open-llama/3B-v2/lora
+ cd ../models-mnt/open-llama/3B-v2/lora
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-07 15:08:29 URL:https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json [457/457] -> "adapter_config.json" [1]
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ gg_wget ../models-mnt/open-llama/3B-v2/lora https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
+ local out=../models-mnt/open-llama/3B-v2/lora
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/open-llama/3B-v2/lora
+ cd ../models-mnt/open-llama/3B-v2/lora
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ gg_wget ../models-mnt/shakespeare https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
+ local out=../models-mnt/shakespeare
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/shakespeare
+ cd ../models-mnt/shakespeare
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
Last-modified header missing -- time-stamps turned off.
2024-03-07 15:08:29 URL:https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt [94275/94275] -> "shakespeare.txt" [1]
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ python3 ../convert-lora-to-ggml.py ../models-mnt/open-llama/3B-v2/lora
model.layers.0.self_attn.q_proj => blk.0.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.0.self_attn.q_proj => blk.0.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.0.self_attn.v_proj => blk.0.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.0.self_attn.v_proj => blk.0.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.1.self_attn.q_proj => blk.1.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.1.self_attn.q_proj => blk.1.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.1.self_attn.v_proj => blk.1.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.1.self_attn.v_proj => blk.1.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.2.self_attn.q_proj => blk.2.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.2.self_attn.q_proj => blk.2.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.2.self_attn.v_proj => blk.2.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.2.self_attn.v_proj => blk.2.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.3.self_attn.q_proj => blk.3.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.3.self_attn.q_proj => blk.3.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.3.self_attn.v_proj => blk.3.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.3.self_attn.v_proj => blk.3.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.4.self_attn.q_proj => blk.4.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.4.self_attn.q_proj => blk.4.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.4.self_attn.v_proj => blk.4.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.4.self_attn.v_proj => blk.4.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.5.self_attn.q_proj => blk.5.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.5.self_attn.q_proj => blk.5.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.5.self_attn.v_proj => blk.5.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.5.self_attn.v_proj => blk.5.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.6.self_attn.q_proj => blk.6.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.6.self_attn.q_proj => blk.6.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.6.self_attn.v_proj => blk.6.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.6.self_attn.v_proj => blk.6.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.7.self_attn.q_proj => blk.7.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.7.self_attn.q_proj => blk.7.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.7.self_attn.v_proj => blk.7.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.7.self_attn.v_proj => blk.7.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.8.self_attn.q_proj => blk.8.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.8.self_attn.q_proj => blk.8.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.8.self_attn.v_proj => blk.8.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.8.self_attn.v_proj => blk.8.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.9.self_attn.q_proj => blk.9.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.9.self_attn.q_proj => blk.9.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.9.self_attn.v_proj => blk.9.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.9.self_attn.v_proj => blk.9.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.10.self_attn.q_proj => blk.10.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.10.self_attn.q_proj => blk.10.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.10.self_attn.v_proj => blk.10.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.10.self_attn.v_proj => blk.10.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.11.self_attn.q_proj => blk.11.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.11.self_attn.q_proj => blk.11.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.11.self_attn.v_proj => blk.11.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.11.self_attn.v_proj => blk.11.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.12.self_attn.q_proj => blk.12.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.12.self_attn.q_proj => blk.12.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.12.self_attn.v_proj => blk.12.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.12.self_attn.v_proj => blk.12.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.13.self_attn.q_proj => blk.13.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.13.self_attn.q_proj => blk.13.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.13.self_attn.v_proj => blk.13.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.13.self_attn.v_proj => blk.13.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.14.self_attn.q_proj => blk.14.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.14.self_attn.q_proj => blk.14.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.14.self_attn.v_proj => blk.14.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.14.self_attn.v_proj => blk.14.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.15.self_attn.q_proj => blk.15.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.15.self_attn.q_proj => blk.15.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.15.self_attn.v_proj => blk.15.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.15.self_attn.v_proj => blk.15.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.16.self_attn.q_proj => blk.16.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.16.self_attn.q_proj => blk.16.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.16.self_attn.v_proj => blk.16.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.16.self_attn.v_proj => blk.16.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.17.self_attn.q_proj => blk.17.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.17.self_attn.q_proj => blk.17.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.17.self_attn.v_proj => blk.17.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.17.self_attn.v_proj => blk.17.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.18.self_attn.q_proj => blk.18.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.18.self_attn.q_proj => blk.18.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.18.self_attn.v_proj => blk.18.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.18.self_attn.v_proj => blk.18.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.19.self_attn.q_proj => blk.19.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.19.self_attn.q_proj => blk.19.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.19.self_attn.v_proj => blk.19.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.19.self_attn.v_proj => blk.19.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.20.self_attn.q_proj => blk.20.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.20.self_attn.q_proj => blk.20.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.20.self_attn.v_proj => blk.20.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.20.self_attn.v_proj => blk.20.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.21.self_attn.q_proj => blk.21.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.21.self_attn.q_proj => blk.21.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.21.self_attn.v_proj => blk.21.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.21.self_attn.v_proj => blk.21.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.22.self_attn.q_proj => blk.22.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.22.self_attn.q_proj => blk.22.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.22.self_attn.v_proj => blk.22.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.22.self_attn.v_proj => blk.22.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.23.self_attn.q_proj => blk.23.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.23.self_attn.q_proj => blk.23.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.23.self_attn.v_proj => blk.23.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.23.self_attn.v_proj => blk.23.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.24.self_attn.q_proj => blk.24.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.24.self_attn.q_proj => blk.24.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.24.self_attn.v_proj => blk.24.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.24.self_attn.v_proj => blk.24.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.25.self_attn.q_proj => blk.25.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.25.self_attn.q_proj => blk.25.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.25.self_attn.v_proj => blk.25.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.25.self_attn.v_proj => blk.25.attn_v.weight.loraB (3200, 64) float32 0.78MB
Converted ../models-mnt/open-llama/3B-v2/lora/adapter_config.json and ../models-mnt/open-llama/3B-v2/lora/adapter_model.bin to ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/shakespeare/shakespeare.txt -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824111
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 61.042 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.58 seconds per pass - ETA 0.62 minutes
[1]9.1017,
llama_print_timings:        load time =    2985.16 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37575.28 ms /   128 tokens (  293.56 ms per token,     3.41 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37637.82 ms /   129 tokens

Final estimate: PPL = 9.1017 +/- 2.25284

real	0m40.894s
user	2m32.675s
sys	0m2.752s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824152
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
............. done (2914.10 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 60.406 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.61 seconds per pass - ETA 0.62 minutes
[1]7.0171,
llama_print_timings:        load time =    6330.19 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37614.55 ms /   128 tokens (  293.86 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37676.90 ms /   129 tokens

Final estimate: PPL = 7.0171 +/- 1.75945

real	0m44.380s
user	2m41.445s
sys	0m4.788s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-f16.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-f16.log
++ grep '^\[1\]'
+ compare_ppl 'f16 shakespeare' '[1]9.1017,' '[1]7.0171,'
+ qnt='f16 shakespeare'
++ echo '[1]9.1017,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl1=9.1017
++ echo '[1]7.0171,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=7.0171
++ echo '9.1017 < 7.0171'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'f16 shakespeare' 9.1017 7.0171
+ return 0
  - f16 shakespeare @ 9.1017 7.0171 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824197
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 63.068 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.76 seconds per pass - ETA 0.23 minutes
[1]9.1296,
llama_print_timings:        load time =    1604.15 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14764.81 ms /   128 tokens (  115.35 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14829.24 ms /   129 tokens

Final estimate: PPL = 9.1296 +/- 2.27370

real	0m16.583s
user	0m59.870s
sys	0m1.732s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824213
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
llama_apply_lora_from_file_internal: warning: using a lora adapter with a quantized model may result in poor quality, use a f16 or f32 base model with --lora-base
............. done (2816.27 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 58.902 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.77 seconds per pass - ETA 0.23 minutes
[1]6.9856,
llama_print_timings:        load time =    4421.09 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14765.15 ms /   128 tokens (  115.35 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14825.36 ms /   129 tokens

Final estimate: PPL = 6.9856 +/- 1.74649

real	0m19.486s
user	1m8.477s
sys	0m3.372s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0.log
++ grep '^\[1\]'
+ compare_ppl 'q8_0 shakespeare' '[1]9.1296,' '[1]6.9856,'
+ qnt='q8_0 shakespeare'
++ echo '[1]9.1296,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl1=9.1296
++ echo '[1]6.9856,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=6.9856
++ echo '9.1296 < 6.9856'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'q8_0 shakespeare' 9.1296 6.9856
+ return 0
  - q8_0 shakespeare @ 9.1296 6.9856 OK
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin --lora-base ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -c 128 -b 128 --chunks 1
main: build = 2361 (0ba20ed9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709824233
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
llama_apply_lora_from_file_internal: loading base model from '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf'
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
............. done (3430.77 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 58.821 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.77 seconds per pass - ETA 0.23 minutes
[1]6.9967,
llama_print_timings:        load time =    5072.02 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14767.08 ms /   128 tokens (  115.37 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14827.75 ms /   129 tokens

Final estimate: PPL = 6.9967 +/- 1.74338

real	0m20.141s
user	1m9.114s
sys	0m3.797s
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0-f16.log
++ grep '^\[1\]'
+ compare_ppl 'q8_0 / f16 base shakespeare' '[1]9.1296,' '[1]6.9967,'
+ qnt='q8_0 / f16 base shakespeare'
++ echo '[1]9.1296,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl1=9.1296
++ echo '[1]6.9967,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=6.9967
++ echo '9.1296 < 6.9967'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'q8_0 / f16 base shakespeare' 9.1296 6.9967
+ return 0
  - q8_0 / f16 base shakespeare @ 9.1296 6.9967 OK
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_with_model_debug.log
+ cd /home/ggml/work/llama.cpp
+ local model
++ gg_get_model
++ local gguf_3b=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
++ local gguf_7b=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    0.18 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    3.04 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   3.22 sec*proc (2 tests)

Total Test time (real) =   3.22 sec
0.35user 2.87system 0:03.23elapsed 99%CPU (0avgtext+0avgdata 6875452maxresident)k
0inputs+40outputs (0major+153104minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_with_model_release.log
+ local model
++ gg_get_model
++ local gguf_3b=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
++ local gguf_7b=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/0b/a20ed97ad8b68b9382ca719e1b0428653d6904/ggml-3-arm64-cpu/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    0.06 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    2.92 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   2.98 sec*proc (2 tests)

Total Test time (real) =   2.98 sec
0.12user 2.87system 0:02.99elapsed 100%CPU (0avgtext+0avgdata 6874916maxresident)k
0inputs+56outputs (0major+153083minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
