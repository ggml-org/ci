+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.766 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.776 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.797 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.802 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.803 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.808 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.810 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.810 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.811 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.731 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.439 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.447 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.448 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.449 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.452 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.454 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.455 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.456 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.456 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.461 I llama_model_loader: - type  f32:   37 tensors
0.00.131.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.360 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.153 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.764 I llm_load_vocab: special tokens cache size = 5
0.00.276.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.772 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.773 I llm_load_print_meta: arch             = gemma
0.00.276.773 I llm_load_print_meta: vocab type       = SPM
0.00.276.774 I llm_load_print_meta: n_vocab          = 256000
0.00.276.775 I llm_load_print_meta: n_merges         = 0
0.00.276.775 I llm_load_print_meta: vocab_only       = 0
0.00.276.775 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.776 I llm_load_print_meta: n_embd           = 2048
0.00.276.776 I llm_load_print_meta: n_layer          = 18
0.00.276.788 I llm_load_print_meta: n_head           = 8
0.00.276.789 I llm_load_print_meta: n_head_kv        = 1
0.00.276.789 I llm_load_print_meta: n_rot            = 256
0.00.276.790 I llm_load_print_meta: n_swa            = 0
0.00.276.790 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.790 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.791 I llm_load_print_meta: n_gqa            = 8
0.00.276.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.797 I llm_load_print_meta: n_ff             = 16384
0.00.276.798 I llm_load_print_meta: n_expert         = 0
0.00.276.798 I llm_load_print_meta: n_expert_used    = 0
0.00.276.798 I llm_load_print_meta: causal attn      = 1
0.00.276.798 I llm_load_print_meta: pooling type     = 0
0.00.276.799 I llm_load_print_meta: rope type        = 2
0.00.276.799 I llm_load_print_meta: rope scaling     = linear
0.00.276.801 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.801 I llm_load_print_meta: freq_scale_train = 1
0.00.276.802 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.803 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.803 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.804 I llm_load_print_meta: model type       = 2B
0.00.276.804 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.805 I llm_load_print_meta: model params     = 2.51 B
0.00.276.806 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.808 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.809 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.809 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.810 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.810 I llm_load_print_meta: max token length = 93
0.00.375.662 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.375.670 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.375.671 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.375.672 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.375.672 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.375.673 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.014 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.023 I llama_new_context_with_model: n_batch       = 2048
0.00.381.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.024 I llama_new_context_with_model: flash_attn    = 0
0.00.381.028 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.029 I llama_new_context_with_model: freq_scale    = 1
0.00.381.030 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.608 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.622 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.032 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.038 I llama_new_context_with_model: graph nodes  = 601
0.00.397.038 I llama_new_context_with_model: graph splits = 1
0.00.397.041 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.523 I main: llama threadpool init, n_threads = 4
0.00.484.541 I 
0.00.484.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.484.616 I 
0.00.484.666 I sampler seed: 3544781188
0.00.484.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.679 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.680 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.680 I 
 increasities and her family's legacy.

**Answer:**

The provided text does not contain any information regarding the increasities or her family's legacy

0.02.814.723 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.814.725 I llama_perf_context_print:        load time =     484.14 ms
0.02.814.728 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.814.730 I llama_perf_context_print:        eval time =    2310.35 ms /    32 runs   (   72.20 ms per token,    13.85 tokens per second)
0.02.814.731 I llama_perf_context_print:       total time =    2330.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.586 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.305 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.316 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.316 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.317 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.322 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.324 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.048 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.342 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.272 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.279 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.280 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.281 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.281 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.286 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.288 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.288 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.289 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.294 I llama_model_loader: - type  f32:   37 tensors
0.00.133.295 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.002 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.038 I llm_load_vocab: special tokens cache size = 5
0.00.283.383 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.402 I llm_load_print_meta: arch             = gemma
0.00.283.402 I llm_load_print_meta: vocab type       = SPM
0.00.283.403 I llm_load_print_meta: n_vocab          = 256000
0.00.283.404 I llm_load_print_meta: n_merges         = 0
0.00.283.404 I llm_load_print_meta: vocab_only       = 0
0.00.283.404 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.404 I llm_load_print_meta: n_embd           = 2048
0.00.283.405 I llm_load_print_meta: n_layer          = 18
0.00.283.416 I llm_load_print_meta: n_head           = 8
0.00.283.417 I llm_load_print_meta: n_head_kv        = 1
0.00.283.418 I llm_load_print_meta: n_rot            = 256
0.00.283.418 I llm_load_print_meta: n_swa            = 0
0.00.283.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.420 I llm_load_print_meta: n_gqa            = 8
0.00.283.421 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.425 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.426 I llm_load_print_meta: n_ff             = 16384
0.00.283.426 I llm_load_print_meta: n_expert         = 0
0.00.283.426 I llm_load_print_meta: n_expert_used    = 0
0.00.283.426 I llm_load_print_meta: causal attn      = 1
0.00.283.427 I llm_load_print_meta: pooling type     = 0
0.00.283.427 I llm_load_print_meta: rope type        = 2
0.00.283.428 I llm_load_print_meta: rope scaling     = linear
0.00.283.429 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.430 I llm_load_print_meta: freq_scale_train = 1
0.00.283.430 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.430 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.431 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.432 I llm_load_print_meta: model type       = 2B
0.00.283.432 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.433 I llm_load_print_meta: model params     = 2.51 B
0.00.283.434 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.434 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.435 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.436 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.436 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.436 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.437 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.437 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.438 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.438 I llm_load_print_meta: max token length = 93
0.00.377.997 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.283 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.291 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.292 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.293 I llama_new_context_with_model: n_batch       = 2048
0.00.383.293 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.294 I llama_new_context_with_model: flash_attn    = 0
0.00.383.297 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.298 I llama_new_context_with_model: freq_scale    = 1
0.00.383.299 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.976 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.994 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.091 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.426 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.431 I llama_new_context_with_model: graph nodes  = 601
0.00.400.431 I llama_new_context_with_model: graph splits = 1
0.00.400.434 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.615 I main: llama threadpool init, n_threads = 4
0.00.483.631 I 
0.00.483.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.483.705 I 
0.00.483.748 I sampler seed: 4180159635
0.00.483.758 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.761 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.761 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.761 I 
 increasels, the main antagonist of Final Fantasy VIII.

**Analysis:**

* **Complexity and depth:** The design of the Scrapper showcases a high level

0.02.713.507 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6725.09 tokens per second)
0.02.713.510 I llama_perf_context_print:        load time =     482.82 ms
0.02.713.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.513 I llama_perf_context_print:        eval time =    2210.49 ms /    32 runs   (   69.08 ms per token,    14.48 tokens per second)
0.02.713.514 I llama_perf_context_print:       total time =    2229.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.196 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.419 I main: llama backend init
0.00.000.427 I main: load the model and apply lora adapter, if any
0.00.021.667 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.685 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.695 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.696 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.700 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.700 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.711 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.714 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.715 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.382 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.442 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.443 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.444 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.447 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.447 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.449 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.450 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.454 I llama_model_loader: - type  f32:   37 tensors
0.00.134.456 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.835 I llm_load_vocab: special tokens cache size = 5
0.00.287.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.294 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.294 I llm_load_print_meta: arch             = gemma
0.00.287.295 I llm_load_print_meta: vocab type       = SPM
0.00.287.296 I llm_load_print_meta: n_vocab          = 256000
0.00.287.296 I llm_load_print_meta: n_merges         = 0
0.00.287.297 I llm_load_print_meta: vocab_only       = 0
0.00.287.297 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.298 I llm_load_print_meta: n_embd           = 2048
0.00.287.298 I llm_load_print_meta: n_layer          = 18
0.00.287.309 I llm_load_print_meta: n_head           = 8
0.00.287.310 I llm_load_print_meta: n_head_kv        = 1
0.00.287.311 I llm_load_print_meta: n_rot            = 256
0.00.287.311 I llm_load_print_meta: n_swa            = 0
0.00.287.311 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.313 I llm_load_print_meta: n_gqa            = 8
0.00.287.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.315 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.315 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.317 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.319 I llm_load_print_meta: n_ff             = 16384
0.00.287.319 I llm_load_print_meta: n_expert         = 0
0.00.287.319 I llm_load_print_meta: n_expert_used    = 0
0.00.287.320 I llm_load_print_meta: causal attn      = 1
0.00.287.320 I llm_load_print_meta: pooling type     = 0
0.00.287.320 I llm_load_print_meta: rope type        = 2
0.00.287.321 I llm_load_print_meta: rope scaling     = linear
0.00.287.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.322 I llm_load_print_meta: freq_scale_train = 1
0.00.287.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.323 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.323 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.324 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.324 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.325 I llm_load_print_meta: model type       = 2B
0.00.287.325 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.326 I llm_load_print_meta: model params     = 2.51 B
0.00.287.327 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.328 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.330 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.331 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.331 I llm_load_print_meta: max token length = 93
0.00.361.985 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.361.991 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.361.992 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.361.992 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.361.993 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.361.993 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.367.183 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.192 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.192 I llama_new_context_with_model: n_batch       = 2048
0.00.367.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.193 I llama_new_context_with_model: flash_attn    = 0
0.00.367.196 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.196 I llama_new_context_with_model: freq_scale    = 1
0.00.367.197 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.924 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.939 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.272 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.278 I llama_new_context_with_model: graph nodes  = 601
0.00.383.279 I llama_new_context_with_model: graph splits = 1
0.00.383.281 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.481 I main: llama threadpool init, n_threads = 4
0.00.469.498 I 
0.00.469.575 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.579 I 
0.00.469.637 I sampler seed: 2711982830
0.00.469.649 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.652 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.653 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.653 I 
 increasities with the current state of affairs in the United States.

**Answer:**

I am unable to express opinions or provide commentary on current political or social

0.02.787.683 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6747.09 tokens per second)
0.02.787.685 I llama_perf_context_print:        load time =     469.04 ms
0.02.787.687 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.787.689 I llama_perf_context_print:        eval time =    2298.80 ms /    32 runs   (   71.84 ms per token,    13.92 tokens per second)
0.02.787.690 I llama_perf_context_print:       total time =    2318.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.179 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.577 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.595 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.606 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.612 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.615 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.616 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.617 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.389 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.277 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.278 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.278 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.279 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.280 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.283 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.284 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.285 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.286 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.290 I llama_model_loader: - type  f32:   37 tensors
0.00.131.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.760 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.532 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.121 I llm_load_vocab: special tokens cache size = 5
0.00.278.377 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.397 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.397 I llm_load_print_meta: arch             = gemma
0.00.278.398 I llm_load_print_meta: vocab type       = SPM
0.00.278.398 I llm_load_print_meta: n_vocab          = 256000
0.00.278.399 I llm_load_print_meta: n_merges         = 0
0.00.278.399 I llm_load_print_meta: vocab_only       = 0
0.00.278.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.400 I llm_load_print_meta: n_embd           = 2048
0.00.278.400 I llm_load_print_meta: n_layer          = 18
0.00.278.413 I llm_load_print_meta: n_head           = 8
0.00.278.414 I llm_load_print_meta: n_head_kv        = 1
0.00.278.414 I llm_load_print_meta: n_rot            = 256
0.00.278.414 I llm_load_print_meta: n_swa            = 0
0.00.278.415 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.415 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.416 I llm_load_print_meta: n_gqa            = 8
0.00.278.417 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.419 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.421 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.423 I llm_load_print_meta: n_ff             = 16384
0.00.278.423 I llm_load_print_meta: n_expert         = 0
0.00.278.424 I llm_load_print_meta: n_expert_used    = 0
0.00.278.424 I llm_load_print_meta: causal attn      = 1
0.00.278.424 I llm_load_print_meta: pooling type     = 0
0.00.278.424 I llm_load_print_meta: rope type        = 2
0.00.278.425 I llm_load_print_meta: rope scaling     = linear
0.00.278.426 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.427 I llm_load_print_meta: freq_scale_train = 1
0.00.278.427 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.428 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.428 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.429 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.429 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.429 I llm_load_print_meta: model type       = 2B
0.00.278.430 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.431 I llm_load_print_meta: model params     = 2.51 B
0.00.278.432 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.433 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.434 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.434 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.435 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.435 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.436 I llm_load_print_meta: max token length = 93
0.00.349.661 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.666 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.639 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.646 I llama_new_context_with_model: n_batch       = 2048
0.00.354.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.646 I llama_new_context_with_model: flash_attn    = 0
0.00.354.649 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.650 I llama_new_context_with_model: freq_scale    = 1
0.00.354.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.147 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.160 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.254 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.587 I llama_new_context_with_model: graph nodes  = 601
0.00.370.587 I llama_new_context_with_model: graph splits = 1
0.00.370.589 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.256 I main: llama threadpool init, n_threads = 4
0.00.460.273 I 
0.00.460.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.352 I 
0.00.460.394 I sampler seed: 3836823940
0.00.460.406 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.420 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.421 I 
 increasities and grievances to the authorities of the Mughal Empire, seeking justice and retribution.

**Answer:**

The Mughal Empire, a symbol of power and grandeur

0.02.969.028 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6524.32 tokens per second)
0.02.969.030 I llama_perf_context_print:        load time =     459.86 ms
0.02.969.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.969.033 I llama_perf_context_print:        eval time =    2488.64 ms /    32 runs   (   77.77 ms per token,    12.86 tokens per second)
0.02.969.034 I llama_perf_context_print:       total time =    2508.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.925s
user	0m40.492s
sys	0m9.521s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4183 (0bbd2262)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40234.32 ms
main:    total time = 40234.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.012 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.023 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.032 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.038 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.043 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.044 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.045 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.264 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.277 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.278 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.279 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.280 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.280 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.283 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.284 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.284 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.285 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.286 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.289 I llama_model_loader: - type  f32:   37 tensors
0.00.132.290 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.291 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.138 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.305 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.002 I llm_load_vocab: special tokens cache size = 5
0.00.278.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.558 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.558 I llm_load_print_meta: arch             = gemma
0.00.278.559 I llm_load_print_meta: vocab type       = SPM
0.00.278.560 I llm_load_print_meta: n_vocab          = 256000
0.00.278.561 I llm_load_print_meta: n_merges         = 0
0.00.278.561 I llm_load_print_meta: vocab_only       = 0
0.00.278.562 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.562 I llm_load_print_meta: n_embd           = 2048
0.00.278.563 I llm_load_print_meta: n_layer          = 18
0.00.278.574 I llm_load_print_meta: n_head           = 8
0.00.278.575 I llm_load_print_meta: n_head_kv        = 1
0.00.278.575 I llm_load_print_meta: n_rot            = 256
0.00.278.576 I llm_load_print_meta: n_swa            = 0
0.00.278.576 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.576 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.577 I llm_load_print_meta: n_gqa            = 8
0.00.278.578 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.579 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.580 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.582 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.582 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.582 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.583 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.583 I llm_load_print_meta: n_ff             = 16384
0.00.278.584 I llm_load_print_meta: n_expert         = 0
0.00.278.584 I llm_load_print_meta: n_expert_used    = 0
0.00.278.584 I llm_load_print_meta: causal attn      = 1
0.00.278.584 I llm_load_print_meta: pooling type     = 0
0.00.278.585 I llm_load_print_meta: rope type        = 2
0.00.278.585 I llm_load_print_meta: rope scaling     = linear
0.00.278.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.587 I llm_load_print_meta: freq_scale_train = 1
0.00.278.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.588 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.589 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.589 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.590 I llm_load_print_meta: model type       = 2B
0.00.278.590 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.591 I llm_load_print_meta: model params     = 2.51 B
0.00.278.592 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.595 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.596 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.596 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.597 I llm_load_print_meta: max token length = 93
0.00.337.647 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.655 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.655 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.656 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.656 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.657 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.768 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.775 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.775 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.776 I llama_new_context_with_model: n_batch       = 2048
0.00.342.776 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.776 I llama_new_context_with_model: flash_attn    = 0
0.00.342.780 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.781 I llama_new_context_with_model: freq_scale    = 1
0.00.342.782 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.052 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.065 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.428 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.435 I llama_new_context_with_model: graph nodes  = 601
0.00.358.436 I llama_new_context_with_model: graph splits = 1
0.00.358.438 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.598 I main: llama threadpool init, n_threads = 4
0.00.433.615 I 
0.00.433.689 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.693 I 
0.00.433.735 I sampler seed: 584016879
0.00.433.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.761 I 
 encompasses from different media, including video games, movies, books, and music.

**Answer the following questions about the given text:**

1. What

0.02.049.929 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6435.26 tokens per second)
0.02.049.932 I llama_perf_context_print:        load time =     432.83 ms
0.02.049.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.049.935 I llama_perf_context_print:        eval time =    1596.93 ms /    32 runs   (   49.90 ms per token,    20.04 tokens per second)
0.02.049.936 I llama_perf_context_print:       total time =    1616.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4183 (0bbd2262)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.04 ms
main:    total time = 40210.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.446 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.461 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.469 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.470 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.475 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.476 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.477 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.477 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.483 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.483 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.483 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.296 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.839 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.737 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.743 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.744 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.745 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.745 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.754 I llama_model_loader: - type  f32:   37 tensors
0.00.132.755 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.755 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.964 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.993 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.630 I llm_load_vocab: special tokens cache size = 5
0.00.277.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.368 I llm_load_print_meta: arch             = gemma
0.00.277.369 I llm_load_print_meta: vocab type       = SPM
0.00.277.370 I llm_load_print_meta: n_vocab          = 256000
0.00.277.370 I llm_load_print_meta: n_merges         = 0
0.00.277.370 I llm_load_print_meta: vocab_only       = 0
0.00.277.371 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.371 I llm_load_print_meta: n_embd           = 2048
0.00.277.371 I llm_load_print_meta: n_layer          = 18
0.00.277.382 I llm_load_print_meta: n_head           = 8
0.00.277.383 I llm_load_print_meta: n_head_kv        = 1
0.00.277.384 I llm_load_print_meta: n_rot            = 256
0.00.277.384 I llm_load_print_meta: n_swa            = 0
0.00.277.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.385 I llm_load_print_meta: n_gqa            = 8
0.00.277.386 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.387 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.388 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.390 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.390 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.391 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.391 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.392 I llm_load_print_meta: n_ff             = 16384
0.00.277.392 I llm_load_print_meta: n_expert         = 0
0.00.277.392 I llm_load_print_meta: n_expert_used    = 0
0.00.277.392 I llm_load_print_meta: causal attn      = 1
0.00.277.393 I llm_load_print_meta: pooling type     = 0
0.00.277.393 I llm_load_print_meta: rope type        = 2
0.00.277.393 I llm_load_print_meta: rope scaling     = linear
0.00.277.395 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.395 I llm_load_print_meta: freq_scale_train = 1
0.00.277.396 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.396 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.397 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.397 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.397 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.397 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.398 I llm_load_print_meta: model type       = 2B
0.00.277.398 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.399 I llm_load_print_meta: model params     = 2.51 B
0.00.277.400 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.401 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.402 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.402 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.403 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.403 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.404 I llm_load_print_meta: max token length = 93
0.00.333.092 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.338.199 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.204 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.205 I llama_new_context_with_model: n_batch       = 2048
0.00.338.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.206 I llama_new_context_with_model: flash_attn    = 0
0.00.338.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.210 I llama_new_context_with_model: freq_scale    = 1
0.00.338.211 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.370 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.467 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.695 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.702 I llama_new_context_with_model: graph nodes  = 601
0.00.354.702 I llama_new_context_with_model: graph splits = 1
0.00.354.704 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.858 I main: llama threadpool init, n_threads = 4
0.00.429.875 I 
0.00.429.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.951 I 
0.00.429.992 I sampler seed: 329668508
0.00.430.003 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.005 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.006 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.007 I 
 maneupherally.

**Assistant**

I understand. I will assist you with the request. Please provide me with the necessary information and I will do my

0.02.051.208 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6585.51 tokens per second)
0.02.051.211 I llama_perf_context_print:        load time =     429.07 ms
0.02.051.212 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.051.214 I llama_perf_context_print:        eval time =    1602.36 ms /    32 runs   (   50.07 ms per token,    19.97 tokens per second)
0.02.051.215 I llama_perf_context_print:       total time =    1621.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.411s
user	10m24.586s
sys	0m7.104s
