+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.199 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.211 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.304 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.326 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.340 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.341 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.343 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.344 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.345 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.461 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.360 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.361 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.362 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.364 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.365 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.369 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.371 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.372 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.373 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.375 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.383 I llama_model_loader: - type  f32:   37 tensors
0.00.348.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.168 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.368 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.437 I llm_load_vocab: special tokens cache size = 5
0.00.835.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.918 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.919 I llm_load_print_meta: arch             = gemma
0.00.835.920 I llm_load_print_meta: vocab type       = SPM
0.00.835.921 I llm_load_print_meta: n_vocab          = 256000
0.00.835.923 I llm_load_print_meta: n_merges         = 0
0.00.835.924 I llm_load_print_meta: vocab_only       = 0
0.00.835.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.925 I llm_load_print_meta: n_embd           = 2048
0.00.835.925 I llm_load_print_meta: n_layer          = 18
0.00.836.004 I llm_load_print_meta: n_head           = 8
0.00.836.012 I llm_load_print_meta: n_head_kv        = 1
0.00.836.013 I llm_load_print_meta: n_rot            = 256
0.00.836.013 I llm_load_print_meta: n_swa            = 0
0.00.836.013 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.018 I llm_load_print_meta: n_gqa            = 8
0.00.836.023 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.031 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.032 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.033 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.038 I llm_load_print_meta: n_ff             = 16384
0.00.836.042 I llm_load_print_meta: n_expert         = 0
0.00.836.044 I llm_load_print_meta: n_expert_used    = 0
0.00.836.044 I llm_load_print_meta: causal attn      = 1
0.00.836.044 I llm_load_print_meta: pooling type     = 0
0.00.836.049 I llm_load_print_meta: rope type        = 2
0.00.836.050 I llm_load_print_meta: rope scaling     = linear
0.00.836.052 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.052 I llm_load_print_meta: freq_scale_train = 1
0.00.836.057 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.058 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.059 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.060 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.060 I llm_load_print_meta: model type       = 2B
0.00.836.061 I llm_load_print_meta: model ftype      = Q8_0
0.00.836.062 I llm_load_print_meta: model params     = 2.51 B
0.00.836.072 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.836.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.074 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.087 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.088 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.089 I llm_load_print_meta: max token length = 93
0.00.938.023 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.938.034 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.938.035 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.938.036 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.938.037 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.938.037 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.943.901 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.908 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.908 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.909 I llama_new_context_with_model: n_batch       = 2048
0.00.943.909 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.910 I llama_new_context_with_model: flash_attn    = 0
0.00.943.912 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.913 I llama_new_context_with_model: freq_scale    = 1
0.00.943.914 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.712 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.751 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.407 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.411 I llama_new_context_with_model: graph nodes  = 601
0.00.961.412 I llama_new_context_with_model: graph splits = 1
0.00.961.434 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.158 I main: llama threadpool init, n_threads = 4
0.01.574.173 I 
0.01.574.290 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.574.294 I 
0.01.574.531 I sampler seed: 2997806210
0.01.574.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.574.554 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.574.557 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.574.557 I 
 increasities. 

I cannot answer this question as it contains sexually suggestive content that is inappropriate for me to respond to. [end of text]


0.12.670.068 I llama_perf_sampler_print:    sampling time =      39.85 ms /    27 runs   (    1.48 ms per token,   677.59 tokens per second)
0.12.670.070 I llama_perf_context_print:        load time =    1573.21 ms
0.12.670.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.670.073 I llama_perf_context_print:        eval time =   11022.91 ms /    26 runs   (  423.96 ms per token,     2.36 tokens per second)
0.12.670.087 I llama_perf_context_print:       total time =   11095.92 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.806 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.820 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.825 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.830 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.832 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.833 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.835 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.837 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.839 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.849 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.853 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.855 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.857 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.258 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.488 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.490 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.492 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.494 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.496 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.500 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.503 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.505 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.515 I llama_model_loader: - type  f32:   37 tensors
0.00.349.517 I llama_model_loader: - type q8_0:  127 tensors
0.00.596.590 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.660.591 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.661.598 I llm_load_vocab: special tokens cache size = 5
0.00.843.823 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.899 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.901 I llm_load_print_meta: arch             = gemma
0.00.843.901 I llm_load_print_meta: vocab type       = SPM
0.00.843.902 I llm_load_print_meta: n_vocab          = 256000
0.00.843.905 I llm_load_print_meta: n_merges         = 0
0.00.843.905 I llm_load_print_meta: vocab_only       = 0
0.00.843.905 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.906 I llm_load_print_meta: n_embd           = 2048
0.00.843.906 I llm_load_print_meta: n_layer          = 18
0.00.843.972 I llm_load_print_meta: n_head           = 8
0.00.843.979 I llm_load_print_meta: n_head_kv        = 1
0.00.843.979 I llm_load_print_meta: n_rot            = 256
0.00.843.980 I llm_load_print_meta: n_swa            = 0
0.00.843.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.985 I llm_load_print_meta: n_gqa            = 8
0.00.843.989 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.995 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.997 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.999 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.000 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.001 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.006 I llm_load_print_meta: n_ff             = 16384
0.00.844.007 I llm_load_print_meta: n_expert         = 0
0.00.844.008 I llm_load_print_meta: n_expert_used    = 0
0.00.844.008 I llm_load_print_meta: causal attn      = 1
0.00.844.009 I llm_load_print_meta: pooling type     = 0
0.00.844.009 I llm_load_print_meta: rope type        = 2
0.00.844.010 I llm_load_print_meta: rope scaling     = linear
0.00.844.011 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.012 I llm_load_print_meta: freq_scale_train = 1
0.00.844.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.014 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.015 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.018 I llm_load_print_meta: model type       = 2B
0.00.844.019 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.031 I llm_load_print_meta: model params     = 2.51 B
0.00.844.042 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.045 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.046 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.046 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.047 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.060 I llm_load_print_meta: max token length = 93
0.00.939.165 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.945.099 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.107 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.107 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.107 I llama_new_context_with_model: n_batch       = 2048
0.00.945.108 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.108 I llama_new_context_with_model: flash_attn    = 0
0.00.945.111 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.112 I llama_new_context_with_model: freq_scale    = 1
0.00.945.113 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.340 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.960.382 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.960.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.066 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.071 I llama_new_context_with_model: graph nodes  = 601
0.00.963.071 I llama_new_context_with_model: graph splits = 1
0.00.963.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.410 I main: llama threadpool init, n_threads = 4
0.01.575.427 I 
0.01.575.546 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.575.550 I 
0.01.575.813 I sampler seed: 2469309791
0.01.575.827 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.836 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.840 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.840 I 
 increasively, engulfing the once-proud village.

The villagers, their faces etched with fear, fled in terror, their eyes reflecting the panicked screams of

0.15.313.556 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.76 tokens per second)
0.15.313.559 I llama_perf_context_print:        load time =    1574.46 ms
0.15.313.560 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.313.585 I llama_perf_context_print:        eval time =   13648.66 ms /    32 runs   (  426.52 ms per token,     2.34 tokens per second)
0.15.313.586 I llama_perf_context_print:       total time =   13738.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.514 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.632 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.634 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.640 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.658 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.659 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.660 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.288 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.292 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.294 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.295 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.298 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.303 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.305 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.307 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.308 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.317 I llama_model_loader: - type  f32:   37 tensors
0.00.350.319 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.496 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.818 I llm_load_vocab: special tokens cache size = 5
0.00.858.844 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.919 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.921 I llm_load_print_meta: arch             = gemma
0.00.858.922 I llm_load_print_meta: vocab type       = SPM
0.00.858.922 I llm_load_print_meta: n_vocab          = 256000
0.00.858.925 I llm_load_print_meta: n_merges         = 0
0.00.858.926 I llm_load_print_meta: vocab_only       = 0
0.00.858.926 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.927 I llm_load_print_meta: n_embd           = 2048
0.00.858.927 I llm_load_print_meta: n_layer          = 18
0.00.858.991 I llm_load_print_meta: n_head           = 8
0.00.858.998 I llm_load_print_meta: n_head_kv        = 1
0.00.858.999 I llm_load_print_meta: n_rot            = 256
0.00.858.999 I llm_load_print_meta: n_swa            = 0
0.00.859.000 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.001 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.005 I llm_load_print_meta: n_gqa            = 8
0.00.859.010 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.017 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.019 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.019 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.020 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.026 I llm_load_print_meta: n_ff             = 16384
0.00.859.027 I llm_load_print_meta: n_expert         = 0
0.00.859.027 I llm_load_print_meta: n_expert_used    = 0
0.00.859.028 I llm_load_print_meta: causal attn      = 1
0.00.859.028 I llm_load_print_meta: pooling type     = 0
0.00.859.041 I llm_load_print_meta: rope type        = 2
0.00.859.042 I llm_load_print_meta: rope scaling     = linear
0.00.859.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.048 I llm_load_print_meta: freq_scale_train = 1
0.00.859.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.073 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.077 I llm_load_print_meta: model type       = 2B
0.00.859.078 I llm_load_print_meta: model ftype      = Q8_0
0.00.859.079 I llm_load_print_meta: model params     = 2.51 B
0.00.859.089 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.859.090 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.091 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.092 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.101 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.103 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.103 I llm_load_print_meta: max token length = 93
0.00.935.830 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.935.840 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.935.842 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.935.842 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.935.843 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.935.844 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.941.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.815 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.815 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.816 I llama_new_context_with_model: n_batch       = 2048
0.00.941.816 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.817 I llama_new_context_with_model: flash_attn    = 0
0.00.941.820 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.821 I llama_new_context_with_model: freq_scale    = 1
0.00.941.822 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.963 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.005 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.693 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.697 I llama_new_context_with_model: graph nodes  = 601
0.00.959.698 I llama_new_context_with_model: graph splits = 1
0.00.959.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.312 I main: llama threadpool init, n_threads = 4
0.01.572.329 I 
0.01.572.444 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.572.448 I 
0.01.572.688 I sampler seed: 1838481282
0.01.572.702 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.714 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.715 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.715 I 
 seconded by the word "a".

**Assistant**

Assistant [end of text]


0.08.010.493 I llama_perf_sampler_print:    sampling time =      23.04 ms /    16 runs   (    1.44 ms per token,   694.41 tokens per second)
0.08.010.496 I llama_perf_context_print:        load time =    1571.35 ms
0.08.010.497 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.010.499 I llama_perf_context_print:        eval time =    6395.26 ms /    15 runs   (  426.35 ms per token,     2.35 tokens per second)
0.08.010.515 I llama_perf_context_print:       total time =    6438.19 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.750 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.974 I main: llama backend init
0.00.000.984 I main: load the model and apply lora adapter, if any
0.00.023.357 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.374 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.482 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.497 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.499 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.507 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.513 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.516 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.522 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.547 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.549 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.551 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.553 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.876 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.837 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.851 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.852 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.853 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.863 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.864 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.866 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.867 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.869 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.879 I llama_model_loader: - type  f32:   37 tensors
0.00.349.881 I llama_model_loader: - type q8_0:  127 tensors
0.00.599.250 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.666.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.667.580 I llm_load_vocab: special tokens cache size = 5
0.00.868.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.540 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.541 I llm_load_print_meta: arch             = gemma
0.00.868.542 I llm_load_print_meta: vocab type       = SPM
0.00.868.543 I llm_load_print_meta: n_vocab          = 256000
0.00.868.545 I llm_load_print_meta: n_merges         = 0
0.00.868.546 I llm_load_print_meta: vocab_only       = 0
0.00.868.546 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.547 I llm_load_print_meta: n_embd           = 2048
0.00.868.547 I llm_load_print_meta: n_layer          = 18
0.00.868.635 I llm_load_print_meta: n_head           = 8
0.00.868.642 I llm_load_print_meta: n_head_kv        = 1
0.00.868.643 I llm_load_print_meta: n_rot            = 256
0.00.868.643 I llm_load_print_meta: n_swa            = 0
0.00.868.644 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.649 I llm_load_print_meta: n_gqa            = 8
0.00.868.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.659 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.660 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.661 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.662 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.662 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.663 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.668 I llm_load_print_meta: n_ff             = 16384
0.00.868.668 I llm_load_print_meta: n_expert         = 0
0.00.868.669 I llm_load_print_meta: n_expert_used    = 0
0.00.868.669 I llm_load_print_meta: causal attn      = 1
0.00.868.670 I llm_load_print_meta: pooling type     = 0
0.00.868.671 I llm_load_print_meta: rope type        = 2
0.00.868.671 I llm_load_print_meta: rope scaling     = linear
0.00.868.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.673 I llm_load_print_meta: freq_scale_train = 1
0.00.868.681 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.685 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.686 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.686 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.686 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.687 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.687 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.687 I llm_load_print_meta: model type       = 2B
0.00.868.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.868.689 I llm_load_print_meta: model params     = 2.51 B
0.00.868.699 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.868.699 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.701 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.702 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.702 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.718 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.720 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.720 I llm_load_print_meta: max token length = 93
0.00.941.737 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.941.746 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.947.794 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.801 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.802 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.802 I llama_new_context_with_model: n_batch       = 2048
0.00.947.802 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.803 I llama_new_context_with_model: flash_attn    = 0
0.00.947.805 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.806 I llama_new_context_with_model: freq_scale    = 1
0.00.947.807 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.542 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.587 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.451 I llama_new_context_with_model: graph nodes  = 601
0.00.965.452 I llama_new_context_with_model: graph splits = 1
0.00.965.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.601 I main: llama threadpool init, n_threads = 4
0.01.580.619 I 
0.01.580.746 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.580.750 I 
0.01.581.021 I sampler seed: 275173737
0.01.581.037 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.053 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.054 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.055 I 
 increasities and provide a revised version with improved clarity.

**Original Version:**

> The issue with social media is that it often promotes unrealistic expectations and fosters

0.15.259.345 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.78 tokens per second)
0.15.259.350 I llama_perf_context_print:        load time =    1579.48 ms
0.15.259.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.259.354 I llama_perf_context_print:        eval time =   13588.93 ms /    32 runs   (  424.65 ms per token,     2.35 tokens per second)
0.15.259.355 I llama_perf_context_print:       total time =   13678.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.048s
user	3m13.607s
sys	0m9.461s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4183 (0bbd2262)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186560.95 ms
main:    total time = 186560.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.557 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.685 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.691 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.692 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.693 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.694 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.706 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.707 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.143 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.363.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.363.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.363.037 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.363.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.363.040 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.363.041 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.363.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.363.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.363.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.363.051 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.363.052 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.363.053 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.363.063 I llama_model_loader: - type  f32:   37 tensors
0.00.363.065 I llama_model_loader: - type q4_K:  108 tensors
0.00.363.066 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.534 I llm_load_vocab: special tokens cache size = 5
0.00.853.472 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.547 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.548 I llm_load_print_meta: arch             = gemma
0.00.853.549 I llm_load_print_meta: vocab type       = SPM
0.00.853.550 I llm_load_print_meta: n_vocab          = 256000
0.00.853.552 I llm_load_print_meta: n_merges         = 0
0.00.853.553 I llm_load_print_meta: vocab_only       = 0
0.00.853.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.554 I llm_load_print_meta: n_embd           = 2048
0.00.853.554 I llm_load_print_meta: n_layer          = 18
0.00.853.620 I llm_load_print_meta: n_head           = 8
0.00.853.629 I llm_load_print_meta: n_head_kv        = 1
0.00.853.642 I llm_load_print_meta: n_rot            = 256
0.00.853.643 I llm_load_print_meta: n_swa            = 0
0.00.853.656 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.656 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.662 I llm_load_print_meta: n_gqa            = 8
0.00.853.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.671 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.675 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.677 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.677 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.688 I llm_load_print_meta: n_ff             = 16384
0.00.853.689 I llm_load_print_meta: n_expert         = 0
0.00.853.689 I llm_load_print_meta: n_expert_used    = 0
0.00.853.694 I llm_load_print_meta: causal attn      = 1
0.00.853.695 I llm_load_print_meta: pooling type     = 0
0.00.853.703 I llm_load_print_meta: rope type        = 2
0.00.853.705 I llm_load_print_meta: rope scaling     = linear
0.00.853.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.707 I llm_load_print_meta: freq_scale_train = 1
0.00.853.708 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.708 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.710 I llm_load_print_meta: model type       = 2B
0.00.853.711 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.853.712 I llm_load_print_meta: model params     = 2.51 B
0.00.853.721 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.853.722 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.723 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.724 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.726 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.727 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.733 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.735 I llm_load_print_meta: max token length = 93
0.00.915.248 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.915.257 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.915.258 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.915.258 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.915.259 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.915.260 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.921.067 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.074 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.075 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.075 I llama_new_context_with_model: n_batch       = 2048
0.00.921.075 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.076 I llama_new_context_with_model: flash_attn    = 0
0.00.921.078 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.079 I llama_new_context_with_model: freq_scale    = 1
0.00.921.080 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.735 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.773 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.901 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.432 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.436 I llama_new_context_with_model: graph nodes  = 601
0.00.938.436 I llama_new_context_with_model: graph splits = 1
0.00.938.459 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.519.877 I main: llama threadpool init, n_threads = 4
0.01.519.893 I 
0.01.520.013 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.520.017 I 
0.01.520.257 I sampler seed: 182228969
0.01.520.272 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.520.283 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.520.284 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.520.285 I 
 maneutrups?

I am unable to access the requested content. Please try again later. [end of text]


0.08.502.971 I llama_perf_sampler_print:    sampling time =      30.69 ms /    21 runs   (    1.46 ms per token,   684.26 tokens per second)
0.08.502.975 I llama_perf_context_print:        load time =    1518.91 ms
0.08.502.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.502.978 I llama_perf_context_print:        eval time =    6926.27 ms /    20 runs   (  346.31 ms per token,     2.89 tokens per second)
0.08.502.979 I llama_perf_context_print:       total time =    6983.10 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4183 (0bbd2262)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186491.89 ms
main:    total time = 186491.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4183 (0bbd2262) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.023.092 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.221 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.223 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.233 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.234 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.235 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.248 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.114 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.115 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.116 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.118 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.119 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.120 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.125 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.126 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.135 I llama_model_loader: - type  f32:   37 tensors
0.00.348.137 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.137 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.966 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.280 I llm_load_vocab: special tokens cache size = 5
0.00.857.570 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.640 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.641 I llm_load_print_meta: arch             = gemma
0.00.857.642 I llm_load_print_meta: vocab type       = SPM
0.00.857.643 I llm_load_print_meta: n_vocab          = 256000
0.00.857.645 I llm_load_print_meta: n_merges         = 0
0.00.857.646 I llm_load_print_meta: vocab_only       = 0
0.00.857.646 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.647 I llm_load_print_meta: n_embd           = 2048
0.00.857.647 I llm_load_print_meta: n_layer          = 18
0.00.857.712 I llm_load_print_meta: n_head           = 8
0.00.857.719 I llm_load_print_meta: n_head_kv        = 1
0.00.857.720 I llm_load_print_meta: n_rot            = 256
0.00.857.721 I llm_load_print_meta: n_swa            = 0
0.00.857.721 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.721 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.726 I llm_load_print_meta: n_gqa            = 8
0.00.857.731 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.740 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.745 I llm_load_print_meta: n_ff             = 16384
0.00.857.745 I llm_load_print_meta: n_expert         = 0
0.00.857.746 I llm_load_print_meta: n_expert_used    = 0
0.00.857.746 I llm_load_print_meta: causal attn      = 1
0.00.857.746 I llm_load_print_meta: pooling type     = 0
0.00.857.747 I llm_load_print_meta: rope type        = 2
0.00.857.747 I llm_load_print_meta: rope scaling     = linear
0.00.857.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.749 I llm_load_print_meta: freq_scale_train = 1
0.00.857.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.750 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.751 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.752 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.752 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.752 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.753 I llm_load_print_meta: model type       = 2B
0.00.857.754 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.857.754 I llm_load_print_meta: model params     = 2.51 B
0.00.857.766 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.857.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.767 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.768 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.769 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.785 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.791 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.793 I llm_load_print_meta: max token length = 93
0.00.914.651 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.784 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.794 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.794 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.794 I llama_new_context_with_model: n_batch       = 2048
0.00.920.795 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.795 I llama_new_context_with_model: flash_attn    = 0
0.00.920.798 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.799 I llama_new_context_with_model: freq_scale    = 1
0.00.920.799 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.163 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.210 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.950 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.955 I llama_new_context_with_model: graph nodes  = 601
0.00.938.955 I llama_new_context_with_model: graph splits = 1
0.00.938.977 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.523.120 I main: llama threadpool init, n_threads = 4
0.01.523.177 I 
0.01.523.298 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.523.302 I 
0.01.523.541 I sampler seed: 4245731325
0.01.523.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.523.565 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.523.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.523.568 I 
 seconded to the question.

I am unable to access my OneDrive account due to "account recovery requirements". I have provided all the necessary information but still cannot

0.12.666.772 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.37 tokens per second)
0.12.666.776 I llama_perf_context_print:        load time =    1522.20 ms
0.12.666.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.666.780 I llama_perf_context_print:        eval time =   11053.88 ms /    32 runs   (  345.43 ms per token,     2.89 tokens per second)
0.12.666.781 I llama_perf_context_print:       total time =   11143.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.175s
user	46m29.846s
sys	0m6.370s
