+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.001.157 I main: load the model and apply lora adapter, if any
0.00.023.579 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.590 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.678 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.696 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.698 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.699 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.701 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.708 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.711 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.714 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.715 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.689 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.690 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.699 I llama_model_loader: - type  f32:   37 tensors
0.00.268.701 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.388 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.363 I llm_load_vocab: special tokens cache size = 5
0.00.605.205 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.271 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.272 I llm_load_print_meta: arch             = gemma
0.00.605.273 I llm_load_print_meta: vocab type       = SPM
0.00.605.274 I llm_load_print_meta: n_vocab          = 256000
0.00.605.277 I llm_load_print_meta: n_merges         = 0
0.00.605.277 I llm_load_print_meta: vocab_only       = 0
0.00.605.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.278 I llm_load_print_meta: n_embd           = 2048
0.00.605.278 I llm_load_print_meta: n_layer          = 18
0.00.605.341 I llm_load_print_meta: n_head           = 8
0.00.605.348 I llm_load_print_meta: n_head_kv        = 1
0.00.605.349 I llm_load_print_meta: n_rot            = 256
0.00.605.349 I llm_load_print_meta: n_swa            = 0
0.00.605.349 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.350 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.354 I llm_load_print_meta: n_gqa            = 8
0.00.605.359 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.364 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.367 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.367 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.369 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.369 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.375 I llm_load_print_meta: n_ff             = 16384
0.00.605.375 I llm_load_print_meta: n_expert         = 0
0.00.605.375 I llm_load_print_meta: n_expert_used    = 0
0.00.605.376 I llm_load_print_meta: causal attn      = 1
0.00.605.377 I llm_load_print_meta: pooling type     = 0
0.00.605.377 I llm_load_print_meta: rope type        = 2
0.00.605.377 I llm_load_print_meta: rope scaling     = linear
0.00.605.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.380 I llm_load_print_meta: freq_scale_train = 1
0.00.605.381 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.382 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.382 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.382 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.383 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.384 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.384 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.396 I llm_load_print_meta: model type       = 2B
0.00.605.402 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.403 I llm_load_print_meta: model params     = 2.51 B
0.00.605.412 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.413 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.414 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.415 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.415 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.415 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.416 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.423 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.425 I llm_load_print_meta: max token length = 93
0.00.710.158 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.710.168 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.710.169 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.710.171 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.710.171 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.710.172 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.716.095 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.103 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.103 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.103 I llama_new_context_with_model: n_batch       = 2048
0.00.716.104 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.104 I llama_new_context_with_model: flash_attn    = 0
0.00.716.107 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.107 I llama_new_context_with_model: freq_scale    = 1
0.00.716.108 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.689 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.732 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.463 I llama_new_context_with_model: graph nodes  = 601
0.00.735.463 I llama_new_context_with_model: graph splits = 1
0.00.735.486 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.264 I main: llama threadpool init, n_threads = 4
0.01.345.278 I 
0.01.345.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.387 I 
0.01.345.616 I sampler seed: 1478744054
0.01.345.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.635 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.638 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.639 I 
 increasities in a way that promotes safety and compliance.

**Answer:**

**Implement comprehensive safety protocols and training programs to ensure safe and compliant operations.**



0.14.779.058 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.96 tokens per second)
0.14.779.060 I llama_perf_context_print:        load time =    1344.02 ms
0.14.779.083 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.779.085 I llama_perf_context_print:        eval time =   13343.65 ms /    32 runs   (  416.99 ms per token,     2.40 tokens per second)
0.14.779.086 I llama_perf_context_print:       total time =   13433.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.001.142 I main: load the model and apply lora adapter, if any
0.00.023.452 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.556 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.573 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.577 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.579 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.580 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.581 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.592 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.593 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.841 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.739 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.757 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.758 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.760 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.761 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.762 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.770 I llama_model_loader: - type  f32:   37 tensors
0.00.267.773 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.783 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.652 I llm_load_vocab: special tokens cache size = 5
0.00.607.174 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.239 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.240 I llm_load_print_meta: arch             = gemma
0.00.607.240 I llm_load_print_meta: vocab type       = SPM
0.00.607.241 I llm_load_print_meta: n_vocab          = 256000
0.00.607.244 I llm_load_print_meta: n_merges         = 0
0.00.607.244 I llm_load_print_meta: vocab_only       = 0
0.00.607.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.245 I llm_load_print_meta: n_embd           = 2048
0.00.607.246 I llm_load_print_meta: n_layer          = 18
0.00.607.308 I llm_load_print_meta: n_head           = 8
0.00.607.315 I llm_load_print_meta: n_head_kv        = 1
0.00.607.316 I llm_load_print_meta: n_rot            = 256
0.00.607.316 I llm_load_print_meta: n_swa            = 0
0.00.607.316 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.321 I llm_load_print_meta: n_gqa            = 8
0.00.607.326 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.333 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.335 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.335 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.336 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.336 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.340 I llm_load_print_meta: n_ff             = 16384
0.00.607.341 I llm_load_print_meta: n_expert         = 0
0.00.607.341 I llm_load_print_meta: n_expert_used    = 0
0.00.607.342 I llm_load_print_meta: causal attn      = 1
0.00.607.342 I llm_load_print_meta: pooling type     = 0
0.00.607.342 I llm_load_print_meta: rope type        = 2
0.00.607.343 I llm_load_print_meta: rope scaling     = linear
0.00.607.344 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.345 I llm_load_print_meta: freq_scale_train = 1
0.00.607.345 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.345 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.346 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.346 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.347 I llm_load_print_meta: model type       = 2B
0.00.607.348 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.349 I llm_load_print_meta: model params     = 2.51 B
0.00.607.359 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.360 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.360 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.361 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.362 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.363 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.363 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.364 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.370 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.383 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.384 I llm_load_print_meta: max token length = 93
0.00.708.163 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.713.983 I llama_new_context_with_model: n_seq_max     = 1
0.00.713.988 I llama_new_context_with_model: n_ctx         = 4096
0.00.713.988 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.713.988 I llama_new_context_with_model: n_batch       = 2048
0.00.713.989 I llama_new_context_with_model: n_ubatch      = 512
0.00.713.989 I llama_new_context_with_model: flash_attn    = 0
0.00.713.991 I llama_new_context_with_model: freq_base     = 10000.0
0.00.713.992 I llama_new_context_with_model: freq_scale    = 1
0.00.713.993 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.049 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.090 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.210 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.729 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.733 I llama_new_context_with_model: graph nodes  = 601
0.00.733.733 I llama_new_context_with_model: graph splits = 1
0.00.733.758 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.994 I main: llama threadpool init, n_threads = 4
0.01.347.006 I 
0.01.347.112 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.115 I 
0.01.347.347 I sampler seed: 659204612
0.01.347.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.366 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.370 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.370 I 
 increasities in the modern world.

**Answer:**

**The modern world has witnessed an explosion of narcissistic and possessive attitudes, which have led to significant increases

0.15.035.120 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.57 tokens per second)
0.15.035.136 I llama_perf_context_print:        load time =    1345.76 ms
0.15.035.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.035.140 I llama_perf_context_print:        eval time =   13597.20 ms /    32 runs   (  424.91 ms per token,     2.35 tokens per second)
0.15.035.141 I llama_perf_context_print:       total time =   13688.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.001.133 I main: load the model and apply lora adapter, if any
0.00.023.107 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.117 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.207 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.221 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.225 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.226 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.229 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.231 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.240 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.240 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.242 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.243 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.421 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.154 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.522 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.523 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.527 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.528 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.532 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.532 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.534 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.534 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.536 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.544 I llama_model_loader: - type  f32:   37 tensors
0.00.267.546 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.629 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.136 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.067 I llm_load_vocab: special tokens cache size = 5
0.00.618.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.037 I llm_load_print_meta: arch             = gemma
0.00.619.038 I llm_load_print_meta: vocab type       = SPM
0.00.619.039 I llm_load_print_meta: n_vocab          = 256000
0.00.619.041 I llm_load_print_meta: n_merges         = 0
0.00.619.041 I llm_load_print_meta: vocab_only       = 0
0.00.619.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.042 I llm_load_print_meta: n_embd           = 2048
0.00.619.043 I llm_load_print_meta: n_layer          = 18
0.00.619.106 I llm_load_print_meta: n_head           = 8
0.00.619.113 I llm_load_print_meta: n_head_kv        = 1
0.00.619.114 I llm_load_print_meta: n_rot            = 256
0.00.619.115 I llm_load_print_meta: n_swa            = 0
0.00.619.116 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.116 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.121 I llm_load_print_meta: n_gqa            = 8
0.00.619.126 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.132 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.133 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.133 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.139 I llm_load_print_meta: n_ff             = 16384
0.00.619.140 I llm_load_print_meta: n_expert         = 0
0.00.619.141 I llm_load_print_meta: n_expert_used    = 0
0.00.619.142 I llm_load_print_meta: causal attn      = 1
0.00.619.142 I llm_load_print_meta: pooling type     = 0
0.00.619.143 I llm_load_print_meta: rope type        = 2
0.00.619.143 I llm_load_print_meta: rope scaling     = linear
0.00.619.145 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.146 I llm_load_print_meta: freq_scale_train = 1
0.00.619.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.161 I llm_load_print_meta: model type       = 2B
0.00.619.163 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.164 I llm_load_print_meta: model params     = 2.51 B
0.00.619.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.192 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.193 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.193 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.193 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.194 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.203 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.210 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.213 I llm_load_print_meta: max token length = 93
0.00.716.290 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.716.301 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.716.302 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.716.303 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.716.303 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.716.304 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.722.154 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.162 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.162 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.163 I llama_new_context_with_model: n_batch       = 2048
0.00.722.163 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.164 I llama_new_context_with_model: flash_attn    = 0
0.00.722.166 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.167 I llama_new_context_with_model: freq_scale    = 1
0.00.722.167 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.739.048 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.739.089 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.739.208 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.752 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.757 I llama_new_context_with_model: graph nodes  = 601
0.00.741.757 I llama_new_context_with_model: graph splits = 1
0.00.741.781 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.428 I main: llama threadpool init, n_threads = 4
0.01.351.441 I 
0.01.351.551 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.554 I 
0.01.351.786 I sampler seed: 2818898403
0.01.351.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.806 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.807 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.807 I 
 increasities are the primary focus of the study of what field of study?

a) Anthropology
b) Psychology
c) Sociology
d) Linguistics



0.14.903.221 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.66 tokens per second)
0.14.903.225 I llama_perf_context_print:        load time =    1350.20 ms
0.14.903.227 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.903.229 I llama_perf_context_print:        eval time =   13461.07 ms /    32 runs   (  420.66 ms per token,     2.38 tokens per second)
0.14.903.231 I llama_perf_context_print:       total time =   13551.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.001.120 I main: load the model and apply lora adapter, if any
0.00.023.364 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.376 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.479 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.481 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.485 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.492 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.500 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.501 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.504 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.387 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.557 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.561 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.562 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.563 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.570 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.571 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.579 I llama_model_loader: - type  f32:   37 tensors
0.00.269.581 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.469 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.106 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.023 I llm_load_vocab: special tokens cache size = 5
0.00.609.551 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.624 I llm_load_print_meta: arch             = gemma
0.00.609.625 I llm_load_print_meta: vocab type       = SPM
0.00.609.625 I llm_load_print_meta: n_vocab          = 256000
0.00.609.628 I llm_load_print_meta: n_merges         = 0
0.00.609.628 I llm_load_print_meta: vocab_only       = 0
0.00.609.629 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.629 I llm_load_print_meta: n_embd           = 2048
0.00.609.629 I llm_load_print_meta: n_layer          = 18
0.00.609.693 I llm_load_print_meta: n_head           = 8
0.00.609.701 I llm_load_print_meta: n_head_kv        = 1
0.00.609.702 I llm_load_print_meta: n_rot            = 256
0.00.609.702 I llm_load_print_meta: n_swa            = 0
0.00.609.704 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.704 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.710 I llm_load_print_meta: n_gqa            = 8
0.00.609.715 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.720 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.721 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.722 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.722 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.723 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.723 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.728 I llm_load_print_meta: n_ff             = 16384
0.00.609.741 I llm_load_print_meta: n_expert         = 0
0.00.609.742 I llm_load_print_meta: n_expert_used    = 0
0.00.609.742 I llm_load_print_meta: causal attn      = 1
0.00.609.743 I llm_load_print_meta: pooling type     = 0
0.00.609.743 I llm_load_print_meta: rope type        = 2
0.00.609.744 I llm_load_print_meta: rope scaling     = linear
0.00.609.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.747 I llm_load_print_meta: freq_scale_train = 1
0.00.609.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.748 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.750 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.751 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.751 I llm_load_print_meta: model type       = 2B
0.00.609.756 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.757 I llm_load_print_meta: model params     = 2.51 B
0.00.609.769 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.770 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.774 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.774 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.775 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.775 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.776 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.776 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.785 I llm_load_print_meta: max token length = 93
0.00.683.107 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.683.117 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.688.946 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.954 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.954 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.955 I llama_new_context_with_model: n_batch       = 2048
0.00.688.955 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.956 I llama_new_context_with_model: flash_attn    = 0
0.00.688.958 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.959 I llama_new_context_with_model: freq_scale    = 1
0.00.688.959 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.694 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.872 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.351 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.355 I llama_new_context_with_model: graph nodes  = 601
0.00.708.356 I llama_new_context_with_model: graph splits = 1
0.00.708.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.339 I main: llama threadpool init, n_threads = 4
0.01.317.352 I 
0.01.317.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.459 I 
0.01.317.684 I sampler seed: 793955657
0.01.317.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.706 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.707 I 
 increasively, showcasing its increasing capabilities.

**Phase 1: Intuitive Data Analysis**

* Leverages AI models to analyze vast datasets and extract insights.

0.14.850.623 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.99 tokens per second)
0.14.850.626 I llama_perf_context_print:        load time =    1316.12 ms
0.14.850.628 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.850.629 I llama_perf_context_print:        eval time =   13443.59 ms /    32 runs   (  420.11 ms per token,     2.38 tokens per second)
0.14.850.630 I llama_perf_context_print:       total time =   13533.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.761s
user	3m49.513s
sys	0m9.534s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4027 (ea02c753)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199352.34 ms
main:    total time = 199352.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.744 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.757 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.866 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.868 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.873 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.877 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.878 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.879 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.881 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.890 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.772 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.773 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.781 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.781 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.783 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.790 I llama_model_loader: - type  f32:   37 tensors
0.00.267.792 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.793 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.734 I llm_load_vocab: special tokens cache size = 5
0.00.603.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.269 I llm_load_print_meta: arch             = gemma
0.00.603.270 I llm_load_print_meta: vocab type       = SPM
0.00.603.271 I llm_load_print_meta: n_vocab          = 256000
0.00.603.273 I llm_load_print_meta: n_merges         = 0
0.00.603.274 I llm_load_print_meta: vocab_only       = 0
0.00.603.274 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.275 I llm_load_print_meta: n_embd           = 2048
0.00.603.275 I llm_load_print_meta: n_layer          = 18
0.00.603.341 I llm_load_print_meta: n_head           = 8
0.00.603.349 I llm_load_print_meta: n_head_kv        = 1
0.00.603.349 I llm_load_print_meta: n_rot            = 256
0.00.603.350 I llm_load_print_meta: n_swa            = 0
0.00.603.350 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.352 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.356 I llm_load_print_meta: n_gqa            = 8
0.00.603.361 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.366 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.371 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.392 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.397 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.397 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.403 I llm_load_print_meta: n_ff             = 16384
0.00.603.403 I llm_load_print_meta: n_expert         = 0
0.00.603.404 I llm_load_print_meta: n_expert_used    = 0
0.00.603.412 I llm_load_print_meta: causal attn      = 1
0.00.603.413 I llm_load_print_meta: pooling type     = 0
0.00.603.413 I llm_load_print_meta: rope type        = 2
0.00.603.414 I llm_load_print_meta: rope scaling     = linear
0.00.603.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.417 I llm_load_print_meta: freq_scale_train = 1
0.00.603.418 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.420 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.421 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.422 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.423 I llm_load_print_meta: model type       = 2B
0.00.603.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.424 I llm_load_print_meta: model params     = 2.51 B
0.00.603.434 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.434 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.436 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.436 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.437 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.437 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.444 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.445 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.446 I llm_load_print_meta: max token length = 93
0.00.667.048 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.667.056 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.667.057 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.667.057 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.667.058 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.667.059 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.672.849 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.857 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.857 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.857 I llama_new_context_with_model: n_batch       = 2048
0.00.672.858 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.858 I llama_new_context_with_model: flash_attn    = 0
0.00.672.860 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.861 I llama_new_context_with_model: freq_scale    = 1
0.00.672.862 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.689.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.689.742 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.689.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.408 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.692.412 I llama_new_context_with_model: graph nodes  = 601
0.00.692.413 I llama_new_context_with_model: graph splits = 1
0.00.692.437 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.334 I main: llama threadpool init, n_threads = 4
0.01.262.346 I 
0.01.262.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.458 I 
0.01.262.697 I sampler seed: 1427783280
0.01.262.710 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.262.716 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.262.719 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.262.720 I 
 squaRED FOR LIFE!

I am unable to provide a response that promotes harmful or inappropriate content. [end of text]


0.08.393.470 I llama_perf_sampler_print:    sampling time =      32.29 ms /    22 runs   (    1.47 ms per token,   681.24 tokens per second)
0.08.393.474 I llama_perf_context_print:        load time =    1261.10 ms
0.08.393.476 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.393.478 I llama_perf_context_print:        eval time =    7071.34 ms /    21 runs   (  336.73 ms per token,     2.97 tokens per second)
0.08.393.479 I llama_perf_context_print:       total time =    7131.15 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4027 (ea02c753)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199263.78 ms
main:    total time = 199263.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.695 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.001.166 I main: load the model and apply lora adapter, if any
0.00.023.417 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.607 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.621 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.622 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.627 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.629 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.630 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.631 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.632 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.634 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.640 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.644 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.646 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.647 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.168 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.599 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.924 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.932 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.933 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.943 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.952 I llama_model_loader: - type  f32:   37 tensors
0.00.267.955 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.955 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.974 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.882 I llm_load_vocab: special tokens cache size = 5
0.00.615.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.991 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.992 I llm_load_print_meta: arch             = gemma
0.00.615.993 I llm_load_print_meta: vocab type       = SPM
0.00.615.994 I llm_load_print_meta: n_vocab          = 256000
0.00.615.996 I llm_load_print_meta: n_merges         = 0
0.00.615.997 I llm_load_print_meta: vocab_only       = 0
0.00.615.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.997 I llm_load_print_meta: n_embd           = 2048
0.00.615.998 I llm_load_print_meta: n_layer          = 18
0.00.616.062 I llm_load_print_meta: n_head           = 8
0.00.616.070 I llm_load_print_meta: n_head_kv        = 1
0.00.616.071 I llm_load_print_meta: n_rot            = 256
0.00.616.072 I llm_load_print_meta: n_swa            = 0
0.00.616.072 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.078 I llm_load_print_meta: n_gqa            = 8
0.00.616.082 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.087 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.089 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.091 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.091 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.092 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.092 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.097 I llm_load_print_meta: n_ff             = 16384
0.00.616.098 I llm_load_print_meta: n_expert         = 0
0.00.616.098 I llm_load_print_meta: n_expert_used    = 0
0.00.616.099 I llm_load_print_meta: causal attn      = 1
0.00.616.099 I llm_load_print_meta: pooling type     = 0
0.00.616.100 I llm_load_print_meta: rope type        = 2
0.00.616.100 I llm_load_print_meta: rope scaling     = linear
0.00.616.102 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.102 I llm_load_print_meta: freq_scale_train = 1
0.00.616.103 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.104 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.105 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.107 I llm_load_print_meta: model type       = 2B
0.00.616.107 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.108 I llm_load_print_meta: model params     = 2.51 B
0.00.616.118 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.119 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.119 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.121 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.129 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.129 I llm_load_print_meta: max token length = 93
0.00.677.342 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.683.016 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.023 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.023 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.024 I llama_new_context_with_model: n_batch       = 2048
0.00.683.024 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.025 I llama_new_context_with_model: flash_attn    = 0
0.00.683.027 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.028 I llama_new_context_with_model: freq_scale    = 1
0.00.683.029 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.451 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.147 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.151 I llama_new_context_with_model: graph nodes  = 601
0.00.702.151 I llama_new_context_with_model: graph splits = 1
0.00.702.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.812 I main: llama threadpool init, n_threads = 4
0.01.272.823 I 
0.01.272.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.935 I 
0.01.273.167 I sampler seed: 3212350195
0.01.273.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.186 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.189 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.189 I 
 increasities, and the suppression of dissenting voices. [end of text]


0.05.014.486 I llama_perf_sampler_print:    sampling time =      16.99 ms /    12 runs   (    1.42 ms per token,   706.21 tokens per second)
0.05.014.490 I llama_perf_context_print:        load time =    1271.55 ms
0.05.014.491 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.014.515 I llama_perf_context_print:        eval time =    3709.72 ms /    11 runs   (  337.25 ms per token,     2.97 tokens per second)
0.05.014.520 I llama_perf_context_print:       total time =    3741.68 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.926s
user	49m30.506s
sys	0m6.300s
