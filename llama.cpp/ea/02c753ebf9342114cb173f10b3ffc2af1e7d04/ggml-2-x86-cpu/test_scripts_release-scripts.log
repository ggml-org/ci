+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.021.401 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.410 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.418 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.427 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.428 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.428 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.429 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.429 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.433 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.434 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.435 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.691 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.345 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.561 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.566 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.573 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.574 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.574 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.575 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.578 I llama_model_loader: - type  f32:   37 tensors
0.00.132.579 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.719 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.735 I llm_load_vocab: special tokens cache size = 5
0.00.265.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.584 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.585 I llm_load_print_meta: arch             = gemma
0.00.265.585 I llm_load_print_meta: vocab type       = SPM
0.00.265.586 I llm_load_print_meta: n_vocab          = 256000
0.00.265.586 I llm_load_print_meta: n_merges         = 0
0.00.265.586 I llm_load_print_meta: vocab_only       = 0
0.00.265.587 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.587 I llm_load_print_meta: n_embd           = 2048
0.00.265.587 I llm_load_print_meta: n_layer          = 18
0.00.265.599 I llm_load_print_meta: n_head           = 8
0.00.265.600 I llm_load_print_meta: n_head_kv        = 1
0.00.265.600 I llm_load_print_meta: n_rot            = 256
0.00.265.601 I llm_load_print_meta: n_swa            = 0
0.00.265.601 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.602 I llm_load_print_meta: n_gqa            = 8
0.00.265.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.604 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.605 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.606 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.607 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.607 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.607 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.608 I llm_load_print_meta: n_ff             = 16384
0.00.265.608 I llm_load_print_meta: n_expert         = 0
0.00.265.609 I llm_load_print_meta: n_expert_used    = 0
0.00.265.609 I llm_load_print_meta: causal attn      = 1
0.00.265.609 I llm_load_print_meta: pooling type     = 0
0.00.265.610 I llm_load_print_meta: rope type        = 2
0.00.265.610 I llm_load_print_meta: rope scaling     = linear
0.00.265.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.612 I llm_load_print_meta: freq_scale_train = 1
0.00.265.613 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.613 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.613 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.614 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.614 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.614 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.614 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.615 I llm_load_print_meta: model type       = 2B
0.00.265.615 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.616 I llm_load_print_meta: model params     = 2.51 B
0.00.265.617 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.617 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.618 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.618 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.619 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.619 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.619 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.620 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.620 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.620 I llm_load_print_meta: max token length = 93
0.00.368.544 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.368.551 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.368.552 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.368.553 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.368.553 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.368.554 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.866 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.873 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.873 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.874 I llama_new_context_with_model: n_batch       = 2048
0.00.373.874 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.875 I llama_new_context_with_model: flash_attn    = 0
0.00.373.876 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.877 I llama_new_context_with_model: freq_scale    = 1
0.00.373.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.974 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.987 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.073 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.296 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.302 I llama_new_context_with_model: graph nodes  = 601
0.00.390.303 I llama_new_context_with_model: graph splits = 1
0.00.390.305 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.747 I main: llama threadpool init, n_threads = 4
0.00.475.760 I 
0.00.475.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.838 I 
0.00.475.881 I sampler seed: 1775950962
0.00.475.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.897 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.898 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.898 I 
 increasities:

$$\int_{0}^{1}x^2e^{x^3}dx$$

**Solution:**

$$\int_{0}^{

0.02.714.086 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7142.86 tokens per second)
0.02.714.089 I llama_perf_context_print:        load time =     474.87 ms
0.02.714.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.093 I llama_perf_context_print:        eval time =    2220.27 ms /    32 runs   (   69.38 ms per token,    14.41 tokens per second)
0.02.714.093 I llama_perf_context_print:       total time =    2238.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.535 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.021.096 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.111 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.121 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.129 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.130 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.130 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.131 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.132 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.939 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.745 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.753 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.754 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.755 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.759 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.760 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.761 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.762 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.763 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.766 I llama_model_loader: - type  f32:   37 tensors
0.00.130.767 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.406 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.927 I llm_load_vocab: special tokens cache size = 5
0.00.259.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.564 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.565 I llm_load_print_meta: arch             = gemma
0.00.259.565 I llm_load_print_meta: vocab type       = SPM
0.00.259.566 I llm_load_print_meta: n_vocab          = 256000
0.00.259.566 I llm_load_print_meta: n_merges         = 0
0.00.259.566 I llm_load_print_meta: vocab_only       = 0
0.00.259.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.567 I llm_load_print_meta: n_embd           = 2048
0.00.259.567 I llm_load_print_meta: n_layer          = 18
0.00.259.578 I llm_load_print_meta: n_head           = 8
0.00.259.579 I llm_load_print_meta: n_head_kv        = 1
0.00.259.579 I llm_load_print_meta: n_rot            = 256
0.00.259.580 I llm_load_print_meta: n_swa            = 0
0.00.259.580 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.580 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.581 I llm_load_print_meta: n_gqa            = 8
0.00.259.582 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.583 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.585 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.586 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.586 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.586 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.587 I llm_load_print_meta: n_ff             = 16384
0.00.259.588 I llm_load_print_meta: n_expert         = 0
0.00.259.588 I llm_load_print_meta: n_expert_used    = 0
0.00.259.589 I llm_load_print_meta: causal attn      = 1
0.00.259.589 I llm_load_print_meta: pooling type     = 0
0.00.259.589 I llm_load_print_meta: rope type        = 2
0.00.259.590 I llm_load_print_meta: rope scaling     = linear
0.00.259.596 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.596 I llm_load_print_meta: freq_scale_train = 1
0.00.259.597 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.598 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.598 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.598 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.599 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.599 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.599 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.600 I llm_load_print_meta: model type       = 2B
0.00.259.601 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.602 I llm_load_print_meta: model params     = 2.51 B
0.00.259.603 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.603 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.603 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.604 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.605 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.605 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.605 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.606 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.606 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.607 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.607 I llm_load_print_meta: max token length = 93
0.00.358.697 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.975 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.982 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.982 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.983 I llama_new_context_with_model: n_batch       = 2048
0.00.363.983 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.983 I llama_new_context_with_model: flash_attn    = 0
0.00.363.986 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.987 I llama_new_context_with_model: freq_scale    = 1
0.00.363.989 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.612 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.628 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.726 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.005 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.010 I llama_new_context_with_model: graph nodes  = 601
0.00.382.010 I llama_new_context_with_model: graph splits = 1
0.00.382.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.755 I main: llama threadpool init, n_threads = 4
0.00.464.768 I 
0.00.464.844 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.847 I 
0.00.464.888 I sampler seed: 1256551699
0.00.464.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.902 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.903 I 
 increasities in the novel.

The novel explores the themes of gender, power, and social class. It also discusses the nature of identity and the complexities of

0.02.681.316 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7000.42 tokens per second)
0.02.681.318 I llama_perf_context_print:        load time =     463.87 ms
0.02.681.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.681.321 I llama_perf_context_print:        eval time =    2197.64 ms /    32 runs   (   68.68 ms per token,    14.56 tokens per second)
0.02.681.321 I llama_perf_context_print:       total time =    2216.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.593 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.933 I main: load the model and apply lora adapter, if any
0.00.021.412 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.431 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.438 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.442 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.442 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.444 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.885 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.014 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.014 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.015 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.019 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.020 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.021 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.024 I llama_model_loader: - type  f32:   37 tensors
0.00.132.025 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.190 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.333 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.021 I llm_load_vocab: special tokens cache size = 5
0.00.293.983 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.998 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.999 I llm_load_print_meta: arch             = gemma
0.00.293.999 I llm_load_print_meta: vocab type       = SPM
0.00.294.000 I llm_load_print_meta: n_vocab          = 256000
0.00.294.000 I llm_load_print_meta: n_merges         = 0
0.00.294.001 I llm_load_print_meta: vocab_only       = 0
0.00.294.001 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.001 I llm_load_print_meta: n_embd           = 2048
0.00.294.002 I llm_load_print_meta: n_layer          = 18
0.00.294.013 I llm_load_print_meta: n_head           = 8
0.00.294.014 I llm_load_print_meta: n_head_kv        = 1
0.00.294.014 I llm_load_print_meta: n_rot            = 256
0.00.294.014 I llm_load_print_meta: n_swa            = 0
0.00.294.015 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.015 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.016 I llm_load_print_meta: n_gqa            = 8
0.00.294.017 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.018 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.019 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.020 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.021 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.021 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.022 I llm_load_print_meta: n_ff             = 16384
0.00.294.022 I llm_load_print_meta: n_expert         = 0
0.00.294.023 I llm_load_print_meta: n_expert_used    = 0
0.00.294.023 I llm_load_print_meta: causal attn      = 1
0.00.294.023 I llm_load_print_meta: pooling type     = 0
0.00.294.024 I llm_load_print_meta: rope type        = 2
0.00.294.024 I llm_load_print_meta: rope scaling     = linear
0.00.294.026 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.027 I llm_load_print_meta: freq_scale_train = 1
0.00.294.027 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.028 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.028 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.028 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.028 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.028 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.029 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.029 I llm_load_print_meta: model type       = 2B
0.00.294.030 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.030 I llm_load_print_meta: model params     = 2.51 B
0.00.294.031 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.032 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.032 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.032 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.033 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.033 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.033 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.033 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.034 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.034 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.035 I llm_load_print_meta: max token length = 93
0.00.389.540 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.389.547 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.389.548 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.389.549 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.389.549 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.389.550 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.394.881 I llama_new_context_with_model: n_seq_max     = 1
0.00.394.887 I llama_new_context_with_model: n_ctx         = 4096
0.00.394.888 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.394.888 I llama_new_context_with_model: n_batch       = 2048
0.00.394.888 I llama_new_context_with_model: n_ubatch      = 512
0.00.394.889 I llama_new_context_with_model: flash_attn    = 0
0.00.394.892 I llama_new_context_with_model: freq_base     = 10000.0
0.00.394.892 I llama_new_context_with_model: freq_scale    = 1
0.00.394.893 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.411.017 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.411.031 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.411.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.412.450 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.412.457 I llama_new_context_with_model: graph nodes  = 601
0.00.412.458 I llama_new_context_with_model: graph splits = 1
0.00.412.460 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.497.526 I main: llama threadpool init, n_threads = 4
0.00.497.540 I 
0.00.497.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.497.619 I 
0.00.497.659 I sampler seed: 399129695
0.00.497.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.497.671 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.497.673 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.497.673 I 
 maneuvrability rule.

**Rule:**

The maneuvrability rule states that a language is naturally inquisitive if it has a feature that allows speakers to ask

0.02.664.850 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7024.27 tokens per second)
0.02.664.852 I llama_perf_context_print:        load time =     496.57 ms
0.02.664.854 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.664.855 I llama_perf_context_print:        eval time =    2148.47 ms /    32 runs   (   67.14 ms per token,    14.89 tokens per second)
0.02.664.856 I llama_perf_context_print:       total time =    2167.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.679 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.687 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.708 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.709 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.711 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.711 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.712 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.712 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.717 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.719 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.720 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.753 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.981 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.989 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.990 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.990 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.995 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.996 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.996 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.997 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.998 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.002 I llama_model_loader: - type  f32:   37 tensors
0.00.133.003 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.346 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.267 I llm_load_vocab: special tokens cache size = 5
0.00.266.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.256 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.256 I llm_load_print_meta: arch             = gemma
0.00.266.257 I llm_load_print_meta: vocab type       = SPM
0.00.266.258 I llm_load_print_meta: n_vocab          = 256000
0.00.266.258 I llm_load_print_meta: n_merges         = 0
0.00.266.258 I llm_load_print_meta: vocab_only       = 0
0.00.266.259 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.259 I llm_load_print_meta: n_embd           = 2048
0.00.266.259 I llm_load_print_meta: n_layer          = 18
0.00.266.269 I llm_load_print_meta: n_head           = 8
0.00.266.270 I llm_load_print_meta: n_head_kv        = 1
0.00.266.271 I llm_load_print_meta: n_rot            = 256
0.00.266.271 I llm_load_print_meta: n_swa            = 0
0.00.266.271 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.272 I llm_load_print_meta: n_gqa            = 8
0.00.266.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.277 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.278 I llm_load_print_meta: n_ff             = 16384
0.00.266.279 I llm_load_print_meta: n_expert         = 0
0.00.266.279 I llm_load_print_meta: n_expert_used    = 0
0.00.266.280 I llm_load_print_meta: causal attn      = 1
0.00.266.280 I llm_load_print_meta: pooling type     = 0
0.00.266.280 I llm_load_print_meta: rope type        = 2
0.00.266.281 I llm_load_print_meta: rope scaling     = linear
0.00.266.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.282 I llm_load_print_meta: freq_scale_train = 1
0.00.266.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.283 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.284 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.285 I llm_load_print_meta: model type       = 2B
0.00.266.286 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.286 I llm_load_print_meta: model params     = 2.51 B
0.00.266.287 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.288 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.288 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.290 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.291 I llm_load_print_meta: max token length = 93
0.00.338.573 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.579 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.887 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.893 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.893 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.894 I llama_new_context_with_model: n_batch       = 2048
0.00.343.894 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.895 I llama_new_context_with_model: flash_attn    = 0
0.00.343.897 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.898 I llama_new_context_with_model: freq_scale    = 1
0.00.343.899 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.304 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.400 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.593 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.600 I llama_new_context_with_model: graph nodes  = 601
0.00.360.600 I llama_new_context_with_model: graph splits = 1
0.00.360.602 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.660 I main: llama threadpool init, n_threads = 4
0.00.446.674 I 
0.00.446.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.766 I 
0.00.446.813 I sampler seed: 2674810771
0.00.446.825 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.833 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.834 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.836 I 
 increasements, and other relevant data points for the following scenario:

**Scenario:**

An insurance company is analyzing customer claims data to identify potential fraudulent activity.

0.02.814.675 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5928.85 tokens per second)
0.02.814.677 I llama_perf_context_print:        load time =     445.75 ms
0.02.814.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.814.680 I llama_perf_context_print:        eval time =    2347.78 ms /    32 runs   (   73.37 ms per token,    13.63 tokens per second)
0.02.814.680 I llama_perf_context_print:       total time =    2368.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.502s
user	0m38.840s
sys	0m9.514s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4027 (ea02c753)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32064.69 ms
main:    total time = 32064.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.021.468 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.477 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.491 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.492 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.496 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.497 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.497 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.498 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.499 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.503 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.337 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.344 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.344 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.345 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.345 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.346 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.347 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.351 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.352 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.356 I llama_model_loader: - type  f32:   37 tensors
0.00.131.357 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.358 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.359 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.614 I llm_load_vocab: special tokens cache size = 5
0.00.268.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.264 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.265 I llm_load_print_meta: arch             = gemma
0.00.268.265 I llm_load_print_meta: vocab type       = SPM
0.00.268.266 I llm_load_print_meta: n_vocab          = 256000
0.00.268.266 I llm_load_print_meta: n_merges         = 0
0.00.268.267 I llm_load_print_meta: vocab_only       = 0
0.00.268.267 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.267 I llm_load_print_meta: n_embd           = 2048
0.00.268.268 I llm_load_print_meta: n_layer          = 18
0.00.268.279 I llm_load_print_meta: n_head           = 8
0.00.268.280 I llm_load_print_meta: n_head_kv        = 1
0.00.268.281 I llm_load_print_meta: n_rot            = 256
0.00.268.281 I llm_load_print_meta: n_swa            = 0
0.00.268.281 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.282 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.283 I llm_load_print_meta: n_gqa            = 8
0.00.268.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.285 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.287 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.287 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.287 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.288 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.289 I llm_load_print_meta: n_ff             = 16384
0.00.268.289 I llm_load_print_meta: n_expert         = 0
0.00.268.289 I llm_load_print_meta: n_expert_used    = 0
0.00.268.290 I llm_load_print_meta: causal attn      = 1
0.00.268.290 I llm_load_print_meta: pooling type     = 0
0.00.268.290 I llm_load_print_meta: rope type        = 2
0.00.268.291 I llm_load_print_meta: rope scaling     = linear
0.00.268.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.293 I llm_load_print_meta: freq_scale_train = 1
0.00.268.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.294 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.295 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.296 I llm_load_print_meta: model type       = 2B
0.00.268.296 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.297 I llm_load_print_meta: model params     = 2.51 B
0.00.268.298 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.299 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.300 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.300 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.301 I llm_load_print_meta: max token length = 93
0.00.330.315 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.330.323 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.330.323 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.330.324 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.330.325 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.330.325 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.477 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.483 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.483 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.484 I llama_new_context_with_model: n_batch       = 2048
0.00.335.484 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.485 I llama_new_context_with_model: flash_attn    = 0
0.00.335.487 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.488 I llama_new_context_with_model: freq_scale    = 1
0.00.335.489 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.530 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.543 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.884 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.891 I llama_new_context_with_model: graph nodes  = 601
0.00.351.891 I llama_new_context_with_model: graph splits = 1
0.00.351.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.452 I main: llama threadpool init, n_threads = 4
0.00.427.465 I 
0.00.427.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.427.545 I 
0.00.427.587 I sampler seed: 1710100653
0.00.427.598 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.601 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.603 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.603 I 
 maneuvously.

I cannot answer the question because it contains inappropriate language. I am programmed to provide safe and appropriate responses. [end of text]


0.01.832.383 I llama_perf_sampler_print:    sampling time =       4.07 ms /    28 runs   (    0.15 ms per token,  6881.30 tokens per second)
0.01.832.386 I llama_perf_context_print:        load time =     426.57 ms
0.01.832.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.832.389 I llama_perf_context_print:        eval time =    1389.17 ms /    27 runs   (   51.45 ms per token,    19.44 tokens per second)
0.01.832.390 I llama_perf_context_print:       total time =    1404.94 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4027 (ea02c753)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32210.41 ms
main:    total time = 32210.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4027 (ea02c753) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.021.406 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.423 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.429 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.440 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.441 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.441 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.442 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.921 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.922 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.934 I llama_model_loader: - type  f32:   37 tensors
0.00.130.935 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.936 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.516 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.637 I llm_load_vocab: special tokens cache size = 5
0.00.267.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.551 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.552 I llm_load_print_meta: arch             = gemma
0.00.267.552 I llm_load_print_meta: vocab type       = SPM
0.00.267.553 I llm_load_print_meta: n_vocab          = 256000
0.00.267.553 I llm_load_print_meta: n_merges         = 0
0.00.267.554 I llm_load_print_meta: vocab_only       = 0
0.00.267.554 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.554 I llm_load_print_meta: n_embd           = 2048
0.00.267.555 I llm_load_print_meta: n_layer          = 18
0.00.267.566 I llm_load_print_meta: n_head           = 8
0.00.267.567 I llm_load_print_meta: n_head_kv        = 1
0.00.267.568 I llm_load_print_meta: n_rot            = 256
0.00.267.568 I llm_load_print_meta: n_swa            = 0
0.00.267.568 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.569 I llm_load_print_meta: n_gqa            = 8
0.00.267.570 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.575 I llm_load_print_meta: n_ff             = 16384
0.00.267.576 I llm_load_print_meta: n_expert         = 0
0.00.267.576 I llm_load_print_meta: n_expert_used    = 0
0.00.267.576 I llm_load_print_meta: causal attn      = 1
0.00.267.576 I llm_load_print_meta: pooling type     = 0
0.00.267.577 I llm_load_print_meta: rope type        = 2
0.00.267.577 I llm_load_print_meta: rope scaling     = linear
0.00.267.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.580 I llm_load_print_meta: freq_scale_train = 1
0.00.267.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.582 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.583 I llm_load_print_meta: model type       = 2B
0.00.267.583 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.584 I llm_load_print_meta: model params     = 2.51 B
0.00.267.584 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.587 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.588 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.588 I llm_load_print_meta: max token length = 93
0.00.326.131 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.231 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.237 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.237 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.238 I llama_new_context_with_model: n_batch       = 2048
0.00.331.238 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.238 I llama_new_context_with_model: flash_attn    = 0
0.00.331.241 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.242 I llama_new_context_with_model: freq_scale    = 1
0.00.331.243 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.561 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.666 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.920 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.927 I llama_new_context_with_model: graph nodes  = 601
0.00.347.927 I llama_new_context_with_model: graph splits = 1
0.00.347.929 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.842 I main: llama threadpool init, n_threads = 4
0.00.421.855 I 
0.00.421.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.933 I 
0.00.421.973 I sampler seed: 2149163840
0.00.421.983 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.986 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.987 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.987 I 
 strick the following:

1. Identify the key components of the model.
2. Explain how the model works.
3. Discuss the advantages and disadvantages

0.02.017.892 I llama_perf_sampler_print:    sampling time =       5.96 ms /    33 runs   (    0.18 ms per token,  5535.98 tokens per second)
0.02.017.895 I llama_perf_context_print:        load time =     420.97 ms
0.02.017.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.897 I llama_perf_context_print:        eval time =    1575.17 ms /    32 runs   (   49.22 ms per token,    20.32 tokens per second)
0.02.017.898 I llama_perf_context_print:       total time =    1596.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.151s
user	8m14.195s
sys	0m6.857s
