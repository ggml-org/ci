+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.586 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.577 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.585 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.593 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.599 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.600 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.605 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.606 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.606 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.607 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.607 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.612 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.612 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.613 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.614 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.614 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.601 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.498 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.505 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.509 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.514 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.515 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.515 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.516 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.518 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.521 I llama_model_loader: - type  f32:   37 tensors
0.00.132.523 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.104 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.538 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.184 I llm_load_vocab: special tokens cache size = 5
0.00.274.232 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.252 I llm_load_print_meta: arch             = gemma
0.00.274.253 I llm_load_print_meta: vocab type       = SPM
0.00.274.254 I llm_load_print_meta: n_vocab          = 256000
0.00.274.254 I llm_load_print_meta: n_merges         = 0
0.00.274.254 I llm_load_print_meta: vocab_only       = 0
0.00.274.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.255 I llm_load_print_meta: n_embd           = 2048
0.00.274.255 I llm_load_print_meta: n_layer          = 18
0.00.274.268 I llm_load_print_meta: n_head           = 8
0.00.274.269 I llm_load_print_meta: n_head_kv        = 1
0.00.274.269 I llm_load_print_meta: n_rot            = 256
0.00.274.270 I llm_load_print_meta: n_swa            = 0
0.00.274.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.271 I llm_load_print_meta: n_gqa            = 8
0.00.274.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.277 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.278 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.278 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.278 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.279 I llm_load_print_meta: n_ff             = 16384
0.00.274.280 I llm_load_print_meta: n_expert         = 0
0.00.274.280 I llm_load_print_meta: n_expert_used    = 0
0.00.274.280 I llm_load_print_meta: causal attn      = 1
0.00.274.280 I llm_load_print_meta: pooling type     = 0
0.00.274.281 I llm_load_print_meta: rope type        = 2
0.00.274.281 I llm_load_print_meta: rope scaling     = linear
0.00.274.283 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.284 I llm_load_print_meta: freq_scale_train = 1
0.00.274.284 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.285 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.285 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.286 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.286 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.287 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.287 I llm_load_print_meta: model type       = 2B
0.00.274.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.289 I llm_load_print_meta: model params     = 2.51 B
0.00.274.290 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.291 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.291 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.294 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.294 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.294 I llm_load_print_meta: max token length = 93
0.00.374.257 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.266 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.267 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.267 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.268 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.269 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.792 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.801 I llama_new_context_with_model: n_batch       = 2048
0.00.379.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.802 I llama_new_context_with_model: flash_attn    = 0
0.00.379.806 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.806 I llama_new_context_with_model: freq_scale    = 1
0.00.379.808 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.672 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.688 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.780 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.028 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.035 I llama_new_context_with_model: graph nodes  = 601
0.00.397.035 I llama_new_context_with_model: graph splits = 1
0.00.397.038 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.936 I main: llama threadpool init, n_threads = 4
0.00.483.953 I 
0.00.484.026 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.030 I 
0.00.484.077 I sampler seed: 635122615
0.00.484.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.100 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.104 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.104 I 
 increasities are not only a matter of scientific interest but also have significant implications for conservation biology and land use policies.

**a) Explain the implications of increa

0.02.775.651 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7104.41 tokens per second)
0.02.775.653 I llama_perf_context_print:        load time =     483.13 ms
0.02.775.654 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.775.655 I llama_perf_context_print:        eval time =    2272.17 ms /    32 runs   (   71.01 ms per token,    14.08 tokens per second)
0.02.775.656 I llama_perf_context_print:       total time =    2291.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.519 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.714 I main: llama backend init
0.00.000.720 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.345 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.351 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.352 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.359 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.360 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.366 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.367 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.368 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.368 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.369 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.875 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.131 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.139 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.140 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.141 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.146 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.146 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.147 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.151 I llama_model_loader: - type  f32:   37 tensors
0.00.132.153 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.606 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.686 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.390 I llm_load_vocab: special tokens cache size = 5
0.00.289.485 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.501 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.502 I llm_load_print_meta: arch             = gemma
0.00.289.502 I llm_load_print_meta: vocab type       = SPM
0.00.289.503 I llm_load_print_meta: n_vocab          = 256000
0.00.289.504 I llm_load_print_meta: n_merges         = 0
0.00.289.505 I llm_load_print_meta: vocab_only       = 0
0.00.289.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.505 I llm_load_print_meta: n_embd           = 2048
0.00.289.506 I llm_load_print_meta: n_layer          = 18
0.00.289.517 I llm_load_print_meta: n_head           = 8
0.00.289.518 I llm_load_print_meta: n_head_kv        = 1
0.00.289.518 I llm_load_print_meta: n_rot            = 256
0.00.289.518 I llm_load_print_meta: n_swa            = 0
0.00.289.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.519 I llm_load_print_meta: n_gqa            = 8
0.00.289.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.521 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.522 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.524 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.525 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.525 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.526 I llm_load_print_meta: n_ff             = 16384
0.00.289.526 I llm_load_print_meta: n_expert         = 0
0.00.289.526 I llm_load_print_meta: n_expert_used    = 0
0.00.289.527 I llm_load_print_meta: causal attn      = 1
0.00.289.527 I llm_load_print_meta: pooling type     = 0
0.00.289.527 I llm_load_print_meta: rope type        = 2
0.00.289.528 I llm_load_print_meta: rope scaling     = linear
0.00.289.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.530 I llm_load_print_meta: freq_scale_train = 1
0.00.289.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.530 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.531 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.532 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.532 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.532 I llm_load_print_meta: model type       = 2B
0.00.289.533 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.533 I llm_load_print_meta: model params     = 2.51 B
0.00.289.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.535 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.538 I llm_load_print_meta: max token length = 93
0.00.383.495 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.388.868 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.875 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.875 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.876 I llama_new_context_with_model: n_batch       = 2048
0.00.388.876 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.876 I llama_new_context_with_model: flash_attn    = 0
0.00.388.880 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.880 I llama_new_context_with_model: freq_scale    = 1
0.00.388.881 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.210 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.226 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.622 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.627 I llama_new_context_with_model: graph nodes  = 601
0.00.405.627 I llama_new_context_with_model: graph splits = 1
0.00.405.630 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.712 I main: llama threadpool init, n_threads = 4
0.00.489.725 I 
0.00.489.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.801 I 
0.00.489.841 I sampler seed: 961869199
0.00.489.851 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.855 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.855 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.856 I 
 increasities in the human body. [end of text]


0.01.040.700 I llama_perf_sampler_print:    sampling time =       1.21 ms /     9 runs   (    0.13 ms per token,  7425.74 tokens per second)
0.01.040.702 I llama_perf_context_print:        load time =     488.98 ms
0.01.040.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.040.705 I llama_perf_context_print:        eval time =     545.71 ms /     8 runs   (   68.21 ms per token,    14.66 tokens per second)
0.01.040.706 I llama_perf_context_print:       total time =     550.99 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.653 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.021.935 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.946 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.959 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.960 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.965 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.968 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.969 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.970 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.970 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.971 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.977 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.979 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.980 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.980 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.887 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.545 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.564 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.565 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.569 I llama_model_loader: - type  f32:   37 tensors
0.00.133.571 I llama_model_loader: - type q8_0:  127 tensors
0.00.229.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.284.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.285.071 I llm_load_vocab: special tokens cache size = 5
0.00.306.010 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.306.029 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.306.030 I llm_load_print_meta: arch             = gemma
0.00.306.031 I llm_load_print_meta: vocab type       = SPM
0.00.306.031 I llm_load_print_meta: n_vocab          = 256000
0.00.306.032 I llm_load_print_meta: n_merges         = 0
0.00.306.032 I llm_load_print_meta: vocab_only       = 0
0.00.306.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.306.033 I llm_load_print_meta: n_embd           = 2048
0.00.306.033 I llm_load_print_meta: n_layer          = 18
0.00.306.044 I llm_load_print_meta: n_head           = 8
0.00.306.045 I llm_load_print_meta: n_head_kv        = 1
0.00.306.046 I llm_load_print_meta: n_rot            = 256
0.00.306.046 I llm_load_print_meta: n_swa            = 0
0.00.306.046 I llm_load_print_meta: n_embd_head_k    = 256
0.00.306.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.306.047 I llm_load_print_meta: n_gqa            = 8
0.00.306.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.306.049 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.306.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.306.051 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.306.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.306.052 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.306.052 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.306.053 I llm_load_print_meta: n_ff             = 16384
0.00.306.053 I llm_load_print_meta: n_expert         = 0
0.00.306.054 I llm_load_print_meta: n_expert_used    = 0
0.00.306.054 I llm_load_print_meta: causal attn      = 1
0.00.306.054 I llm_load_print_meta: pooling type     = 0
0.00.306.054 I llm_load_print_meta: rope type        = 2
0.00.306.055 I llm_load_print_meta: rope scaling     = linear
0.00.306.056 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.306.057 I llm_load_print_meta: freq_scale_train = 1
0.00.306.057 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.306.058 I llm_load_print_meta: rope_finetuned   = unknown
0.00.306.058 I llm_load_print_meta: ssm_d_conv       = 0
0.00.306.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.306.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.306.058 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.306.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.306.059 I llm_load_print_meta: model type       = 2B
0.00.306.060 I llm_load_print_meta: model ftype      = Q8_0
0.00.306.061 I llm_load_print_meta: model params     = 2.51 B
0.00.306.061 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.306.062 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.306.062 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.306.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.306.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.306.064 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.306.064 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.306.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.306.064 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.306.065 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.306.065 I llm_load_print_meta: max token length = 93
0.00.384.802 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.384.808 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.384.809 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.384.809 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.384.810 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.384.811 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.006 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.014 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.014 I llama_new_context_with_model: n_batch       = 2048
0.00.390.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.015 I llama_new_context_with_model: flash_attn    = 0
0.00.390.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.018 I llama_new_context_with_model: freq_scale    = 1
0.00.390.019 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.261 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.275 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.657 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.664 I llama_new_context_with_model: graph nodes  = 601
0.00.406.664 I llama_new_context_with_model: graph splits = 1
0.00.406.666 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.291 I main: llama threadpool init, n_threads = 4
0.00.494.308 I 
0.00.494.382 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.494.386 I 
0.00.494.432 I sampler seed: 591550768
0.00.494.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.454 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.457 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.458 I 
 maneuvled.

I cannot find the correct answer to the question. Could you please provide assistance? [end of text]


0.02.081.208 I llama_perf_sampler_print:    sampling time =       3.27 ms /    23 runs   (    0.14 ms per token,  7042.25 tokens per second)
0.02.081.210 I llama_perf_context_print:        load time =     493.38 ms
0.02.081.211 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.081.213 I llama_perf_context_print:        eval time =    1573.61 ms /    22 runs   (   71.53 ms per token,    13.98 tokens per second)
0.02.081.213 I llama_perf_context_print:       total time =    1586.92 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.615 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.840 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.021.730 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.740 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.748 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.754 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.760 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.761 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.762 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.762 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.763 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.763 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.769 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.769 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.770 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.771 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.771 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.546 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.884 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.818 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.827 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.828 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.832 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.833 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.838 I llama_model_loader: - type  f32:   37 tensors
0.00.132.839 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.313 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.072 I llm_load_vocab: special tokens cache size = 5
0.00.280.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.058 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.059 I llm_load_print_meta: arch             = gemma
0.00.280.059 I llm_load_print_meta: vocab type       = SPM
0.00.280.060 I llm_load_print_meta: n_vocab          = 256000
0.00.280.061 I llm_load_print_meta: n_merges         = 0
0.00.280.061 I llm_load_print_meta: vocab_only       = 0
0.00.280.061 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.062 I llm_load_print_meta: n_embd           = 2048
0.00.280.062 I llm_load_print_meta: n_layer          = 18
0.00.280.074 I llm_load_print_meta: n_head           = 8
0.00.280.074 I llm_load_print_meta: n_head_kv        = 1
0.00.280.075 I llm_load_print_meta: n_rot            = 256
0.00.280.075 I llm_load_print_meta: n_swa            = 0
0.00.280.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.077 I llm_load_print_meta: n_gqa            = 8
0.00.280.078 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.078 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.079 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.081 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.082 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.082 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.083 I llm_load_print_meta: n_ff             = 16384
0.00.280.083 I llm_load_print_meta: n_expert         = 0
0.00.280.084 I llm_load_print_meta: n_expert_used    = 0
0.00.280.084 I llm_load_print_meta: causal attn      = 1
0.00.280.084 I llm_load_print_meta: pooling type     = 0
0.00.280.085 I llm_load_print_meta: rope type        = 2
0.00.280.085 I llm_load_print_meta: rope scaling     = linear
0.00.280.086 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.087 I llm_load_print_meta: freq_scale_train = 1
0.00.280.087 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.088 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.088 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.088 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.088 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.089 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.090 I llm_load_print_meta: model type       = 2B
0.00.280.090 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.091 I llm_load_print_meta: model params     = 2.51 B
0.00.280.092 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.095 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.096 I llm_load_print_meta: max token length = 93
0.00.350.951 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.957 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.560 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.567 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.568 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.568 I llama_new_context_with_model: n_batch       = 2048
0.00.356.569 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.569 I llama_new_context_with_model: flash_attn    = 0
0.00.356.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.573 I llama_new_context_with_model: freq_scale    = 1
0.00.356.575 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.591 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.697 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.925 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.931 I llama_new_context_with_model: graph nodes  = 601
0.00.372.932 I llama_new_context_with_model: graph splits = 1
0.00.372.934 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.887 I main: llama threadpool init, n_threads = 4
0.00.464.904 I 
0.00.464.978 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.981 I 
0.00.465.027 I sampler seed: 3287395567
0.00.465.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.040 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.050 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.053 I 
 increamically in the population of a small town.

**a) What is the mechanism of this change?**
**b) Describe how the town will

0.02.917.298 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6944.44 tokens per second)
0.02.917.301 I llama_perf_context_print:        load time =     464.02 ms
0.02.917.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.917.303 I llama_perf_context_print:        eval time =    2432.83 ms /    32 runs   (   76.03 ms per token,    13.15 tokens per second)
0.02.917.318 I llama_perf_context_print:       total time =    2452.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.613s
user	0m30.487s
sys	0m9.578s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4316 (9d0f2105)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40363.83 ms
main:    total time = 40363.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.155 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.165 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.174 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.192 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.196 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.661 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.665 I llama_model_loader: - type  f32:   37 tensors
0.00.131.667 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.669 I llama_model_loader: - type q6_K:   19 tensors
0.00.226.881 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.281.352 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.282.094 I llm_load_vocab: special tokens cache size = 5
0.00.303.331 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.303.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.303.350 I llm_load_print_meta: arch             = gemma
0.00.303.350 I llm_load_print_meta: vocab type       = SPM
0.00.303.351 I llm_load_print_meta: n_vocab          = 256000
0.00.303.352 I llm_load_print_meta: n_merges         = 0
0.00.303.353 I llm_load_print_meta: vocab_only       = 0
0.00.303.353 I llm_load_print_meta: n_ctx_train      = 8192
0.00.303.354 I llm_load_print_meta: n_embd           = 2048
0.00.303.354 I llm_load_print_meta: n_layer          = 18
0.00.303.366 I llm_load_print_meta: n_head           = 8
0.00.303.367 I llm_load_print_meta: n_head_kv        = 1
0.00.303.367 I llm_load_print_meta: n_rot            = 256
0.00.303.367 I llm_load_print_meta: n_swa            = 0
0.00.303.368 I llm_load_print_meta: n_embd_head_k    = 256
0.00.303.369 I llm_load_print_meta: n_embd_head_v    = 256
0.00.303.370 I llm_load_print_meta: n_gqa            = 8
0.00.303.372 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.303.373 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.303.374 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.303.376 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.303.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.303.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.303.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.303.379 I llm_load_print_meta: n_ff             = 16384
0.00.303.379 I llm_load_print_meta: n_expert         = 0
0.00.303.379 I llm_load_print_meta: n_expert_used    = 0
0.00.303.379 I llm_load_print_meta: causal attn      = 1
0.00.303.380 I llm_load_print_meta: pooling type     = 0
0.00.303.380 I llm_load_print_meta: rope type        = 2
0.00.303.381 I llm_load_print_meta: rope scaling     = linear
0.00.303.382 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.303.384 I llm_load_print_meta: freq_scale_train = 1
0.00.303.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.303.384 I llm_load_print_meta: rope_finetuned   = unknown
0.00.303.384 I llm_load_print_meta: ssm_d_conv       = 0
0.00.303.385 I llm_load_print_meta: ssm_d_inner      = 0
0.00.303.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.303.386 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.303.386 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.303.386 I llm_load_print_meta: model type       = 2B
0.00.303.387 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.303.388 I llm_load_print_meta: model params     = 2.51 B
0.00.303.389 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.303.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.303.390 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.303.390 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.303.391 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.303.391 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.303.391 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.303.392 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.303.392 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.303.393 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.303.393 I llm_load_print_meta: max token length = 93
0.00.363.153 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.363.159 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.363.160 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.363.160 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.363.161 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.363.162 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.368.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.387 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.388 I llama_new_context_with_model: n_batch       = 2048
0.00.368.388 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.389 I llama_new_context_with_model: flash_attn    = 0
0.00.368.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.392 I llama_new_context_with_model: freq_scale    = 1
0.00.368.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.639 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.654 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.751 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.032 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.039 I llama_new_context_with_model: graph nodes  = 601
0.00.385.039 I llama_new_context_with_model: graph splits = 1
0.00.385.041 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.511 I main: llama threadpool init, n_threads = 4
0.00.461.527 I 
0.00.461.599 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.603 I 
0.00.461.644 I sampler seed: 4020479171
0.00.461.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.668 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.671 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.672 I 
 susceptability analysis to assess the susceptibility of an object under uncertainty.

**Introduction**

In many engineering and scientific applications, it is important to assess the susceptibility

0.02.077.327 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6489.68 tokens per second)
0.02.077.330 I llama_perf_context_print:        load time =     460.76 ms
0.02.077.332 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.077.334 I llama_perf_context_print:        eval time =    1596.72 ms /    32 runs   (   49.90 ms per token,    20.04 tokens per second)
0.02.077.335 I llama_perf_context_print:       total time =    1615.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4316 (9d0f2105)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40211.13 ms
main:    total time = 40211.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.167 I build: 4316 (9d0f2105) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.353 I main: llama backend init
0.00.000.358 I main: load the model and apply lora adapter, if any
0.00.020.313 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.328 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.337 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.341 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.342 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.343 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.343 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.344 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.344 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.348 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.349 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.351 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.352 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.437 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.298 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.303 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.304 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.304 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.305 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.306 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.306 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.309 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.313 I llama_model_loader: - type  f32:   37 tensors
0.00.130.314 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.452 I llm_load_vocab: special tokens cache size = 5
0.00.273.431 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.449 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.449 I llm_load_print_meta: arch             = gemma
0.00.273.450 I llm_load_print_meta: vocab type       = SPM
0.00.273.451 I llm_load_print_meta: n_vocab          = 256000
0.00.273.451 I llm_load_print_meta: n_merges         = 0
0.00.273.452 I llm_load_print_meta: vocab_only       = 0
0.00.273.452 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.452 I llm_load_print_meta: n_embd           = 2048
0.00.273.453 I llm_load_print_meta: n_layer          = 18
0.00.273.464 I llm_load_print_meta: n_head           = 8
0.00.273.465 I llm_load_print_meta: n_head_kv        = 1
0.00.273.465 I llm_load_print_meta: n_rot            = 256
0.00.273.466 I llm_load_print_meta: n_swa            = 0
0.00.273.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.468 I llm_load_print_meta: n_gqa            = 8
0.00.273.469 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.470 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.472 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.472 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.472 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.473 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.474 I llm_load_print_meta: n_ff             = 16384
0.00.273.474 I llm_load_print_meta: n_expert         = 0
0.00.273.474 I llm_load_print_meta: n_expert_used    = 0
0.00.273.474 I llm_load_print_meta: causal attn      = 1
0.00.273.475 I llm_load_print_meta: pooling type     = 0
0.00.273.475 I llm_load_print_meta: rope type        = 2
0.00.273.475 I llm_load_print_meta: rope scaling     = linear
0.00.273.477 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.477 I llm_load_print_meta: freq_scale_train = 1
0.00.273.478 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.478 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.479 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.479 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.479 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.480 I llm_load_print_meta: model type       = 2B
0.00.273.481 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.481 I llm_load_print_meta: model params     = 2.51 B
0.00.273.482 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.485 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.486 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.486 I llm_load_print_meta: max token length = 93
0.00.331.986 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.132 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.138 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.138 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.138 I llama_new_context_with_model: n_batch       = 2048
0.00.337.139 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.140 I llama_new_context_with_model: flash_attn    = 0
0.00.337.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.144 I llama_new_context_with_model: freq_scale    = 1
0.00.337.145 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.507 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.523 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.873 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.879 I llama_new_context_with_model: graph nodes  = 601
0.00.353.879 I llama_new_context_with_model: graph splits = 1
0.00.353.881 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.471 I main: llama threadpool init, n_threads = 4
0.00.428.489 I 
0.00.428.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.568 I 
0.00.428.613 I sampler seed: 4242737419
0.00.428.624 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.635 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.638 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.639 I 
 effeg.

I'm unable to answer this question as it contains inappropriate content. I am unable to provide information or engage in discussions that are sexually suggestive

0.02.024.621 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6720.98 tokens per second)
0.02.024.624 I llama_perf_context_print:        load time =     428.10 ms
0.02.024.625 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.628 I llama_perf_context_print:        eval time =    1577.11 ms /    32 runs   (   49.28 ms per token,    20.29 tokens per second)
0.02.024.629 I llama_perf_context_print:       total time =    1596.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.526s
user	10m24.398s
sys	0m7.235s
