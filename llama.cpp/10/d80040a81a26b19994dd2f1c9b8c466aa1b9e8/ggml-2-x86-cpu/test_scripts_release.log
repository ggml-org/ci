+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.021.798 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.808 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.816 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.820 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.821 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.825 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.825 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.826 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.826 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.831 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.834 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.822 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.835 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.648 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.658 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.662 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.663 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.663 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.666 I llama_model_loader: - type  f32:   37 tensors
0.00.132.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.854 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.469 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.057 I llm_load_vocab: special tokens cache size = 5
0.00.265.397 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.414 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.414 I llm_load_print_meta: arch             = gemma
0.00.265.415 I llm_load_print_meta: vocab type       = SPM
0.00.265.415 I llm_load_print_meta: n_vocab          = 256000
0.00.265.416 I llm_load_print_meta: n_merges         = 0
0.00.265.416 I llm_load_print_meta: vocab_only       = 0
0.00.265.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.417 I llm_load_print_meta: n_embd           = 2048
0.00.265.417 I llm_load_print_meta: n_layer          = 18
0.00.265.429 I llm_load_print_meta: n_head           = 8
0.00.265.430 I llm_load_print_meta: n_head_kv        = 1
0.00.265.431 I llm_load_print_meta: n_rot            = 256
0.00.265.431 I llm_load_print_meta: n_swa            = 0
0.00.265.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.433 I llm_load_print_meta: n_gqa            = 8
0.00.265.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.435 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.436 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.437 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.438 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.439 I llm_load_print_meta: n_ff             = 16384
0.00.265.439 I llm_load_print_meta: n_expert         = 0
0.00.265.440 I llm_load_print_meta: n_expert_used    = 0
0.00.265.440 I llm_load_print_meta: causal attn      = 1
0.00.265.440 I llm_load_print_meta: pooling type     = 0
0.00.265.441 I llm_load_print_meta: rope type        = 2
0.00.265.441 I llm_load_print_meta: rope scaling     = linear
0.00.265.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.443 I llm_load_print_meta: freq_scale_train = 1
0.00.265.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.444 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.444 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.444 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.444 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.445 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.445 I llm_load_print_meta: model type       = 2B
0.00.265.446 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.447 I llm_load_print_meta: model params     = 2.51 B
0.00.265.447 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.448 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.449 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.449 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.449 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.450 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.450 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.450 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.451 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.451 I llm_load_print_meta: max token length = 93
0.00.366.016 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.024 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.025 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.025 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.026 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.026 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.343 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.349 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.350 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.350 I llama_new_context_with_model: n_batch       = 2048
0.00.371.350 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.351 I llama_new_context_with_model: flash_attn    = 0
0.00.371.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.354 I llama_new_context_with_model: freq_scale    = 1
0.00.371.355 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.778 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.793 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.160 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.166 I llama_new_context_with_model: graph nodes  = 601
0.00.388.166 I llama_new_context_with_model: graph splits = 1
0.00.388.168 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.667 I main: llama threadpool init, n_threads = 4
0.00.475.681 I 
0.00.475.775 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.778 I 
0.00.475.825 I sampler seed: 284217276
0.00.475.838 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.841 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.844 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.844 I 
 increasities and the impact on the economy.

**Introduction**

The economic impact of interest rate volatility and macroeconomic uncertainty is a significant concern. Rising interest rates

0.02.716.912 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6712.77 tokens per second)
0.02.716.914 I llama_perf_context_print:        load time =     474.78 ms
0.02.716.915 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.716.917 I llama_perf_context_print:        eval time =    2221.88 ms /    32 runs   (   69.43 ms per token,    14.40 tokens per second)
0.02.716.917 I llama_perf_context_print:       total time =    2241.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.528 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.021.111 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.124 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.134 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.138 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.143 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.143 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.147 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.148 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.148 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.149 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.149 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.414 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.303 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.303 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.304 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.304 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.305 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.308 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.310 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.310 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.311 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.314 I llama_model_loader: - type  f32:   37 tensors
0.00.131.315 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.647 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.799 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.249 I llm_load_vocab: special tokens cache size = 5
0.00.258.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.220 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.221 I llm_load_print_meta: arch             = gemma
0.00.258.221 I llm_load_print_meta: vocab type       = SPM
0.00.258.222 I llm_load_print_meta: n_vocab          = 256000
0.00.258.222 I llm_load_print_meta: n_merges         = 0
0.00.258.223 I llm_load_print_meta: vocab_only       = 0
0.00.258.223 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.223 I llm_load_print_meta: n_embd           = 2048
0.00.258.223 I llm_load_print_meta: n_layer          = 18
0.00.258.235 I llm_load_print_meta: n_head           = 8
0.00.258.236 I llm_load_print_meta: n_head_kv        = 1
0.00.258.236 I llm_load_print_meta: n_rot            = 256
0.00.258.236 I llm_load_print_meta: n_swa            = 0
0.00.258.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.238 I llm_load_print_meta: n_gqa            = 8
0.00.258.239 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.240 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.241 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.242 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.244 I llm_load_print_meta: n_ff             = 16384
0.00.258.244 I llm_load_print_meta: n_expert         = 0
0.00.258.244 I llm_load_print_meta: n_expert_used    = 0
0.00.258.244 I llm_load_print_meta: causal attn      = 1
0.00.258.245 I llm_load_print_meta: pooling type     = 0
0.00.258.245 I llm_load_print_meta: rope type        = 2
0.00.258.245 I llm_load_print_meta: rope scaling     = linear
0.00.258.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.247 I llm_load_print_meta: freq_scale_train = 1
0.00.258.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.249 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.249 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.249 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.250 I llm_load_print_meta: model type       = 2B
0.00.258.250 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.251 I llm_load_print_meta: model params     = 2.51 B
0.00.258.252 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.252 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.253 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.253 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.254 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.255 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.255 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.255 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.255 I llm_load_print_meta: max token length = 93
0.00.356.759 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.971 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.977 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.977 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.978 I llama_new_context_with_model: n_batch       = 2048
0.00.361.978 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.979 I llama_new_context_with_model: flash_attn    = 0
0.00.361.982 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.983 I llama_new_context_with_model: freq_scale    = 1
0.00.361.984 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.206 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.222 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.578 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.582 I llama_new_context_with_model: graph nodes  = 601
0.00.379.582 I llama_new_context_with_model: graph splits = 1
0.00.379.584 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.808 I main: llama threadpool init, n_threads = 4
0.00.461.824 I 
0.00.461.899 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.902 I 
0.00.461.947 I sampler seed: 765387413
0.00.461.958 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.961 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.961 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.962 I 
 increasively to the user's input.

```python
def increase(x):
    return x + 1

def main():
    number

0.02.648.842 I llama_perf_sampler_print:    sampling time =       4.57 ms /    33 runs   (    0.14 ms per token,  7217.85 tokens per second)
0.02.648.844 I llama_perf_context_print:        load time =     460.94 ms
0.02.648.845 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.648.847 I llama_perf_context_print:        eval time =    2169.01 ms /    32 runs   (   67.78 ms per token,    14.75 tokens per second)
0.02.648.847 I llama_perf_context_print:       total time =    2187.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.610 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.000.933 I main: load the model and apply lora adapter, if any
0.00.021.501 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.511 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.527 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.531 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.534 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.535 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.536 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.536 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.538 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.538 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.318 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.998 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.942 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.947 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.948 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.948 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.949 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.954 I llama_model_loader: - type  f32:   37 tensors
0.00.132.956 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.272 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.030 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.561 I llm_load_vocab: special tokens cache size = 5
0.00.264.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.983 I llm_load_print_meta: arch             = gemma
0.00.264.983 I llm_load_print_meta: vocab type       = SPM
0.00.264.984 I llm_load_print_meta: n_vocab          = 256000
0.00.264.985 I llm_load_print_meta: n_merges         = 0
0.00.264.985 I llm_load_print_meta: vocab_only       = 0
0.00.264.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.986 I llm_load_print_meta: n_embd           = 2048
0.00.264.986 I llm_load_print_meta: n_layer          = 18
0.00.264.998 I llm_load_print_meta: n_head           = 8
0.00.264.999 I llm_load_print_meta: n_head_kv        = 1
0.00.265.000 I llm_load_print_meta: n_rot            = 256
0.00.265.000 I llm_load_print_meta: n_swa            = 0
0.00.265.000 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.000 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.001 I llm_load_print_meta: n_gqa            = 8
0.00.265.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.004 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.006 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.007 I llm_load_print_meta: n_ff             = 16384
0.00.265.008 I llm_load_print_meta: n_expert         = 0
0.00.265.008 I llm_load_print_meta: n_expert_used    = 0
0.00.265.008 I llm_load_print_meta: causal attn      = 1
0.00.265.009 I llm_load_print_meta: pooling type     = 0
0.00.265.009 I llm_load_print_meta: rope type        = 2
0.00.265.009 I llm_load_print_meta: rope scaling     = linear
0.00.265.011 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.012 I llm_load_print_meta: freq_scale_train = 1
0.00.265.012 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.012 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.012 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.013 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.013 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.013 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.013 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.014 I llm_load_print_meta: model type       = 2B
0.00.265.015 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.015 I llm_load_print_meta: model params     = 2.51 B
0.00.265.016 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.017 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.017 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.017 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.018 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.018 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.018 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.019 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.019 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.019 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.020 I llm_load_print_meta: max token length = 93
0.00.352.732 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.738 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.739 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.740 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.740 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.741 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.055 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.061 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.061 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.062 I llama_new_context_with_model: n_batch       = 2048
0.00.358.062 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.063 I llama_new_context_with_model: flash_attn    = 0
0.00.358.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.066 I llama_new_context_with_model: freq_scale    = 1
0.00.358.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.743 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.750 I llama_new_context_with_model: graph nodes  = 601
0.00.374.750 I llama_new_context_with_model: graph splits = 1
0.00.374.752 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.473 I main: llama threadpool init, n_threads = 4
0.00.461.486 I 
0.00.461.564 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.567 I 
0.00.461.608 I sampler seed: 916904279
0.00.461.618 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.621 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.622 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.623 I 
 increably! [end of text]


0.00.732.334 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8210.18 tokens per second)
0.00.732.336 I llama_perf_context_print:        load time =     460.52 ms
0.00.732.338 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.732.340 I llama_perf_context_print:        eval time =     267.45 ms /     4 runs   (   66.86 ms per token,    14.96 tokens per second)
0.00.732.341 I llama_perf_context_print:       total time =     270.87 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.521 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.026 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.035 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.043 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.053 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.063 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.064 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.065 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.066 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.067 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.072 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.073 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.367 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.377 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.380 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.382 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.382 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.383 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.387 I llama_model_loader: - type  f32:   37 tensors
0.00.132.389 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.486 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.765 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.254 I llm_load_vocab: special tokens cache size = 5
0.00.278.414 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.432 I llm_load_print_meta: arch             = gemma
0.00.278.433 I llm_load_print_meta: vocab type       = SPM
0.00.278.433 I llm_load_print_meta: n_vocab          = 256000
0.00.278.434 I llm_load_print_meta: n_merges         = 0
0.00.278.434 I llm_load_print_meta: vocab_only       = 0
0.00.278.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.435 I llm_load_print_meta: n_embd           = 2048
0.00.278.435 I llm_load_print_meta: n_layer          = 18
0.00.278.446 I llm_load_print_meta: n_head           = 8
0.00.278.447 I llm_load_print_meta: n_head_kv        = 1
0.00.278.448 I llm_load_print_meta: n_rot            = 256
0.00.278.448 I llm_load_print_meta: n_swa            = 0
0.00.278.448 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.449 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.450 I llm_load_print_meta: n_gqa            = 8
0.00.278.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.454 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.455 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.456 I llm_load_print_meta: n_ff             = 16384
0.00.278.456 I llm_load_print_meta: n_expert         = 0
0.00.278.457 I llm_load_print_meta: n_expert_used    = 0
0.00.278.457 I llm_load_print_meta: causal attn      = 1
0.00.278.457 I llm_load_print_meta: pooling type     = 0
0.00.278.458 I llm_load_print_meta: rope type        = 2
0.00.278.458 I llm_load_print_meta: rope scaling     = linear
0.00.278.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.460 I llm_load_print_meta: freq_scale_train = 1
0.00.278.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.463 I llm_load_print_meta: model type       = 2B
0.00.278.463 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.464 I llm_load_print_meta: model params     = 2.51 B
0.00.278.465 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.467 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.468 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.468 I llm_load_print_meta: max token length = 93
0.00.349.797 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.805 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.036 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.041 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.042 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.042 I llama_new_context_with_model: n_batch       = 2048
0.00.355.043 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.043 I llama_new_context_with_model: flash_attn    = 0
0.00.355.046 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.047 I llama_new_context_with_model: freq_scale    = 1
0.00.355.048 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.225 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.240 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.595 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.602 I llama_new_context_with_model: graph nodes  = 601
0.00.371.602 I llama_new_context_with_model: graph splits = 1
0.00.371.604 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.089 I main: llama threadpool init, n_threads = 4
0.00.459.100 I 
0.00.459.192 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.196 I 
0.00.459.247 I sampler seed: 3800483888
0.00.459.258 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.266 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.267 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.267 I 
 increasities. [end of text]


0.00.761.544 I llama_perf_sampler_print:    sampling time =       0.74 ms /     5 runs   (    0.15 ms per token,  6765.90 tokens per second)
0.00.761.547 I llama_perf_context_print:        load time =     458.20 ms
0.00.761.548 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.761.549 I llama_perf_context_print:        eval time =     298.76 ms /     4 runs   (   74.69 ms per token,    13.39 tokens per second)
0.00.761.549 I llama_perf_context_print:       total time =     302.46 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.313s
user	0m22.846s
sys	0m9.364s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (10d80040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32057.89 ms
main:    total time = 32057.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.912 I main: load the model and apply lora adapter, if any
0.00.021.322 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.332 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.340 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.347 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.350 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.351 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.353 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.353 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.357 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.358 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.359 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.359 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.360 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.607 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.472 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.319 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.325 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.326 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.327 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.328 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.328 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.331 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.331 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.332 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.332 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.333 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.336 I llama_model_loader: - type  f32:   37 tensors
0.00.131.337 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.338 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.124 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.407 I llm_load_vocab: special tokens cache size = 5
0.00.268.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.799 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.799 I llm_load_print_meta: arch             = gemma
0.00.268.800 I llm_load_print_meta: vocab type       = SPM
0.00.268.801 I llm_load_print_meta: n_vocab          = 256000
0.00.268.801 I llm_load_print_meta: n_merges         = 0
0.00.268.801 I llm_load_print_meta: vocab_only       = 0
0.00.268.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.802 I llm_load_print_meta: n_embd           = 2048
0.00.268.802 I llm_load_print_meta: n_layer          = 18
0.00.268.813 I llm_load_print_meta: n_head           = 8
0.00.268.814 I llm_load_print_meta: n_head_kv        = 1
0.00.268.815 I llm_load_print_meta: n_rot            = 256
0.00.268.815 I llm_load_print_meta: n_swa            = 0
0.00.268.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.816 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.817 I llm_load_print_meta: n_gqa            = 8
0.00.268.818 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.819 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.820 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.822 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.822 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.823 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.823 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.824 I llm_load_print_meta: n_ff             = 16384
0.00.268.825 I llm_load_print_meta: n_expert         = 0
0.00.268.825 I llm_load_print_meta: n_expert_used    = 0
0.00.268.826 I llm_load_print_meta: causal attn      = 1
0.00.268.826 I llm_load_print_meta: pooling type     = 0
0.00.268.826 I llm_load_print_meta: rope type        = 2
0.00.268.827 I llm_load_print_meta: rope scaling     = linear
0.00.268.828 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.829 I llm_load_print_meta: freq_scale_train = 1
0.00.268.829 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.830 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.830 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.830 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.831 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.832 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.832 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.833 I llm_load_print_meta: model type       = 2B
0.00.268.834 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.834 I llm_load_print_meta: model params     = 2.51 B
0.00.268.835 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.836 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.837 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.838 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.838 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.838 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.839 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.839 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.840 I llm_load_print_meta: max token length = 93
0.00.330.145 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.152 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.153 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.153 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.154 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.154 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.295 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.302 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.302 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.303 I llama_new_context_with_model: n_batch       = 2048
0.00.335.303 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.304 I llama_new_context_with_model: flash_attn    = 0
0.00.335.306 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.307 I llama_new_context_with_model: freq_scale    = 1
0.00.335.308 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.449 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.465 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.795 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.801 I llama_new_context_with_model: graph nodes  = 601
0.00.351.802 I llama_new_context_with_model: graph splits = 1
0.00.351.803 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.700 I main: llama threadpool init, n_threads = 4
0.00.428.714 I 
0.00.428.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.428.800 I 
0.00.428.848 I sampler seed: 1877078766
0.00.428.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.863 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.864 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.865 I 
 seconded by the word 'at'.

At this moment, I am unable to answer your question as I do not have access to your personal information or current

0.02.059.523 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6873.57 tokens per second)
0.02.059.526 I llama_perf_context_print:        load time =     427.76 ms
0.02.059.528 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.059.529 I llama_perf_context_print:        eval time =    1612.32 ms /    32 runs   (   50.39 ms per token,    19.85 tokens per second)
0.02.059.530 I llama_perf_context_print:       total time =    1630.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (10d80040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32204.02 ms
main:    total time = 32204.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.022.617 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.634 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.643 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.647 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.648 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.649 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.655 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.656 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.656 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.590 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.758 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.619 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.626 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.627 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.628 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.632 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.634 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.637 I llama_model_loader: - type  f32:   37 tensors
0.00.133.638 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.639 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.878 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.767 I llm_load_vocab: special tokens cache size = 5
0.00.271.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.356 I llm_load_print_meta: arch             = gemma
0.00.271.356 I llm_load_print_meta: vocab type       = SPM
0.00.271.357 I llm_load_print_meta: n_vocab          = 256000
0.00.271.358 I llm_load_print_meta: n_merges         = 0
0.00.271.358 I llm_load_print_meta: vocab_only       = 0
0.00.271.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.359 I llm_load_print_meta: n_embd           = 2048
0.00.271.359 I llm_load_print_meta: n_layer          = 18
0.00.271.371 I llm_load_print_meta: n_head           = 8
0.00.271.373 I llm_load_print_meta: n_head_kv        = 1
0.00.271.373 I llm_load_print_meta: n_rot            = 256
0.00.271.374 I llm_load_print_meta: n_swa            = 0
0.00.271.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.375 I llm_load_print_meta: n_gqa            = 8
0.00.271.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.377 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.378 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.379 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.380 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.380 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.381 I llm_load_print_meta: n_ff             = 16384
0.00.271.381 I llm_load_print_meta: n_expert         = 0
0.00.271.382 I llm_load_print_meta: n_expert_used    = 0
0.00.271.382 I llm_load_print_meta: causal attn      = 1
0.00.271.382 I llm_load_print_meta: pooling type     = 0
0.00.271.382 I llm_load_print_meta: rope type        = 2
0.00.271.383 I llm_load_print_meta: rope scaling     = linear
0.00.271.384 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.385 I llm_load_print_meta: freq_scale_train = 1
0.00.271.385 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.387 I llm_load_print_meta: model type       = 2B
0.00.271.388 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.389 I llm_load_print_meta: model params     = 2.51 B
0.00.271.389 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.390 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.391 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.392 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.393 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.394 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.395 I llm_load_print_meta: max token length = 93
0.00.329.094 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.318 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.325 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.326 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.326 I llama_new_context_with_model: n_batch       = 2048
0.00.334.326 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.327 I llama_new_context_with_model: flash_attn    = 0
0.00.334.330 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.331 I llama_new_context_with_model: freq_scale    = 1
0.00.334.332 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.229 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.242 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.332 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.589 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.596 I llama_new_context_with_model: graph nodes  = 601
0.00.351.596 I llama_new_context_with_model: graph splits = 1
0.00.351.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.422 I main: llama threadpool init, n_threads = 4
0.00.425.436 I 
0.00.425.513 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.516 I 
0.00.425.563 I sampler seed: 4284985495
0.00.425.575 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.579 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.581 I 
 squaRELLI

## **SquasreLLI: A Versatile Framework for Smart Contracts Development**

SquasreLLI is a **lightweight, modular framework**

0.02.005.867 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6776.18 tokens per second)
0.02.005.870 I llama_perf_context_print:        load time =     424.50 ms
0.02.005.872 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.874 I llama_perf_context_print:        eval time =    1561.82 ms /    32 runs   (   48.81 ms per token,    20.49 tokens per second)
0.02.005.875 I llama_perf_context_print:       total time =    1580.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.116s
user	8m14.597s
sys	0m6.854s
