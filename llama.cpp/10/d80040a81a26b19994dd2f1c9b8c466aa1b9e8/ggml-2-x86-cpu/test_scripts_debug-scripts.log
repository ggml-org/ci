+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.001.088 I main: load the model and apply lora adapter, if any
0.00.023.467 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.477 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.560 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.573 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.577 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.579 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.592 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.600 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.604 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.607 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.608 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.706 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.514 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.525 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.526 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.528 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.529 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.536 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.546 I llama_model_loader: - type  f32:   37 tensors
0.00.268.548 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.364 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.866 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.722 I llm_load_vocab: special tokens cache size = 5
0.00.612.812 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.885 I llm_load_print_meta: arch             = gemma
0.00.612.886 I llm_load_print_meta: vocab type       = SPM
0.00.612.886 I llm_load_print_meta: n_vocab          = 256000
0.00.612.889 I llm_load_print_meta: n_merges         = 0
0.00.612.889 I llm_load_print_meta: vocab_only       = 0
0.00.612.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.890 I llm_load_print_meta: n_embd           = 2048
0.00.612.890 I llm_load_print_meta: n_layer          = 18
0.00.612.954 I llm_load_print_meta: n_head           = 8
0.00.612.961 I llm_load_print_meta: n_head_kv        = 1
0.00.612.962 I llm_load_print_meta: n_rot            = 256
0.00.612.963 I llm_load_print_meta: n_swa            = 0
0.00.612.967 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.972 I llm_load_print_meta: n_gqa            = 8
0.00.612.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.984 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.985 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.986 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.987 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.997 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.003 I llm_load_print_meta: n_ff             = 16384
0.00.613.004 I llm_load_print_meta: n_expert         = 0
0.00.613.005 I llm_load_print_meta: n_expert_used    = 0
0.00.613.005 I llm_load_print_meta: causal attn      = 1
0.00.613.005 I llm_load_print_meta: pooling type     = 0
0.00.613.016 I llm_load_print_meta: rope type        = 2
0.00.613.019 I llm_load_print_meta: rope scaling     = linear
0.00.613.020 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.021 I llm_load_print_meta: freq_scale_train = 1
0.00.613.022 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.022 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.022 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.022 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.023 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.023 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.023 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.024 I llm_load_print_meta: model type       = 2B
0.00.613.025 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.025 I llm_load_print_meta: model params     = 2.51 B
0.00.613.034 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.034 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.035 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.036 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.037 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.037 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.038 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.039 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.048 I llm_load_print_meta: max token length = 93
0.00.715.306 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.715.316 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.715.317 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.715.318 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.715.318 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.715.319 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.721.149 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.155 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.156 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.156 I llama_new_context_with_model: n_batch       = 2048
0.00.721.156 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.157 I llama_new_context_with_model: flash_attn    = 0
0.00.721.159 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.159 I llama_new_context_with_model: freq_scale    = 1
0.00.721.160 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.254 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.377 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.932 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.937 I llama_new_context_with_model: graph nodes  = 601
0.00.739.937 I llama_new_context_with_model: graph splits = 1
0.00.739.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.598 I main: llama threadpool init, n_threads = 4
0.01.349.610 I 
0.01.349.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.720 I 
0.01.349.951 I sampler seed: 3723934126
0.01.349.964 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.974 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.974 I 
 increasities, and other forms of inappropriate sexual behavior are not acceptable.

If you are experiencing any of these behaviors, please stop and seek appropriate help. [end of text]


0.14.900.549 I llama_perf_sampler_print:    sampling time =      48.52 ms /    33 runs   (    1.47 ms per token,   680.16 tokens per second)
0.14.900.552 I llama_perf_context_print:        load time =    1348.41 ms
0.14.900.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.900.577 I llama_perf_context_print:        eval time =   13461.12 ms /    32 runs   (  420.66 ms per token,     2.38 tokens per second)
0.14.900.578 I llama_perf_context_print:       total time =   13550.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.676 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.782 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.796 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.797 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.803 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.806 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.810 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.812 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.814 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.816 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.824 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.826 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.828 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.829 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.832 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.653 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.664 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.668 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.670 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.681 I llama_model_loader: - type  f32:   37 tensors
0.00.268.684 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.586 I llm_load_vocab: special tokens cache size = 5
0.00.619.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.497 I llm_load_print_meta: arch             = gemma
0.00.619.497 I llm_load_print_meta: vocab type       = SPM
0.00.619.498 I llm_load_print_meta: n_vocab          = 256000
0.00.619.501 I llm_load_print_meta: n_merges         = 0
0.00.619.501 I llm_load_print_meta: vocab_only       = 0
0.00.619.502 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.502 I llm_load_print_meta: n_embd           = 2048
0.00.619.502 I llm_load_print_meta: n_layer          = 18
0.00.619.588 I llm_load_print_meta: n_head           = 8
0.00.619.602 I llm_load_print_meta: n_head_kv        = 1
0.00.619.603 I llm_load_print_meta: n_rot            = 256
0.00.619.604 I llm_load_print_meta: n_swa            = 0
0.00.619.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.612 I llm_load_print_meta: n_gqa            = 8
0.00.619.619 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.632 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.633 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.635 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.635 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.647 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.655 I llm_load_print_meta: n_ff             = 16384
0.00.619.657 I llm_load_print_meta: n_expert         = 0
0.00.619.658 I llm_load_print_meta: n_expert_used    = 0
0.00.619.658 I llm_load_print_meta: causal attn      = 1
0.00.619.659 I llm_load_print_meta: pooling type     = 0
0.00.619.660 I llm_load_print_meta: rope type        = 2
0.00.619.661 I llm_load_print_meta: rope scaling     = linear
0.00.619.663 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.665 I llm_load_print_meta: freq_scale_train = 1
0.00.619.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.669 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.673 I llm_load_print_meta: model type       = 2B
0.00.619.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.679 I llm_load_print_meta: model params     = 2.51 B
0.00.619.689 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.690 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.691 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.693 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.694 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.695 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.701 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.703 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.704 I llm_load_print_meta: max token length = 93
0.00.719.590 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.726.015 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.023 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.023 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.024 I llama_new_context_with_model: n_batch       = 2048
0.00.726.024 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.025 I llama_new_context_with_model: flash_attn    = 0
0.00.726.028 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.029 I llama_new_context_with_model: freq_scale    = 1
0.00.726.030 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.504 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.545 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.681 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.221 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.225 I llama_new_context_with_model: graph nodes  = 601
0.00.745.226 I llama_new_context_with_model: graph splits = 1
0.00.745.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.378 I main: llama threadpool init, n_threads = 4
0.01.357.392 I 
0.01.357.519 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.522 I 
0.01.357.761 I sampler seed: 2454306353
0.01.357.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.782 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.787 I 
 increasities

The given text contains information about "reciprocal frustrations". I need to provide a concise and informative response that captures the essence of the text without

0.14.986.180 I llama_perf_sampler_print:    sampling time =      48.70 ms /    33 runs   (    1.48 ms per token,   677.55 tokens per second)
0.14.986.183 I llama_perf_context_print:        load time =    1356.15 ms
0.14.986.184 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.986.186 I llama_perf_context_print:        eval time =   13539.53 ms /    32 runs   (  423.11 ms per token,     2.36 tokens per second)
0.14.986.187 I llama_perf_context_print:       total time =   13628.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.001.159 I main: load the model and apply lora adapter, if any
0.00.023.496 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.505 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.608 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.621 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.622 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.628 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.629 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.630 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.631 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.633 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.635 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.650 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.652 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.994 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.377 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.378 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.379 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.382 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.383 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.386 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.387 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.388 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.389 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.398 I llama_model_loader: - type  f32:   37 tensors
0.00.268.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.062 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.166 I llm_load_vocab: special tokens cache size = 5
0.00.610.092 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.165 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.167 I llm_load_print_meta: arch             = gemma
0.00.610.167 I llm_load_print_meta: vocab type       = SPM
0.00.610.168 I llm_load_print_meta: n_vocab          = 256000
0.00.610.170 I llm_load_print_meta: n_merges         = 0
0.00.610.171 I llm_load_print_meta: vocab_only       = 0
0.00.610.171 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.172 I llm_load_print_meta: n_embd           = 2048
0.00.610.172 I llm_load_print_meta: n_layer          = 18
0.00.610.236 I llm_load_print_meta: n_head           = 8
0.00.610.243 I llm_load_print_meta: n_head_kv        = 1
0.00.610.243 I llm_load_print_meta: n_rot            = 256
0.00.610.244 I llm_load_print_meta: n_swa            = 0
0.00.610.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.249 I llm_load_print_meta: n_gqa            = 8
0.00.610.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.259 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.261 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.263 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.263 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.264 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.269 I llm_load_print_meta: n_ff             = 16384
0.00.610.269 I llm_load_print_meta: n_expert         = 0
0.00.610.269 I llm_load_print_meta: n_expert_used    = 0
0.00.610.270 I llm_load_print_meta: causal attn      = 1
0.00.610.274 I llm_load_print_meta: pooling type     = 0
0.00.610.274 I llm_load_print_meta: rope type        = 2
0.00.610.275 I llm_load_print_meta: rope scaling     = linear
0.00.610.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.277 I llm_load_print_meta: freq_scale_train = 1
0.00.610.277 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.277 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.278 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.279 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.280 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.280 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.281 I llm_load_print_meta: model type       = 2B
0.00.610.282 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.282 I llm_load_print_meta: model params     = 2.51 B
0.00.610.291 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.293 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.294 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.304 I llm_load_print_meta: max token length = 93
0.00.699.921 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.699.929 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.930 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.699.931 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.699.932 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.933 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.705.910 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.917 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.917 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.918 I llama_new_context_with_model: n_batch       = 2048
0.00.705.918 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.919 I llama_new_context_with_model: flash_attn    = 0
0.00.705.921 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.922 I llama_new_context_with_model: freq_scale    = 1
0.00.705.923 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.722.222 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.722.261 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.722.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.925 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.724.929 I llama_new_context_with_model: graph nodes  = 601
0.00.724.930 I llama_new_context_with_model: graph splits = 1
0.00.724.954 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.536 I main: llama threadpool init, n_threads = 4
0.01.332.550 I 
0.01.332.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.678 I 
0.01.332.916 I sampler seed: 2795847561
0.01.332.937 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.946 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.954 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.956 I 
 increasities, such as "I love you" or "you're my sunshine," can be incredibly powerful in a relationship. These expressions of affection can boost

0.14.889.482 I llama_perf_sampler_print:    sampling time =      48.13 ms /    33 runs   (    1.46 ms per token,   685.64 tokens per second)
0.14.889.485 I llama_perf_context_print:        load time =    1331.27 ms
0.14.889.510 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.512 I llama_perf_context_print:        eval time =   13467.82 ms /    32 runs   (  420.87 ms per token,     2.38 tokens per second)
0.14.889.513 I llama_perf_context_print:       total time =   13556.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.001.093 I main: load the model and apply lora adapter, if any
0.00.023.244 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.345 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.357 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.364 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.365 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.377 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.390 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.391 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.392 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.474 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.067 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.071 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.072 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.073 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.077 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.078 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.079 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.080 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.081 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.090 I llama_model_loader: - type  f32:   37 tensors
0.00.269.093 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.361 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.240 I llm_load_vocab: special tokens cache size = 5
0.00.612.208 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.288 I llm_load_print_meta: arch             = gemma
0.00.612.289 I llm_load_print_meta: vocab type       = SPM
0.00.612.290 I llm_load_print_meta: n_vocab          = 256000
0.00.612.293 I llm_load_print_meta: n_merges         = 0
0.00.612.293 I llm_load_print_meta: vocab_only       = 0
0.00.612.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.294 I llm_load_print_meta: n_embd           = 2048
0.00.612.295 I llm_load_print_meta: n_layer          = 18
0.00.612.367 I llm_load_print_meta: n_head           = 8
0.00.612.379 I llm_load_print_meta: n_head_kv        = 1
0.00.612.381 I llm_load_print_meta: n_rot            = 256
0.00.612.381 I llm_load_print_meta: n_swa            = 0
0.00.612.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.393 I llm_load_print_meta: n_gqa            = 8
0.00.612.400 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.409 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.412 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.413 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.414 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.421 I llm_load_print_meta: n_ff             = 16384
0.00.612.422 I llm_load_print_meta: n_expert         = 0
0.00.612.423 I llm_load_print_meta: n_expert_used    = 0
0.00.612.424 I llm_load_print_meta: causal attn      = 1
0.00.612.424 I llm_load_print_meta: pooling type     = 0
0.00.612.425 I llm_load_print_meta: rope type        = 2
0.00.612.426 I llm_load_print_meta: rope scaling     = linear
0.00.612.428 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.429 I llm_load_print_meta: freq_scale_train = 1
0.00.612.429 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.430 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.430 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.432 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.433 I llm_load_print_meta: model type       = 2B
0.00.612.434 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.435 I llm_load_print_meta: model params     = 2.51 B
0.00.612.445 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.446 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.447 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.448 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.449 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.449 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.451 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.459 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.461 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.462 I llm_load_print_meta: max token length = 93
0.00.684.823 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.684.833 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.690.945 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.950 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.951 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.952 I llama_new_context_with_model: n_batch       = 2048
0.00.690.952 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.953 I llama_new_context_with_model: flash_attn    = 0
0.00.690.955 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.957 I llama_new_context_with_model: freq_scale    = 1
0.00.690.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.035 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.078 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.208 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.758 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.709.762 I llama_new_context_with_model: graph nodes  = 601
0.00.709.763 I llama_new_context_with_model: graph splits = 1
0.00.709.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.651 I main: llama threadpool init, n_threads = 4
0.01.323.663 I 
0.01.323.780 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.783 I 
0.01.324.021 I sampler seed: 1430548945
0.01.324.036 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.044 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.047 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.048 I 
 seconally to a noun.

A noun is a word that represents a person, place, thing, or idea.

**Noun:** _____

Answer:

0.14.892.139 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.14 tokens per second)
0.14.892.154 I llama_perf_context_print:        load time =    1322.47 ms
0.14.892.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.158 I llama_perf_context_print:        eval time =   13479.51 ms /    32 runs   (  421.23 ms per token,     2.37 tokens per second)
0.14.892.159 I llama_perf_context_print:       total time =   13568.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.467s
user	3m49.930s
sys	0m9.348s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (10d80040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198897.82 ms
main:    total time = 198897.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.023.925 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.936 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.038 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.046 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.055 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.058 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.059 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.060 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.066 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.067 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.068 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.079 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.334 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.944 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.948 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.949 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.950 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.951 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.952 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.959 I llama_model_loader: - type  f32:   37 tensors
0.00.267.961 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.962 I llama_model_loader: - type q6_K:   19 tensors
0.00.429.917 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.732 I llm_load_vocab: special tokens cache size = 5
0.00.588.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.969 I llm_load_print_meta: arch             = gemma
0.00.588.970 I llm_load_print_meta: vocab type       = SPM
0.00.588.971 I llm_load_print_meta: n_vocab          = 256000
0.00.588.973 I llm_load_print_meta: n_merges         = 0
0.00.588.974 I llm_load_print_meta: vocab_only       = 0
0.00.588.974 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.975 I llm_load_print_meta: n_embd           = 2048
0.00.588.975 I llm_load_print_meta: n_layer          = 18
0.00.589.039 I llm_load_print_meta: n_head           = 8
0.00.589.046 I llm_load_print_meta: n_head_kv        = 1
0.00.589.047 I llm_load_print_meta: n_rot            = 256
0.00.589.047 I llm_load_print_meta: n_swa            = 0
0.00.589.049 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.049 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.054 I llm_load_print_meta: n_gqa            = 8
0.00.589.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.064 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.067 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.068 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.073 I llm_load_print_meta: n_ff             = 16384
0.00.589.074 I llm_load_print_meta: n_expert         = 0
0.00.589.075 I llm_load_print_meta: n_expert_used    = 0
0.00.589.076 I llm_load_print_meta: causal attn      = 1
0.00.589.077 I llm_load_print_meta: pooling type     = 0
0.00.589.077 I llm_load_print_meta: rope type        = 2
0.00.589.081 I llm_load_print_meta: rope scaling     = linear
0.00.589.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.083 I llm_load_print_meta: freq_scale_train = 1
0.00.589.084 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.085 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.105 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.106 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.107 I llm_load_print_meta: model type       = 2B
0.00.589.111 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.589.112 I llm_load_print_meta: model params     = 2.51 B
0.00.589.121 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.589.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.125 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.125 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.132 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.134 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.134 I llm_load_print_meta: max token length = 93
0.00.653.167 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.653.177 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.653.178 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.653.179 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.653.179 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.653.180 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.659.051 I llama_new_context_with_model: n_seq_max     = 1
0.00.659.057 I llama_new_context_with_model: n_ctx         = 4096
0.00.659.058 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.659.058 I llama_new_context_with_model: n_batch       = 2048
0.00.659.059 I llama_new_context_with_model: n_ubatch      = 512
0.00.659.059 I llama_new_context_with_model: flash_attn    = 0
0.00.659.062 I llama_new_context_with_model: freq_base     = 10000.0
0.00.659.063 I llama_new_context_with_model: freq_scale    = 1
0.00.659.064 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.675.152 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.675.191 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.675.317 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.677.875 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.677.879 I llama_new_context_with_model: graph nodes  = 601
0.00.677.880 I llama_new_context_with_model: graph splits = 1
0.00.677.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.249.700 I main: llama threadpool init, n_threads = 4
0.01.249.712 I 
0.01.249.821 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.249.825 I 
0.01.250.055 I sampler seed: 2957130627
0.01.250.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.250.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.250.077 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.250.078 I 
 seconded, while also being partially obscured by the hood and visor of the driver's helmet. [end of text]


0.08.370.173 I llama_perf_sampler_print:    sampling time =      31.69 ms /    22 runs   (    1.44 ms per token,   694.29 tokens per second)
0.08.370.177 I llama_perf_context_print:        load time =    1248.50 ms
0.08.370.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.370.194 I llama_perf_context_print:        eval time =    7059.89 ms /    21 runs   (  336.19 ms per token,     2.97 tokens per second)
0.08.370.195 I llama_perf_context_print:       total time =    7120.48 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (10d80040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198697.18 ms
main:    total time = 198697.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4052 (10d80040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.001.099 I main: load the model and apply lora adapter, if any
0.00.023.337 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.464 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.486 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.487 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.211 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.147 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.799 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.801 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.802 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.809 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.810 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.819 I llama_model_loader: - type  f32:   37 tensors
0.00.267.821 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.822 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.543 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.194 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.121 I llm_load_vocab: special tokens cache size = 5
0.00.594.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.639 I llm_load_print_meta: arch             = gemma
0.00.594.640 I llm_load_print_meta: vocab type       = SPM
0.00.594.640 I llm_load_print_meta: n_vocab          = 256000
0.00.594.643 I llm_load_print_meta: n_merges         = 0
0.00.594.643 I llm_load_print_meta: vocab_only       = 0
0.00.594.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.644 I llm_load_print_meta: n_embd           = 2048
0.00.594.644 I llm_load_print_meta: n_layer          = 18
0.00.594.710 I llm_load_print_meta: n_head           = 8
0.00.594.718 I llm_load_print_meta: n_head_kv        = 1
0.00.594.719 I llm_load_print_meta: n_rot            = 256
0.00.594.719 I llm_load_print_meta: n_swa            = 0
0.00.594.720 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.720 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.725 I llm_load_print_meta: n_gqa            = 8
0.00.594.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.734 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.736 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.745 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.749 I llm_load_print_meta: n_ff             = 16384
0.00.594.750 I llm_load_print_meta: n_expert         = 0
0.00.594.750 I llm_load_print_meta: n_expert_used    = 0
0.00.594.751 I llm_load_print_meta: causal attn      = 1
0.00.594.751 I llm_load_print_meta: pooling type     = 0
0.00.594.754 I llm_load_print_meta: rope type        = 2
0.00.594.755 I llm_load_print_meta: rope scaling     = linear
0.00.594.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.758 I llm_load_print_meta: freq_scale_train = 1
0.00.594.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.758 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.759 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.759 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.761 I llm_load_print_meta: model type       = 2B
0.00.594.761 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.763 I llm_load_print_meta: model params     = 2.51 B
0.00.594.773 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.774 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.778 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.786 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.788 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.788 I llm_load_print_meta: max token length = 93
0.00.654.753 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.660.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.660.446 I llama_new_context_with_model: n_ctx         = 4096
0.00.660.447 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.660.447 I llama_new_context_with_model: n_batch       = 2048
0.00.660.448 I llama_new_context_with_model: n_ubatch      = 512
0.00.660.448 I llama_new_context_with_model: flash_attn    = 0
0.00.660.450 I llama_new_context_with_model: freq_base     = 10000.0
0.00.660.451 I llama_new_context_with_model: freq_scale    = 1
0.00.660.452 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.676.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.676.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.676.829 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.679.387 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.679.391 I llama_new_context_with_model: graph nodes  = 601
0.00.679.391 I llama_new_context_with_model: graph splits = 1
0.00.679.416 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.252.711 I main: llama threadpool init, n_threads = 4
0.01.252.724 I 
0.01.252.836 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.252.840 I 
0.01.253.072 I sampler seed: 2146473291
0.01.253.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.253.090 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.253.094 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.253.094 I 
 effe.io provides a suite of tools and features to help businesses and organizations of all sizes manage their supply chain.

**a. Explain the significance of supply

0.12.135.164 I llama_perf_sampler_print:    sampling time =      48.13 ms /    33 runs   (    1.46 ms per token,   685.63 tokens per second)
0.12.135.168 I llama_perf_context_print:        load time =    1251.52 ms
0.12.135.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.135.172 I llama_perf_context_print:        eval time =   10793.63 ms /    32 runs   (  337.30 ms per token,     2.96 tokens per second)
0.12.135.174 I llama_perf_context_print:       total time =   10882.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.959s
user	49m55.999s
sys	0m6.237s
