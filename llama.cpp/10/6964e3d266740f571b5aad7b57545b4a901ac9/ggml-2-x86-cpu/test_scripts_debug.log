+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.758 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.770 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.880 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.886 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.892 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.893 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.894 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.895 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.903 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.904 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.906 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.908 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.407 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.314 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.323 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.325 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.338 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.339 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.348 I llama_model_loader: - type  f32:   37 tensors
0.00.350.351 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.695 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.051 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.063 I llm_load_vocab: special tokens cache size = 5
0.00.826.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.793 I llm_load_print_meta: arch             = gemma
0.00.826.794 I llm_load_print_meta: vocab type       = SPM
0.00.826.795 I llm_load_print_meta: n_vocab          = 256000
0.00.826.797 I llm_load_print_meta: n_merges         = 0
0.00.826.798 I llm_load_print_meta: vocab_only       = 0
0.00.826.798 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.799 I llm_load_print_meta: n_embd           = 2048
0.00.826.799 I llm_load_print_meta: n_layer          = 18
0.00.826.866 I llm_load_print_meta: n_head           = 8
0.00.826.873 I llm_load_print_meta: n_head_kv        = 1
0.00.826.874 I llm_load_print_meta: n_rot            = 256
0.00.826.874 I llm_load_print_meta: n_swa            = 0
0.00.826.875 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.875 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.880 I llm_load_print_meta: n_gqa            = 8
0.00.826.885 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.890 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.911 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.914 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.920 I llm_load_print_meta: n_ff             = 16384
0.00.826.921 I llm_load_print_meta: n_expert         = 0
0.00.826.921 I llm_load_print_meta: n_expert_used    = 0
0.00.826.922 I llm_load_print_meta: causal attn      = 1
0.00.826.937 I llm_load_print_meta: pooling type     = 0
0.00.826.938 I llm_load_print_meta: rope type        = 2
0.00.826.939 I llm_load_print_meta: rope scaling     = linear
0.00.826.940 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.941 I llm_load_print_meta: freq_scale_train = 1
0.00.826.941 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.943 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.944 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.944 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.944 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.945 I llm_load_print_meta: model type       = 2B
0.00.826.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.947 I llm_load_print_meta: model params     = 2.51 B
0.00.826.962 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.963 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.965 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.966 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.967 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.973 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.976 I llm_load_print_meta: max token length = 93
0.00.927.503 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.927.513 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.927.514 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.927.515 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.927.516 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.927.517 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.933.525 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.533 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.534 I llama_new_context_with_model: n_batch       = 2048
0.00.933.534 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.535 I llama_new_context_with_model: flash_attn    = 0
0.00.933.537 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.538 I llama_new_context_with_model: freq_scale    = 1
0.00.933.538 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.805 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.972 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.520 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.524 I llama_new_context_with_model: graph nodes  = 601
0.00.951.524 I llama_new_context_with_model: graph splits = 1
0.00.951.547 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.562.154 I main: llama threadpool init, n_threads = 4
0.01.562.171 I 
0.01.562.281 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.562.286 I 
0.01.562.522 I sampler seed: 3184982335
0.01.562.536 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.562.546 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.562.548 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.562.548 I 
 increably.

**Assistant**

I understand. I will ensure to provide you with the necessary context and support to assist you with your request. [end of text]


0.14.732.689 I llama_perf_sampler_print:    sampling time =      47.59 ms /    32 runs   (    1.49 ms per token,   672.48 tokens per second)
0.14.732.691 I llama_perf_context_print:        load time =    1561.17 ms
0.14.732.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.732.717 I llama_perf_context_print:        eval time =   13083.89 ms /    31 runs   (  422.06 ms per token,     2.37 tokens per second)
0.14.732.718 I llama_perf_context_print:       total time =   13170.55 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.682 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.792 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.810 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.814 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.822 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.826 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.828 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.829 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.830 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.842 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.844 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.847 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.848 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.849 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.312 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.324 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.325 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.338 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.349 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.351 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.360 I llama_model_loader: - type  f32:   37 tensors
0.00.349.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.300 I llm_load_vocab: special tokens cache size = 5
0.00.850.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.988 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.989 I llm_load_print_meta: arch             = gemma
0.00.850.989 I llm_load_print_meta: vocab type       = SPM
0.00.850.990 I llm_load_print_meta: n_vocab          = 256000
0.00.850.993 I llm_load_print_meta: n_merges         = 0
0.00.850.993 I llm_load_print_meta: vocab_only       = 0
0.00.850.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.994 I llm_load_print_meta: n_embd           = 2048
0.00.850.994 I llm_load_print_meta: n_layer          = 18
0.00.851.079 I llm_load_print_meta: n_head           = 8
0.00.851.087 I llm_load_print_meta: n_head_kv        = 1
0.00.851.088 I llm_load_print_meta: n_rot            = 256
0.00.851.089 I llm_load_print_meta: n_swa            = 0
0.00.851.089 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.095 I llm_load_print_meta: n_gqa            = 8
0.00.851.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.107 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.108 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.109 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.109 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.114 I llm_load_print_meta: n_ff             = 16384
0.00.851.115 I llm_load_print_meta: n_expert         = 0
0.00.851.115 I llm_load_print_meta: n_expert_used    = 0
0.00.851.115 I llm_load_print_meta: causal attn      = 1
0.00.851.116 I llm_load_print_meta: pooling type     = 0
0.00.851.117 I llm_load_print_meta: rope type        = 2
0.00.851.117 I llm_load_print_meta: rope scaling     = linear
0.00.851.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.119 I llm_load_print_meta: freq_scale_train = 1
0.00.851.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.121 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.121 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.121 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.123 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.123 I llm_load_print_meta: model type       = 2B
0.00.851.124 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.125 I llm_load_print_meta: model params     = 2.51 B
0.00.851.135 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.136 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.137 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.138 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.139 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.139 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.152 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.155 I llm_load_print_meta: max token length = 93
0.00.946.002 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.952.151 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.160 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.161 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.161 I llama_new_context_with_model: n_batch       = 2048
0.00.952.161 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.162 I llama_new_context_with_model: flash_attn    = 0
0.00.952.165 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.166 I llama_new_context_with_model: freq_scale    = 1
0.00.952.167 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.298 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.937 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.941 I llama_new_context_with_model: graph nodes  = 601
0.00.969.942 I llama_new_context_with_model: graph splits = 1
0.00.969.966 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.907 I main: llama threadpool init, n_threads = 4
0.01.578.923 I 
0.01.579.043 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.579.044 I 
0.01.579.288 I sampler seed: 912906579
0.01.579.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.312 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.313 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.313 I 
 increably.

**Assistant**

I am unable to provide a response that contains potentially harmful or inappropriate content. [end of text]


0.11.895.311 I llama_perf_sampler_print:    sampling time =      36.88 ms /    25 runs   (    1.48 ms per token,   677.95 tokens per second)
0.11.895.316 I llama_perf_context_print:        load time =    1577.91 ms
0.11.895.318 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.895.320 I llama_perf_context_print:        eval time =   10247.98 ms /    24 runs   (  427.00 ms per token,     2.34 tokens per second)
0.11.895.321 I llama_perf_context_print:       total time =   10316.42 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.903 I main: llama backend init
0.00.000.912 I main: load the model and apply lora adapter, if any
0.00.023.711 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.724 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.819 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.832 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.841 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.842 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.846 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.847 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.854 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.858 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.861 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.888 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.348.226 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.372.150 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.372.159 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.372.161 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.372.162 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.372.163 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.372.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.372.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.372.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.372.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.372.174 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.372.175 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.372.177 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.372.185 I llama_model_loader: - type  f32:   37 tensors
0.00.372.187 I llama_model_loader: - type q8_0:  127 tensors
0.00.611.288 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.676.956 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.677.940 I llm_load_vocab: special tokens cache size = 5
0.00.877.811 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.877.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.877.887 I llm_load_print_meta: arch             = gemma
0.00.877.887 I llm_load_print_meta: vocab type       = SPM
0.00.877.888 I llm_load_print_meta: n_vocab          = 256000
0.00.877.891 I llm_load_print_meta: n_merges         = 0
0.00.877.891 I llm_load_print_meta: vocab_only       = 0
0.00.877.891 I llm_load_print_meta: n_ctx_train      = 8192
0.00.877.892 I llm_load_print_meta: n_embd           = 2048
0.00.877.892 I llm_load_print_meta: n_layer          = 18
0.00.877.958 I llm_load_print_meta: n_head           = 8
0.00.877.969 I llm_load_print_meta: n_head_kv        = 1
0.00.877.970 I llm_load_print_meta: n_rot            = 256
0.00.877.970 I llm_load_print_meta: n_swa            = 0
0.00.877.973 I llm_load_print_meta: n_embd_head_k    = 256
0.00.877.973 I llm_load_print_meta: n_embd_head_v    = 256
0.00.877.978 I llm_load_print_meta: n_gqa            = 8
0.00.877.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.877.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.877.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.877.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.877.992 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.877.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.877.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.877.998 I llm_load_print_meta: n_ff             = 16384
0.00.877.998 I llm_load_print_meta: n_expert         = 0
0.00.877.999 I llm_load_print_meta: n_expert_used    = 0
0.00.878.000 I llm_load_print_meta: causal attn      = 1
0.00.878.000 I llm_load_print_meta: pooling type     = 0
0.00.878.000 I llm_load_print_meta: rope type        = 2
0.00.878.001 I llm_load_print_meta: rope scaling     = linear
0.00.878.002 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.878.003 I llm_load_print_meta: freq_scale_train = 1
0.00.878.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.878.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.878.004 I llm_load_print_meta: ssm_d_conv       = 0
0.00.878.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.878.005 I llm_load_print_meta: ssm_d_state      = 0
0.00.878.006 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.878.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.878.007 I llm_load_print_meta: model type       = 2B
0.00.878.020 I llm_load_print_meta: model ftype      = Q8_0
0.00.878.021 I llm_load_print_meta: model params     = 2.51 B
0.00.878.031 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.878.032 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.878.033 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.878.034 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.878.035 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.878.035 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.878.036 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.878.036 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.878.042 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.878.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.878.044 I llm_load_print_meta: max token length = 93
0.00.953.559 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.953.568 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.953.569 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.953.569 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.953.570 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.953.571 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.959.856 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.867 I llama_new_context_with_model: n_batch       = 2048
0.00.959.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.869 I llama_new_context_with_model: flash_attn    = 0
0.00.959.873 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.874 I llama_new_context_with_model: freq_scale    = 1
0.00.959.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.977.461 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.509 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.242 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.246 I llama_new_context_with_model: graph nodes  = 601
0.00.980.247 I llama_new_context_with_model: graph splits = 1
0.00.980.272 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.591.181 I main: llama threadpool init, n_threads = 4
0.01.591.199 I 
0.01.591.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.591.321 I 
0.01.591.559 I sampler seed: 1598028292
0.01.591.574 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.591.584 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.591.587 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.591.588 I 
 increasities. [end of text]


0.03.293.423 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.70 tokens per second)
0.03.293.437 I llama_perf_context_print:        load time =    1590.16 ms
0.03.293.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.293.441 I llama_perf_context_print:        eval time =    1689.24 ms /     4 runs   (  422.31 ms per token,     2.37 tokens per second)
0.03.293.443 I llama_perf_context_print:       total time =    1702.25 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.671 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.683 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.780 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.792 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.794 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.803 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.807 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.821 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.836 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.837 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.838 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.248.929 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.350.922 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.374.986 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.374.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.374.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.375.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.375.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.375.003 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.375.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.375.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.375.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.375.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.375.014 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.375.016 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.375.026 I llama_model_loader: - type  f32:   37 tensors
0.00.375.028 I llama_model_loader: - type q8_0:  127 tensors
0.00.629.801 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.699.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.700.927 I llm_load_vocab: special tokens cache size = 5
0.00.904.681 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.904.754 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.904.755 I llm_load_print_meta: arch             = gemma
0.00.904.756 I llm_load_print_meta: vocab type       = SPM
0.00.904.757 I llm_load_print_meta: n_vocab          = 256000
0.00.904.759 I llm_load_print_meta: n_merges         = 0
0.00.904.759 I llm_load_print_meta: vocab_only       = 0
0.00.904.760 I llm_load_print_meta: n_ctx_train      = 8192
0.00.904.760 I llm_load_print_meta: n_embd           = 2048
0.00.904.760 I llm_load_print_meta: n_layer          = 18
0.00.904.825 I llm_load_print_meta: n_head           = 8
0.00.904.832 I llm_load_print_meta: n_head_kv        = 1
0.00.904.833 I llm_load_print_meta: n_rot            = 256
0.00.904.833 I llm_load_print_meta: n_swa            = 0
0.00.904.834 I llm_load_print_meta: n_embd_head_k    = 256
0.00.904.834 I llm_load_print_meta: n_embd_head_v    = 256
0.00.904.839 I llm_load_print_meta: n_gqa            = 8
0.00.904.844 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.904.849 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.904.850 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.904.851 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.904.852 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.904.852 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.904.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.904.857 I llm_load_print_meta: n_ff             = 16384
0.00.904.858 I llm_load_print_meta: n_expert         = 0
0.00.904.858 I llm_load_print_meta: n_expert_used    = 0
0.00.904.859 I llm_load_print_meta: causal attn      = 1
0.00.904.859 I llm_load_print_meta: pooling type     = 0
0.00.904.859 I llm_load_print_meta: rope type        = 2
0.00.904.860 I llm_load_print_meta: rope scaling     = linear
0.00.904.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.904.862 I llm_load_print_meta: freq_scale_train = 1
0.00.904.863 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.904.863 I llm_load_print_meta: rope_finetuned   = unknown
0.00.904.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.904.864 I llm_load_print_meta: ssm_d_inner      = 0
0.00.904.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.904.864 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.904.864 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.904.865 I llm_load_print_meta: model type       = 2B
0.00.904.866 I llm_load_print_meta: model ftype      = Q8_0
0.00.904.867 I llm_load_print_meta: model params     = 2.51 B
0.00.904.876 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.904.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.904.877 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.904.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.904.878 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.904.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.904.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.904.880 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.904.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.904.887 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.904.888 I llm_load_print_meta: max token length = 93
0.00.978.011 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.978.023 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.984.039 I llama_new_context_with_model: n_seq_max     = 1
0.00.984.046 I llama_new_context_with_model: n_ctx         = 4096
0.00.984.046 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.984.047 I llama_new_context_with_model: n_batch       = 2048
0.00.984.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.984.047 I llama_new_context_with_model: flash_attn    = 0
0.00.984.051 I llama_new_context_with_model: freq_base     = 10000.0
0.00.984.051 I llama_new_context_with_model: freq_scale    = 1
0.00.984.052 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.999.388 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.999.432 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.999.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.002.220 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.002.224 I llama_new_context_with_model: graph nodes  = 601
0.01.002.225 I llama_new_context_with_model: graph splits = 1
0.01.002.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.614.823 I main: llama threadpool init, n_threads = 4
0.01.614.841 I 
0.01.614.958 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.614.962 I 
0.01.615.199 I sampler seed: 1996659938
0.01.615.213 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.615.226 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.615.226 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.615.226 I 
 increadibly

I am unable to provide a response as the question contains inappropriate language. [end of text]


0.09.314.686 I llama_perf_sampler_print:    sampling time =      27.70 ms /    19 runs   (    1.46 ms per token,   685.97 tokens per second)
0.09.314.688 I llama_perf_context_print:        load time =    1613.85 ms
0.09.314.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.314.691 I llama_perf_context_print:        eval time =    7647.17 ms /    18 runs   (  424.84 ms per token,     2.35 tokens per second)
0.09.314.692 I llama_perf_context_print:       total time =    7699.87 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.066s
user	2m25.348s
sys	0m9.479s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4169 (106964e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186449.86 ms
main:    total time = 186449.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.911 I main: load the model and apply lora adapter, if any
0.00.029.813 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.823 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.923 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.939 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.947 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.983 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.985 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.029.987 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.178 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.089 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.090 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.091 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.092 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.094 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.099 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.100 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.101 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.103 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.357.104 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.113 I llama_model_loader: - type  f32:   37 tensors
0.00.357.116 I llama_model_loader: - type q4_K:  108 tensors
0.00.357.116 I llama_model_loader: - type q6_K:   19 tensors
0.00.606.564 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.338 I llm_load_vocab: special tokens cache size = 5
0.00.872.925 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.001 I llm_load_print_meta: arch             = gemma
0.00.873.001 I llm_load_print_meta: vocab type       = SPM
0.00.873.002 I llm_load_print_meta: n_vocab          = 256000
0.00.873.004 I llm_load_print_meta: n_merges         = 0
0.00.873.005 I llm_load_print_meta: vocab_only       = 0
0.00.873.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.005 I llm_load_print_meta: n_embd           = 2048
0.00.873.006 I llm_load_print_meta: n_layer          = 18
0.00.873.097 I llm_load_print_meta: n_head           = 8
0.00.873.105 I llm_load_print_meta: n_head_kv        = 1
0.00.873.113 I llm_load_print_meta: n_rot            = 256
0.00.873.113 I llm_load_print_meta: n_swa            = 0
0.00.873.113 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.118 I llm_load_print_meta: n_gqa            = 8
0.00.873.123 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.873.128 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.873.129 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.873.131 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.873.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.873.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.873.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.873.137 I llm_load_print_meta: n_ff             = 16384
0.00.873.137 I llm_load_print_meta: n_expert         = 0
0.00.873.138 I llm_load_print_meta: n_expert_used    = 0
0.00.873.139 I llm_load_print_meta: causal attn      = 1
0.00.873.139 I llm_load_print_meta: pooling type     = 0
0.00.873.140 I llm_load_print_meta: rope type        = 2
0.00.873.154 I llm_load_print_meta: rope scaling     = linear
0.00.873.159 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.873.159 I llm_load_print_meta: freq_scale_train = 1
0.00.873.160 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.873.160 I llm_load_print_meta: rope_finetuned   = unknown
0.00.873.160 I llm_load_print_meta: ssm_d_conv       = 0
0.00.873.161 I llm_load_print_meta: ssm_d_inner      = 0
0.00.873.161 I llm_load_print_meta: ssm_d_state      = 0
0.00.873.161 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.873.162 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.162 I llm_load_print_meta: model type       = 2B
0.00.873.164 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.873.165 I llm_load_print_meta: model params     = 2.51 B
0.00.873.173 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.873.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.174 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.175 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.176 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.176 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.177 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.184 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.185 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.186 I llm_load_print_meta: max token length = 93
0.00.933.892 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.933.902 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.933.903 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.933.904 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.933.905 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.933.906 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.939.995 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.004 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.005 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.005 I llama_new_context_with_model: n_batch       = 2048
0.00.940.005 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.006 I llama_new_context_with_model: flash_attn    = 0
0.00.940.009 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.010 I llama_new_context_with_model: freq_scale    = 1
0.00.940.011 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.798 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.966 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.524 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.528 I llama_new_context_with_model: graph nodes  = 601
0.00.958.528 I llama_new_context_with_model: graph splits = 1
0.00.958.553 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.540.600 I main: llama threadpool init, n_threads = 4
0.01.540.617 I 
0.01.540.729 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.540.733 I 
0.01.540.963 I sampler seed: 1942914666
0.01.540.977 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.990 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.991 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.992 I 
 squaRE. 

I am unable to access the requested content. 

I apologize for any inconvenience this may cause. Please try again later. [end of text]


0.12.313.422 I llama_perf_sampler_print:    sampling time =      47.48 ms /    32 runs   (    1.48 ms per token,   673.95 tokens per second)
0.12.313.437 I llama_perf_context_print:        load time =    1539.58 ms
0.12.313.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.313.441 I llama_perf_context_print:        eval time =   10686.62 ms /    31 runs   (  344.73 ms per token,     2.90 tokens per second)
0.12.313.442 I llama_perf_context_print:       total time =   10772.83 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4169 (106964e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186437.68 ms
main:    total time = 186437.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4169 (106964e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.327 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.430 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.449 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.459 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.460 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.490 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.144 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.890 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.902 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.903 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.904 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.906 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.908 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.912 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.914 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.922 I llama_model_loader: - type  f32:   37 tensors
0.00.348.924 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.925 I llama_model_loader: - type q6_K:   19 tensors
0.00.587.511 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.998 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.082 I llm_load_vocab: special tokens cache size = 5
0.00.851.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.029 I llm_load_print_meta: arch             = gemma
0.00.852.030 I llm_load_print_meta: vocab type       = SPM
0.00.852.031 I llm_load_print_meta: n_vocab          = 256000
0.00.852.034 I llm_load_print_meta: n_merges         = 0
0.00.852.034 I llm_load_print_meta: vocab_only       = 0
0.00.852.035 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.035 I llm_load_print_meta: n_embd           = 2048
0.00.852.036 I llm_load_print_meta: n_layer          = 18
0.00.852.098 I llm_load_print_meta: n_head           = 8
0.00.852.106 I llm_load_print_meta: n_head_kv        = 1
0.00.852.106 I llm_load_print_meta: n_rot            = 256
0.00.852.107 I llm_load_print_meta: n_swa            = 0
0.00.852.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.112 I llm_load_print_meta: n_gqa            = 8
0.00.852.117 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.124 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.126 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.126 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.127 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.132 I llm_load_print_meta: n_ff             = 16384
0.00.852.132 I llm_load_print_meta: n_expert         = 0
0.00.852.132 I llm_load_print_meta: n_expert_used    = 0
0.00.852.133 I llm_load_print_meta: causal attn      = 1
0.00.852.133 I llm_load_print_meta: pooling type     = 0
0.00.852.135 I llm_load_print_meta: rope type        = 2
0.00.852.135 I llm_load_print_meta: rope scaling     = linear
0.00.852.137 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.137 I llm_load_print_meta: freq_scale_train = 1
0.00.852.138 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.139 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.139 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.139 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.140 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.140 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.140 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.141 I llm_load_print_meta: model type       = 2B
0.00.852.142 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.852.152 I llm_load_print_meta: model params     = 2.51 B
0.00.852.162 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.852.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.165 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.166 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.166 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.188 I llm_load_print_meta: max token length = 93
0.00.908.126 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.914.047 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.054 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.055 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.055 I llama_new_context_with_model: n_batch       = 2048
0.00.914.056 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.056 I llama_new_context_with_model: flash_attn    = 0
0.00.914.059 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.060 I llama_new_context_with_model: freq_scale    = 1
0.00.914.061 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.801 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.847 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.620 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.624 I llama_new_context_with_model: graph nodes  = 601
0.00.932.625 I llama_new_context_with_model: graph splits = 1
0.00.932.648 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.516.022 I main: llama threadpool init, n_threads = 4
0.01.516.038 I 
0.01.516.154 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.516.159 I 
0.01.516.396 I sampler seed: 1884302639
0.01.516.410 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.516.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.516.423 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.516.423 I 
 seconals, and other sexually transmitted infections (STIs) can have a significant impact on individuals, families, and communities.

**What are the most effective

0.12.707.195 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.43 tokens per second)
0.12.707.198 I llama_perf_context_print:        load time =    1515.06 ms
0.12.707.199 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.707.201 I llama_perf_context_print:        eval time =   11102.45 ms /    32 runs   (  346.95 ms per token,     2.88 tokens per second)
0.12.707.201 I llama_perf_context_print:       total time =   11191.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.870s
user	46m42.863s
sys	0m6.425s
