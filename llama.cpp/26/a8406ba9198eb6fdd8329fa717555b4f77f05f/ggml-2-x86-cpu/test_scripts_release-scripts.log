+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.187 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.389 I main: load the model and apply lora adapter, if any
0.00.021.619 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.632 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.645 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.646 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.653 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.654 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.659 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.660 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.661 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.662 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.973 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.846 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.848 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.848 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.849 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.852 I llama_model_loader: - type  f32:   37 tensors
0.00.131.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.402 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.557 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.271 I llm_load_vocab: special tokens cache size = 5
0.00.293.003 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.024 I llm_load_print_meta: arch             = gemma
0.00.293.025 I llm_load_print_meta: vocab type       = SPM
0.00.293.025 I llm_load_print_meta: n_vocab          = 256000
0.00.293.026 I llm_load_print_meta: n_merges         = 0
0.00.293.027 I llm_load_print_meta: vocab_only       = 0
0.00.293.027 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.027 I llm_load_print_meta: n_embd           = 2048
0.00.293.027 I llm_load_print_meta: n_layer          = 18
0.00.293.039 I llm_load_print_meta: n_head           = 8
0.00.293.040 I llm_load_print_meta: n_head_kv        = 1
0.00.293.040 I llm_load_print_meta: n_rot            = 256
0.00.293.041 I llm_load_print_meta: n_swa            = 0
0.00.293.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.042 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.042 I llm_load_print_meta: n_gqa            = 8
0.00.293.043 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.044 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.047 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.047 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.048 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.049 I llm_load_print_meta: n_ff             = 16384
0.00.293.049 I llm_load_print_meta: n_expert         = 0
0.00.293.049 I llm_load_print_meta: n_expert_used    = 0
0.00.293.049 I llm_load_print_meta: causal attn      = 1
0.00.293.050 I llm_load_print_meta: pooling type     = 0
0.00.293.050 I llm_load_print_meta: rope type        = 2
0.00.293.050 I llm_load_print_meta: rope scaling     = linear
0.00.293.052 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.052 I llm_load_print_meta: freq_scale_train = 1
0.00.293.053 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.053 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.053 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.054 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.054 I llm_load_print_meta: model type       = 2B
0.00.293.055 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.056 I llm_load_print_meta: model params     = 2.51 B
0.00.293.057 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.057 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.058 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.058 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.059 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.059 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.059 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.059 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.060 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.060 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.060 I llm_load_print_meta: max token length = 93
0.00.394.515 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.394.522 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.394.523 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.394.524 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.394.524 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.394.525 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.399.749 I llama_new_context_with_model: n_seq_max     = 1
0.00.399.755 I llama_new_context_with_model: n_ctx         = 4096
0.00.399.755 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.399.755 I llama_new_context_with_model: n_batch       = 2048
0.00.399.756 I llama_new_context_with_model: n_ubatch      = 512
0.00.399.757 I llama_new_context_with_model: flash_attn    = 0
0.00.399.759 I llama_new_context_with_model: freq_base     = 10000.0
0.00.399.760 I llama_new_context_with_model: freq_scale    = 1
0.00.399.761 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.414.286 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.414.302 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.414.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.636 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.415.642 I llama_new_context_with_model: graph nodes  = 601
0.00.415.642 I llama_new_context_with_model: graph splits = 1
0.00.415.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.533 I main: llama threadpool init, n_threads = 4
0.00.502.551 I 
0.00.502.631 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.502.634 I 
0.00.502.680 I sampler seed: 342294846
0.00.502.691 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.704 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.708 I 
 increasities in the poem, and explain your interpretations.

**Answer:**

I am unable to access or analyze external content, including poems. Therefore, I

0.02.806.505 I llama_perf_sampler_print:    sampling time =       5.93 ms /    33 runs   (    0.18 ms per token,  5568.68 tokens per second)
0.02.806.507 I llama_perf_context_print:        load time =     502.13 ms
0.02.806.508 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.806.509 I llama_perf_context_print:        eval time =    2283.58 ms /    32 runs   (   71.36 ms per token,    14.01 tokens per second)
0.02.806.510 I llama_perf_context_print:       total time =    2303.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.189 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.388 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.020.644 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.657 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.664 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.665 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.669 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.670 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.671 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.672 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.677 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.678 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.679 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.680 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.556 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.564 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.565 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.568 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.570 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.571 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.574 I llama_model_loader: - type  f32:   37 tensors
0.00.130.575 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.605 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.579 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.301 I llm_load_vocab: special tokens cache size = 5
0.00.269.342 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.363 I llm_load_print_meta: arch             = gemma
0.00.269.364 I llm_load_print_meta: vocab type       = SPM
0.00.269.364 I llm_load_print_meta: n_vocab          = 256000
0.00.269.365 I llm_load_print_meta: n_merges         = 0
0.00.269.365 I llm_load_print_meta: vocab_only       = 0
0.00.269.365 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.366 I llm_load_print_meta: n_embd           = 2048
0.00.269.366 I llm_load_print_meta: n_layer          = 18
0.00.269.377 I llm_load_print_meta: n_head           = 8
0.00.269.378 I llm_load_print_meta: n_head_kv        = 1
0.00.269.379 I llm_load_print_meta: n_rot            = 256
0.00.269.379 I llm_load_print_meta: n_swa            = 0
0.00.269.379 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.380 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.380 I llm_load_print_meta: n_gqa            = 8
0.00.269.381 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.382 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.383 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.385 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.386 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.386 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.387 I llm_load_print_meta: n_ff             = 16384
0.00.269.387 I llm_load_print_meta: n_expert         = 0
0.00.269.387 I llm_load_print_meta: n_expert_used    = 0
0.00.269.387 I llm_load_print_meta: causal attn      = 1
0.00.269.388 I llm_load_print_meta: pooling type     = 0
0.00.269.388 I llm_load_print_meta: rope type        = 2
0.00.269.388 I llm_load_print_meta: rope scaling     = linear
0.00.269.390 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.390 I llm_load_print_meta: freq_scale_train = 1
0.00.269.391 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.391 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.391 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.392 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.392 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.392 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.392 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.393 I llm_load_print_meta: model type       = 2B
0.00.269.393 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.394 I llm_load_print_meta: model params     = 2.51 B
0.00.269.395 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.395 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.396 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.396 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.396 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.397 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.398 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.398 I llm_load_print_meta: max token length = 93
0.00.363.892 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.016 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.023 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.023 I llama_new_context_with_model: n_batch       = 2048
0.00.369.024 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.024 I llama_new_context_with_model: flash_attn    = 0
0.00.369.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.027 I llama_new_context_with_model: freq_scale    = 1
0.00.369.028 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.842 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.858 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.198 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.203 I llama_new_context_with_model: graph nodes  = 601
0.00.385.203 I llama_new_context_with_model: graph splits = 1
0.00.385.205 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.559 I main: llama threadpool init, n_threads = 4
0.00.466.574 I 
0.00.466.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.652 I 
0.00.466.700 I sampler seed: 492295537
0.00.466.711 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.716 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.716 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.716 I 
 increasels of the universe. 

The universe is a vast and complex tapestry woven from countless threads of energy, information, and matter. It is a symphony

0.02.681.241 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6000.00 tokens per second)
0.02.681.243 I llama_perf_context_print:        load time =     466.15 ms
0.02.681.245 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.681.247 I llama_perf_context_print:        eval time =    2194.44 ms /    32 runs   (   68.58 ms per token,    14.58 tokens per second)
0.02.681.247 I llama_perf_context_print:       total time =    2214.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.558 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.186 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.194 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.203 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.208 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.197 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.202 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.204 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.205 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.206 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.209 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.210 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.211 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.211 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.212 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.216 I llama_model_loader: - type  f32:   37 tensors
0.00.131.217 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.654 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.231 I llm_load_vocab: special tokens cache size = 5
0.00.269.042 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.058 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.059 I llm_load_print_meta: arch             = gemma
0.00.269.059 I llm_load_print_meta: vocab type       = SPM
0.00.269.060 I llm_load_print_meta: n_vocab          = 256000
0.00.269.060 I llm_load_print_meta: n_merges         = 0
0.00.269.061 I llm_load_print_meta: vocab_only       = 0
0.00.269.061 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.061 I llm_load_print_meta: n_embd           = 2048
0.00.269.062 I llm_load_print_meta: n_layer          = 18
0.00.269.073 I llm_load_print_meta: n_head           = 8
0.00.269.074 I llm_load_print_meta: n_head_kv        = 1
0.00.269.075 I llm_load_print_meta: n_rot            = 256
0.00.269.075 I llm_load_print_meta: n_swa            = 0
0.00.269.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.077 I llm_load_print_meta: n_gqa            = 8
0.00.269.078 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.081 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.082 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.082 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.083 I llm_load_print_meta: n_ff             = 16384
0.00.269.083 I llm_load_print_meta: n_expert         = 0
0.00.269.083 I llm_load_print_meta: n_expert_used    = 0
0.00.269.084 I llm_load_print_meta: causal attn      = 1
0.00.269.084 I llm_load_print_meta: pooling type     = 0
0.00.269.084 I llm_load_print_meta: rope type        = 2
0.00.269.085 I llm_load_print_meta: rope scaling     = linear
0.00.269.086 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.087 I llm_load_print_meta: freq_scale_train = 1
0.00.269.087 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.088 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.088 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.089 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.089 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.089 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.090 I llm_load_print_meta: model type       = 2B
0.00.269.090 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.091 I llm_load_print_meta: model params     = 2.51 B
0.00.269.092 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.095 I llm_load_print_meta: max token length = 93
0.00.344.967 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.972 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.973 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.973 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.974 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.975 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.955 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.962 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.963 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.963 I llama_new_context_with_model: n_batch       = 2048
0.00.349.963 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.964 I llama_new_context_with_model: flash_attn    = 0
0.00.349.965 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.966 I llama_new_context_with_model: freq_scale    = 1
0.00.349.968 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.847 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.860 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.271 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.275 I llama_new_context_with_model: graph nodes  = 601
0.00.365.275 I llama_new_context_with_model: graph splits = 1
0.00.365.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.444 I main: llama threadpool init, n_threads = 4
0.00.450.460 I 
0.00.450.534 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.537 I 
0.00.450.583 I sampler seed: 2496879748
0.00.450.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.607 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.610 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.610 I 
 increadibly complex, with an intricate tapestry of interlinked elements.

This tapestry is woven from the threads of complexity, interwoven with the threads of coherence, creating

0.02.748.425 I llama_perf_sampler_print:    sampling time =       5.76 ms /    33 runs   (    0.17 ms per token,  5726.18 tokens per second)
0.02.748.428 I llama_perf_context_print:        load time =     449.66 ms
0.02.748.429 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.430 I llama_perf_context_print:        eval time =    2277.34 ms /    32 runs   (   71.17 ms per token,    14.05 tokens per second)
0.02.748.431 I llama_perf_context_print:       total time =    2297.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.527 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.151 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.167 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.180 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.181 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.182 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.182 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.188 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.189 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.772 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.779 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.780 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.781 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.786 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.790 I llama_model_loader: - type  f32:   37 tensors
0.00.131.791 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.054 I llm_load_vocab: special tokens cache size = 5
0.00.270.770 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.788 I llm_load_print_meta: arch             = gemma
0.00.270.789 I llm_load_print_meta: vocab type       = SPM
0.00.270.789 I llm_load_print_meta: n_vocab          = 256000
0.00.270.790 I llm_load_print_meta: n_merges         = 0
0.00.270.790 I llm_load_print_meta: vocab_only       = 0
0.00.270.791 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.791 I llm_load_print_meta: n_embd           = 2048
0.00.270.791 I llm_load_print_meta: n_layer          = 18
0.00.270.802 I llm_load_print_meta: n_head           = 8
0.00.270.803 I llm_load_print_meta: n_head_kv        = 1
0.00.270.804 I llm_load_print_meta: n_rot            = 256
0.00.270.804 I llm_load_print_meta: n_swa            = 0
0.00.270.804 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.805 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.806 I llm_load_print_meta: n_gqa            = 8
0.00.270.807 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.808 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.808 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.810 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.811 I llm_load_print_meta: n_ff             = 16384
0.00.270.812 I llm_load_print_meta: n_expert         = 0
0.00.270.812 I llm_load_print_meta: n_expert_used    = 0
0.00.270.812 I llm_load_print_meta: causal attn      = 1
0.00.270.812 I llm_load_print_meta: pooling type     = 0
0.00.270.813 I llm_load_print_meta: rope type        = 2
0.00.270.813 I llm_load_print_meta: rope scaling     = linear
0.00.270.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.816 I llm_load_print_meta: freq_scale_train = 1
0.00.270.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.816 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.817 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.817 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.817 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.817 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.818 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.818 I llm_load_print_meta: model type       = 2B
0.00.270.819 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.819 I llm_load_print_meta: model params     = 2.51 B
0.00.270.820 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.821 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.821 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.821 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.822 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.822 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.823 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.823 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.823 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.824 I llm_load_print_meta: max token length = 93
0.00.342.445 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.451 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.695 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.702 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.703 I llama_new_context_with_model: n_batch       = 2048
0.00.347.703 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.704 I llama_new_context_with_model: flash_attn    = 0
0.00.347.706 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.707 I llama_new_context_with_model: freq_scale    = 1
0.00.347.708 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.643 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.657 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.048 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.055 I llama_new_context_with_model: graph nodes  = 601
0.00.364.055 I llama_new_context_with_model: graph splits = 1
0.00.364.057 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.376 I main: llama threadpool init, n_threads = 4
0.00.452.393 I 
0.00.452.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.452.471 I 
0.00.452.512 I sampler seed: 3486541215
0.00.452.522 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.532 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.532 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.532 I 
 increasities!

The provided text contains a misspelling. The correct spelling is "incredibilities".

**incredibilities**

The word "incre

0.02.896.383 I llama_perf_sampler_print:    sampling time =       5.58 ms /    33 runs   (    0.17 ms per token,  5909.74 tokens per second)
0.02.896.386 I llama_perf_context_print:        load time =     451.63 ms
0.02.896.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.896.388 I llama_perf_context_print:        eval time =    2423.18 ms /    32 runs   (   75.72 ms per token,    13.21 tokens per second)
0.02.896.389 I llama_perf_context_print:       total time =    2444.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.737s
user	0m39.939s
sys	0m9.446s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4295 (26a8406b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40235.00 ms
main:    total time = 40235.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.469 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.479 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.499 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.500 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.500 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.506 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.507 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.508 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.154 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.993 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.999 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.000 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.001 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.002 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.003 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.005 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.006 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.007 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.008 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.011 I llama_model_loader: - type  f32:   37 tensors
0.00.132.012 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.012 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.421 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.855 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.415 I llm_load_vocab: special tokens cache size = 5
0.00.273.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.083 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.083 I llm_load_print_meta: arch             = gemma
0.00.273.084 I llm_load_print_meta: vocab type       = SPM
0.00.273.085 I llm_load_print_meta: n_vocab          = 256000
0.00.273.085 I llm_load_print_meta: n_merges         = 0
0.00.273.085 I llm_load_print_meta: vocab_only       = 0
0.00.273.086 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.086 I llm_load_print_meta: n_embd           = 2048
0.00.273.087 I llm_load_print_meta: n_layer          = 18
0.00.273.097 I llm_load_print_meta: n_head           = 8
0.00.273.098 I llm_load_print_meta: n_head_kv        = 1
0.00.273.099 I llm_load_print_meta: n_rot            = 256
0.00.273.099 I llm_load_print_meta: n_swa            = 0
0.00.273.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.100 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.101 I llm_load_print_meta: n_gqa            = 8
0.00.273.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.102 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.103 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.104 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.105 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.105 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.106 I llm_load_print_meta: n_ff             = 16384
0.00.273.106 I llm_load_print_meta: n_expert         = 0
0.00.273.107 I llm_load_print_meta: n_expert_used    = 0
0.00.273.107 I llm_load_print_meta: causal attn      = 1
0.00.273.107 I llm_load_print_meta: pooling type     = 0
0.00.273.108 I llm_load_print_meta: rope type        = 2
0.00.273.108 I llm_load_print_meta: rope scaling     = linear
0.00.273.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.110 I llm_load_print_meta: freq_scale_train = 1
0.00.273.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.112 I llm_load_print_meta: model type       = 2B
0.00.273.112 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.113 I llm_load_print_meta: model params     = 2.51 B
0.00.273.114 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.114 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.115 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.115 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.116 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.116 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.116 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.117 I llm_load_print_meta: max token length = 93
0.00.332.577 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.585 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.586 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.586 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.587 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.587 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.673 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.680 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.680 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.680 I llama_new_context_with_model: n_batch       = 2048
0.00.337.681 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.681 I llama_new_context_with_model: flash_attn    = 0
0.00.337.684 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.685 I llama_new_context_with_model: freq_scale    = 1
0.00.337.686 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.327 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.341 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.433 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.663 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.669 I llama_new_context_with_model: graph nodes  = 601
0.00.353.670 I llama_new_context_with_model: graph splits = 1
0.00.353.672 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.335 I main: llama threadpool init, n_threads = 4
0.00.429.352 I 
0.00.429.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.431 I 
0.00.429.478 I sampler seed: 794675181
0.00.429.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.494 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.496 I 
 seconded.

**Assistant**

I am unable to access or provide personal or sensitive information, including usernames, passwords, or personally identifiable information. [end of text]


0.02.027.685 I llama_perf_sampler_print:    sampling time =       5.51 ms /    32 runs   (    0.17 ms per token,  5811.84 tokens per second)
0.02.027.688 I llama_perf_context_print:        load time =     428.55 ms
0.02.027.691 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.692 I llama_perf_context_print:        eval time =    1579.04 ms /    31 runs   (   50.94 ms per token,    19.63 tokens per second)
0.02.027.693 I llama_perf_context_print:       total time =    1598.36 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4295 (26a8406b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40205.61 ms
main:    total time = 40205.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.551 I build: 4295 (26a8406b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.284 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.309 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.310 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.314 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.315 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.316 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.318 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.324 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.324 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.325 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.780 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.649 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.650 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.651 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.652 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.652 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.655 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.656 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.660 I llama_model_loader: - type  f32:   37 tensors
0.00.131.661 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.661 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.596 I llm_load_vocab: special tokens cache size = 5
0.00.270.321 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.338 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.338 I llm_load_print_meta: arch             = gemma
0.00.270.339 I llm_load_print_meta: vocab type       = SPM
0.00.270.340 I llm_load_print_meta: n_vocab          = 256000
0.00.270.340 I llm_load_print_meta: n_merges         = 0
0.00.270.340 I llm_load_print_meta: vocab_only       = 0
0.00.270.341 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.341 I llm_load_print_meta: n_embd           = 2048
0.00.270.342 I llm_load_print_meta: n_layer          = 18
0.00.270.353 I llm_load_print_meta: n_head           = 8
0.00.270.355 I llm_load_print_meta: n_head_kv        = 1
0.00.270.355 I llm_load_print_meta: n_rot            = 256
0.00.270.356 I llm_load_print_meta: n_swa            = 0
0.00.270.356 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.357 I llm_load_print_meta: n_gqa            = 8
0.00.270.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.363 I llm_load_print_meta: n_ff             = 16384
0.00.270.364 I llm_load_print_meta: n_expert         = 0
0.00.270.364 I llm_load_print_meta: n_expert_used    = 0
0.00.270.364 I llm_load_print_meta: causal attn      = 1
0.00.270.364 I llm_load_print_meta: pooling type     = 0
0.00.270.365 I llm_load_print_meta: rope type        = 2
0.00.270.365 I llm_load_print_meta: rope scaling     = linear
0.00.270.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.367 I llm_load_print_meta: freq_scale_train = 1
0.00.270.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.368 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.368 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.371 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.372 I llm_load_print_meta: model type       = 2B
0.00.270.372 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.373 I llm_load_print_meta: model params     = 2.51 B
0.00.270.374 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.377 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.378 I llm_load_print_meta: max token length = 93
0.00.327.480 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.755 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.762 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.763 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.763 I llama_new_context_with_model: n_batch       = 2048
0.00.332.764 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.764 I llama_new_context_with_model: flash_attn    = 0
0.00.332.767 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.768 I llama_new_context_with_model: freq_scale    = 1
0.00.332.769 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.348 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.364 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.765 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.771 I llama_new_context_with_model: graph nodes  = 601
0.00.349.771 I llama_new_context_with_model: graph splits = 1
0.00.349.787 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.953 I main: llama threadpool init, n_threads = 4
0.00.424.970 I 
0.00.425.047 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.050 I 
0.00.425.101 I sampler seed: 950859168
0.00.425.112 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.123 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.127 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.127 I 
 strick by adding the correct response to the question.

I am unable to answer this question as it requires me to express opinions or make subjective statements. [end of text]


0.01.985.562 I llama_perf_sampler_print:    sampling time =       5.53 ms /    32 runs   (    0.17 ms per token,  5785.57 tokens per second)
0.01.985.565 I llama_perf_context_print:        load time =     424.16 ms
0.01.985.566 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.985.569 I llama_perf_context_print:        eval time =    1540.57 ms /    31 runs   (   49.70 ms per token,    20.12 tokens per second)
0.01.985.570 I llama_perf_context_print:       total time =    1560.62 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.266s
user	10m24.253s
sys	0m7.013s
