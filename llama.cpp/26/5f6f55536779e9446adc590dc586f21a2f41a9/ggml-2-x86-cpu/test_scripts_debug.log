+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.346 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.445 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.457 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.464 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.471 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.473 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.474 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.475 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.494 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.496 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.582 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.378 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.389 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.392 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.393 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.399 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.401 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.402 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.410 I llama_model_loader: - type  f32:   37 tensors
0.00.353.412 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.629 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.829 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.732 I llm_load_vocab: special tokens cache size = 5
0.00.815.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.662 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.663 I llm_load_print_meta: arch             = gemma
0.00.815.664 I llm_load_print_meta: vocab type       = SPM
0.00.815.665 I llm_load_print_meta: n_vocab          = 256000
0.00.815.667 I llm_load_print_meta: n_merges         = 0
0.00.815.668 I llm_load_print_meta: vocab_only       = 0
0.00.815.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.668 I llm_load_print_meta: n_embd           = 2048
0.00.815.669 I llm_load_print_meta: n_layer          = 18
0.00.815.734 I llm_load_print_meta: n_head           = 8
0.00.815.741 I llm_load_print_meta: n_head_kv        = 1
0.00.815.743 I llm_load_print_meta: n_rot            = 256
0.00.815.743 I llm_load_print_meta: n_swa            = 0
0.00.815.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.749 I llm_load_print_meta: n_gqa            = 8
0.00.815.753 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.762 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.771 I llm_load_print_meta: n_ff             = 16384
0.00.815.772 I llm_load_print_meta: n_expert         = 0
0.00.815.773 I llm_load_print_meta: n_expert_used    = 0
0.00.815.773 I llm_load_print_meta: causal attn      = 1
0.00.815.774 I llm_load_print_meta: pooling type     = 0
0.00.815.774 I llm_load_print_meta: rope type        = 2
0.00.815.775 I llm_load_print_meta: rope scaling     = linear
0.00.815.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.777 I llm_load_print_meta: freq_scale_train = 1
0.00.815.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.815.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.815.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.815.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.815.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.815.781 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.815.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.815.782 I llm_load_print_meta: model type       = 2B
0.00.815.784 I llm_load_print_meta: model ftype      = Q8_0
0.00.815.785 I llm_load_print_meta: model params     = 2.51 B
0.00.815.786 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.815.786 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.815.787 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.815.788 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.815.788 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.815.788 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.815.789 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.815.790 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.815.796 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.815.797 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.815.798 I llm_load_print_meta: max token length = 93
0.00.919.601 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.919.609 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.919.610 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.919.610 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.919.611 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.919.612 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.926.693 I llama_new_context_with_model: n_seq_max     = 1
0.00.926.699 I llama_new_context_with_model: n_ctx         = 4096
0.00.926.699 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.926.700 I llama_new_context_with_model: n_batch       = 2048
0.00.926.700 I llama_new_context_with_model: n_ubatch      = 512
0.00.926.701 I llama_new_context_with_model: flash_attn    = 0
0.00.926.703 I llama_new_context_with_model: freq_base     = 10000.0
0.00.926.704 I llama_new_context_with_model: freq_scale    = 1
0.00.926.705 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.793 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.942.386 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.425 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.544 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.179 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.183 I llama_new_context_with_model: graph nodes  = 601
0.00.945.184 I llama_new_context_with_model: graph splits = 1
0.00.945.209 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.945.212 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.721 I main: llama threadpool init, n_threads = 4
0.01.556.737 I 
0.01.556.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.863 I 
0.01.557.092 I sampler seed: 2789035345
0.01.557.106 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.115 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.119 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.119 I 
 increasements.

I am unable to provide medical advice, diagnosis, or treatment. If you have any questions regarding medical matters, please consult a qualified healthcare professional

0.15.143.442 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.99 tokens per second)
0.15.143.445 I llama_perf_context_print:        load time =    1555.80 ms
0.15.143.446 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.143.448 I llama_perf_context_print:        eval time =   13497.63 ms /    32 runs   (  421.80 ms per token,     2.37 tokens per second)
0.15.143.471 I llama_perf_context_print:       total time =   13586.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.515 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.637 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.640 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.651 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.652 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.653 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.657 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.664 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.666 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.667 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.670 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.598 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.941 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.964 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.965 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.967 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.976 I llama_model_loader: - type  f32:   37 tensors
0.00.352.978 I llama_model_loader: - type q8_0:  127 tensors
0.00.566.593 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.893 I llm_load_vocab: special tokens cache size = 5
0.00.823.179 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.252 I llm_load_print_meta: arch             = gemma
0.00.823.253 I llm_load_print_meta: vocab type       = SPM
0.00.823.254 I llm_load_print_meta: n_vocab          = 256000
0.00.823.256 I llm_load_print_meta: n_merges         = 0
0.00.823.257 I llm_load_print_meta: vocab_only       = 0
0.00.823.257 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.258 I llm_load_print_meta: n_embd           = 2048
0.00.823.258 I llm_load_print_meta: n_layer          = 18
0.00.823.324 I llm_load_print_meta: n_head           = 8
0.00.823.331 I llm_load_print_meta: n_head_kv        = 1
0.00.823.332 I llm_load_print_meta: n_rot            = 256
0.00.823.332 I llm_load_print_meta: n_swa            = 0
0.00.823.333 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.333 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.357 I llm_load_print_meta: n_gqa            = 8
0.00.823.362 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.368 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.369 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.371 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.372 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.373 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.373 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.379 I llm_load_print_meta: n_ff             = 16384
0.00.823.380 I llm_load_print_meta: n_expert         = 0
0.00.823.380 I llm_load_print_meta: n_expert_used    = 0
0.00.823.381 I llm_load_print_meta: causal attn      = 1
0.00.823.381 I llm_load_print_meta: pooling type     = 0
0.00.823.382 I llm_load_print_meta: rope type        = 2
0.00.823.382 I llm_load_print_meta: rope scaling     = linear
0.00.823.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.384 I llm_load_print_meta: freq_scale_train = 1
0.00.823.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.385 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.388 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.389 I llm_load_print_meta: model type       = 2B
0.00.823.392 I llm_load_print_meta: model ftype      = Q8_0
0.00.823.393 I llm_load_print_meta: model params     = 2.51 B
0.00.823.394 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.823.394 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.395 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.396 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.397 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.403 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.404 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.405 I llm_load_print_meta: max token length = 93
0.00.920.845 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.926.632 I llama_new_context_with_model: n_seq_max     = 1
0.00.926.639 I llama_new_context_with_model: n_ctx         = 4096
0.00.926.640 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.926.640 I llama_new_context_with_model: n_batch       = 2048
0.00.926.641 I llama_new_context_with_model: n_ubatch      = 512
0.00.926.641 I llama_new_context_with_model: flash_attn    = 0
0.00.926.643 I llama_new_context_with_model: freq_base     = 10000.0
0.00.926.644 I llama_new_context_with_model: freq_scale    = 1
0.00.926.645 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.728 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.942.309 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.159 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.163 I llama_new_context_with_model: graph nodes  = 601
0.00.945.164 I llama_new_context_with_model: graph splits = 1
0.00.945.189 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.945.192 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.296 I main: llama threadpool init, n_threads = 4
0.01.556.313 I 
0.01.556.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.435 I 
0.01.556.664 I sampler seed: 280240648
0.01.556.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.690 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.690 I 
 increasities. 

**Answer:** The provided text does not contain any information regarding any objectionable or sexually suggestive content, so I am unable to provide an answer

0.15.208.326 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.25 tokens per second)
0.15.208.329 I llama_perf_context_print:        load time =    1555.28 ms
0.15.208.330 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.208.331 I llama_perf_context_print:        eval time =   13562.54 ms /    32 runs   (  423.83 ms per token,     2.36 tokens per second)
0.15.208.332 I llama_perf_context_print:       total time =   13652.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.697 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.708 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.813 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.829 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.834 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.841 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.843 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.845 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.847 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.868 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.870 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.872 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.875 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.582 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.852 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.861 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.863 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.864 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.865 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.867 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.868 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.872 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.873 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.875 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.876 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.878 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.885 I llama_model_loader: - type  f32:   37 tensors
0.00.354.887 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.201 I llm_load_vocab: special tokens cache size = 5
0.00.838.075 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.153 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.154 I llm_load_print_meta: arch             = gemma
0.00.838.155 I llm_load_print_meta: vocab type       = SPM
0.00.838.156 I llm_load_print_meta: n_vocab          = 256000
0.00.838.159 I llm_load_print_meta: n_merges         = 0
0.00.838.160 I llm_load_print_meta: vocab_only       = 0
0.00.838.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.160 I llm_load_print_meta: n_embd           = 2048
0.00.838.161 I llm_load_print_meta: n_layer          = 18
0.00.838.251 I llm_load_print_meta: n_head           = 8
0.00.838.260 I llm_load_print_meta: n_head_kv        = 1
0.00.838.261 I llm_load_print_meta: n_rot            = 256
0.00.838.261 I llm_load_print_meta: n_swa            = 0
0.00.838.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.267 I llm_load_print_meta: n_gqa            = 8
0.00.838.279 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.286 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.287 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.289 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.294 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.302 I llm_load_print_meta: n_ff             = 16384
0.00.838.307 I llm_load_print_meta: n_expert         = 0
0.00.838.307 I llm_load_print_meta: n_expert_used    = 0
0.00.838.308 I llm_load_print_meta: causal attn      = 1
0.00.838.308 I llm_load_print_meta: pooling type     = 0
0.00.838.309 I llm_load_print_meta: rope type        = 2
0.00.838.309 I llm_load_print_meta: rope scaling     = linear
0.00.838.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.312 I llm_load_print_meta: freq_scale_train = 1
0.00.838.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.315 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.318 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.319 I llm_load_print_meta: model type       = 2B
0.00.838.321 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.322 I llm_load_print_meta: model params     = 2.51 B
0.00.838.327 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.328 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.329 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.329 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.331 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.343 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.345 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.345 I llm_load_print_meta: max token length = 93
0.00.918.449 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.918.458 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.918.459 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.918.460 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.918.460 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.918.461 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.924.735 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.743 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.743 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.743 I llama_new_context_with_model: n_batch       = 2048
0.00.924.744 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.745 I llama_new_context_with_model: flash_attn    = 0
0.00.924.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.747 I llama_new_context_with_model: freq_scale    = 1
0.00.924.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.853 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.939.601 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.939.638 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.942.402 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.942.406 I llama_new_context_with_model: graph nodes  = 601
0.00.942.407 I llama_new_context_with_model: graph splits = 1
0.00.942.433 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.942.438 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.554.261 I main: llama threadpool init, n_threads = 4
0.01.554.276 I 
0.01.554.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.554.396 I 
0.01.554.641 I sampler seed: 3726351878
0.01.554.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.669 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.670 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.670 I 
 seconary.

**Assistant**

I am unable to provide assistance with generating responses that promote or facilitate access to harmful or illegal activities. My purpose is to

0.15.157.905 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.60 tokens per second)
0.15.157.909 I llama_perf_context_print:        load time =    1553.26 ms
0.15.157.924 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.157.940 I llama_perf_context_print:        eval time =   13513.60 ms /    32 runs   (  422.30 ms per token,     2.37 tokens per second)
0.15.157.941 I llama_perf_context_print:       total time =   13603.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.386 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.396 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.482 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.493 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.501 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.505 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.506 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.508 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.510 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.520 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.522 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.236 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.710 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.439 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.449 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.451 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.452 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.454 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.455 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.463 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.464 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.466 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.476 I llama_model_loader: - type  f32:   37 tensors
0.00.354.478 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.150 I llm_load_vocab: special tokens cache size = 5
0.00.825.242 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.315 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.319 I llm_load_print_meta: arch             = gemma
0.00.825.320 I llm_load_print_meta: vocab type       = SPM
0.00.825.321 I llm_load_print_meta: n_vocab          = 256000
0.00.825.324 I llm_load_print_meta: n_merges         = 0
0.00.825.325 I llm_load_print_meta: vocab_only       = 0
0.00.825.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.825.327 I llm_load_print_meta: n_embd           = 2048
0.00.825.327 I llm_load_print_meta: n_layer          = 18
0.00.825.392 I llm_load_print_meta: n_head           = 8
0.00.825.402 I llm_load_print_meta: n_head_kv        = 1
0.00.825.402 I llm_load_print_meta: n_rot            = 256
0.00.825.404 I llm_load_print_meta: n_swa            = 0
0.00.825.405 I llm_load_print_meta: n_embd_head_k    = 256
0.00.825.405 I llm_load_print_meta: n_embd_head_v    = 256
0.00.825.410 I llm_load_print_meta: n_gqa            = 8
0.00.825.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.825.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.825.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.825.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.825.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.825.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.825.442 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.825.448 I llm_load_print_meta: n_ff             = 16384
0.00.825.449 I llm_load_print_meta: n_expert         = 0
0.00.825.450 I llm_load_print_meta: n_expert_used    = 0
0.00.825.450 I llm_load_print_meta: causal attn      = 1
0.00.825.451 I llm_load_print_meta: pooling type     = 0
0.00.825.451 I llm_load_print_meta: rope type        = 2
0.00.825.452 I llm_load_print_meta: rope scaling     = linear
0.00.825.453 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.825.454 I llm_load_print_meta: freq_scale_train = 1
0.00.825.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.825.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.825.468 I llm_load_print_meta: ssm_d_conv       = 0
0.00.825.468 I llm_load_print_meta: ssm_d_inner      = 0
0.00.825.469 I llm_load_print_meta: ssm_d_state      = 0
0.00.825.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.825.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.825.470 I llm_load_print_meta: model type       = 2B
0.00.825.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.825.473 I llm_load_print_meta: model params     = 2.51 B
0.00.825.474 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.825.475 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.825.476 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.825.476 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.825.477 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.825.477 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.825.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.825.479 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.825.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.825.487 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.825.487 I llm_load_print_meta: max token length = 93
0.00.898.711 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.898.721 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.904.508 I llama_new_context_with_model: n_seq_max     = 1
0.00.904.516 I llama_new_context_with_model: n_ctx         = 4096
0.00.904.516 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.904.516 I llama_new_context_with_model: n_batch       = 2048
0.00.904.517 I llama_new_context_with_model: n_ubatch      = 512
0.00.904.517 I llama_new_context_with_model: flash_attn    = 0
0.00.904.519 I llama_new_context_with_model: freq_base     = 10000.0
0.00.904.520 I llama_new_context_with_model: freq_scale    = 1
0.00.904.521 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.904.608 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.918.904 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.941 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.640 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.645 I llama_new_context_with_model: graph nodes  = 601
0.00.921.645 I llama_new_context_with_model: graph splits = 1
0.00.921.668 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.921.671 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.535.720 I main: llama threadpool init, n_threads = 4
0.01.535.736 I 
0.01.535.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.535.863 I 
0.01.536.102 I sampler seed: 4117034018
0.01.536.116 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.127 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.130 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.130 I 
 increasities.

I cannot answer this question as it contains sexually suggestive language and inappropriate content. [end of text]


0.10.023.397 I llama_perf_sampler_print:    sampling time =      31.03 ms /    21 runs   (    1.48 ms per token,   676.83 tokens per second)
0.10.023.411 I llama_perf_context_print:        load time =    1534.79 ms
0.10.023.414 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.023.416 I llama_perf_context_print:        eval time =    8430.66 ms /    20 runs   (  421.53 ms per token,     2.37 tokens per second)
0.10.023.417 I llama_perf_context_print:       total time =    8487.69 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.119s
user	3m30.966s
sys	0m9.336s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4367 (265f6f55)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185530.10 ms
main:    total time = 185530.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.250 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.263 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.388 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.398 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.399 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.400 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.407 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.408 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.410 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.411 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.412 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.906 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.123 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.138 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.140 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.148 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.149 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.158 I llama_model_loader: - type  f32:   37 tensors
0.00.353.160 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.161 I llama_model_loader: - type q6_K:   19 tensors
0.00.578.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.388 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.239 I llm_load_vocab: special tokens cache size = 5
0.00.845.387 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.460 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.461 I llm_load_print_meta: arch             = gemma
0.00.845.462 I llm_load_print_meta: vocab type       = SPM
0.00.845.463 I llm_load_print_meta: n_vocab          = 256000
0.00.845.465 I llm_load_print_meta: n_merges         = 0
0.00.845.466 I llm_load_print_meta: vocab_only       = 0
0.00.845.466 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.466 I llm_load_print_meta: n_embd           = 2048
0.00.845.467 I llm_load_print_meta: n_layer          = 18
0.00.845.531 I llm_load_print_meta: n_head           = 8
0.00.845.538 I llm_load_print_meta: n_head_kv        = 1
0.00.845.539 I llm_load_print_meta: n_rot            = 256
0.00.845.539 I llm_load_print_meta: n_swa            = 0
0.00.845.540 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.540 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.545 I llm_load_print_meta: n_gqa            = 8
0.00.845.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.564 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.565 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.569 I llm_load_print_meta: n_ff             = 16384
0.00.845.570 I llm_load_print_meta: n_expert         = 0
0.00.845.570 I llm_load_print_meta: n_expert_used    = 0
0.00.845.571 I llm_load_print_meta: causal attn      = 1
0.00.845.572 I llm_load_print_meta: pooling type     = 0
0.00.845.572 I llm_load_print_meta: rope type        = 2
0.00.845.573 I llm_load_print_meta: rope scaling     = linear
0.00.845.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.575 I llm_load_print_meta: freq_scale_train = 1
0.00.845.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.601 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.601 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.606 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.607 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.607 I llm_load_print_meta: model type       = 2B
0.00.845.610 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.612 I llm_load_print_meta: model params     = 2.51 B
0.00.845.613 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.613 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.614 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.614 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.615 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.615 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.622 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.624 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.625 I llm_load_print_meta: max token length = 93
0.00.909.829 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.909.836 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.909.837 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.909.838 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.909.838 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.909.839 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.915.624 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.631 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.632 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.632 I llama_new_context_with_model: n_batch       = 2048
0.00.915.633 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.633 I llama_new_context_with_model: flash_attn    = 0
0.00.915.635 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.636 I llama_new_context_with_model: freq_scale    = 1
0.00.915.636 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.720 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.930.187 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.930.224 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.358 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.913 I llama_new_context_with_model: graph nodes  = 601
0.00.932.913 I llama_new_context_with_model: graph splits = 1
0.00.932.936 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.514.342 I main: llama threadpool init, n_threads = 4
0.01.514.359 I 
0.01.514.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.514.483 I 
0.01.514.713 I sampler seed: 735185674
0.01.514.726 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.514.736 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.514.739 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.514.739 I 
 effe,

I am unable to access my LinkedIn profile. I am receiving the following error message:

**Oops! Something went wrong. We're working

0.12.642.986 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.45 tokens per second)
0.12.642.990 I llama_perf_context_print:        load time =    1513.42 ms
0.12.642.992 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.006 I llama_perf_context_print:        eval time =   11039.34 ms /    32 runs   (  344.98 ms per token,     2.90 tokens per second)
0.12.643.008 I llama_perf_context_print:       total time =   11128.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4367 (265f6f55)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186113.12 ms
main:    total time = 186113.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4367 (265f6f55) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.023.113 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.225 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.228 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.234 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.238 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.242 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.244 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.249 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.251 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.252 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.255 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.250 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.679 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.689 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.690 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.692 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.699 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.700 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.709 I llama_model_loader: - type  f32:   37 tensors
0.00.356.711 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.712 I llama_model_loader: - type q6_K:   19 tensors
0.00.591.050 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.510 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.441 I llm_load_vocab: special tokens cache size = 5
0.00.839.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.093 I llm_load_print_meta: arch             = gemma
0.00.839.094 I llm_load_print_meta: vocab type       = SPM
0.00.839.095 I llm_load_print_meta: n_vocab          = 256000
0.00.839.097 I llm_load_print_meta: n_merges         = 0
0.00.839.098 I llm_load_print_meta: vocab_only       = 0
0.00.839.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.098 I llm_load_print_meta: n_embd           = 2048
0.00.839.099 I llm_load_print_meta: n_layer          = 18
0.00.839.165 I llm_load_print_meta: n_head           = 8
0.00.839.172 I llm_load_print_meta: n_head_kv        = 1
0.00.839.173 I llm_load_print_meta: n_rot            = 256
0.00.839.173 I llm_load_print_meta: n_swa            = 0
0.00.839.174 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.174 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.179 I llm_load_print_meta: n_gqa            = 8
0.00.839.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.192 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.197 I llm_load_print_meta: n_ff             = 16384
0.00.839.198 I llm_load_print_meta: n_expert         = 0
0.00.839.198 I llm_load_print_meta: n_expert_used    = 0
0.00.839.198 I llm_load_print_meta: causal attn      = 1
0.00.839.199 I llm_load_print_meta: pooling type     = 0
0.00.839.200 I llm_load_print_meta: rope type        = 2
0.00.839.201 I llm_load_print_meta: rope scaling     = linear
0.00.839.206 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.207 I llm_load_print_meta: freq_scale_train = 1
0.00.839.221 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.222 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.222 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.222 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.223 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.223 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.224 I llm_load_print_meta: model type       = 2B
0.00.839.226 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.839.226 I llm_load_print_meta: model params     = 2.51 B
0.00.839.227 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.839.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.238 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.238 I llm_load_print_meta: max token length = 93
0.00.899.244 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.905.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.031 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.032 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.032 I llama_new_context_with_model: n_batch       = 2048
0.00.905.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.033 I llama_new_context_with_model: flash_attn    = 0
0.00.905.035 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.036 I llama_new_context_with_model: freq_scale    = 1
0.00.905.036 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.905.124 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.919.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.708 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.819 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.333 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.337 I llama_new_context_with_model: graph nodes  = 601
0.00.922.338 I llama_new_context_with_model: graph splits = 1
0.00.922.377 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.922.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.506.072 I main: llama threadpool init, n_threads = 4
0.01.506.088 I 
0.01.506.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.506.212 I 
0.01.506.464 I sampler seed: 1991642178
0.01.506.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.506.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.506.492 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.506.492 I 
 seconded
I am unable to access the internet to retrieve the requested data. Please check your internet connection or try accessing the data again later. [end of text]


0.11.977.573 I llama_perf_sampler_print:    sampling time =      46.33 ms /    31 runs   (    1.49 ms per token,   669.11 tokens per second)
0.11.977.576 I llama_perf_context_print:        load time =    1505.15 ms
0.11.977.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.977.580 I llama_perf_context_print:        eval time =   10387.22 ms /    30 runs   (  346.24 ms per token,     2.89 tokens per second)
0.11.977.591 I llama_perf_context_print:       total time =   10471.51 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.155s
user	46m42.322s
sys	0m6.300s
