+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.595 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.798 I main: load the model and apply lora adapter, if any
0.00.021.203 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.214 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.222 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.229 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.233 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.234 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.235 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.235 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.236 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.241 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.242 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.242 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.243 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.244 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.067 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.068 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.069 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.073 I llama_model_loader: - type  f32:   37 tensors
0.00.132.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.118 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.697 I llm_load_vocab: special tokens cache size = 5
0.00.282.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.955 I llm_load_print_meta: arch             = gemma
0.00.282.955 I llm_load_print_meta: vocab type       = SPM
0.00.282.956 I llm_load_print_meta: n_vocab          = 256000
0.00.282.957 I llm_load_print_meta: n_merges         = 0
0.00.282.957 I llm_load_print_meta: vocab_only       = 0
0.00.282.958 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.958 I llm_load_print_meta: n_embd           = 2048
0.00.282.958 I llm_load_print_meta: n_layer          = 18
0.00.282.971 I llm_load_print_meta: n_head           = 8
0.00.282.971 I llm_load_print_meta: n_head_kv        = 1
0.00.282.972 I llm_load_print_meta: n_rot            = 256
0.00.282.972 I llm_load_print_meta: n_swa            = 0
0.00.282.972 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.973 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.974 I llm_load_print_meta: n_gqa            = 8
0.00.282.975 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.976 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.976 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.978 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.978 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.979 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.979 I llm_load_print_meta: n_ff             = 16384
0.00.282.980 I llm_load_print_meta: n_expert         = 0
0.00.282.980 I llm_load_print_meta: n_expert_used    = 0
0.00.282.980 I llm_load_print_meta: causal attn      = 1
0.00.282.981 I llm_load_print_meta: pooling type     = 0
0.00.282.981 I llm_load_print_meta: rope type        = 2
0.00.282.981 I llm_load_print_meta: rope scaling     = linear
0.00.282.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.984 I llm_load_print_meta: freq_scale_train = 1
0.00.282.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.984 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.985 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.985 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.986 I llm_load_print_meta: model type       = 2B
0.00.282.986 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.987 I llm_load_print_meta: model params     = 2.51 B
0.00.282.988 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.989 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.989 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.990 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.990 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.991 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.991 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.991 I llm_load_print_meta: max token length = 93
0.00.381.851 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.381.860 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.381.861 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.381.862 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.381.862 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.381.863 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.182 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.189 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.190 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.190 I llama_new_context_with_model: n_batch       = 2048
0.00.387.191 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.191 I llama_new_context_with_model: flash_attn    = 0
0.00.387.195 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.196 I llama_new_context_with_model: freq_scale    = 1
0.00.387.197 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.219 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.402.304 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.318 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.410 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.709 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.714 I llama_new_context_with_model: graph nodes  = 601
0.00.403.714 I llama_new_context_with_model: graph splits = 1
0.00.403.716 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.403.717 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.913 I main: llama threadpool init, n_threads = 4
0.00.490.928 I 
0.00.491.003 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.491.006 I 
0.00.491.052 I sampler seed: 1977245594
0.00.491.063 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.078 I 
 increasities and inconsistencies.

The inconsistent application of rules and procedures, combined with the subjective and often unreliable nature of judgment calls, can lead to unfair and unjust

0.02.787.178 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6239.36 tokens per second)
0.02.787.181 I llama_perf_context_print:        load time =     490.10 ms
0.02.787.182 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.787.183 I llama_perf_context_print:        eval time =    2276.64 ms /    32 runs   (   71.15 ms per token,    14.06 tokens per second)
0.02.787.184 I llama_perf_context_print:       total time =    2296.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.567 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.536 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.568 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.569 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.581 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.582 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.067 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.076 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.077 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.078 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.087 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.088 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.089 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.093 I llama_model_loader: - type  f32:   37 tensors
0.00.132.094 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.506 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.157 I llm_load_vocab: special tokens cache size = 5
0.00.282.346 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.366 I llm_load_print_meta: arch             = gemma
0.00.282.367 I llm_load_print_meta: vocab type       = SPM
0.00.282.368 I llm_load_print_meta: n_vocab          = 256000
0.00.282.368 I llm_load_print_meta: n_merges         = 0
0.00.282.368 I llm_load_print_meta: vocab_only       = 0
0.00.282.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.369 I llm_load_print_meta: n_embd           = 2048
0.00.282.370 I llm_load_print_meta: n_layer          = 18
0.00.282.381 I llm_load_print_meta: n_head           = 8
0.00.282.382 I llm_load_print_meta: n_head_kv        = 1
0.00.282.382 I llm_load_print_meta: n_rot            = 256
0.00.282.383 I llm_load_print_meta: n_swa            = 0
0.00.282.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.384 I llm_load_print_meta: n_gqa            = 8
0.00.282.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.390 I llm_load_print_meta: n_ff             = 16384
0.00.282.390 I llm_load_print_meta: n_expert         = 0
0.00.282.391 I llm_load_print_meta: n_expert_used    = 0
0.00.282.391 I llm_load_print_meta: causal attn      = 1
0.00.282.391 I llm_load_print_meta: pooling type     = 0
0.00.282.392 I llm_load_print_meta: rope type        = 2
0.00.282.392 I llm_load_print_meta: rope scaling     = linear
0.00.282.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.394 I llm_load_print_meta: freq_scale_train = 1
0.00.282.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.395 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.395 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.395 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.396 I llm_load_print_meta: model type       = 2B
0.00.282.397 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.397 I llm_load_print_meta: model params     = 2.51 B
0.00.282.398 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.401 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.402 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.402 I llm_load_print_meta: max token length = 93
0.00.377.171 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.359 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.366 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.366 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.366 I llama_new_context_with_model: n_batch       = 2048
0.00.382.367 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.368 I llama_new_context_with_model: flash_attn    = 0
0.00.382.370 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.371 I llama_new_context_with_model: freq_scale    = 1
0.00.382.372 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.391 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.397.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.489 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.580 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.823 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.829 I llama_new_context_with_model: graph nodes  = 601
0.00.398.830 I llama_new_context_with_model: graph splits = 1
0.00.398.832 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.398.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.330 I main: llama threadpool init, n_threads = 4
0.00.480.346 I 
0.00.480.422 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.426 I 
0.00.480.468 I sampler seed: 4152133045
0.00.480.480 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.497 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.497 I 
 increasels, and a mischievous gnome in a forest clearing.

In the heart of the forest, beneath towering trees, rested a magical crystal. The crystal pulsed

0.02.710.144 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6142.96 tokens per second)
0.02.710.147 I llama_perf_context_print:        load time =     479.54 ms
0.02.710.148 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.150 I llama_perf_context_print:        eval time =    2208.91 ms /    32 runs   (   69.03 ms per token,    14.49 tokens per second)
0.02.710.151 I llama_perf_context_print:       total time =    2229.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.189 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.384 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.020.718 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.730 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.742 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.747 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.748 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.752 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.754 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.755 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.756 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.757 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.757 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.762 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.763 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.763 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.764 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.764 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.244 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.683 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.684 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.689 I llama_model_loader: - type  f32:   37 tensors
0.00.132.690 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.602 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.454 I llm_load_vocab: special tokens cache size = 5
0.00.283.697 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.716 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.717 I llm_load_print_meta: arch             = gemma
0.00.283.717 I llm_load_print_meta: vocab type       = SPM
0.00.283.718 I llm_load_print_meta: n_vocab          = 256000
0.00.283.719 I llm_load_print_meta: n_merges         = 0
0.00.283.719 I llm_load_print_meta: vocab_only       = 0
0.00.283.719 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.720 I llm_load_print_meta: n_embd           = 2048
0.00.283.720 I llm_load_print_meta: n_layer          = 18
0.00.283.731 I llm_load_print_meta: n_head           = 8
0.00.283.732 I llm_load_print_meta: n_head_kv        = 1
0.00.283.732 I llm_load_print_meta: n_rot            = 256
0.00.283.732 I llm_load_print_meta: n_swa            = 0
0.00.283.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.734 I llm_load_print_meta: n_gqa            = 8
0.00.283.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.736 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.738 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.738 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.740 I llm_load_print_meta: n_ff             = 16384
0.00.283.740 I llm_load_print_meta: n_expert         = 0
0.00.283.740 I llm_load_print_meta: n_expert_used    = 0
0.00.283.741 I llm_load_print_meta: causal attn      = 1
0.00.283.741 I llm_load_print_meta: pooling type     = 0
0.00.283.741 I llm_load_print_meta: rope type        = 2
0.00.283.742 I llm_load_print_meta: rope scaling     = linear
0.00.283.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.744 I llm_load_print_meta: freq_scale_train = 1
0.00.283.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.745 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.745 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.745 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.745 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.746 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.746 I llm_load_print_meta: model type       = 2B
0.00.283.747 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.747 I llm_load_print_meta: model params     = 2.51 B
0.00.283.748 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.749 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.749 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.750 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.750 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.751 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.751 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.751 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.752 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.752 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.752 I llm_load_print_meta: max token length = 93
0.00.359.941 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.948 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.949 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.950 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.950 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.951 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.222 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.228 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.229 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.229 I llama_new_context_with_model: n_batch       = 2048
0.00.365.230 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.230 I llama_new_context_with_model: flash_attn    = 0
0.00.365.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.234 I llama_new_context_with_model: freq_scale    = 1
0.00.365.235 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.256 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.380.765 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.780 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.190 I llama_new_context_with_model: graph nodes  = 601
0.00.382.191 I llama_new_context_with_model: graph splits = 1
0.00.382.193 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.193 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.434 I main: llama threadpool init, n_threads = 4
0.00.470.450 I 
0.00.470.523 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.526 I 
0.00.470.567 I sampler seed: 1447859417
0.00.470.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.586 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.588 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.589 I 
 increasities from the 19th century are often misconstrued as primitive or outdated, but they hold valuable insights into the evolution of human communication and social

0.02.828.520 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6376.81 tokens per second)
0.02.828.523 I llama_perf_context_print:        load time =     470.03 ms
0.02.828.523 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.828.525 I llama_perf_context_print:        eval time =    2337.89 ms /    32 runs   (   73.06 ms per token,    13.69 tokens per second)
0.02.828.526 I llama_perf_context_print:       total time =    2358.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.574 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.802 I main: load the model and apply lora adapter, if any
0.00.021.732 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.744 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.761 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.762 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.767 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.767 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.768 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.769 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.770 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.771 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.776 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.776 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.778 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.778 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.779 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.683 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.684 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.685 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.688 I llama_model_loader: - type  f32:   37 tensors
0.00.132.690 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.868 I llm_load_vocab: special tokens cache size = 5
0.00.287.005 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.022 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.023 I llm_load_print_meta: arch             = gemma
0.00.287.023 I llm_load_print_meta: vocab type       = SPM
0.00.287.024 I llm_load_print_meta: n_vocab          = 256000
0.00.287.024 I llm_load_print_meta: n_merges         = 0
0.00.287.025 I llm_load_print_meta: vocab_only       = 0
0.00.287.025 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.025 I llm_load_print_meta: n_embd           = 2048
0.00.287.026 I llm_load_print_meta: n_layer          = 18
0.00.287.038 I llm_load_print_meta: n_head           = 8
0.00.287.039 I llm_load_print_meta: n_head_kv        = 1
0.00.287.039 I llm_load_print_meta: n_rot            = 256
0.00.287.039 I llm_load_print_meta: n_swa            = 0
0.00.287.040 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.040 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.041 I llm_load_print_meta: n_gqa            = 8
0.00.287.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.044 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.045 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.046 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.046 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.048 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.048 I llm_load_print_meta: n_ff             = 16384
0.00.287.049 I llm_load_print_meta: n_expert         = 0
0.00.287.049 I llm_load_print_meta: n_expert_used    = 0
0.00.287.049 I llm_load_print_meta: causal attn      = 1
0.00.287.050 I llm_load_print_meta: pooling type     = 0
0.00.287.051 I llm_load_print_meta: rope type        = 2
0.00.287.053 I llm_load_print_meta: rope scaling     = linear
0.00.287.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.055 I llm_load_print_meta: freq_scale_train = 1
0.00.287.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.055 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.056 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.056 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.057 I llm_load_print_meta: model type       = 2B
0.00.287.058 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.059 I llm_load_print_meta: model params     = 2.51 B
0.00.287.059 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.062 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.063 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.063 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.064 I llm_load_print_meta: max token length = 93
0.00.357.944 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.357.953 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.363.322 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.328 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.329 I llama_new_context_with_model: n_batch       = 2048
0.00.363.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.330 I llama_new_context_with_model: flash_attn    = 0
0.00.363.333 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.334 I llama_new_context_with_model: freq_scale    = 1
0.00.363.335 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.356 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.378.600 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.615 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.710 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.947 I llama_new_context_with_model: graph nodes  = 601
0.00.379.947 I llama_new_context_with_model: graph splits = 1
0.00.379.950 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.950 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.967 I main: llama threadpool init, n_threads = 4
0.00.471.988 I 
0.00.472.078 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.082 I 
0.00.472.132 I sampler seed: 374685324
0.00.472.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.155 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.160 I 
 increasities. [end of text]


0.00.785.610 I llama_perf_sampler_print:    sampling time =       0.76 ms /     5 runs   (    0.15 ms per token,  6570.30 tokens per second)
0.00.785.613 I llama_perf_context_print:        load time =     471.14 ms
0.00.785.614 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.785.615 I llama_perf_context_print:        eval time =     310.13 ms /     4 runs   (   77.53 ms per token,    12.90 tokens per second)
0.00.785.615 I llama_perf_context_print:       total time =     313.65 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.152s
user	0m31.809s
sys	0m9.569s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4382 (265a5eac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40266.28 ms
main:    total time = 40266.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.588 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.807 I main: llama backend init
0.00.000.814 I main: load the model and apply lora adapter, if any
0.00.021.918 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.940 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.951 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.953 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.954 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.954 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.955 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.971 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.268 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.141 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.149 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.150 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.151 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.151 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.154 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.155 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.156 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.157 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.160 I llama_model_loader: - type  f32:   37 tensors
0.00.133.161 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.162 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.714 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.494 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.211 I llm_load_vocab: special tokens cache size = 5
0.00.285.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.535 I llm_load_print_meta: arch             = gemma
0.00.285.535 I llm_load_print_meta: vocab type       = SPM
0.00.285.536 I llm_load_print_meta: n_vocab          = 256000
0.00.285.537 I llm_load_print_meta: n_merges         = 0
0.00.285.537 I llm_load_print_meta: vocab_only       = 0
0.00.285.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.537 I llm_load_print_meta: n_embd           = 2048
0.00.285.538 I llm_load_print_meta: n_layer          = 18
0.00.285.550 I llm_load_print_meta: n_head           = 8
0.00.285.550 I llm_load_print_meta: n_head_kv        = 1
0.00.285.551 I llm_load_print_meta: n_rot            = 256
0.00.285.551 I llm_load_print_meta: n_swa            = 0
0.00.285.551 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.552 I llm_load_print_meta: n_gqa            = 8
0.00.285.553 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.554 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.555 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.556 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.557 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.557 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.558 I llm_load_print_meta: n_ff             = 16384
0.00.285.559 I llm_load_print_meta: n_expert         = 0
0.00.285.559 I llm_load_print_meta: n_expert_used    = 0
0.00.285.559 I llm_load_print_meta: causal attn      = 1
0.00.285.560 I llm_load_print_meta: pooling type     = 0
0.00.285.560 I llm_load_print_meta: rope type        = 2
0.00.285.561 I llm_load_print_meta: rope scaling     = linear
0.00.285.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.563 I llm_load_print_meta: freq_scale_train = 1
0.00.285.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.563 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.565 I llm_load_print_meta: model type       = 2B
0.00.285.566 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.567 I llm_load_print_meta: model params     = 2.51 B
0.00.285.567 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.569 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.570 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.571 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.571 I llm_load_print_meta: max token length = 93
0.00.345.011 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.019 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.019 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.020 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.020 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.021 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.377 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.383 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.384 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.384 I llama_new_context_with_model: n_batch       = 2048
0.00.350.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.385 I llama_new_context_with_model: flash_attn    = 0
0.00.350.389 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.390 I llama_new_context_with_model: freq_scale    = 1
0.00.350.391 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.414 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.425 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.438 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.769 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.774 I llama_new_context_with_model: graph nodes  = 601
0.00.366.774 I llama_new_context_with_model: graph splits = 1
0.00.366.777 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.777 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.799 I main: llama threadpool init, n_threads = 4
0.00.442.813 I 
0.00.442.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.442.893 I 
0.00.442.940 I sampler seed: 1517251938
0.00.442.952 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.956 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.957 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.958 I 
 seconded. The correct answer should be:

**The correct answer is:**

**He asked for clarification on the procedures and protocols involved in the process.**

0.02.105.842 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6468.05 tokens per second)
0.02.105.845 I llama_perf_context_print:        load time =     441.97 ms
0.02.105.847 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.105.849 I llama_perf_context_print:        eval time =    1642.66 ms /    32 runs   (   51.33 ms per token,    19.48 tokens per second)
0.02.105.851 I llama_perf_context_print:       total time =    1663.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4382 (265a5eac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40262.12 ms
main:    total time = 40262.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.183 I build: 4382 (265a5eac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.020.336 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.353 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.373 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.380 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.488 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.489 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.490 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.494 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.498 I llama_model_loader: - type  f32:   37 tensors
0.00.130.499 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.500 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.413 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.871 I llm_load_vocab: special tokens cache size = 5
0.00.271.172 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.192 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.192 I llm_load_print_meta: arch             = gemma
0.00.271.193 I llm_load_print_meta: vocab type       = SPM
0.00.271.193 I llm_load_print_meta: n_vocab          = 256000
0.00.271.194 I llm_load_print_meta: n_merges         = 0
0.00.271.194 I llm_load_print_meta: vocab_only       = 0
0.00.271.195 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.195 I llm_load_print_meta: n_embd           = 2048
0.00.271.195 I llm_load_print_meta: n_layer          = 18
0.00.271.207 I llm_load_print_meta: n_head           = 8
0.00.271.208 I llm_load_print_meta: n_head_kv        = 1
0.00.271.208 I llm_load_print_meta: n_rot            = 256
0.00.271.209 I llm_load_print_meta: n_swa            = 0
0.00.271.209 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.210 I llm_load_print_meta: n_gqa            = 8
0.00.271.211 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.212 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.214 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.215 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.215 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.216 I llm_load_print_meta: n_ff             = 16384
0.00.271.216 I llm_load_print_meta: n_expert         = 0
0.00.271.216 I llm_load_print_meta: n_expert_used    = 0
0.00.271.217 I llm_load_print_meta: causal attn      = 1
0.00.271.217 I llm_load_print_meta: pooling type     = 0
0.00.271.217 I llm_load_print_meta: rope type        = 2
0.00.271.218 I llm_load_print_meta: rope scaling     = linear
0.00.271.219 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.219 I llm_load_print_meta: freq_scale_train = 1
0.00.271.220 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.220 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.220 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.221 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.221 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.221 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.222 I llm_load_print_meta: model type       = 2B
0.00.271.222 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.223 I llm_load_print_meta: model params     = 2.51 B
0.00.271.224 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.224 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.224 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.225 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.225 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.226 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.226 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.226 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.227 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.227 I llm_load_print_meta: max token length = 93
0.00.327.955 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.067 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.073 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.073 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.073 I llama_new_context_with_model: n_batch       = 2048
0.00.333.074 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.074 I llama_new_context_with_model: flash_attn    = 0
0.00.333.077 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.077 I llama_new_context_with_model: freq_scale    = 1
0.00.333.079 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.100 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.349.023 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.038 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.405 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.412 I llama_new_context_with_model: graph nodes  = 601
0.00.350.412 I llama_new_context_with_model: graph splits = 1
0.00.350.414 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.415 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.182 I main: llama threadpool init, n_threads = 4
0.00.426.201 I 
0.00.426.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.280 I 
0.00.426.321 I sampler seed: 3829365576
0.00.426.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.345 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.349 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.349 I 
 squaRED text, which indicates a problem or need for action.

## Urgent: Addressing the Issue of Limited Employee Engagement at [Company Name]

**Problem

0.02.059.358 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6436.51 tokens per second)
0.02.059.361 I llama_perf_context_print:        load time =     425.78 ms
0.02.059.363 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.059.365 I llama_perf_context_print:        eval time =    1613.59 ms /    32 runs   (   50.42 ms per token,    19.83 tokens per second)
0.02.059.366 I llama_perf_context_print:       total time =    1633.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.524s
user	10m24.771s
sys	0m7.203s
