+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.001.142 I main: load the model and apply lora adapter, if any
0.00.023.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.645 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.745 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.746 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.751 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.752 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.754 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.756 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.757 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.758 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.766 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.768 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.769 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.770 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.771 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.084 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.092 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.093 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.094 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.095 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.097 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.098 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.102 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.103 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.105 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.106 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.115 I llama_model_loader: - type  f32:   37 tensors
0.00.267.117 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.576 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.776 I llm_load_vocab: special tokens cache size = 5
0.00.612.578 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.651 I llm_load_print_meta: arch             = gemma
0.00.612.652 I llm_load_print_meta: vocab type       = SPM
0.00.612.653 I llm_load_print_meta: n_vocab          = 256000
0.00.612.655 I llm_load_print_meta: n_merges         = 0
0.00.612.655 I llm_load_print_meta: vocab_only       = 0
0.00.612.656 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.656 I llm_load_print_meta: n_embd           = 2048
0.00.612.657 I llm_load_print_meta: n_layer          = 18
0.00.612.720 I llm_load_print_meta: n_head           = 8
0.00.612.748 I llm_load_print_meta: n_head_kv        = 1
0.00.612.749 I llm_load_print_meta: n_rot            = 256
0.00.612.749 I llm_load_print_meta: n_swa            = 0
0.00.612.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.756 I llm_load_print_meta: n_gqa            = 8
0.00.612.760 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.770 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.770 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.771 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.776 I llm_load_print_meta: n_ff             = 16384
0.00.612.776 I llm_load_print_meta: n_expert         = 0
0.00.612.777 I llm_load_print_meta: n_expert_used    = 0
0.00.612.778 I llm_load_print_meta: causal attn      = 1
0.00.612.778 I llm_load_print_meta: pooling type     = 0
0.00.612.779 I llm_load_print_meta: rope type        = 2
0.00.612.779 I llm_load_print_meta: rope scaling     = linear
0.00.612.781 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.781 I llm_load_print_meta: freq_scale_train = 1
0.00.612.786 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.786 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.786 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.787 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.787 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.787 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.796 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.797 I llm_load_print_meta: model type       = 2B
0.00.612.798 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.799 I llm_load_print_meta: model params     = 2.51 B
0.00.612.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.811 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.829 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.832 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.835 I llm_load_print_meta: max token length = 93
0.00.715.818 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.715.829 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.715.830 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.715.831 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.715.832 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.715.832 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.721.726 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.733 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.733 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.733 I llama_new_context_with_model: n_batch       = 2048
0.00.721.734 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.734 I llama_new_context_with_model: flash_attn    = 0
0.00.721.737 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.738 I llama_new_context_with_model: freq_scale    = 1
0.00.721.738 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.095 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.134 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.778 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.782 I llama_new_context_with_model: graph nodes  = 601
0.00.740.783 I llama_new_context_with_model: graph splits = 1
0.00.740.808 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.262 I main: llama threadpool init, n_threads = 4
0.01.346.276 I 
0.01.346.385 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.388 I 
0.01.346.625 I sampler seed: 2797663545
0.01.346.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.644 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.346.648 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.648 I 
 increamically.

I am unable to generate a response for this query as it appears to be asking for content that is inappropriate or harmful. [end of text]


0.13.517.618 I llama_perf_sampler_print:    sampling time =      44.67 ms /    30 runs   (    1.49 ms per token,   671.61 tokens per second)
0.13.517.620 I llama_perf_context_print:        load time =    1345.02 ms
0.13.517.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.517.623 I llama_perf_context_print:        eval time =   12088.93 ms /    29 runs   (  416.86 ms per token,     2.40 tokens per second)
0.13.517.624 I llama_perf_context_print:       total time =   12171.36 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.001.138 I main: load the model and apply lora adapter, if any
0.00.023.636 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.739 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.755 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.766 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.771 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.773 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.777 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.786 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.792 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.794 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.808 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.814 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.029 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.683 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.694 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.695 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.697 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.698 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.699 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.700 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.705 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.706 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.707 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.708 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.716 I llama_model_loader: - type  f32:   37 tensors
0.00.270.718 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.654 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.238 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.162 I llm_load_vocab: special tokens cache size = 5
0.00.602.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.202 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.203 I llm_load_print_meta: arch             = gemma
0.00.602.204 I llm_load_print_meta: vocab type       = SPM
0.00.602.205 I llm_load_print_meta: n_vocab          = 256000
0.00.602.207 I llm_load_print_meta: n_merges         = 0
0.00.602.208 I llm_load_print_meta: vocab_only       = 0
0.00.602.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.208 I llm_load_print_meta: n_embd           = 2048
0.00.602.208 I llm_load_print_meta: n_layer          = 18
0.00.602.280 I llm_load_print_meta: n_head           = 8
0.00.602.291 I llm_load_print_meta: n_head_kv        = 1
0.00.602.295 I llm_load_print_meta: n_rot            = 256
0.00.602.295 I llm_load_print_meta: n_swa            = 0
0.00.602.296 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.296 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.303 I llm_load_print_meta: n_gqa            = 8
0.00.602.310 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.317 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.322 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.324 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.325 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.333 I llm_load_print_meta: n_ff             = 16384
0.00.602.334 I llm_load_print_meta: n_expert         = 0
0.00.602.334 I llm_load_print_meta: n_expert_used    = 0
0.00.602.338 I llm_load_print_meta: causal attn      = 1
0.00.602.339 I llm_load_print_meta: pooling type     = 0
0.00.602.339 I llm_load_print_meta: rope type        = 2
0.00.602.340 I llm_load_print_meta: rope scaling     = linear
0.00.602.341 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.342 I llm_load_print_meta: freq_scale_train = 1
0.00.602.343 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.343 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.345 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.345 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.345 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.346 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.347 I llm_load_print_meta: model type       = 2B
0.00.602.349 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.352 I llm_load_print_meta: model params     = 2.51 B
0.00.602.362 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.370 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.371 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.380 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.381 I llm_load_print_meta: max token length = 93
0.00.701.274 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.707.732 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.742 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.742 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.742 I llama_new_context_with_model: n_batch       = 2048
0.00.707.743 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.743 I llama_new_context_with_model: flash_attn    = 0
0.00.707.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.747 I llama_new_context_with_model: freq_scale    = 1
0.00.707.749 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.338 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.382 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.020 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.025 I llama_new_context_with_model: graph nodes  = 601
0.00.728.025 I llama_new_context_with_model: graph splits = 1
0.00.728.052 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.223 I main: llama threadpool init, n_threads = 4
0.01.336.236 I 
0.01.336.360 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.363 I 
0.01.336.595 I sampler seed: 2632708928
0.01.336.608 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.617 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.336.621 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.622 I 
 increasities, but there's no evidence to suggest that they're harmful. [end of text]


0.08.972.084 I llama_perf_sampler_print:    sampling time =      27.70 ms /    19 runs   (    1.46 ms per token,   685.99 tokens per second)
0.08.972.087 I llama_perf_context_print:        load time =    1334.97 ms
0.08.972.088 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.972.102 I llama_perf_context_print:        eval time =    7584.20 ms /    18 runs   (  421.34 ms per token,     2.37 tokens per second)
0.08.972.103 I llama_perf_context_print:       total time =    7635.87 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.109 I main: load the model and apply lora adapter, if any
0.00.023.722 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.840 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.860 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.861 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.862 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.863 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.864 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.350 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.359 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.361 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.362 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.363 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.364 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.371 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.372 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.373 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.375 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.384 I llama_model_loader: - type  f32:   37 tensors
0.00.268.386 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.343 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.334 I llm_load_vocab: special tokens cache size = 5
0.00.606.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.970 I llm_load_print_meta: arch             = gemma
0.00.606.971 I llm_load_print_meta: vocab type       = SPM
0.00.606.972 I llm_load_print_meta: n_vocab          = 256000
0.00.606.975 I llm_load_print_meta: n_merges         = 0
0.00.606.975 I llm_load_print_meta: vocab_only       = 0
0.00.606.976 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.976 I llm_load_print_meta: n_embd           = 2048
0.00.606.977 I llm_load_print_meta: n_layer          = 18
0.00.607.041 I llm_load_print_meta: n_head           = 8
0.00.607.048 I llm_load_print_meta: n_head_kv        = 1
0.00.607.049 I llm_load_print_meta: n_rot            = 256
0.00.607.049 I llm_load_print_meta: n_swa            = 0
0.00.607.050 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.056 I llm_load_print_meta: n_gqa            = 8
0.00.607.060 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.069 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.075 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.076 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.081 I llm_load_print_meta: n_ff             = 16384
0.00.607.081 I llm_load_print_meta: n_expert         = 0
0.00.607.083 I llm_load_print_meta: n_expert_used    = 0
0.00.607.084 I llm_load_print_meta: causal attn      = 1
0.00.607.084 I llm_load_print_meta: pooling type     = 0
0.00.607.095 I llm_load_print_meta: rope type        = 2
0.00.607.110 I llm_load_print_meta: rope scaling     = linear
0.00.607.112 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.113 I llm_load_print_meta: freq_scale_train = 1
0.00.607.114 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.114 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.114 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.114 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.115 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.117 I llm_load_print_meta: model type       = 2B
0.00.607.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.119 I llm_load_print_meta: model params     = 2.51 B
0.00.607.127 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.128 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.128 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.129 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.131 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.131 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.138 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.140 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.140 I llm_load_print_meta: max token length = 93
0.00.699.367 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.699.375 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.376 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.699.376 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.699.377 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.699.378 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.705.304 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.312 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.312 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.313 I llama_new_context_with_model: n_batch       = 2048
0.00.705.313 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.314 I llama_new_context_with_model: flash_attn    = 0
0.00.705.317 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.318 I llama_new_context_with_model: freq_scale    = 1
0.00.705.318 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.722.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.722.519 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.722.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.725.223 I llama_new_context_with_model: graph nodes  = 601
0.00.725.223 I llama_new_context_with_model: graph splits = 1
0.00.725.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.332 I main: llama threadpool init, n_threads = 4
0.01.341.345 I 
0.01.341.453 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.457 I 
0.01.341.684 I sampler seed: 1779288228
0.01.341.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.704 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.708 I 
 increasities in the early hours of the morning and erratic behavior.

I am unable to provide a response that includes personally identifiable information or high profile demographic data.

0.14.930.499 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.06 tokens per second)
0.14.930.513 I llama_perf_context_print:        load time =    1340.13 ms
0.14.930.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.517 I llama_perf_context_print:        eval time =   13498.89 ms /    32 runs   (  421.84 ms per token,     2.37 tokens per second)
0.14.930.518 I llama_perf_context_print:       total time =   13589.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.001.175 I main: load the model and apply lora adapter, if any
0.00.023.876 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.987 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.002 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.008 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.013 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.015 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.637 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.290 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.298 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.299 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.300 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.301 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.302 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.304 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.307 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.308 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.309 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.310 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.312 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.319 I llama_model_loader: - type  f32:   37 tensors
0.00.268.322 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.702 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.619 I llm_load_vocab: special tokens cache size = 5
0.00.600.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.444 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.449 I llm_load_print_meta: arch             = gemma
0.00.600.450 I llm_load_print_meta: vocab type       = SPM
0.00.600.451 I llm_load_print_meta: n_vocab          = 256000
0.00.600.453 I llm_load_print_meta: n_merges         = 0
0.00.600.454 I llm_load_print_meta: vocab_only       = 0
0.00.600.455 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.455 I llm_load_print_meta: n_embd           = 2048
0.00.600.456 I llm_load_print_meta: n_layer          = 18
0.00.600.525 I llm_load_print_meta: n_head           = 8
0.00.600.535 I llm_load_print_meta: n_head_kv        = 1
0.00.600.537 I llm_load_print_meta: n_rot            = 256
0.00.600.538 I llm_load_print_meta: n_swa            = 0
0.00.600.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.545 I llm_load_print_meta: n_gqa            = 8
0.00.600.552 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.565 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.566 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.567 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.568 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.569 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.576 I llm_load_print_meta: n_ff             = 16384
0.00.600.577 I llm_load_print_meta: n_expert         = 0
0.00.600.581 I llm_load_print_meta: n_expert_used    = 0
0.00.600.581 I llm_load_print_meta: causal attn      = 1
0.00.600.582 I llm_load_print_meta: pooling type     = 0
0.00.600.582 I llm_load_print_meta: rope type        = 2
0.00.600.583 I llm_load_print_meta: rope scaling     = linear
0.00.600.585 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.586 I llm_load_print_meta: freq_scale_train = 1
0.00.600.586 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.590 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.591 I llm_load_print_meta: model type       = 2B
0.00.600.592 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.596 I llm_load_print_meta: model params     = 2.51 B
0.00.600.606 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.607 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.608 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.611 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.612 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.613 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.620 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.622 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.625 I llm_load_print_meta: max token length = 93
0.00.673.147 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.673.157 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.679.298 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.306 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.306 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.307 I llama_new_context_with_model: n_batch       = 2048
0.00.679.307 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.308 I llama_new_context_with_model: flash_attn    = 0
0.00.679.310 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.311 I llama_new_context_with_model: freq_scale    = 1
0.00.679.311 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.695.463 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.695.501 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.695.628 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.254 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.698.258 I llama_new_context_with_model: graph nodes  = 601
0.00.698.258 I llama_new_context_with_model: graph splits = 1
0.00.698.285 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.880 I main: llama threadpool init, n_threads = 4
0.01.301.894 I 
0.01.302.020 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.024 I 
0.01.302.280 I sampler seed: 3785699704
0.01.302.292 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.301 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.302 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.302 I 
 increasities in the workplace and discuss potential solutions.

**Workplace Issues and Challenges:**

- Microaggressions and implicit bias
- Sexual harassment and discrimination


0.14.807.025 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.25 tokens per second)
0.14.807.028 I llama_perf_context_print:        load time =    1300.60 ms
0.14.807.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.807.031 I llama_perf_context_print:        eval time =   13413.78 ms /    32 runs   (  419.18 ms per token,     2.39 tokens per second)
0.14.807.043 I llama_perf_context_print:       total time =   13505.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.920s
user	3m20.284s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4041 (2319126a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199301.92 ms
main:    total time = 199301.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.001.137 I main: load the model and apply lora adapter, if any
0.00.024.332 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.348 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.475 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.486 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.487 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.168 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.376 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.384 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.385 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.387 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.388 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.391 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.395 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.398 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.399 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.407 I llama_model_loader: - type  f32:   37 tensors
0.00.268.409 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.410 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.093 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.982 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.827 I llm_load_vocab: special tokens cache size = 5
0.00.613.552 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.619 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.620 I llm_load_print_meta: arch             = gemma
0.00.613.621 I llm_load_print_meta: vocab type       = SPM
0.00.613.621 I llm_load_print_meta: n_vocab          = 256000
0.00.613.623 I llm_load_print_meta: n_merges         = 0
0.00.613.624 I llm_load_print_meta: vocab_only       = 0
0.00.613.624 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.625 I llm_load_print_meta: n_embd           = 2048
0.00.613.625 I llm_load_print_meta: n_layer          = 18
0.00.613.689 I llm_load_print_meta: n_head           = 8
0.00.613.697 I llm_load_print_meta: n_head_kv        = 1
0.00.613.697 I llm_load_print_meta: n_rot            = 256
0.00.613.698 I llm_load_print_meta: n_swa            = 0
0.00.613.699 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.699 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.704 I llm_load_print_meta: n_gqa            = 8
0.00.613.708 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.713 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.714 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.716 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.717 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.718 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.718 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.724 I llm_load_print_meta: n_ff             = 16384
0.00.613.725 I llm_load_print_meta: n_expert         = 0
0.00.613.725 I llm_load_print_meta: n_expert_used    = 0
0.00.613.726 I llm_load_print_meta: causal attn      = 1
0.00.613.726 I llm_load_print_meta: pooling type     = 0
0.00.613.727 I llm_load_print_meta: rope type        = 2
0.00.613.727 I llm_load_print_meta: rope scaling     = linear
0.00.613.729 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.730 I llm_load_print_meta: freq_scale_train = 1
0.00.613.731 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.731 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.731 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.732 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.743 I llm_load_print_meta: model type       = 2B
0.00.613.745 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.746 I llm_load_print_meta: model params     = 2.51 B
0.00.613.755 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.756 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.768 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.772 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.772 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.774 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.793 I llm_load_print_meta: max token length = 93
0.00.678.228 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.678.235 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.678.236 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.678.236 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.678.237 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.678.237 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.684.080 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.088 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.088 I llama_new_context_with_model: n_batch       = 2048
0.00.684.089 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.089 I llama_new_context_with_model: flash_attn    = 0
0.00.684.091 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.092 I llama_new_context_with_model: freq_scale    = 1
0.00.684.092 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.700.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.700.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.700.878 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.409 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.703.413 I llama_new_context_with_model: graph nodes  = 601
0.00.703.413 I llama_new_context_with_model: graph splits = 1
0.00.703.438 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.901 I main: llama threadpool init, n_threads = 4
0.01.273.914 I 
0.01.274.019 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.024 I 
0.01.274.253 I sampler seed: 4099697398
0.01.274.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.274 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.277 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.278 I 
 fufilling, 
(a) What is the meaning of the idiom?
(b) What are the possible interpretations of the idiom?
(c

0.12.149.106 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.96 tokens per second)
0.12.149.111 I llama_perf_context_print:        load time =    1272.66 ms
0.12.149.112 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.149.114 I llama_perf_context_print:        eval time =   10784.99 ms /    32 runs   (  337.03 ms per token,     2.97 tokens per second)
0.12.149.115 I llama_perf_context_print:       total time =   10875.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4041 (2319126a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199283.21 ms
main:    total time = 199283.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4041 (2319126a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.159 I main: load the model and apply lora adapter, if any
0.00.023.632 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.731 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.752 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.753 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.754 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.756 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.757 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.765 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.766 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.767 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.086 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.765 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.767 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.768 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.771 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.775 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.783 I llama_model_loader: - type  f32:   37 tensors
0.00.267.785 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.786 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.861 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.251 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.158 I llm_load_vocab: special tokens cache size = 5
0.00.604.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.277 I llm_load_print_meta: arch             = gemma
0.00.604.278 I llm_load_print_meta: vocab type       = SPM
0.00.604.278 I llm_load_print_meta: n_vocab          = 256000
0.00.604.281 I llm_load_print_meta: n_merges         = 0
0.00.604.281 I llm_load_print_meta: vocab_only       = 0
0.00.604.282 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.282 I llm_load_print_meta: n_embd           = 2048
0.00.604.282 I llm_load_print_meta: n_layer          = 18
0.00.604.346 I llm_load_print_meta: n_head           = 8
0.00.604.355 I llm_load_print_meta: n_head_kv        = 1
0.00.604.356 I llm_load_print_meta: n_rot            = 256
0.00.604.356 I llm_load_print_meta: n_swa            = 0
0.00.604.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.359 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.363 I llm_load_print_meta: n_gqa            = 8
0.00.604.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.373 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.374 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.376 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.383 I llm_load_print_meta: n_ff             = 16384
0.00.604.384 I llm_load_print_meta: n_expert         = 0
0.00.604.384 I llm_load_print_meta: n_expert_used    = 0
0.00.604.384 I llm_load_print_meta: causal attn      = 1
0.00.604.385 I llm_load_print_meta: pooling type     = 0
0.00.604.385 I llm_load_print_meta: rope type        = 2
0.00.604.386 I llm_load_print_meta: rope scaling     = linear
0.00.604.388 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.388 I llm_load_print_meta: freq_scale_train = 1
0.00.604.403 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.404 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.405 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.406 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.407 I llm_load_print_meta: model type       = 2B
0.00.604.408 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.409 I llm_load_print_meta: model params     = 2.51 B
0.00.604.429 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.429 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.430 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.432 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.432 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.432 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.433 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.438 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.439 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.439 I llm_load_print_meta: max token length = 93
0.00.664.588 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.670.327 I llama_new_context_with_model: n_seq_max     = 1
0.00.670.334 I llama_new_context_with_model: n_ctx         = 4096
0.00.670.334 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.670.335 I llama_new_context_with_model: n_batch       = 2048
0.00.670.335 I llama_new_context_with_model: n_ubatch      = 512
0.00.670.336 I llama_new_context_with_model: flash_attn    = 0
0.00.670.338 I llama_new_context_with_model: freq_base     = 10000.0
0.00.670.339 I llama_new_context_with_model: freq_scale    = 1
0.00.670.340 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.687.076 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.687.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.872 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.689.876 I llama_new_context_with_model: graph nodes  = 601
0.00.689.877 I llama_new_context_with_model: graph splits = 1
0.00.689.901 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.683 I main: llama threadpool init, n_threads = 4
0.01.262.696 I 
0.01.262.808 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.811 I 
0.01.263.034 I sampler seed: 1424097285
0.01.263.046 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.055 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.263.056 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.057 I 
 encompse all the information related to the question:

**Question:** What are the key challenges and opportunities for businesses in the current market environment?

**Response

0.12.202.421 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.46 tokens per second)
0.12.202.424 I llama_perf_context_print:        load time =    1261.42 ms
0.12.202.425 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.202.427 I llama_perf_context_print:        eval time =   10849.21 ms /    32 runs   (  339.04 ms per token,     2.95 tokens per second)
0.12.202.427 I llama_perf_context_print:       total time =   10939.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.832s
user	50m11.770s
sys	0m6.232s
