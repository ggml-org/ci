+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.348 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.359 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.444 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.461 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.462 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.465 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.469 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.475 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.480 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.482 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.486 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.215 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.606 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.044 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.055 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.057 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.058 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.064 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.065 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.067 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.077 I llama_model_loader: - type  f32:   37 tensors
0.00.275.080 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.676 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.942 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.955 I llm_load_vocab: special tokens cache size = 5
0.00.644.812 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.894 I llm_load_print_meta: arch             = gemma
0.00.644.895 I llm_load_print_meta: vocab type       = SPM
0.00.644.895 I llm_load_print_meta: n_vocab          = 256000
0.00.644.898 I llm_load_print_meta: n_merges         = 0
0.00.644.898 I llm_load_print_meta: vocab_only       = 0
0.00.644.899 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.899 I llm_load_print_meta: n_embd           = 2048
0.00.644.899 I llm_load_print_meta: n_layer          = 18
0.00.644.964 I llm_load_print_meta: n_head           = 8
0.00.644.972 I llm_load_print_meta: n_head_kv        = 1
0.00.644.972 I llm_load_print_meta: n_rot            = 256
0.00.644.973 I llm_load_print_meta: n_swa            = 0
0.00.644.973 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.973 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.978 I llm_load_print_meta: n_gqa            = 8
0.00.644.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.987 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.645.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.645.004 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.645.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.645.010 I llm_load_print_meta: n_ff             = 16384
0.00.645.010 I llm_load_print_meta: n_expert         = 0
0.00.645.011 I llm_load_print_meta: n_expert_used    = 0
0.00.645.011 I llm_load_print_meta: causal attn      = 1
0.00.645.012 I llm_load_print_meta: pooling type     = 0
0.00.645.012 I llm_load_print_meta: rope type        = 2
0.00.645.012 I llm_load_print_meta: rope scaling     = linear
0.00.645.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.645.015 I llm_load_print_meta: freq_scale_train = 1
0.00.645.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.645.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.645.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.645.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.645.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.645.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.645.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.645.018 I llm_load_print_meta: model type       = 2B
0.00.645.019 I llm_load_print_meta: model ftype      = Q8_0
0.00.645.021 I llm_load_print_meta: model params     = 2.51 B
0.00.645.022 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.645.022 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.645.024 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.645.024 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.645.024 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.645.025 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.645.026 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.645.026 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.645.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.645.034 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.645.034 I llm_load_print_meta: max token length = 93
0.00.746.921 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.746.930 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.746.931 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.746.932 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.746.932 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.746.933 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.753.003 I llama_new_context_with_model: n_seq_max     = 1
0.00.753.010 I llama_new_context_with_model: n_ctx         = 4096
0.00.753.011 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.753.011 I llama_new_context_with_model: n_batch       = 2048
0.00.753.011 I llama_new_context_with_model: n_ubatch      = 512
0.00.753.012 I llama_new_context_with_model: flash_attn    = 0
0.00.753.014 I llama_new_context_with_model: freq_base     = 10000.0
0.00.753.015 I llama_new_context_with_model: freq_scale    = 1
0.00.753.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.767.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.767.728 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.767.841 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.770.529 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.770.533 I llama_new_context_with_model: graph nodes  = 601
0.00.770.533 I llama_new_context_with_model: graph splits = 1
0.00.770.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.594 I main: llama threadpool init, n_threads = 4
0.01.377.610 I 
0.01.377.714 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.717 I 
0.01.377.944 I sampler seed: 4274357273
0.01.377.957 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.963 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.966 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.967 I 
 increably.

I am unable to answer this question as it contains offensive and inappropriate language. [end of text]


0.09.810.976 I llama_perf_sampler_print:    sampling time =      30.83 ms /    21 runs   (    1.47 ms per token,   681.07 tokens per second)
0.09.810.991 I llama_perf_context_print:        load time =    1376.64 ms
0.09.810.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.810.995 I llama_perf_context_print:        eval time =    8376.25 ms /    20 runs   (  418.81 ms per token,     2.39 tokens per second)
0.09.810.996 I llama_perf_context_print:       total time =    8433.39 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.280 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.284 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.288 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.290 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.291 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.300 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.301 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.302 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.304 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.306 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.811 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.821 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.824 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.826 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.827 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.832 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.833 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.834 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.843 I llama_model_loader: - type  f32:   37 tensors
0.00.271.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.671 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.984 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.954 I llm_load_vocab: special tokens cache size = 5
0.00.617.911 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.000 I llm_load_print_meta: arch             = gemma
0.00.618.001 I llm_load_print_meta: vocab type       = SPM
0.00.618.002 I llm_load_print_meta: n_vocab          = 256000
0.00.618.004 I llm_load_print_meta: n_merges         = 0
0.00.618.005 I llm_load_print_meta: vocab_only       = 0
0.00.618.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.006 I llm_load_print_meta: n_embd           = 2048
0.00.618.006 I llm_load_print_meta: n_layer          = 18
0.00.618.070 I llm_load_print_meta: n_head           = 8
0.00.618.080 I llm_load_print_meta: n_head_kv        = 1
0.00.618.082 I llm_load_print_meta: n_rot            = 256
0.00.618.082 I llm_load_print_meta: n_swa            = 0
0.00.618.083 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.083 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.088 I llm_load_print_meta: n_gqa            = 8
0.00.618.092 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.097 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.099 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.101 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.102 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.108 I llm_load_print_meta: n_ff             = 16384
0.00.618.108 I llm_load_print_meta: n_expert         = 0
0.00.618.109 I llm_load_print_meta: n_expert_used    = 0
0.00.618.109 I llm_load_print_meta: causal attn      = 1
0.00.618.112 I llm_load_print_meta: pooling type     = 0
0.00.618.113 I llm_load_print_meta: rope type        = 2
0.00.618.113 I llm_load_print_meta: rope scaling     = linear
0.00.618.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.115 I llm_load_print_meta: freq_scale_train = 1
0.00.618.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.117 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.118 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.118 I llm_load_print_meta: model type       = 2B
0.00.618.119 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.120 I llm_load_print_meta: model params     = 2.51 B
0.00.618.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.122 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.122 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.123 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.134 I llm_load_print_meta: max token length = 93
0.00.714.625 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.720.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.481 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.481 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.481 I llama_new_context_with_model: n_batch       = 2048
0.00.720.482 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.482 I llama_new_context_with_model: flash_attn    = 0
0.00.720.485 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.486 I llama_new_context_with_model: freq_scale    = 1
0.00.720.486 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.603 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.722 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.373 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.377 I llama_new_context_with_model: graph nodes  = 601
0.00.738.377 I llama_new_context_with_model: graph splits = 1
0.00.738.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.818 I main: llama threadpool init, n_threads = 4
0.01.345.834 I 
0.01.345.954 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.959 I 
0.01.346.223 I sampler seed: 565337004
0.01.346.235 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.242 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.346.243 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.243 I 
 increasities in the first letter of words with a consonant sound.

**Answer:**

- Able
- Brave
- Close
- Dive
- Fine

0.15.018.355 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.51 tokens per second)
0.15.018.367 I llama_perf_context_print:        load time =    1344.87 ms
0.15.018.370 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.018.372 I llama_perf_context_print:        eval time =   13582.81 ms /    32 runs   (  424.46 ms per token,     2.36 tokens per second)
0.15.018.373 I llama_perf_context_print:       total time =   13672.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.394 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.505 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.507 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.512 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.516 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.517 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.519 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.520 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.529 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.530 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.080 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.436 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.437 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.442 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.448 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.449 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.458 I llama_model_loader: - type  f32:   37 tensors
0.00.271.460 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.539 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.626 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.649 I llm_load_vocab: special tokens cache size = 5
0.00.616.334 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.409 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.410 I llm_load_print_meta: arch             = gemma
0.00.616.411 I llm_load_print_meta: vocab type       = SPM
0.00.616.412 I llm_load_print_meta: n_vocab          = 256000
0.00.616.414 I llm_load_print_meta: n_merges         = 0
0.00.616.415 I llm_load_print_meta: vocab_only       = 0
0.00.616.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.415 I llm_load_print_meta: n_embd           = 2048
0.00.616.416 I llm_load_print_meta: n_layer          = 18
0.00.616.480 I llm_load_print_meta: n_head           = 8
0.00.616.487 I llm_load_print_meta: n_head_kv        = 1
0.00.616.488 I llm_load_print_meta: n_rot            = 256
0.00.616.488 I llm_load_print_meta: n_swa            = 0
0.00.616.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.491 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.496 I llm_load_print_meta: n_gqa            = 8
0.00.616.501 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.517 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.530 I llm_load_print_meta: n_ff             = 16384
0.00.616.531 I llm_load_print_meta: n_expert         = 0
0.00.616.531 I llm_load_print_meta: n_expert_used    = 0
0.00.616.532 I llm_load_print_meta: causal attn      = 1
0.00.616.532 I llm_load_print_meta: pooling type     = 0
0.00.616.545 I llm_load_print_meta: rope type        = 2
0.00.616.548 I llm_load_print_meta: rope scaling     = linear
0.00.616.550 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.550 I llm_load_print_meta: freq_scale_train = 1
0.00.616.551 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.551 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.551 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.560 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.565 I llm_load_print_meta: model type       = 2B
0.00.616.566 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.567 I llm_load_print_meta: model params     = 2.51 B
0.00.616.568 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.570 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.571 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.571 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.585 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.587 I llm_load_print_meta: max token length = 93
0.00.697.828 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.697.837 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.697.838 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.697.838 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.697.839 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.697.840 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.703.717 I llama_new_context_with_model: n_seq_max     = 1
0.00.703.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.703.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.703.725 I llama_new_context_with_model: n_batch       = 2048
0.00.703.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.703.726 I llama_new_context_with_model: flash_attn    = 0
0.00.703.728 I llama_new_context_with_model: freq_base     = 10000.0
0.00.703.729 I llama_new_context_with_model: freq_scale    = 1
0.00.703.730 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.718.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.718.441 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.718.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.142 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.146 I llama_new_context_with_model: graph nodes  = 601
0.00.721.146 I llama_new_context_with_model: graph splits = 1
0.00.721.168 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.465 I main: llama threadpool init, n_threads = 4
0.01.327.480 I 
0.01.327.588 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.592 I 
0.01.327.820 I sampler seed: 1240611465
0.01.327.832 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.843 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.843 I 
 increasities, a young woman named Anya, who has always been fascinated by magic, discovers a hidden portal in her grandmother's attic.

Driven by an

0.14.896.644 I llama_perf_sampler_print:    sampling time =      48.87 ms /    33 runs   (    1.48 ms per token,   675.25 tokens per second)
0.14.896.649 I llama_perf_context_print:        load time =    1326.49 ms
0.14.896.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.896.652 I llama_perf_context_print:        eval time =   13479.49 ms /    32 runs   (  421.23 ms per token,     2.37 tokens per second)
0.14.896.653 I llama_perf_context_print:       total time =   13569.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.197 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.208 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.291 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.301 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.303 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.307 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.309 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.310 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.311 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.313 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.496 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.732 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.181 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.182 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.183 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.184 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.185 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.187 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.190 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.192 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.193 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.202 I llama_model_loader: - type  f32:   37 tensors
0.00.271.204 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.549 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.956 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.916 I llm_load_vocab: special tokens cache size = 5
0.00.611.131 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.207 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.209 I llm_load_print_meta: arch             = gemma
0.00.611.210 I llm_load_print_meta: vocab type       = SPM
0.00.611.211 I llm_load_print_meta: n_vocab          = 256000
0.00.611.213 I llm_load_print_meta: n_merges         = 0
0.00.611.213 I llm_load_print_meta: vocab_only       = 0
0.00.611.214 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.214 I llm_load_print_meta: n_embd           = 2048
0.00.611.214 I llm_load_print_meta: n_layer          = 18
0.00.611.278 I llm_load_print_meta: n_head           = 8
0.00.611.285 I llm_load_print_meta: n_head_kv        = 1
0.00.611.286 I llm_load_print_meta: n_rot            = 256
0.00.611.286 I llm_load_print_meta: n_swa            = 0
0.00.611.288 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.288 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.293 I llm_load_print_meta: n_gqa            = 8
0.00.611.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.329 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.330 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.332 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.332 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.346 I llm_load_print_meta: n_ff             = 16384
0.00.611.347 I llm_load_print_meta: n_expert         = 0
0.00.611.348 I llm_load_print_meta: n_expert_used    = 0
0.00.611.349 I llm_load_print_meta: causal attn      = 1
0.00.611.349 I llm_load_print_meta: pooling type     = 0
0.00.611.349 I llm_load_print_meta: rope type        = 2
0.00.611.350 I llm_load_print_meta: rope scaling     = linear
0.00.611.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.359 I llm_load_print_meta: freq_scale_train = 1
0.00.611.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.360 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.361 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.363 I llm_load_print_meta: model type       = 2B
0.00.611.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.365 I llm_load_print_meta: model params     = 2.51 B
0.00.611.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.369 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.370 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.376 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.377 I llm_load_print_meta: max token length = 93
0.00.684.486 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.684.496 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.690.350 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.357 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.358 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.358 I llama_new_context_with_model: n_batch       = 2048
0.00.690.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.359 I llama_new_context_with_model: flash_attn    = 0
0.00.690.362 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.363 I llama_new_context_with_model: freq_scale    = 1
0.00.690.363 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.193 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.233 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.352 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.931 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.935 I llama_new_context_with_model: graph nodes  = 601
0.00.707.935 I llama_new_context_with_model: graph splits = 1
0.00.707.958 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.670 I main: llama threadpool init, n_threads = 4
0.01.319.685 I 
0.01.319.793 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.796 I 
0.01.320.027 I sampler seed: 418395796
0.01.320.041 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.048 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.049 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.050 I 
 increasively with each iteration of the loop.

```python
for i in range(5):
    for j in range(i+1):


0.14.897.456 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.48 tokens per second)
0.14.897.469 I llama_perf_context_print:        load time =    1318.74 ms
0.14.897.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.897.473 I llama_perf_context_print:        eval time =   13488.64 ms /    32 runs   (  421.52 ms per token,     2.37 tokens per second)
0.14.897.474 I llama_perf_context_print:       total time =   13577.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.183s
user	3m29.820s
sys	0m9.216s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4084 (231f9360)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186261.26 ms
main:    total time = 186261.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.370 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.482 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.483 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.488 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.700 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.428 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.429 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.430 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.433 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.440 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.441 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.442 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.448 I llama_model_loader: - type  f32:   37 tensors
0.00.270.451 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.451 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.345 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.303 I llm_load_vocab: special tokens cache size = 5
0.00.590.208 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.283 I llm_load_print_meta: arch             = gemma
0.00.590.283 I llm_load_print_meta: vocab type       = SPM
0.00.590.284 I llm_load_print_meta: n_vocab          = 256000
0.00.590.286 I llm_load_print_meta: n_merges         = 0
0.00.590.287 I llm_load_print_meta: vocab_only       = 0
0.00.590.287 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.288 I llm_load_print_meta: n_embd           = 2048
0.00.590.288 I llm_load_print_meta: n_layer          = 18
0.00.590.355 I llm_load_print_meta: n_head           = 8
0.00.590.363 I llm_load_print_meta: n_head_kv        = 1
0.00.590.365 I llm_load_print_meta: n_rot            = 256
0.00.590.366 I llm_load_print_meta: n_swa            = 0
0.00.590.367 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.368 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.372 I llm_load_print_meta: n_gqa            = 8
0.00.590.382 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.389 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.390 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.391 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.391 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.392 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.397 I llm_load_print_meta: n_ff             = 16384
0.00.590.397 I llm_load_print_meta: n_expert         = 0
0.00.590.398 I llm_load_print_meta: n_expert_used    = 0
0.00.590.399 I llm_load_print_meta: causal attn      = 1
0.00.590.399 I llm_load_print_meta: pooling type     = 0
0.00.590.400 I llm_load_print_meta: rope type        = 2
0.00.590.401 I llm_load_print_meta: rope scaling     = linear
0.00.590.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.403 I llm_load_print_meta: freq_scale_train = 1
0.00.590.404 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.405 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.406 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.410 I llm_load_print_meta: model type       = 2B
0.00.590.410 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.590.411 I llm_load_print_meta: model params     = 2.51 B
0.00.590.412 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.590.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.413 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.413 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.414 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.415 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.415 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.421 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.422 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.423 I llm_load_print_meta: max token length = 93
0.00.652.928 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.652.937 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.652.937 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.652.938 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.652.939 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.652.939 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.658.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.658.735 I llama_new_context_with_model: n_ctx         = 4096
0.00.658.736 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.658.736 I llama_new_context_with_model: n_batch       = 2048
0.00.658.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.658.737 I llama_new_context_with_model: flash_attn    = 0
0.00.658.739 I llama_new_context_with_model: freq_base     = 10000.0
0.00.658.740 I llama_new_context_with_model: freq_scale    = 1
0.00.658.740 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.673.401 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.673.439 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.673.555 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.676.191 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.676.195 I llama_new_context_with_model: graph nodes  = 601
0.00.676.195 I llama_new_context_with_model: graph splits = 1
0.00.676.217 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.263.296 I main: llama threadpool init, n_threads = 4
0.01.263.311 I 
0.01.263.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.427 I 
0.01.263.659 I sampler seed: 53412288
0.01.263.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.263.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.683 I 
 fufilling of the air. [end of text]


0.03.704.657 I llama_perf_sampler_print:    sampling time =      10.85 ms /     8 runs   (    1.36 ms per token,   737.67 tokens per second)
0.03.704.661 I llama_perf_context_print:        load time =    1262.35 ms
0.03.704.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.704.663 I llama_perf_context_print:        eval time =    2420.24 ms /     7 runs   (  345.75 ms per token,     2.89 tokens per second)
0.03.704.665 I llama_perf_context_print:       total time =    2441.37 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4084 (231f9360)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186125.59 ms
main:    total time = 186125.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4084 (231f9360) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.218 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.328 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.343 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.347 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.354 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.361 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.363 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.379 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.382 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.929 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.586 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.983 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.997 I llama_model_loader: - type  f32:   37 tensors
0.00.270.999 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.000 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.116 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.765 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.713 I llm_load_vocab: special tokens cache size = 5
0.00.617.021 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.099 I llm_load_print_meta: arch             = gemma
0.00.617.100 I llm_load_print_meta: vocab type       = SPM
0.00.617.101 I llm_load_print_meta: n_vocab          = 256000
0.00.617.103 I llm_load_print_meta: n_merges         = 0
0.00.617.104 I llm_load_print_meta: vocab_only       = 0
0.00.617.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.104 I llm_load_print_meta: n_embd           = 2048
0.00.617.105 I llm_load_print_meta: n_layer          = 18
0.00.617.167 I llm_load_print_meta: n_head           = 8
0.00.617.175 I llm_load_print_meta: n_head_kv        = 1
0.00.617.176 I llm_load_print_meta: n_rot            = 256
0.00.617.176 I llm_load_print_meta: n_swa            = 0
0.00.617.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.186 I llm_load_print_meta: n_gqa            = 8
0.00.617.190 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.204 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.210 I llm_load_print_meta: n_ff             = 16384
0.00.617.210 I llm_load_print_meta: n_expert         = 0
0.00.617.211 I llm_load_print_meta: n_expert_used    = 0
0.00.617.212 I llm_load_print_meta: causal attn      = 1
0.00.617.212 I llm_load_print_meta: pooling type     = 0
0.00.617.212 I llm_load_print_meta: rope type        = 2
0.00.617.213 I llm_load_print_meta: rope scaling     = linear
0.00.617.214 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.222 I llm_load_print_meta: freq_scale_train = 1
0.00.617.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.225 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.226 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.226 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.229 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.229 I llm_load_print_meta: model type       = 2B
0.00.617.230 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.231 I llm_load_print_meta: model params     = 2.51 B
0.00.617.232 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.233 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.234 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.241 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.242 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.243 I llm_load_print_meta: max token length = 93
0.00.677.154 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.683.050 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.057 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.057 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.058 I llama_new_context_with_model: n_batch       = 2048
0.00.683.058 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.058 I llama_new_context_with_model: flash_attn    = 0
0.00.683.061 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.062 I llama_new_context_with_model: freq_scale    = 1
0.00.683.062 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.697.925 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.697.963 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.594 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.700.598 I llama_new_context_with_model: graph nodes  = 601
0.00.700.599 I llama_new_context_with_model: graph splits = 1
0.00.700.621 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.044 I main: llama threadpool init, n_threads = 4
0.01.288.059 I 
0.01.288.177 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.181 I 
0.01.288.419 I sampler seed: 678648103
0.01.288.433 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.439 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.444 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.444 I 
 increasities, and other forms of sexual harassment can have devastating consequences for individuals, both physically and psychologically.

**What are the most effective strategies for addressing and

0.12.456.820 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.17 tokens per second)
0.12.456.823 I llama_perf_context_print:        load time =    1287.11 ms
0.12.456.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.456.827 I llama_perf_context_print:        eval time =   11079.49 ms /    32 runs   (  346.23 ms per token,     2.89 tokens per second)
0.12.456.827 I llama_perf_context_print:       total time =   11168.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.436s
user	46m8.535s
sys	0m6.245s
