+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.605 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.803 I main: llama backend init
0.00.001.898 I main: load the model and apply lora adapter, if any
0.00.022.281 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.347 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.351 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.352 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.356 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.361 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.362 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.362 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.363 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.721 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.741 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.744 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.752 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.753 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.758 I llama_model_loader: - type  f32:   37 tensors
0.00.132.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.090 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.211.878 I llm_load_vocab: special tokens cache size = 5
0.00.230.551 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.230.563 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.230.564 I llm_load_print_meta: arch             = gemma
0.00.230.565 I llm_load_print_meta: vocab type       = SPM
0.00.230.566 I llm_load_print_meta: n_vocab          = 256000
0.00.230.566 I llm_load_print_meta: n_merges         = 0
0.00.230.566 I llm_load_print_meta: vocab_only       = 0
0.00.230.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.230.567 I llm_load_print_meta: n_embd           = 2048
0.00.230.567 I llm_load_print_meta: n_layer          = 18
0.00.230.579 I llm_load_print_meta: n_head           = 8
0.00.230.580 I llm_load_print_meta: n_head_kv        = 1
0.00.230.580 I llm_load_print_meta: n_rot            = 256
0.00.230.581 I llm_load_print_meta: n_swa            = 0
0.00.230.581 I llm_load_print_meta: n_embd_head_k    = 256
0.00.230.582 I llm_load_print_meta: n_embd_head_v    = 256
0.00.230.582 I llm_load_print_meta: n_gqa            = 8
0.00.230.583 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.230.584 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.230.585 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.230.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.230.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.230.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.230.587 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.230.588 I llm_load_print_meta: n_ff             = 16384
0.00.230.589 I llm_load_print_meta: n_expert         = 0
0.00.230.589 I llm_load_print_meta: n_expert_used    = 0
0.00.230.589 I llm_load_print_meta: causal attn      = 1
0.00.230.589 I llm_load_print_meta: pooling type     = 0
0.00.230.589 I llm_load_print_meta: rope type        = 2
0.00.230.590 I llm_load_print_meta: rope scaling     = linear
0.00.230.591 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.230.592 I llm_load_print_meta: freq_scale_train = 1
0.00.230.592 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.230.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.230.593 I llm_load_print_meta: ssm_d_conv       = 0
0.00.230.593 I llm_load_print_meta: ssm_d_inner      = 0
0.00.230.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.230.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.230.594 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.230.595 I llm_load_print_meta: model type       = 2B
0.00.230.595 I llm_load_print_meta: model ftype      = Q8_0
0.00.230.596 I llm_load_print_meta: model params     = 2.51 B
0.00.230.597 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.230.598 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.230.598 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.230.598 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.230.599 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.230.599 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.230.600 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.230.600 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.230.600 I llm_load_print_meta: max token length = 93
0.00.230.618 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.294 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.327.304 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.327.305 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.327.305 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.327.306 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.327.306 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.332.686 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.695 I llama_new_context_with_model: n_batch    = 2048
0.00.332.695 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.696 I llama_new_context_with_model: flash_attn = 0
0.00.332.699 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.700 I llama_new_context_with_model: freq_scale = 1
0.00.362.763 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.777 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.798 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.807 I llama_new_context_with_model: graph nodes  = 601
0.00.363.807 I llama_new_context_with_model: graph splits = 1
0.00.363.810 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.114 I main: llama threadpool init, n_threads = 4
0.00.456.126 I 
0.00.456.199 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.203 I 
0.00.456.245 I sampler seed: 2847116601
0.00.456.254 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.258 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.456.259 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically and then answer the question.

Explain the relationship between the hypothalamus and the pituitary gland.

The hypothalamus is a small, almond-shaped structure located

0.02.749.027 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7092.20 tokens per second)
0.02.749.031 I llama_perf_context_print:        load time =     454.20 ms
0.02.749.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.749.035 I llama_perf_context_print:        eval time =    2274.90 ms /    32 runs   (   71.09 ms per token,    14.07 tokens per second)
0.02.749.036 I llama_perf_context_print:       total time =    2292.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.001.840 I main: load the model and apply lora adapter, if any
0.00.022.140 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.152 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.161 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.168 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.169 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.169 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.170 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.174 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.175 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.176 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.176 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.177 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.933 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.936 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.940 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.941 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.941 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.942 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.945 I llama_model_loader: - type  f32:   37 tensors
0.00.133.947 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.825 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.208.670 I llm_load_vocab: special tokens cache size = 5
0.00.227.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.227.472 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.227.473 I llm_load_print_meta: arch             = gemma
0.00.227.473 I llm_load_print_meta: vocab type       = SPM
0.00.227.474 I llm_load_print_meta: n_vocab          = 256000
0.00.227.474 I llm_load_print_meta: n_merges         = 0
0.00.227.475 I llm_load_print_meta: vocab_only       = 0
0.00.227.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.227.475 I llm_load_print_meta: n_embd           = 2048
0.00.227.476 I llm_load_print_meta: n_layer          = 18
0.00.227.491 I llm_load_print_meta: n_head           = 8
0.00.227.491 I llm_load_print_meta: n_head_kv        = 1
0.00.227.492 I llm_load_print_meta: n_rot            = 256
0.00.227.492 I llm_load_print_meta: n_swa            = 0
0.00.227.492 I llm_load_print_meta: n_embd_head_k    = 256
0.00.227.493 I llm_load_print_meta: n_embd_head_v    = 256
0.00.227.493 I llm_load_print_meta: n_gqa            = 8
0.00.227.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.227.495 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.227.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.227.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.227.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.227.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.227.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.227.499 I llm_load_print_meta: n_ff             = 16384
0.00.227.499 I llm_load_print_meta: n_expert         = 0
0.00.227.500 I llm_load_print_meta: n_expert_used    = 0
0.00.227.500 I llm_load_print_meta: causal attn      = 1
0.00.227.500 I llm_load_print_meta: pooling type     = 0
0.00.227.500 I llm_load_print_meta: rope type        = 2
0.00.227.501 I llm_load_print_meta: rope scaling     = linear
0.00.227.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.227.503 I llm_load_print_meta: freq_scale_train = 1
0.00.227.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.227.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.227.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.227.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.227.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.227.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.227.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.227.506 I llm_load_print_meta: model type       = 2B
0.00.227.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.227.507 I llm_load_print_meta: model params     = 2.51 B
0.00.227.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.227.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.227.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.227.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.227.509 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.227.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.227.510 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.227.511 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.227.511 I llm_load_print_meta: max token length = 93
0.00.227.544 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.309 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.325.458 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.465 I llama_new_context_with_model: n_batch    = 2048
0.00.325.465 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.465 I llama_new_context_with_model: flash_attn = 0
0.00.325.469 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.470 I llama_new_context_with_model: freq_scale = 1
0.00.357.012 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.024 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.123 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.000 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.009 I llama_new_context_with_model: graph nodes  = 601
0.00.358.009 I llama_new_context_with_model: graph splits = 1
0.00.358.011 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.621 I main: llama threadpool init, n_threads = 4
0.00.447.634 I 
0.00.447.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.715 I 
0.00.447.743 I sampler seed: 1827421732
0.00.447.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.754 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.755 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels and the city of Rome.

The city of Rome, a marvel of ancient architecture, stands as a testament to the power and ingenuity of the Roman

0.02.690.730 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6752.61 tokens per second)
0.02.690.733 I llama_perf_context_print:        load time =     445.76 ms
0.02.690.734 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.690.736 I llama_perf_context_print:        eval time =    2224.74 ms /    32 runs   (   69.52 ms per token,    14.38 tokens per second)
0.02.690.737 I llama_perf_context_print:       total time =    2243.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.603 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.001.885 I main: load the model and apply lora adapter, if any
0.00.022.223 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.274 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.297 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.297 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.299 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.299 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.300 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.306 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.307 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.308 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.480 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.481 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.487 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.488 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.491 I llama_model_loader: - type  f32:   37 tensors
0.00.133.495 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.324 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.213.186 I llm_load_vocab: special tokens cache size = 5
0.00.232.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.232.144 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.232.144 I llm_load_print_meta: arch             = gemma
0.00.232.145 I llm_load_print_meta: vocab type       = SPM
0.00.232.145 I llm_load_print_meta: n_vocab          = 256000
0.00.232.146 I llm_load_print_meta: n_merges         = 0
0.00.232.146 I llm_load_print_meta: vocab_only       = 0
0.00.232.146 I llm_load_print_meta: n_ctx_train      = 8192
0.00.232.147 I llm_load_print_meta: n_embd           = 2048
0.00.232.147 I llm_load_print_meta: n_layer          = 18
0.00.232.160 I llm_load_print_meta: n_head           = 8
0.00.232.161 I llm_load_print_meta: n_head_kv        = 1
0.00.232.161 I llm_load_print_meta: n_rot            = 256
0.00.232.161 I llm_load_print_meta: n_swa            = 0
0.00.232.162 I llm_load_print_meta: n_embd_head_k    = 256
0.00.232.162 I llm_load_print_meta: n_embd_head_v    = 256
0.00.232.163 I llm_load_print_meta: n_gqa            = 8
0.00.232.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.232.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.232.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.232.167 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.232.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.232.168 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.232.168 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.232.169 I llm_load_print_meta: n_ff             = 16384
0.00.232.169 I llm_load_print_meta: n_expert         = 0
0.00.232.169 I llm_load_print_meta: n_expert_used    = 0
0.00.232.170 I llm_load_print_meta: causal attn      = 1
0.00.232.170 I llm_load_print_meta: pooling type     = 0
0.00.232.170 I llm_load_print_meta: rope type        = 2
0.00.232.171 I llm_load_print_meta: rope scaling     = linear
0.00.232.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.232.172 I llm_load_print_meta: freq_scale_train = 1
0.00.232.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.232.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.232.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.232.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.232.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.232.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.232.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.232.175 I llm_load_print_meta: model type       = 2B
0.00.232.176 I llm_load_print_meta: model ftype      = Q8_0
0.00.232.177 I llm_load_print_meta: model params     = 2.51 B
0.00.232.178 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.232.178 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.232.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.232.179 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.232.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.232.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.232.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.232.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.232.181 I llm_load_print_meta: max token length = 93
0.00.232.200 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.306.263 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.306.269 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.306.270 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.306.270 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.306.271 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.306.272 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.311.337 I llama_new_context_with_model: n_ctx      = 8192
0.00.311.344 I llama_new_context_with_model: n_batch    = 2048
0.00.311.344 I llama_new_context_with_model: n_ubatch   = 512
0.00.311.345 I llama_new_context_with_model: flash_attn = 0
0.00.311.348 I llama_new_context_with_model: freq_base  = 10000.0
0.00.311.349 I llama_new_context_with_model: freq_scale = 1
0.00.342.105 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.342.119 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.342.212 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.110 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.343.116 I llama_new_context_with_model: graph nodes  = 601
0.00.343.117 I llama_new_context_with_model: graph splits = 1
0.00.343.119 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.252 I main: llama threadpool init, n_threads = 4
0.00.447.265 I 
0.00.447.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.350 I 
0.00.447.389 I sampler seed: 60276276
0.00.447.398 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.401 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.402 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities on the internet and in social media.

**Discussion Points:**

* The nature of online shaming and its impact
* The role of social media

0.02.808.967 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6515.30 tokens per second)
0.02.808.970 I llama_perf_context_print:        load time =     445.35 ms
0.02.808.971 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.808.973 I llama_perf_context_print:        eval time =    2342.70 ms /    32 runs   (   73.21 ms per token,    13.66 tokens per second)
0.02.808.973 I llama_perf_context_print:       total time =    2361.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.548 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.890 I main: load the model and apply lora adapter, if any
0.00.022.348 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.396 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.404 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.410 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.411 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.415 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.416 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.424 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.571 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.501 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.508 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.509 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.510 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.510 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.512 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.516 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.516 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.517 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.518 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.520 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.524 I llama_model_loader: - type  f32:   37 tensors
0.00.133.527 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.353 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.218.138 I llm_load_vocab: special tokens cache size = 5
0.00.236.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.236.896 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.236.896 I llm_load_print_meta: arch             = gemma
0.00.236.897 I llm_load_print_meta: vocab type       = SPM
0.00.236.897 I llm_load_print_meta: n_vocab          = 256000
0.00.236.898 I llm_load_print_meta: n_merges         = 0
0.00.236.898 I llm_load_print_meta: vocab_only       = 0
0.00.236.899 I llm_load_print_meta: n_ctx_train      = 8192
0.00.236.899 I llm_load_print_meta: n_embd           = 2048
0.00.236.899 I llm_load_print_meta: n_layer          = 18
0.00.236.914 I llm_load_print_meta: n_head           = 8
0.00.236.915 I llm_load_print_meta: n_head_kv        = 1
0.00.236.916 I llm_load_print_meta: n_rot            = 256
0.00.236.916 I llm_load_print_meta: n_swa            = 0
0.00.236.916 I llm_load_print_meta: n_embd_head_k    = 256
0.00.236.917 I llm_load_print_meta: n_embd_head_v    = 256
0.00.236.918 I llm_load_print_meta: n_gqa            = 8
0.00.236.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.236.920 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.236.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.236.922 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.236.922 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.236.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.236.923 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.236.924 I llm_load_print_meta: n_ff             = 16384
0.00.236.934 I llm_load_print_meta: n_expert         = 0
0.00.236.935 I llm_load_print_meta: n_expert_used    = 0
0.00.236.935 I llm_load_print_meta: causal attn      = 1
0.00.236.936 I llm_load_print_meta: pooling type     = 0
0.00.236.937 I llm_load_print_meta: rope type        = 2
0.00.236.937 I llm_load_print_meta: rope scaling     = linear
0.00.236.939 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.236.939 I llm_load_print_meta: freq_scale_train = 1
0.00.236.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.236.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.236.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.236.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.236.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.236.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.236.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.236.942 I llm_load_print_meta: model type       = 2B
0.00.236.943 I llm_load_print_meta: model ftype      = Q8_0
0.00.236.944 I llm_load_print_meta: model params     = 2.51 B
0.00.236.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.236.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.236.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.236.946 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.236.947 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.236.947 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.236.948 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.236.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.236.948 I llm_load_print_meta: max token length = 93
0.00.236.978 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.307.218 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.307.225 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.312.316 I llama_new_context_with_model: n_ctx      = 8192
0.00.312.323 I llama_new_context_with_model: n_batch    = 2048
0.00.312.324 I llama_new_context_with_model: n_ubatch   = 512
0.00.312.325 I llama_new_context_with_model: flash_attn = 0
0.00.312.328 I llama_new_context_with_model: freq_base  = 10000.0
0.00.312.328 I llama_new_context_with_model: freq_scale = 1
0.00.342.251 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.342.267 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.342.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.258 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.343.267 I llama_new_context_with_model: graph nodes  = 601
0.00.343.267 I llama_new_context_with_model: graph splits = 1
0.00.343.269 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.529 I main: llama threadpool init, n_threads = 4
0.00.440.544 I 
0.00.440.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.619 I 
0.00.440.648 I sampler seed: 2490077663
0.00.440.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.668 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.440.671 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

Answer: I am sorry, I am unable to provide responses that contain inappropriate or offensive language. [end of text]


0.02.317.752 I llama_perf_sampler_print:    sampling time =       4.05 ms /    25 runs   (    0.16 ms per token,  6166.75 tokens per second)
0.02.317.755 I llama_perf_context_print:        load time =     438.62 ms
0.02.317.756 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.317.757 I llama_perf_context_print:        eval time =    1862.04 ms /    24 runs   (   77.58 ms per token,    12.89 tokens per second)
0.02.317.758 I llama_perf_context_print:       total time =    1877.23 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.381s
user	0m37.960s
sys	0m9.639s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3772 (23e0d70b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32270.10 ms
main:    total time = 32270.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.582 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.922 I main: load the model and apply lora adapter, if any
0.00.022.360 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.421 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.428 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.436 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.437 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.438 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.838 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.846 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.847 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.855 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.856 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.862 I llama_model_loader: - type  f32:   37 tensors
0.00.131.864 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.865 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.085 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.211.916 I llm_load_vocab: special tokens cache size = 5
0.00.230.707 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.230.720 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.230.721 I llm_load_print_meta: arch             = gemma
0.00.230.721 I llm_load_print_meta: vocab type       = SPM
0.00.230.722 I llm_load_print_meta: n_vocab          = 256000
0.00.230.722 I llm_load_print_meta: n_merges         = 0
0.00.230.722 I llm_load_print_meta: vocab_only       = 0
0.00.230.723 I llm_load_print_meta: n_ctx_train      = 8192
0.00.230.723 I llm_load_print_meta: n_embd           = 2048
0.00.230.723 I llm_load_print_meta: n_layer          = 18
0.00.230.736 I llm_load_print_meta: n_head           = 8
0.00.230.737 I llm_load_print_meta: n_head_kv        = 1
0.00.230.737 I llm_load_print_meta: n_rot            = 256
0.00.230.737 I llm_load_print_meta: n_swa            = 0
0.00.230.738 I llm_load_print_meta: n_embd_head_k    = 256
0.00.230.738 I llm_load_print_meta: n_embd_head_v    = 256
0.00.230.739 I llm_load_print_meta: n_gqa            = 8
0.00.230.741 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.230.742 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.230.743 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.230.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.230.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.230.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.230.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.230.747 I llm_load_print_meta: n_ff             = 16384
0.00.230.747 I llm_load_print_meta: n_expert         = 0
0.00.230.748 I llm_load_print_meta: n_expert_used    = 0
0.00.230.748 I llm_load_print_meta: causal attn      = 1
0.00.230.749 I llm_load_print_meta: pooling type     = 0
0.00.230.749 I llm_load_print_meta: rope type        = 2
0.00.230.750 I llm_load_print_meta: rope scaling     = linear
0.00.230.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.230.752 I llm_load_print_meta: freq_scale_train = 1
0.00.230.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.230.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.230.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.230.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.230.754 I llm_load_print_meta: ssm_d_state      = 0
0.00.230.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.230.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.230.755 I llm_load_print_meta: model type       = 2B
0.00.230.756 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.230.757 I llm_load_print_meta: model params     = 2.51 B
0.00.230.758 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.230.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.230.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.230.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.230.760 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.230.760 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.230.761 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.230.762 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.230.762 I llm_load_print_meta: max token length = 93
0.00.230.782 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.288.091 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.288.100 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.288.100 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.288.101 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.288.102 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.288.102 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.293.276 I llama_new_context_with_model: n_ctx      = 8192
0.00.293.283 I llama_new_context_with_model: n_batch    = 2048
0.00.293.283 I llama_new_context_with_model: n_ubatch   = 512
0.00.293.284 I llama_new_context_with_model: flash_attn = 0
0.00.293.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.293.288 I llama_new_context_with_model: freq_scale = 1
0.00.322.677 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.322.691 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.322.781 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.323.672 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.323.680 I llama_new_context_with_model: graph nodes  = 601
0.00.323.681 I llama_new_context_with_model: graph splits = 1
0.00.323.683 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.407.645 I main: llama threadpool init, n_threads = 4
0.00.407.659 I 
0.00.407.737 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.407.740 I 
0.00.407.776 I sampler seed: 250159196
0.00.407.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.407.789 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.407.790 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

Answer: I'm sorry, but I cannot generate responses that promote harmful or inappropriate activities. [end of text]


0.01.664.393 I llama_perf_sampler_print:    sampling time =       3.54 ms /    25 runs   (    0.14 ms per token,  7056.17 tokens per second)
0.01.664.397 I llama_perf_context_print:        load time =     405.70 ms
0.01.664.398 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.664.399 I llama_perf_context_print:        eval time =    1242.41 ms /    24 runs   (   51.77 ms per token,    19.32 tokens per second)
0.01.664.400 I llama_perf_context_print:       total time =    1256.76 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3772 (23e0d70b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32095.00 ms
main:    total time = 32095.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.001.880 I main: load the model and apply lora adapter, if any
0.00.022.101 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.114 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.130 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.520 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.782 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.722 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.730 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.734 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.735 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.738 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.739 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.744 I llama_model_loader: - type  f32:   37 tensors
0.00.132.748 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.749 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.502 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.298 I llm_load_vocab: special tokens cache size = 5
0.00.225.985 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.001 I llm_load_print_meta: arch             = gemma
0.00.226.001 I llm_load_print_meta: vocab type       = SPM
0.00.226.002 I llm_load_print_meta: n_vocab          = 256000
0.00.226.002 I llm_load_print_meta: n_merges         = 0
0.00.226.003 I llm_load_print_meta: vocab_only       = 0
0.00.226.003 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.003 I llm_load_print_meta: n_embd           = 2048
0.00.226.004 I llm_load_print_meta: n_layer          = 18
0.00.226.017 I llm_load_print_meta: n_head           = 8
0.00.226.018 I llm_load_print_meta: n_head_kv        = 1
0.00.226.019 I llm_load_print_meta: n_rot            = 256
0.00.226.019 I llm_load_print_meta: n_swa            = 0
0.00.226.019 I llm_load_print_meta: n_embd_head_k    = 256
0.00.226.020 I llm_load_print_meta: n_embd_head_v    = 256
0.00.226.020 I llm_load_print_meta: n_gqa            = 8
0.00.226.021 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.226.022 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.226.023 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.226.024 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.226.025 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.226.025 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.226.026 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.226.027 I llm_load_print_meta: n_ff             = 16384
0.00.226.029 I llm_load_print_meta: n_expert         = 0
0.00.226.029 I llm_load_print_meta: n_expert_used    = 0
0.00.226.029 I llm_load_print_meta: causal attn      = 1
0.00.226.030 I llm_load_print_meta: pooling type     = 0
0.00.226.030 I llm_load_print_meta: rope type        = 2
0.00.226.031 I llm_load_print_meta: rope scaling     = linear
0.00.226.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.226.033 I llm_load_print_meta: freq_scale_train = 1
0.00.226.033 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.226.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.226.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.226.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.226.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.226.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.226.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.226.036 I llm_load_print_meta: model type       = 2B
0.00.226.037 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.226.038 I llm_load_print_meta: model params     = 2.51 B
0.00.226.038 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.226.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.226.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.226.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.226.041 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.226.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.226.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.226.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.226.043 I llm_load_print_meta: max token length = 93
0.00.226.062 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.281.176 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.286.253 I llama_new_context_with_model: n_ctx      = 8192
0.00.286.261 I llama_new_context_with_model: n_batch    = 2048
0.00.286.261 I llama_new_context_with_model: n_ubatch   = 512
0.00.286.262 I llama_new_context_with_model: flash_attn = 0
0.00.286.265 I llama_new_context_with_model: freq_base  = 10000.0
0.00.286.266 I llama_new_context_with_model: freq_scale = 1
0.00.317.957 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.317.973 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.318.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.318.944 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.318.952 I llama_new_context_with_model: graph nodes  = 601
0.00.318.953 I llama_new_context_with_model: graph splits = 1
0.00.318.954 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.402.641 I main: llama threadpool init, n_threads = 4
0.00.402.653 I 
0.00.402.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.402.730 I 
0.00.402.757 I sampler seed: 3130770543
0.00.402.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.402.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.402.769 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally. 

I am unable to find the requested information in the provided context. Please provide additional context or specify the information you are looking for. [end of text]


0.02.082.386 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6892.23 tokens per second)
0.02.082.388 I llama_perf_context_print:        load time =     400.74 ms
0.02.082.389 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.082.391 I llama_perf_context_print:        eval time =    1661.13 ms /    32 runs   (   51.91 ms per token,    19.26 tokens per second)
0.02.082.391 I llama_perf_context_print:       total time =    1679.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.527s
user	8m13.610s
sys	0m7.435s
