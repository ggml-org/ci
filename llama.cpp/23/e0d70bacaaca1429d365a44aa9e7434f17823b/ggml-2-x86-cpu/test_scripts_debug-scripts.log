+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.675 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.876 I main: load the model and apply lora adapter, if any
0.00.024.861 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.157 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.209 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.210 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.217 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.219 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.157 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.158 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.158 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.160 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.160 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.172 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.173 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.175 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.175 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.176 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.185 I llama_model_loader: - type  f32:   37 tensors
0.00.197.190 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.290 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.410 I llm_load_vocab: special tokens cache size = 5
0.00.538.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.712 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.713 I llm_load_print_meta: arch             = gemma
0.00.538.714 I llm_load_print_meta: vocab type       = SPM
0.00.538.715 I llm_load_print_meta: n_vocab          = 256000
0.00.538.717 I llm_load_print_meta: n_merges         = 0
0.00.538.718 I llm_load_print_meta: vocab_only       = 0
0.00.538.718 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.718 I llm_load_print_meta: n_embd           = 2048
0.00.538.719 I llm_load_print_meta: n_layer          = 18
0.00.538.753 I llm_load_print_meta: n_head           = 8
0.00.538.760 I llm_load_print_meta: n_head_kv        = 1
0.00.538.761 I llm_load_print_meta: n_rot            = 256
0.00.538.761 I llm_load_print_meta: n_swa            = 0
0.00.538.761 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.766 I llm_load_print_meta: n_gqa            = 8
0.00.538.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.776 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.777 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.778 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.784 I llm_load_print_meta: n_ff             = 16384
0.00.538.784 I llm_load_print_meta: n_expert         = 0
0.00.538.785 I llm_load_print_meta: n_expert_used    = 0
0.00.538.785 I llm_load_print_meta: causal attn      = 1
0.00.538.786 I llm_load_print_meta: pooling type     = 0
0.00.538.786 I llm_load_print_meta: rope type        = 2
0.00.538.787 I llm_load_print_meta: rope scaling     = linear
0.00.538.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.789 I llm_load_print_meta: freq_scale_train = 1
0.00.538.789 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.790 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.790 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.790 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.791 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.791 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.791 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.792 I llm_load_print_meta: model type       = 2B
0.00.538.793 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.794 I llm_load_print_meta: model params     = 2.51 B
0.00.538.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.796 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.797 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.799 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.799 I llm_load_print_meta: max token length = 93
0.00.538.979 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.364 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.637.376 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.637.377 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.637.378 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.637.379 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.637.379 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.643.079 I llama_new_context_with_model: n_ctx      = 8192
0.00.643.089 I llama_new_context_with_model: n_batch    = 2048
0.00.643.090 I llama_new_context_with_model: n_ubatch   = 512
0.00.643.090 I llama_new_context_with_model: flash_attn = 0
0.00.643.094 I llama_new_context_with_model: freq_base  = 10000.0
0.00.643.094 I llama_new_context_with_model: freq_scale = 1
0.00.672.306 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.349 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.472 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.919 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.925 I llama_new_context_with_model: graph nodes  = 601
0.00.673.926 I llama_new_context_with_model: graph splits = 1
0.00.673.945 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.029 I main: llama threadpool init, n_threads = 4
0.01.286.042 I 
0.01.286.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.140 I 
0.01.286.306 I sampler seed: 2402788171
0.01.286.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.341 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.342 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and explain why they are important for the development of new treatments.

**Explanation of the term "clinical pharmacology":**

Clinical pharmacology is the application

0.14.766.020 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.33 tokens per second)
0.14.766.023 I llama_perf_context_print:        load time =    1283.05 ms
0.14.766.025 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.766.026 I llama_perf_context_print:        eval time =   13398.04 ms /    32 runs   (  418.69 ms per token,     2.39 tokens per second)
0.14.766.027 I llama_perf_context_print:       total time =   13480.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.663 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.025.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.357 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.387 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.391 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.393 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.403 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.407 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.409 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.410 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.411 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.590 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.327 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.514 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.525 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.530 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.536 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.199.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.545 I llama_model_loader: - type  f32:   37 tensors
0.00.199.549 I llama_model_loader: - type q8_0:  127 tensors
0.00.487.519 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.622 I llm_load_vocab: special tokens cache size = 5
0.00.545.736 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.545.799 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.545.800 I llm_load_print_meta: arch             = gemma
0.00.545.801 I llm_load_print_meta: vocab type       = SPM
0.00.545.802 I llm_load_print_meta: n_vocab          = 256000
0.00.545.805 I llm_load_print_meta: n_merges         = 0
0.00.545.805 I llm_load_print_meta: vocab_only       = 0
0.00.545.806 I llm_load_print_meta: n_ctx_train      = 8192
0.00.545.806 I llm_load_print_meta: n_embd           = 2048
0.00.545.807 I llm_load_print_meta: n_layer          = 18
0.00.545.839 I llm_load_print_meta: n_head           = 8
0.00.545.846 I llm_load_print_meta: n_head_kv        = 1
0.00.545.847 I llm_load_print_meta: n_rot            = 256
0.00.545.847 I llm_load_print_meta: n_swa            = 0
0.00.545.847 I llm_load_print_meta: n_embd_head_k    = 256
0.00.545.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.545.852 I llm_load_print_meta: n_gqa            = 8
0.00.545.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.545.861 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.545.862 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.545.863 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.545.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.545.864 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.545.864 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.545.869 I llm_load_print_meta: n_ff             = 16384
0.00.545.869 I llm_load_print_meta: n_expert         = 0
0.00.545.870 I llm_load_print_meta: n_expert_used    = 0
0.00.545.870 I llm_load_print_meta: causal attn      = 1
0.00.545.870 I llm_load_print_meta: pooling type     = 0
0.00.545.871 I llm_load_print_meta: rope type        = 2
0.00.545.887 I llm_load_print_meta: rope scaling     = linear
0.00.545.889 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.545.890 I llm_load_print_meta: freq_scale_train = 1
0.00.545.890 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.545.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.545.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.545.892 I llm_load_print_meta: ssm_d_inner      = 0
0.00.545.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.545.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.545.893 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.545.893 I llm_load_print_meta: model type       = 2B
0.00.545.894 I llm_load_print_meta: model ftype      = Q8_0
0.00.545.895 I llm_load_print_meta: model params     = 2.51 B
0.00.545.896 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.545.896 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.545.897 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.545.897 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.545.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.545.898 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.545.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.545.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.545.899 I llm_load_print_meta: max token length = 93
0.00.546.071 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.739 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.646.593 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.600 I llama_new_context_with_model: n_batch    = 2048
0.00.646.601 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.602 I llama_new_context_with_model: flash_attn = 0
0.00.646.604 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.605 I llama_new_context_with_model: freq_scale = 1
0.00.677.089 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.132 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.641 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.648 I llama_new_context_with_model: graph nodes  = 601
0.00.678.649 I llama_new_context_with_model: graph splits = 1
0.00.678.668 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.419 I main: llama threadpool init, n_threads = 4
0.01.312.433 I 
0.01.312.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.540 I 
0.01.312.712 I sampler seed: 1799656916
0.01.312.724 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.729 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.312.730 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.03.014.751 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   803.21 tokens per second)
0.03.014.770 I llama_perf_context_print:        load time =    1309.48 ms
0.03.014.772 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.014.773 I llama_perf_context_print:        eval time =    1690.40 ms /     4 runs   (  422.60 ms per token,     2.37 tokens per second)
0.03.014.774 I llama_perf_context_print:       total time =    1702.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.662 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.926 I main: llama backend init
0.00.002.911 I main: load the model and apply lora adapter, if any
0.00.025.174 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.391 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.492 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.505 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.506 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.512 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.513 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.514 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.515 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.527 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.983 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.990 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.992 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.993 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.995 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.996 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.006 I llama_model_loader: - type  f32:   37 tensors
0.00.197.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.366 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.440 I llm_load_vocab: special tokens cache size = 5
0.00.538.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.389 I llm_load_print_meta: arch             = gemma
0.00.538.390 I llm_load_print_meta: vocab type       = SPM
0.00.538.390 I llm_load_print_meta: n_vocab          = 256000
0.00.538.393 I llm_load_print_meta: n_merges         = 0
0.00.538.395 I llm_load_print_meta: vocab_only       = 0
0.00.538.396 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.399 I llm_load_print_meta: n_embd           = 2048
0.00.538.400 I llm_load_print_meta: n_layer          = 18
0.00.538.442 I llm_load_print_meta: n_head           = 8
0.00.538.453 I llm_load_print_meta: n_head_kv        = 1
0.00.538.454 I llm_load_print_meta: n_rot            = 256
0.00.538.454 I llm_load_print_meta: n_swa            = 0
0.00.538.455 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.464 I llm_load_print_meta: n_gqa            = 8
0.00.538.471 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.481 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.483 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.484 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.487 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.494 I llm_load_print_meta: n_ff             = 16384
0.00.538.495 I llm_load_print_meta: n_expert         = 0
0.00.538.495 I llm_load_print_meta: n_expert_used    = 0
0.00.538.496 I llm_load_print_meta: causal attn      = 1
0.00.538.496 I llm_load_print_meta: pooling type     = 0
0.00.538.497 I llm_load_print_meta: rope type        = 2
0.00.538.498 I llm_load_print_meta: rope scaling     = linear
0.00.538.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.501 I llm_load_print_meta: freq_scale_train = 1
0.00.538.501 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.510 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.513 I llm_load_print_meta: model type       = 2B
0.00.538.515 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.516 I llm_load_print_meta: model params     = 2.51 B
0.00.538.519 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.522 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.523 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.524 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.529 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.530 I llm_load_print_meta: max token length = 93
0.00.538.714 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.614.483 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.614.493 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.614.495 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.614.496 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.614.497 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.614.498 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.620.509 I llama_new_context_with_model: n_ctx      = 8192
0.00.620.518 I llama_new_context_with_model: n_batch    = 2048
0.00.620.519 I llama_new_context_with_model: n_ubatch   = 512
0.00.620.520 I llama_new_context_with_model: flash_attn = 0
0.00.620.524 I llama_new_context_with_model: freq_base  = 10000.0
0.00.620.525 I llama_new_context_with_model: freq_scale = 1
0.00.653.066 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.119 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.239 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.654.659 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.666 I llama_new_context_with_model: graph nodes  = 601
0.00.654.667 I llama_new_context_with_model: graph splits = 1
0.00.654.693 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.213 I main: llama threadpool init, n_threads = 4
0.01.269.226 I 
0.01.269.333 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.336 I 
0.01.269.502 I sampler seed: 1100354717
0.01.269.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.521 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.522 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with his fellow knights, claiming to be the rightful heir to the throne.

Sir Wilfred, the knight who had stood as a beacon of reason and

0.14.808.709 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.03 tokens per second)
0.14.808.712 I llama_perf_context_print:        load time =    1266.21 ms
0.14.808.713 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.808.715 I llama_perf_context_print:        eval time =   13456.92 ms /    32 runs   (  420.53 ms per token,     2.38 tokens per second)
0.14.808.716 I llama_perf_context_print:       total time =   13539.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.635 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.841 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.150 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.162 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.168 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.171 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.172 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.173 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.175 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.185 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.187 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.190 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.191 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.775 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.838 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.846 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.847 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.848 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.849 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.855 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.857 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.867 I llama_model_loader: - type  f32:   37 tensors
0.00.197.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.812 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.829 I llm_load_vocab: special tokens cache size = 5
0.00.538.647 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.710 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.711 I llm_load_print_meta: arch             = gemma
0.00.538.712 I llm_load_print_meta: vocab type       = SPM
0.00.538.713 I llm_load_print_meta: n_vocab          = 256000
0.00.538.716 I llm_load_print_meta: n_merges         = 0
0.00.538.716 I llm_load_print_meta: vocab_only       = 0
0.00.538.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.717 I llm_load_print_meta: n_embd           = 2048
0.00.538.717 I llm_load_print_meta: n_layer          = 18
0.00.538.750 I llm_load_print_meta: n_head           = 8
0.00.538.756 I llm_load_print_meta: n_head_kv        = 1
0.00.538.757 I llm_load_print_meta: n_rot            = 256
0.00.538.757 I llm_load_print_meta: n_swa            = 0
0.00.538.758 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.763 I llm_load_print_meta: n_gqa            = 8
0.00.538.767 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.772 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.773 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.774 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.775 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.775 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.780 I llm_load_print_meta: n_ff             = 16384
0.00.538.780 I llm_load_print_meta: n_expert         = 0
0.00.538.780 I llm_load_print_meta: n_expert_used    = 0
0.00.538.781 I llm_load_print_meta: causal attn      = 1
0.00.538.781 I llm_load_print_meta: pooling type     = 0
0.00.538.782 I llm_load_print_meta: rope type        = 2
0.00.538.782 I llm_load_print_meta: rope scaling     = linear
0.00.538.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.784 I llm_load_print_meta: freq_scale_train = 1
0.00.538.785 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.785 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.785 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.786 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.786 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.786 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.787 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.787 I llm_load_print_meta: model type       = 2B
0.00.538.788 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.789 I llm_load_print_meta: model params     = 2.51 B
0.00.538.789 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.790 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.791 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.792 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.792 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.793 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.794 I llm_load_print_meta: max token length = 93
0.00.538.972 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.609.741 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.609.753 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.615.495 I llama_new_context_with_model: n_ctx      = 8192
0.00.615.503 I llama_new_context_with_model: n_batch    = 2048
0.00.615.504 I llama_new_context_with_model: n_ubatch   = 512
0.00.615.504 I llama_new_context_with_model: flash_attn = 0
0.00.615.508 I llama_new_context_with_model: freq_base  = 10000.0
0.00.615.508 I llama_new_context_with_model: freq_scale = 1
0.00.645.628 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.645.670 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.645.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.181 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.188 I llama_new_context_with_model: graph nodes  = 601
0.00.647.188 I llama_new_context_with_model: graph splits = 1
0.00.647.206 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.259.372 I main: llama threadpool init, n_threads = 4
0.01.259.383 I 
0.01.259.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.259.484 I 
0.01.259.659 I sampler seed: 890628441
0.01.259.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.259.675 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.259.676 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels, but the hana is not responding.

**Possible causes:**

* The hana is not communicating with the user.
* There is a communication

0.14.796.121 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.63 tokens per second)
0.14.796.124 I llama_perf_context_print:        load time =    1256.46 ms
0.14.796.126 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.796.127 I llama_perf_context_print:        eval time =   13454.30 ms /    32 runs   (  420.45 ms per token,     2.38 tokens per second)
0.14.796.128 I llama_perf_context_print:       total time =   13536.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.520s
user	3m1.484s
sys	0m9.606s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3772 (23e0d70b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199128.23 ms
main:    total time = 199128.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.745 I main: llama backend init
0.00.002.708 I main: load the model and apply lora adapter, if any
0.00.024.866 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.068 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.161 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.174 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.175 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.183 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.184 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.186 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.194 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.195 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.196 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.197 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.420 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.154 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.164 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.165 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.166 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.167 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.168 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.169 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.173 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.173 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.174 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.175 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.176 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.185 I llama_model_loader: - type  f32:   37 tensors
0.00.196.188 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.189 I llama_model_loader: - type q6_K:   19 tensors
0.00.491.763 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.810 I llm_load_vocab: special tokens cache size = 5
0.00.550.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.550.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.550.212 I llm_load_print_meta: arch             = gemma
0.00.550.212 I llm_load_print_meta: vocab type       = SPM
0.00.550.213 I llm_load_print_meta: n_vocab          = 256000
0.00.550.216 I llm_load_print_meta: n_merges         = 0
0.00.550.216 I llm_load_print_meta: vocab_only       = 0
0.00.550.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.550.217 I llm_load_print_meta: n_embd           = 2048
0.00.550.218 I llm_load_print_meta: n_layer          = 18
0.00.550.251 I llm_load_print_meta: n_head           = 8
0.00.550.257 I llm_load_print_meta: n_head_kv        = 1
0.00.550.257 I llm_load_print_meta: n_rot            = 256
0.00.550.258 I llm_load_print_meta: n_swa            = 0
0.00.550.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.550.258 I llm_load_print_meta: n_embd_head_v    = 256
0.00.550.263 I llm_load_print_meta: n_gqa            = 8
0.00.550.267 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.550.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.550.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.550.275 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.550.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.550.275 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.550.276 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.550.280 I llm_load_print_meta: n_ff             = 16384
0.00.550.281 I llm_load_print_meta: n_expert         = 0
0.00.550.281 I llm_load_print_meta: n_expert_used    = 0
0.00.550.281 I llm_load_print_meta: causal attn      = 1
0.00.550.282 I llm_load_print_meta: pooling type     = 0
0.00.550.282 I llm_load_print_meta: rope type        = 2
0.00.550.283 I llm_load_print_meta: rope scaling     = linear
0.00.550.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.550.285 I llm_load_print_meta: freq_scale_train = 1
0.00.550.285 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.550.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.550.286 I llm_load_print_meta: ssm_d_conv       = 0
0.00.550.286 I llm_load_print_meta: ssm_d_inner      = 0
0.00.550.286 I llm_load_print_meta: ssm_d_state      = 0
0.00.550.287 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.550.287 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.550.287 I llm_load_print_meta: model type       = 2B
0.00.550.288 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.550.289 I llm_load_print_meta: model params     = 2.51 B
0.00.550.290 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.550.290 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.550.291 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.550.291 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.550.292 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.550.292 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.550.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.550.294 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.550.294 I llm_load_print_meta: max token length = 93
0.00.550.469 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.124 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.611.135 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.611.136 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.611.137 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.611.137 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.611.138 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.616.918 I llama_new_context_with_model: n_ctx      = 8192
0.00.616.928 I llama_new_context_with_model: n_batch    = 2048
0.00.616.929 I llama_new_context_with_model: n_ubatch   = 512
0.00.616.929 I llama_new_context_with_model: flash_attn = 0
0.00.616.934 I llama_new_context_with_model: freq_base  = 10000.0
0.00.616.935 I llama_new_context_with_model: freq_scale = 1
0.00.648.433 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.648.475 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.648.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.650.024 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.650.031 I llama_new_context_with_model: graph nodes  = 601
0.00.650.031 I llama_new_context_with_model: graph splits = 1
0.00.650.047 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.227.885 I main: llama threadpool init, n_threads = 4
0.01.227.898 I 
0.01.227.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.227.999 I 
0.01.228.163 I sampler seed: 3704065253
0.01.228.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.228.180 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.228.181 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconading and narrating the story of a young woman named Anya who is grappling with grief and the challenges of life.

Anya found herself drowning in the

0.12.217.136 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.47 tokens per second)
0.12.217.139 I llama_perf_context_print:        load time =    1225.10 ms
0.12.217.140 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.142 I llama_perf_context_print:        eval time =   10907.55 ms /    32 runs   (  340.86 ms per token,     2.93 tokens per second)
0.12.217.158 I llama_perf_context_print:       total time =   10989.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3772 (23e0d70b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198963.04 ms
main:    total time = 198963.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.658 I build: 3772 (23e0d70b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.861 I main: load the model and apply lora adapter, if any
0.00.025.152 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.271 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.275 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.279 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.292 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.293 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.294 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.829 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.945 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.946 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.962 I llama_model_loader: - type  f32:   37 tensors
0.00.195.967 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.967 I llama_model_loader: - type q6_K:   19 tensors
0.00.491.773 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.818 I llm_load_vocab: special tokens cache size = 5
0.00.549.806 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.549.873 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.549.874 I llm_load_print_meta: arch             = gemma
0.00.549.875 I llm_load_print_meta: vocab type       = SPM
0.00.549.875 I llm_load_print_meta: n_vocab          = 256000
0.00.549.878 I llm_load_print_meta: n_merges         = 0
0.00.549.878 I llm_load_print_meta: vocab_only       = 0
0.00.549.879 I llm_load_print_meta: n_ctx_train      = 8192
0.00.549.879 I llm_load_print_meta: n_embd           = 2048
0.00.549.880 I llm_load_print_meta: n_layer          = 18
0.00.549.915 I llm_load_print_meta: n_head           = 8
0.00.549.922 I llm_load_print_meta: n_head_kv        = 1
0.00.549.922 I llm_load_print_meta: n_rot            = 256
0.00.549.923 I llm_load_print_meta: n_swa            = 0
0.00.549.923 I llm_load_print_meta: n_embd_head_k    = 256
0.00.549.923 I llm_load_print_meta: n_embd_head_v    = 256
0.00.549.928 I llm_load_print_meta: n_gqa            = 8
0.00.549.932 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.549.937 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.549.938 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.549.939 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.549.940 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.549.940 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.549.940 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.549.945 I llm_load_print_meta: n_ff             = 16384
0.00.549.945 I llm_load_print_meta: n_expert         = 0
0.00.549.946 I llm_load_print_meta: n_expert_used    = 0
0.00.549.946 I llm_load_print_meta: causal attn      = 1
0.00.549.946 I llm_load_print_meta: pooling type     = 0
0.00.549.947 I llm_load_print_meta: rope type        = 2
0.00.549.947 I llm_load_print_meta: rope scaling     = linear
0.00.549.949 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.549.950 I llm_load_print_meta: freq_scale_train = 1
0.00.549.950 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.549.950 I llm_load_print_meta: rope_finetuned   = unknown
0.00.549.951 I llm_load_print_meta: ssm_d_conv       = 0
0.00.549.951 I llm_load_print_meta: ssm_d_inner      = 0
0.00.549.951 I llm_load_print_meta: ssm_d_state      = 0
0.00.549.952 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.549.952 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.549.953 I llm_load_print_meta: model type       = 2B
0.00.549.954 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.549.955 I llm_load_print_meta: model params     = 2.51 B
0.00.549.955 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.549.956 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.549.956 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.549.957 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.549.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.549.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.549.958 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.549.959 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.549.959 I llm_load_print_meta: max token length = 93
0.00.550.139 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.607.225 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.612.878 I llama_new_context_with_model: n_ctx      = 8192
0.00.612.888 I llama_new_context_with_model: n_batch    = 2048
0.00.612.888 I llama_new_context_with_model: n_ubatch   = 512
0.00.612.889 I llama_new_context_with_model: flash_attn = 0
0.00.612.892 I llama_new_context_with_model: freq_base  = 10000.0
0.00.612.893 I llama_new_context_with_model: freq_scale = 1
0.00.644.538 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.644.583 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.694 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.646.073 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.646.079 I llama_new_context_with_model: graph nodes  = 601
0.00.646.079 I llama_new_context_with_model: graph splits = 1
0.00.646.098 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.227.475 I main: llama threadpool init, n_threads = 4
0.01.227.487 I 
0.01.227.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.227.579 I 
0.01.227.742 I sampler seed: 2692375230
0.01.227.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.227.756 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.227.757 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneurors with a variety of abilities, including:

**1. Superhuman Strength and Speed**
- Can move at superhuman speeds and generate immense force.

0.12.133.961 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.29 tokens per second)
0.12.133.964 I llama_perf_context_print:        load time =    1224.52 ms
0.12.133.965 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.133.967 I llama_perf_context_print:        eval time =   10822.91 ms /    32 runs   (  338.22 ms per token,     2.96 tokens per second)
0.12.133.968 I llama_perf_context_print:       total time =   10906.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.297s
user	50m10.059s
sys	0m6.448s
