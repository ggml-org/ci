+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.515 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.000.720 I main: load the model and apply lora adapter, if any
0.00.020.907 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.945 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.540 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.546 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.547 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.552 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.553 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.553 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.554 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.557 I llama_model_loader: - type  f32:   37 tensors
0.00.130.558 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.253 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.813 I llm_load_vocab: special tokens cache size = 5
0.00.268.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.117 I llm_load_print_meta: arch             = gemma
0.00.268.117 I llm_load_print_meta: vocab type       = SPM
0.00.268.118 I llm_load_print_meta: n_vocab          = 256000
0.00.268.118 I llm_load_print_meta: n_merges         = 0
0.00.268.119 I llm_load_print_meta: vocab_only       = 0
0.00.268.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.119 I llm_load_print_meta: n_embd           = 2048
0.00.268.120 I llm_load_print_meta: n_layer          = 18
0.00.268.131 I llm_load_print_meta: n_head           = 8
0.00.268.132 I llm_load_print_meta: n_head_kv        = 1
0.00.268.132 I llm_load_print_meta: n_rot            = 256
0.00.268.132 I llm_load_print_meta: n_swa            = 0
0.00.268.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.134 I llm_load_print_meta: n_gqa            = 8
0.00.268.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.138 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.139 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.139 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.140 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.141 I llm_load_print_meta: n_ff             = 16384
0.00.268.141 I llm_load_print_meta: n_expert         = 0
0.00.268.141 I llm_load_print_meta: n_expert_used    = 0
0.00.268.142 I llm_load_print_meta: causal attn      = 1
0.00.268.142 I llm_load_print_meta: pooling type     = 0
0.00.268.142 I llm_load_print_meta: rope type        = 2
0.00.268.142 I llm_load_print_meta: rope scaling     = linear
0.00.268.144 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.145 I llm_load_print_meta: freq_scale_train = 1
0.00.268.145 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.145 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.146 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.146 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.146 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.147 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.147 I llm_load_print_meta: model type       = 2B
0.00.268.148 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.149 I llm_load_print_meta: model params     = 2.51 B
0.00.268.150 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.150 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.151 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.152 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.153 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.153 I llm_load_print_meta: max token length = 93
0.00.367.787 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.794 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.795 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.795 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.796 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.796 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.902 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.909 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.909 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.909 I llama_new_context_with_model: n_batch       = 2048
0.00.372.910 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.910 I llama_new_context_with_model: flash_attn    = 0
0.00.372.913 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.914 I llama_new_context_with_model: freq_scale    = 1
0.00.372.914 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.935 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.194 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.300 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.526 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.533 I llama_new_context_with_model: graph nodes  = 601
0.00.388.533 I llama_new_context_with_model: graph splits = 1
0.00.388.536 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.745 I main: llama threadpool init, n_threads = 4
0.00.473.761 I 
0.00.473.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.840 I 
0.00.473.889 I sampler seed: 1402025535
0.00.473.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.913 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.916 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.916 I 
 increasements can be used to:

a) Control population growth
b) Prevent the spread of disease
c) Prevent the depletion of natural resources
d

0.02.719.267 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6873.57 tokens per second)
0.02.719.269 I llama_perf_context_print:        load time =     473.01 ms
0.02.719.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.719.272 I llama_perf_context_print:        eval time =    2226.89 ms /    32 runs   (   69.59 ms per token,    14.37 tokens per second)
0.02.719.272 I llama_perf_context_print:       total time =    2245.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.566 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.646 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.666 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.675 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.680 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.681 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.682 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.683 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.688 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.061 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.069 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.070 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.070 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.071 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.072 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.072 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.075 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.076 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.078 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.082 I llama_model_loader: - type  f32:   37 tensors
0.00.133.084 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.439 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.526 I llm_load_vocab: special tokens cache size = 5
0.00.270.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.913 I llm_load_print_meta: arch             = gemma
0.00.270.914 I llm_load_print_meta: vocab type       = SPM
0.00.270.914 I llm_load_print_meta: n_vocab          = 256000
0.00.270.915 I llm_load_print_meta: n_merges         = 0
0.00.270.915 I llm_load_print_meta: vocab_only       = 0
0.00.270.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.916 I llm_load_print_meta: n_embd           = 2048
0.00.270.916 I llm_load_print_meta: n_layer          = 18
0.00.270.927 I llm_load_print_meta: n_head           = 8
0.00.270.928 I llm_load_print_meta: n_head_kv        = 1
0.00.270.928 I llm_load_print_meta: n_rot            = 256
0.00.270.929 I llm_load_print_meta: n_swa            = 0
0.00.270.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.930 I llm_load_print_meta: n_gqa            = 8
0.00.270.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.932 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.934 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.934 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.935 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.935 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.936 I llm_load_print_meta: n_ff             = 16384
0.00.270.936 I llm_load_print_meta: n_expert         = 0
0.00.270.937 I llm_load_print_meta: n_expert_used    = 0
0.00.270.937 I llm_load_print_meta: causal attn      = 1
0.00.270.937 I llm_load_print_meta: pooling type     = 0
0.00.270.937 I llm_load_print_meta: rope type        = 2
0.00.270.938 I llm_load_print_meta: rope scaling     = linear
0.00.270.939 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.940 I llm_load_print_meta: freq_scale_train = 1
0.00.270.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.942 I llm_load_print_meta: model type       = 2B
0.00.270.943 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.943 I llm_load_print_meta: model params     = 2.51 B
0.00.270.944 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.944 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.945 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.945 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.946 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.946 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.946 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.947 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.947 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.948 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.948 I llm_load_print_meta: max token length = 93
0.00.366.633 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.986 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.992 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.993 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.993 I llama_new_context_with_model: n_batch       = 2048
0.00.371.994 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.994 I llama_new_context_with_model: flash_attn    = 0
0.00.371.996 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.997 I llama_new_context_with_model: freq_scale    = 1
0.00.371.998 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.018 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.386.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.499 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.845 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.850 I llama_new_context_with_model: graph nodes  = 601
0.00.387.851 I llama_new_context_with_model: graph splits = 1
0.00.387.853 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.223 I main: llama threadpool init, n_threads = 4
0.00.469.239 I 
0.00.469.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.316 I 
0.00.469.358 I sampler seed: 3545804087
0.00.469.370 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.381 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.385 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.385 I 
 increadibly.

I am unable to access the internet. Therefore, I am unable to retrieve the necessary information to answer your question. [end of text]


0.02.371.328 I llama_perf_sampler_print:    sampling time =       4.27 ms /    29 runs   (    0.15 ms per token,  6788.39 tokens per second)
0.02.371.330 I llama_perf_context_print:        load time =     468.44 ms
0.02.371.332 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.371.333 I llama_perf_context_print:        eval time =    1885.96 ms /    28 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.371.334 I llama_perf_context_print:       total time =    1902.11 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.177 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.249 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.259 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.276 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.277 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.278 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.278 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.283 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.284 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.284 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.285 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.485 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.620 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.431 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.438 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.440 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.443 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.443 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.444 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.444 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.448 I llama_model_loader: - type  f32:   37 tensors
0.00.129.449 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.022 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.497 I llm_load_vocab: special tokens cache size = 5
0.00.267.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.599 I llm_load_print_meta: arch             = gemma
0.00.267.600 I llm_load_print_meta: vocab type       = SPM
0.00.267.600 I llm_load_print_meta: n_vocab          = 256000
0.00.267.601 I llm_load_print_meta: n_merges         = 0
0.00.267.601 I llm_load_print_meta: vocab_only       = 0
0.00.267.601 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.602 I llm_load_print_meta: n_embd           = 2048
0.00.267.602 I llm_load_print_meta: n_layer          = 18
0.00.267.614 I llm_load_print_meta: n_head           = 8
0.00.267.615 I llm_load_print_meta: n_head_kv        = 1
0.00.267.615 I llm_load_print_meta: n_rot            = 256
0.00.267.615 I llm_load_print_meta: n_swa            = 0
0.00.267.616 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.617 I llm_load_print_meta: n_gqa            = 8
0.00.267.618 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.619 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.619 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.620 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.621 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.621 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.622 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.622 I llm_load_print_meta: n_ff             = 16384
0.00.267.623 I llm_load_print_meta: n_expert         = 0
0.00.267.623 I llm_load_print_meta: n_expert_used    = 0
0.00.267.623 I llm_load_print_meta: causal attn      = 1
0.00.267.624 I llm_load_print_meta: pooling type     = 0
0.00.267.624 I llm_load_print_meta: rope type        = 2
0.00.267.624 I llm_load_print_meta: rope scaling     = linear
0.00.267.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.626 I llm_load_print_meta: freq_scale_train = 1
0.00.267.627 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.627 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.627 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.627 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.628 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.628 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.628 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.629 I llm_load_print_meta: model type       = 2B
0.00.267.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.630 I llm_load_print_meta: model params     = 2.51 B
0.00.267.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.633 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.634 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.635 I llm_load_print_meta: max token length = 93
0.00.345.297 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.302 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.303 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.304 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.304 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.305 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.256 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.261 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.262 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.262 I llama_new_context_with_model: n_batch       = 2048
0.00.350.263 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.263 I llama_new_context_with_model: flash_attn    = 0
0.00.350.265 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.266 I llama_new_context_with_model: freq_scale    = 1
0.00.350.267 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.286 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.364.392 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.405 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.495 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.695 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.699 I llama_new_context_with_model: graph nodes  = 601
0.00.365.700 I llama_new_context_with_model: graph splits = 1
0.00.365.702 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.702 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.367 I main: llama threadpool init, n_threads = 4
0.00.451.382 I 
0.00.451.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.460 I 
0.00.451.507 I sampler seed: 4117954735
0.00.451.517 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.521 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.522 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.522 I 
 increasities, and other forms of sexually transmitted infections (STIs) can have serious consequences for both physical and mental health.

**What are some of the

0.02.759.874 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6821.00 tokens per second)
0.02.759.877 I llama_perf_context_print:        load time =     450.97 ms
0.02.759.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.759.880 I llama_perf_context_print:        eval time =    2288.92 ms /    32 runs   (   71.53 ms per token,    13.98 tokens per second)
0.02.759.881 I llama_perf_context_print:       total time =    2308.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.580 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.800 I main: load the model and apply lora adapter, if any
0.00.022.814 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.822 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.834 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.839 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.840 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.845 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.859 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.860 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.861 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.532 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.858 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.684 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.691 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.692 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.692 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.693 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.694 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.697 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.698 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.699 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.699 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.700 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.704 I llama_model_loader: - type  f32:   37 tensors
0.00.133.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.240 I llm_load_vocab: special tokens cache size = 5
0.00.271.418 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.436 I llm_load_print_meta: arch             = gemma
0.00.271.437 I llm_load_print_meta: vocab type       = SPM
0.00.271.438 I llm_load_print_meta: n_vocab          = 256000
0.00.271.438 I llm_load_print_meta: n_merges         = 0
0.00.271.438 I llm_load_print_meta: vocab_only       = 0
0.00.271.439 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.439 I llm_load_print_meta: n_embd           = 2048
0.00.271.440 I llm_load_print_meta: n_layer          = 18
0.00.271.450 I llm_load_print_meta: n_head           = 8
0.00.271.451 I llm_load_print_meta: n_head_kv        = 1
0.00.271.451 I llm_load_print_meta: n_rot            = 256
0.00.271.451 I llm_load_print_meta: n_swa            = 0
0.00.271.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.452 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.453 I llm_load_print_meta: n_gqa            = 8
0.00.271.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.459 I llm_load_print_meta: n_ff             = 16384
0.00.271.459 I llm_load_print_meta: n_expert         = 0
0.00.271.460 I llm_load_print_meta: n_expert_used    = 0
0.00.271.460 I llm_load_print_meta: causal attn      = 1
0.00.271.460 I llm_load_print_meta: pooling type     = 0
0.00.271.461 I llm_load_print_meta: rope type        = 2
0.00.271.461 I llm_load_print_meta: rope scaling     = linear
0.00.271.462 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.463 I llm_load_print_meta: freq_scale_train = 1
0.00.271.463 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.463 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.464 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.464 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.464 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.465 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.466 I llm_load_print_meta: model type       = 2B
0.00.271.466 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.467 I llm_load_print_meta: model params     = 2.51 B
0.00.271.468 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.468 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.469 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.471 I llm_load_print_meta: max token length = 93
0.00.342.868 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.873 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.031 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.036 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.037 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.037 I llama_new_context_with_model: n_batch       = 2048
0.00.348.037 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.038 I llama_new_context_with_model: flash_attn    = 0
0.00.348.040 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.041 I llama_new_context_with_model: freq_scale    = 1
0.00.348.042 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.063 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.362.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.683 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.948 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.954 I llama_new_context_with_model: graph nodes  = 601
0.00.363.954 I llama_new_context_with_model: graph splits = 1
0.00.363.957 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.957 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.480 I main: llama threadpool init, n_threads = 4
0.00.451.497 I 
0.00.451.584 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.588 I 
0.00.451.638 I sampler seed: 2533220814
0.00.451.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.657 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.658 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.658 I 
 increasities on a daily basis.

I'm not sure what you're talking about. Can you please provide more context or explain what you mean?

0.02.845.729 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6598.68 tokens per second)
0.02.845.732 I llama_perf_context_print:        load time =     450.66 ms
0.02.845.733 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.845.734 I llama_perf_context_print:        eval time =    2375.16 ms /    32 runs   (   74.22 ms per token,    13.47 tokens per second)
0.02.845.735 I llama_perf_context_print:       total time =    2394.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.108s
user	0m38.305s
sys	0m9.237s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4376 (7ae33a61)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40248.08 ms
main:    total time = 40248.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.423 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.431 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.447 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.450 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.454 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.455 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.461 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.462 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.462 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.463 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.923 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.812 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.693 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.712 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.714 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.715 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.716 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.717 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.721 I llama_model_loader: - type  f32:   37 tensors
0.00.131.723 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.725 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.682 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.513 I llm_load_vocab: special tokens cache size = 5
0.00.275.649 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.665 I llm_load_print_meta: arch             = gemma
0.00.275.667 I llm_load_print_meta: vocab type       = SPM
0.00.275.668 I llm_load_print_meta: n_vocab          = 256000
0.00.275.668 I llm_load_print_meta: n_merges         = 0
0.00.275.668 I llm_load_print_meta: vocab_only       = 0
0.00.275.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.669 I llm_load_print_meta: n_embd           = 2048
0.00.275.669 I llm_load_print_meta: n_layer          = 18
0.00.275.681 I llm_load_print_meta: n_head           = 8
0.00.275.682 I llm_load_print_meta: n_head_kv        = 1
0.00.275.682 I llm_load_print_meta: n_rot            = 256
0.00.275.683 I llm_load_print_meta: n_swa            = 0
0.00.275.684 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.684 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.685 I llm_load_print_meta: n_gqa            = 8
0.00.275.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.690 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.691 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.692 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.693 I llm_load_print_meta: n_ff             = 16384
0.00.275.693 I llm_load_print_meta: n_expert         = 0
0.00.275.694 I llm_load_print_meta: n_expert_used    = 0
0.00.275.694 I llm_load_print_meta: causal attn      = 1
0.00.275.695 I llm_load_print_meta: pooling type     = 0
0.00.275.695 I llm_load_print_meta: rope type        = 2
0.00.275.695 I llm_load_print_meta: rope scaling     = linear
0.00.275.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.698 I llm_load_print_meta: freq_scale_train = 1
0.00.275.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.700 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.701 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.701 I llm_load_print_meta: model type       = 2B
0.00.275.702 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.703 I llm_load_print_meta: model params     = 2.51 B
0.00.275.704 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.704 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.705 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.705 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.705 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.706 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.707 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.708 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.708 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.718 I llm_load_print_meta: max token length = 93
0.00.335.989 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.995 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.996 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.996 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.997 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.997 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.224 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.229 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.229 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.230 I llama_new_context_with_model: n_batch       = 2048
0.00.341.230 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.231 I llama_new_context_with_model: flash_attn    = 0
0.00.341.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.234 I llama_new_context_with_model: freq_scale    = 1
0.00.341.235 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.254 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.355.567 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.580 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.669 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.883 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.889 I llama_new_context_with_model: graph nodes  = 601
0.00.356.889 I llama_new_context_with_model: graph splits = 1
0.00.356.891 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.892 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.090 I main: llama threadpool init, n_threads = 4
0.00.432.106 I 
0.00.432.179 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.182 I 
0.00.432.225 I sampler seed: 1150777097
0.00.432.236 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.248 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.251 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.251 I 
 increasities for her and her husband.

The context is a courtroom setting, with the judge presiding.

**Court:** "Mrs. Decorum, your

0.02.016.874 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6606.61 tokens per second)
0.02.016.877 I llama_perf_context_print:        load time =     431.30 ms
0.02.016.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.879 I llama_perf_context_print:        eval time =    1566.41 ms /    32 runs   (   48.95 ms per token,    20.43 tokens per second)
0.02.016.880 I llama_perf_context_print:       total time =    1584.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4376 (7ae33a61)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40212.62 ms
main:    total time = 40212.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.177 I build: 4376 (7ae33a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.020.661 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.680 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.687 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.690 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.693 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.695 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.696 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.697 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.700 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.701 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.701 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.702 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.740 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.552 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.558 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.559 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.560 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.561 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.564 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.569 I llama_model_loader: - type  f32:   37 tensors
0.00.130.570 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.570 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.065 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.424 I llm_load_vocab: special tokens cache size = 5
0.00.265.778 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.793 I llm_load_print_meta: arch             = gemma
0.00.265.793 I llm_load_print_meta: vocab type       = SPM
0.00.265.794 I llm_load_print_meta: n_vocab          = 256000
0.00.265.794 I llm_load_print_meta: n_merges         = 0
0.00.265.795 I llm_load_print_meta: vocab_only       = 0
0.00.265.795 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.795 I llm_load_print_meta: n_embd           = 2048
0.00.265.796 I llm_load_print_meta: n_layer          = 18
0.00.265.806 I llm_load_print_meta: n_head           = 8
0.00.265.807 I llm_load_print_meta: n_head_kv        = 1
0.00.265.808 I llm_load_print_meta: n_rot            = 256
0.00.265.808 I llm_load_print_meta: n_swa            = 0
0.00.265.808 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.808 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.809 I llm_load_print_meta: n_gqa            = 8
0.00.265.810 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.811 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.812 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.814 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.815 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.816 I llm_load_print_meta: n_ff             = 16384
0.00.265.816 I llm_load_print_meta: n_expert         = 0
0.00.265.816 I llm_load_print_meta: n_expert_used    = 0
0.00.265.817 I llm_load_print_meta: causal attn      = 1
0.00.265.817 I llm_load_print_meta: pooling type     = 0
0.00.265.817 I llm_load_print_meta: rope type        = 2
0.00.265.818 I llm_load_print_meta: rope scaling     = linear
0.00.265.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.820 I llm_load_print_meta: freq_scale_train = 1
0.00.265.820 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.821 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.821 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.821 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.822 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.822 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.822 I llm_load_print_meta: model type       = 2B
0.00.265.823 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.824 I llm_load_print_meta: model params     = 2.51 B
0.00.265.824 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.825 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.825 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.825 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.826 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.826 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.826 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.827 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.827 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.828 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.828 I llm_load_print_meta: max token length = 93
0.00.323.154 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.259 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.265 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.266 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.266 I llama_new_context_with_model: n_batch       = 2048
0.00.328.267 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.267 I llama_new_context_with_model: flash_attn    = 0
0.00.328.269 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.270 I llama_new_context_with_model: freq_scale    = 1
0.00.328.271 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.328.293 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.939 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.954 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.299 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.305 I llama_new_context_with_model: graph nodes  = 601
0.00.344.306 I llama_new_context_with_model: graph splits = 1
0.00.344.308 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.442 I main: llama threadpool init, n_threads = 4
0.00.418.461 I 
0.00.418.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.543 I 
0.00.418.586 I sampler seed: 2704343509
0.00.418.600 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.607 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.613 I 
 increasities

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information in a safe and

0.01.986.012 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6177.46 tokens per second)
0.01.986.014 I llama_perf_context_print:        load time =     418.06 ms
0.01.986.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.017 I llama_perf_context_print:        eval time =    1548.46 ms /    32 runs   (   48.39 ms per token,    20.67 tokens per second)
0.01.986.020 I llama_perf_context_print:       total time =    1567.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.229s
user	10m24.159s
sys	0m6.876s
