+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.180 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.403 I main: llama backend init
0.00.000.409 I main: load the model and apply lora adapter, if any
0.00.020.671 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.681 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.688 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.701 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.702 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.703 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.707 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.708 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.516 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.409 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.416 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.417 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.417 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.418 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.419 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.420 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.422 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.423 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.425 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.426 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.430 I llama_model_loader: - type  f32:   37 tensors
0.00.131.431 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.340 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.759 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.248 I llm_load_vocab: special tokens cache size = 5
0.00.258.814 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.829 I llm_load_print_meta: arch             = gemma
0.00.258.829 I llm_load_print_meta: vocab type       = SPM
0.00.258.830 I llm_load_print_meta: n_vocab          = 256000
0.00.258.831 I llm_load_print_meta: n_merges         = 0
0.00.258.831 I llm_load_print_meta: vocab_only       = 0
0.00.258.832 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.832 I llm_load_print_meta: n_embd           = 2048
0.00.258.832 I llm_load_print_meta: n_layer          = 18
0.00.258.843 I llm_load_print_meta: n_head           = 8
0.00.258.844 I llm_load_print_meta: n_head_kv        = 1
0.00.258.845 I llm_load_print_meta: n_rot            = 256
0.00.258.845 I llm_load_print_meta: n_swa            = 0
0.00.258.845 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.846 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.847 I llm_load_print_meta: n_gqa            = 8
0.00.258.847 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.848 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.849 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.851 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.851 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.851 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.852 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.853 I llm_load_print_meta: n_ff             = 16384
0.00.258.853 I llm_load_print_meta: n_expert         = 0
0.00.258.853 I llm_load_print_meta: n_expert_used    = 0
0.00.258.854 I llm_load_print_meta: causal attn      = 1
0.00.258.854 I llm_load_print_meta: pooling type     = 0
0.00.258.854 I llm_load_print_meta: rope type        = 2
0.00.258.855 I llm_load_print_meta: rope scaling     = linear
0.00.258.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.857 I llm_load_print_meta: freq_scale_train = 1
0.00.258.857 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.857 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.857 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.858 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.858 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.858 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.859 I llm_load_print_meta: model type       = 2B
0.00.258.859 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.860 I llm_load_print_meta: model params     = 2.51 B
0.00.258.861 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.862 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.862 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.863 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.864 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.865 I llm_load_print_meta: max token length = 93
0.00.359.784 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.359.791 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.359.792 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.359.793 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.359.793 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.359.794 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.364.891 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.897 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.898 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.898 I llama_new_context_with_model: n_batch       = 2048
0.00.364.898 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.899 I llama_new_context_with_model: flash_attn    = 0
0.00.364.901 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.902 I llama_new_context_with_model: freq_scale    = 1
0.00.364.903 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.104 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.118 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.453 I llama_new_context_with_model: graph nodes  = 601
0.00.380.453 I llama_new_context_with_model: graph splits = 1
0.00.380.456 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.013 I main: llama threadpool init, n_threads = 4
0.00.465.029 I 
0.00.465.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.101 I 
0.00.465.142 I sampler seed: 2218992486
0.00.465.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.160 I 
 increably.

I am unable to generate a response because the prompt contains potentially harmful or inappropriate content. [end of text]


0.02.007.359 I llama_perf_sampler_print:    sampling time =       3.21 ms /    23 runs   (    0.14 ms per token,  7153.97 tokens per second)
0.02.007.361 I llama_perf_context_print:        load time =     464.59 ms
0.02.007.362 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.364 I llama_perf_context_print:        eval time =    1528.73 ms /    22 runs   (   69.49 ms per token,    14.39 tokens per second)
0.02.007.364 I llama_perf_context_print:       total time =    1542.35 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.573 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.878 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.889 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.890 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.896 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.897 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.898 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.899 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.899 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.900 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.910 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.911 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.621 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.627 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.628 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.629 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.632 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.636 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.636 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.637 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.638 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.639 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.643 I llama_model_loader: - type  f32:   37 tensors
0.00.131.644 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.627 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.900 I llm_load_vocab: special tokens cache size = 5
0.00.266.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.552 I llm_load_print_meta: arch             = gemma
0.00.266.553 I llm_load_print_meta: vocab type       = SPM
0.00.266.553 I llm_load_print_meta: n_vocab          = 256000
0.00.266.554 I llm_load_print_meta: n_merges         = 0
0.00.266.554 I llm_load_print_meta: vocab_only       = 0
0.00.266.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.555 I llm_load_print_meta: n_embd           = 2048
0.00.266.555 I llm_load_print_meta: n_layer          = 18
0.00.266.567 I llm_load_print_meta: n_head           = 8
0.00.266.568 I llm_load_print_meta: n_head_kv        = 1
0.00.266.568 I llm_load_print_meta: n_rot            = 256
0.00.266.568 I llm_load_print_meta: n_swa            = 0
0.00.266.569 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.569 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.570 I llm_load_print_meta: n_gqa            = 8
0.00.266.571 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.575 I llm_load_print_meta: n_ff             = 16384
0.00.266.576 I llm_load_print_meta: n_expert         = 0
0.00.266.576 I llm_load_print_meta: n_expert_used    = 0
0.00.266.576 I llm_load_print_meta: causal attn      = 1
0.00.266.577 I llm_load_print_meta: pooling type     = 0
0.00.266.577 I llm_load_print_meta: rope type        = 2
0.00.266.577 I llm_load_print_meta: rope scaling     = linear
0.00.266.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.580 I llm_load_print_meta: freq_scale_train = 1
0.00.266.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.580 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.580 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.581 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.582 I llm_load_print_meta: model type       = 2B
0.00.266.582 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.583 I llm_load_print_meta: model params     = 2.51 B
0.00.266.584 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.587 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.588 I llm_load_print_meta: max token length = 93
0.00.362.165 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.327 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.332 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.333 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.333 I llama_new_context_with_model: n_batch       = 2048
0.00.367.333 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.334 I llama_new_context_with_model: flash_attn    = 0
0.00.367.336 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.337 I llama_new_context_with_model: freq_scale    = 1
0.00.367.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.755 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.843 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.082 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.087 I llama_new_context_with_model: graph nodes  = 601
0.00.383.088 I llama_new_context_with_model: graph splits = 1
0.00.383.090 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.613 I main: llama threadpool init, n_threads = 4
0.00.463.627 I 
0.00.463.700 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.703 I 
0.00.463.745 I sampler seed: 3169061480
0.00.463.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.762 I 
 increamental.
I am unable to generate the requested response as it would require me to access and process personally identifiable information. [end of text]


0.02.228.692 I llama_perf_sampler_print:    sampling time =       3.80 ms /    27 runs   (    0.14 ms per token,  7107.13 tokens per second)
0.02.228.695 I llama_perf_context_print:        load time =     462.82 ms
0.02.228.696 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.228.697 I llama_perf_context_print:        eval time =    1749.76 ms /    26 runs   (   67.30 ms per token,    14.86 tokens per second)
0.02.228.698 I llama_perf_context_print:       total time =    1765.09 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.165 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.020.267 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.287 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.298 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.298 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.299 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.303 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.304 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.304 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.305 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.306 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.976 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.854 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.860 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.861 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.866 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.867 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.868 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.869 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.872 I llama_model_loader: - type  f32:   37 tensors
0.00.129.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.678 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.258 I llm_load_vocab: special tokens cache size = 5
0.00.264.343 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.359 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.360 I llm_load_print_meta: arch             = gemma
0.00.264.361 I llm_load_print_meta: vocab type       = SPM
0.00.264.362 I llm_load_print_meta: n_vocab          = 256000
0.00.264.362 I llm_load_print_meta: n_merges         = 0
0.00.264.362 I llm_load_print_meta: vocab_only       = 0
0.00.264.363 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.363 I llm_load_print_meta: n_embd           = 2048
0.00.264.363 I llm_load_print_meta: n_layer          = 18
0.00.264.375 I llm_load_print_meta: n_head           = 8
0.00.264.376 I llm_load_print_meta: n_head_kv        = 1
0.00.264.377 I llm_load_print_meta: n_rot            = 256
0.00.264.377 I llm_load_print_meta: n_swa            = 0
0.00.264.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.377 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.378 I llm_load_print_meta: n_gqa            = 8
0.00.264.379 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.380 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.381 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.382 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.383 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.383 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.383 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.384 I llm_load_print_meta: n_ff             = 16384
0.00.264.384 I llm_load_print_meta: n_expert         = 0
0.00.264.385 I llm_load_print_meta: n_expert_used    = 0
0.00.264.385 I llm_load_print_meta: causal attn      = 1
0.00.264.385 I llm_load_print_meta: pooling type     = 0
0.00.264.386 I llm_load_print_meta: rope type        = 2
0.00.264.386 I llm_load_print_meta: rope scaling     = linear
0.00.264.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.388 I llm_load_print_meta: freq_scale_train = 1
0.00.264.388 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.388 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.388 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.389 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.389 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.390 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.390 I llm_load_print_meta: model type       = 2B
0.00.264.391 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.392 I llm_load_print_meta: model params     = 2.51 B
0.00.264.393 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.393 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.393 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.394 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.394 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.394 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.395 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.395 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.396 I llm_load_print_meta: max token length = 93
0.00.340.452 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.458 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.458 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.459 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.460 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.460 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.658 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.664 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.664 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.665 I llama_new_context_with_model: n_batch       = 2048
0.00.345.665 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.666 I llama_new_context_with_model: flash_attn    = 0
0.00.345.668 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.669 I llama_new_context_with_model: freq_scale    = 1
0.00.345.670 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.770 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.784 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.883 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.181 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.188 I llama_new_context_with_model: graph nodes  = 601
0.00.361.188 I llama_new_context_with_model: graph splits = 1
0.00.361.190 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.142 I main: llama threadpool init, n_threads = 4
0.00.448.161 I 
0.00.448.249 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.255 I 
0.00.448.307 I sampler seed: 3871452376
0.00.448.318 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.326 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.326 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.326 I 
 increasities.

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.01.669.114 I llama_perf_sampler_print:    sampling time =       2.76 ms /    18 runs   (    0.15 ms per token,  6519.38 tokens per second)
0.01.669.116 I llama_perf_context_print:        load time =     447.76 ms
0.01.669.117 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.669.119 I llama_perf_context_print:        eval time =    1210.05 ms /    17 runs   (   71.18 ms per token,    14.05 tokens per second)
0.01.669.120 I llama_perf_context_print:       total time =    1220.98 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.273 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.496 I main: llama backend init
0.00.000.503 I main: load the model and apply lora adapter, if any
0.00.020.661 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.671 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.687 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.697 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.700 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.701 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.706 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.707 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.708 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.542 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.473 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.480 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.481 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.481 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.488 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.489 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.493 I llama_model_loader: - type  f32:   37 tensors
0.00.131.494 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.674 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.213 I llm_load_vocab: special tokens cache size = 5
0.00.262.836 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.854 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.855 I llm_load_print_meta: arch             = gemma
0.00.262.856 I llm_load_print_meta: vocab type       = SPM
0.00.262.856 I llm_load_print_meta: n_vocab          = 256000
0.00.262.857 I llm_load_print_meta: n_merges         = 0
0.00.262.857 I llm_load_print_meta: vocab_only       = 0
0.00.262.858 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.858 I llm_load_print_meta: n_embd           = 2048
0.00.262.858 I llm_load_print_meta: n_layer          = 18
0.00.262.871 I llm_load_print_meta: n_head           = 8
0.00.262.872 I llm_load_print_meta: n_head_kv        = 1
0.00.262.872 I llm_load_print_meta: n_rot            = 256
0.00.262.873 I llm_load_print_meta: n_swa            = 0
0.00.262.873 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.873 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.874 I llm_load_print_meta: n_gqa            = 8
0.00.262.875 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.876 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.877 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.878 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.879 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.879 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.879 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.880 I llm_load_print_meta: n_ff             = 16384
0.00.262.881 I llm_load_print_meta: n_expert         = 0
0.00.262.881 I llm_load_print_meta: n_expert_used    = 0
0.00.262.881 I llm_load_print_meta: causal attn      = 1
0.00.262.882 I llm_load_print_meta: pooling type     = 0
0.00.262.882 I llm_load_print_meta: rope type        = 2
0.00.262.882 I llm_load_print_meta: rope scaling     = linear
0.00.262.884 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.884 I llm_load_print_meta: freq_scale_train = 1
0.00.262.885 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.885 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.885 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.885 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.886 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.886 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.887 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.887 I llm_load_print_meta: model type       = 2B
0.00.262.887 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.888 I llm_load_print_meta: model params     = 2.51 B
0.00.262.889 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.890 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.891 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.891 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.891 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.891 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.892 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.893 I llm_load_print_meta: max token length = 93
0.00.334.020 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.028 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.363 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.369 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.369 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.369 I llama_new_context_with_model: n_batch       = 2048
0.00.340.370 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.370 I llama_new_context_with_model: flash_attn    = 0
0.00.340.373 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.374 I llama_new_context_with_model: freq_scale    = 1
0.00.340.375 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.398 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.742 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.746 I llama_new_context_with_model: graph nodes  = 601
0.00.355.747 I llama_new_context_with_model: graph splits = 1
0.00.355.749 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.171 I main: llama threadpool init, n_threads = 4
0.00.442.188 I 
0.00.442.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.442.274 I 
0.00.442.324 I sampler seed: 2554859325
0.00.442.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.344 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.346 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.347 I 
 increasities with the rising popularity of artificial intelligence and machine learning.

**a) Explain the relationship between AI and machine learning.**

b) Discuss the implications

0.02.864.835 I llama_perf_sampler_print:    sampling time =       5.27 ms /    33 runs   (    0.16 ms per token,  6257.11 tokens per second)
0.02.864.838 I llama_perf_context_print:        load time =     441.65 ms
0.02.864.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.864.841 I llama_perf_context_print:        eval time =    2403.03 ms /    32 runs   (   75.09 ms per token,    13.32 tokens per second)
0.02.864.842 I llama_perf_context_print:       total time =    2422.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.177s
user	0m30.678s
sys	0m9.255s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4330 (7a20c287)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40372.79 ms
main:    total time = 40372.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.586 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.132 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.150 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.155 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.162 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.162 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.163 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.163 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.636 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.930 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.795 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.796 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.796 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.797 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.798 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.800 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.801 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.801 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.802 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.803 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.806 I llama_model_loader: - type  f32:   37 tensors
0.00.130.807 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.808 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.104 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.594 I llm_load_vocab: special tokens cache size = 5
0.00.264.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.402 I llm_load_print_meta: arch             = gemma
0.00.264.403 I llm_load_print_meta: vocab type       = SPM
0.00.264.404 I llm_load_print_meta: n_vocab          = 256000
0.00.264.404 I llm_load_print_meta: n_merges         = 0
0.00.264.406 I llm_load_print_meta: vocab_only       = 0
0.00.264.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.406 I llm_load_print_meta: n_embd           = 2048
0.00.264.407 I llm_load_print_meta: n_layer          = 18
0.00.264.418 I llm_load_print_meta: n_head           = 8
0.00.264.419 I llm_load_print_meta: n_head_kv        = 1
0.00.264.420 I llm_load_print_meta: n_rot            = 256
0.00.264.421 I llm_load_print_meta: n_swa            = 0
0.00.264.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.422 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.423 I llm_load_print_meta: n_gqa            = 8
0.00.264.424 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.425 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.426 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.427 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.428 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.430 I llm_load_print_meta: n_ff             = 16384
0.00.264.430 I llm_load_print_meta: n_expert         = 0
0.00.264.431 I llm_load_print_meta: n_expert_used    = 0
0.00.264.431 I llm_load_print_meta: causal attn      = 1
0.00.264.431 I llm_load_print_meta: pooling type     = 0
0.00.264.432 I llm_load_print_meta: rope type        = 2
0.00.264.432 I llm_load_print_meta: rope scaling     = linear
0.00.264.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.434 I llm_load_print_meta: freq_scale_train = 1
0.00.264.434 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.435 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.435 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.436 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.438 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.439 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.439 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.440 I llm_load_print_meta: model type       = 2B
0.00.264.440 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.448 I llm_load_print_meta: model params     = 2.51 B
0.00.264.450 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.450 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.451 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.451 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.452 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.453 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.454 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.455 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.455 I llm_load_print_meta: max token length = 93
0.00.324.930 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.935 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.936 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.936 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.937 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.937 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.961 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.967 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.967 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.968 I llama_new_context_with_model: n_batch       = 2048
0.00.329.968 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.969 I llama_new_context_with_model: flash_attn    = 0
0.00.329.971 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.972 I llama_new_context_with_model: freq_scale    = 1
0.00.329.973 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.013 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.027 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.115 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.376 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.382 I llama_new_context_with_model: graph nodes  = 601
0.00.345.383 I llama_new_context_with_model: graph splits = 1
0.00.345.385 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.706 I main: llama threadpool init, n_threads = 4
0.00.420.723 I 
0.00.420.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.798 I 
0.00.420.845 I sampler seed: 2173707130
0.00.420.856 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.868 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.872 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.872 I 
 seconded by the speaker.
I am not able to generate text that violates privacy or contains personally identifiable information. [end of text]


0.01.610.611 I llama_perf_sampler_print:    sampling time =       3.79 ms /    25 runs   (    0.15 ms per token,  6591.09 tokens per second)
0.01.610.613 I llama_perf_context_print:        load time =     419.89 ms
0.01.610.614 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.610.615 I llama_perf_context_print:        eval time =    1175.73 ms /    24 runs   (   48.99 ms per token,    20.41 tokens per second)
0.01.610.616 I llama_perf_context_print:       total time =    1189.91 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4330 (7a20c287)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40154.87 ms
main:    total time = 40154.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.523 I build: 4330 (7a20c287) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.021.112 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.143 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.147 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.148 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.149 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.152 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.178 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.329 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.330 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.332 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.339 I llama_model_loader: - type  f32:   37 tensors
0.00.130.339 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.340 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.872 I llm_load_vocab: special tokens cache size = 5
0.00.258.420 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.436 I llm_load_print_meta: arch             = gemma
0.00.258.437 I llm_load_print_meta: vocab type       = SPM
0.00.258.437 I llm_load_print_meta: n_vocab          = 256000
0.00.258.438 I llm_load_print_meta: n_merges         = 0
0.00.258.438 I llm_load_print_meta: vocab_only       = 0
0.00.258.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.438 I llm_load_print_meta: n_embd           = 2048
0.00.258.439 I llm_load_print_meta: n_layer          = 18
0.00.258.449 I llm_load_print_meta: n_head           = 8
0.00.258.450 I llm_load_print_meta: n_head_kv        = 1
0.00.258.451 I llm_load_print_meta: n_rot            = 256
0.00.258.451 I llm_load_print_meta: n_swa            = 0
0.00.258.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.452 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.452 I llm_load_print_meta: n_gqa            = 8
0.00.258.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.456 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.457 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.457 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.459 I llm_load_print_meta: n_ff             = 16384
0.00.258.459 I llm_load_print_meta: n_expert         = 0
0.00.258.459 I llm_load_print_meta: n_expert_used    = 0
0.00.258.459 I llm_load_print_meta: causal attn      = 1
0.00.258.460 I llm_load_print_meta: pooling type     = 0
0.00.258.460 I llm_load_print_meta: rope type        = 2
0.00.258.460 I llm_load_print_meta: rope scaling     = linear
0.00.258.462 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.463 I llm_load_print_meta: freq_scale_train = 1
0.00.258.463 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.463 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.463 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.464 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.464 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.464 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.465 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.465 I llm_load_print_meta: model type       = 2B
0.00.258.466 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.467 I llm_load_print_meta: model params     = 2.51 B
0.00.258.467 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.468 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.468 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.469 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.470 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.471 I llm_load_print_meta: max token length = 93
0.00.316.551 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.321.621 I llama_new_context_with_model: n_seq_max     = 1
0.00.321.627 I llama_new_context_with_model: n_ctx         = 4096
0.00.321.628 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.321.628 I llama_new_context_with_model: n_batch       = 2048
0.00.321.628 I llama_new_context_with_model: n_ubatch      = 512
0.00.321.629 I llama_new_context_with_model: flash_attn    = 0
0.00.321.631 I llama_new_context_with_model: freq_base     = 10000.0
0.00.321.632 I llama_new_context_with_model: freq_scale    = 1
0.00.321.633 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.408 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.336.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.336.509 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.689 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.337.693 I llama_new_context_with_model: graph nodes  = 601
0.00.337.694 I llama_new_context_with_model: graph splits = 1
0.00.337.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.236 I main: llama threadpool init, n_threads = 4
0.00.413.251 I 
0.00.413.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.413.328 I 
0.00.413.371 I sampler seed: 2183935341
0.00.413.381 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.387 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.388 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.388 I 
 seconally to the following sentences:

"The question of whether or not it is ethical to discriminate against individuals based on their sexual orientation is a complex and multifaceted

0.01.966.859 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6444.05 tokens per second)
0.01.966.862 I llama_perf_context_print:        load time =     412.50 ms
0.01.966.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.966.865 I llama_perf_context_print:        eval time =    1534.77 ms /    32 runs   (   47.96 ms per token,    20.85 tokens per second)
0.01.966.866 I llama_perf_context_print:       total time =    1553.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.872s
user	10m22.312s
sys	0m6.882s
