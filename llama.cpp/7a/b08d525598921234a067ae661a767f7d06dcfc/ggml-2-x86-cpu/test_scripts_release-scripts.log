+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.521 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.694 I main: llama backend init
0.00.000.703 I main: load the model and apply lora adapter, if any
0.00.021.438 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.448 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.456 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.465 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.466 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.467 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.468 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.469 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.473 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.100 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.102 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.103 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.104 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.105 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.108 I llama_model_loader: - type  f32:   37 tensors
0.00.132.109 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.989 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.404 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.013 I llm_load_vocab: special tokens cache size = 5
0.00.276.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.265 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.266 I llm_load_print_meta: arch             = gemma
0.00.276.266 I llm_load_print_meta: vocab type       = SPM
0.00.276.267 I llm_load_print_meta: n_vocab          = 256000
0.00.276.267 I llm_load_print_meta: n_merges         = 0
0.00.276.268 I llm_load_print_meta: vocab_only       = 0
0.00.276.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.268 I llm_load_print_meta: n_embd           = 2048
0.00.276.269 I llm_load_print_meta: n_layer          = 18
0.00.276.279 I llm_load_print_meta: n_head           = 8
0.00.276.280 I llm_load_print_meta: n_head_kv        = 1
0.00.276.281 I llm_load_print_meta: n_rot            = 256
0.00.276.281 I llm_load_print_meta: n_swa            = 0
0.00.276.281 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.281 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.282 I llm_load_print_meta: n_gqa            = 8
0.00.276.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.284 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.285 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.286 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.287 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.287 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.287 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.288 I llm_load_print_meta: n_ff             = 16384
0.00.276.289 I llm_load_print_meta: n_expert         = 0
0.00.276.289 I llm_load_print_meta: n_expert_used    = 0
0.00.276.289 I llm_load_print_meta: causal attn      = 1
0.00.276.289 I llm_load_print_meta: pooling type     = 0
0.00.276.289 I llm_load_print_meta: rope type        = 2
0.00.276.290 I llm_load_print_meta: rope scaling     = linear
0.00.276.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.292 I llm_load_print_meta: freq_scale_train = 1
0.00.276.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.293 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.294 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.295 I llm_load_print_meta: model type       = 2B
0.00.276.297 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.297 I llm_load_print_meta: model params     = 2.51 B
0.00.276.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.300 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.301 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.302 I llm_load_print_meta: max token length = 93
0.00.375.767 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.375.776 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.375.777 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.375.777 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.375.778 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.375.778 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.933 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.940 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.941 I llama_new_context_with_model: n_batch       = 2048
0.00.380.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.942 I llama_new_context_with_model: flash_attn    = 0
0.00.380.944 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.945 I llama_new_context_with_model: freq_scale    = 1
0.00.380.946 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.966 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.394.902 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.001 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.252 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.259 I llama_new_context_with_model: graph nodes  = 601
0.00.396.259 I llama_new_context_with_model: graph splits = 1
0.00.396.262 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.427 I main: llama threadpool init, n_threads = 4
0.00.481.443 I 
0.00.481.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.519 I 
0.00.481.553 I sampler seed: 527658667
0.00.481.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.576 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.579 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.579 I 
 increasements are a common way to improve the stability of a system. However, they can also introduce additional complexity and cost.

**Question:**

What are

0.02.730.984 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7010.83 tokens per second)
0.02.730.986 I llama_perf_context_print:        load time =     480.71 ms
0.02.730.987 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.989 I llama_perf_context_print:        eval time =    2230.05 ms /    32 runs   (   69.69 ms per token,    14.35 tokens per second)
0.02.730.989 I llama_perf_context_print:       total time =    2249.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.617 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.022.012 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.029 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.036 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.042 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.043 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.044 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.051 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.052 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.053 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.054 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.907 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.742 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.562 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.567 I llama_model_loader: - type  f32:   37 tensors
0.00.133.568 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.826 I llm_load_vocab: special tokens cache size = 5
0.00.264.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.873 I llm_load_print_meta: arch             = gemma
0.00.264.874 I llm_load_print_meta: vocab type       = SPM
0.00.264.874 I llm_load_print_meta: n_vocab          = 256000
0.00.264.875 I llm_load_print_meta: n_merges         = 0
0.00.264.875 I llm_load_print_meta: vocab_only       = 0
0.00.264.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.876 I llm_load_print_meta: n_embd           = 2048
0.00.264.876 I llm_load_print_meta: n_layer          = 18
0.00.264.887 I llm_load_print_meta: n_head           = 8
0.00.264.888 I llm_load_print_meta: n_head_kv        = 1
0.00.264.889 I llm_load_print_meta: n_rot            = 256
0.00.264.889 I llm_load_print_meta: n_swa            = 0
0.00.264.889 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.890 I llm_load_print_meta: n_gqa            = 8
0.00.264.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.893 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.894 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.894 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.896 I llm_load_print_meta: n_ff             = 16384
0.00.264.896 I llm_load_print_meta: n_expert         = 0
0.00.264.897 I llm_load_print_meta: n_expert_used    = 0
0.00.264.897 I llm_load_print_meta: causal attn      = 1
0.00.264.897 I llm_load_print_meta: pooling type     = 0
0.00.264.897 I llm_load_print_meta: rope type        = 2
0.00.264.898 I llm_load_print_meta: rope scaling     = linear
0.00.264.899 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.900 I llm_load_print_meta: freq_scale_train = 1
0.00.264.900 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.902 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.902 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.902 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.902 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.903 I llm_load_print_meta: model type       = 2B
0.00.264.904 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.905 I llm_load_print_meta: model params     = 2.51 B
0.00.264.906 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.907 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.908 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.909 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.910 I llm_load_print_meta: max token length = 93
0.00.360.391 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.698 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.705 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.705 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.705 I llama_new_context_with_model: n_batch       = 2048
0.00.365.706 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.706 I llama_new_context_with_model: flash_attn    = 0
0.00.365.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.710 I llama_new_context_with_model: freq_scale    = 1
0.00.365.711 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.732 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.380.454 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.468 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.557 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.785 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.792 I llama_new_context_with_model: graph nodes  = 601
0.00.381.792 I llama_new_context_with_model: graph splits = 1
0.00.381.794 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.381.795 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.307 I main: llama threadpool init, n_threads = 4
0.00.463.323 I 
0.00.463.402 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.406 I 
0.00.463.451 I sampler seed: 2789710817
0.00.463.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.467 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.468 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.468 I 
 maneuvously.

I cannot answer this question as it contains inappropriate and sexually suggestive language. [end of text]


0.01.825.736 I llama_perf_sampler_print:    sampling time =       3.00 ms /    21 runs   (    0.14 ms per token,  6988.35 tokens per second)
0.01.825.739 I llama_perf_context_print:        load time =     462.45 ms
0.01.825.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.825.743 I llama_perf_context_print:        eval time =    1349.83 ms /    20 runs   (   67.49 ms per token,    14.82 tokens per second)
0.01.825.744 I llama_perf_context_print:       total time =    1362.44 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.541 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.613 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.629 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.635 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.637 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.641 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.646 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.654 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.656 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.657 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.658 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.530 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.129 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.015 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.023 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.024 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.025 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.026 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.027 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.033 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.034 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.035 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.036 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.039 I llama_model_loader: - type  f32:   37 tensors
0.00.133.040 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.671 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.975 I llm_load_vocab: special tokens cache size = 5
0.00.286.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.964 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.965 I llm_load_print_meta: arch             = gemma
0.00.286.966 I llm_load_print_meta: vocab type       = SPM
0.00.286.967 I llm_load_print_meta: n_vocab          = 256000
0.00.286.967 I llm_load_print_meta: n_merges         = 0
0.00.286.968 I llm_load_print_meta: vocab_only       = 0
0.00.286.968 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.968 I llm_load_print_meta: n_embd           = 2048
0.00.286.968 I llm_load_print_meta: n_layer          = 18
0.00.286.978 I llm_load_print_meta: n_head           = 8
0.00.286.979 I llm_load_print_meta: n_head_kv        = 1
0.00.286.979 I llm_load_print_meta: n_rot            = 256
0.00.286.980 I llm_load_print_meta: n_swa            = 0
0.00.286.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.981 I llm_load_print_meta: n_gqa            = 8
0.00.286.982 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.983 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.984 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.985 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.986 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.987 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.987 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.988 I llm_load_print_meta: n_ff             = 16384
0.00.286.988 I llm_load_print_meta: n_expert         = 0
0.00.286.988 I llm_load_print_meta: n_expert_used    = 0
0.00.286.989 I llm_load_print_meta: causal attn      = 1
0.00.286.989 I llm_load_print_meta: pooling type     = 0
0.00.286.989 I llm_load_print_meta: rope type        = 2
0.00.286.989 I llm_load_print_meta: rope scaling     = linear
0.00.286.991 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.991 I llm_load_print_meta: freq_scale_train = 1
0.00.286.991 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.992 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.992 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.992 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.992 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.993 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.993 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.994 I llm_load_print_meta: model type       = 2B
0.00.286.995 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.996 I llm_load_print_meta: model params     = 2.51 B
0.00.286.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.997 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.998 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.998 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.000 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.000 I llm_load_print_meta: max token length = 93
0.00.363.571 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.363.578 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.579 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.363.580 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.363.580 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.581 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.760 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.767 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.768 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.768 I llama_new_context_with_model: n_batch       = 2048
0.00.368.769 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.769 I llama_new_context_with_model: flash_attn    = 0
0.00.368.772 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.773 I llama_new_context_with_model: freq_scale    = 1
0.00.368.773 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.794 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.383.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.446 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.534 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.758 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.764 I llama_new_context_with_model: graph nodes  = 601
0.00.384.764 I llama_new_context_with_model: graph splits = 1
0.00.384.767 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.767 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.817 I main: llama threadpool init, n_threads = 4
0.00.471.832 I 
0.00.471.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.925 I 
0.00.471.965 I sampler seed: 3513950699
0.00.471.976 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.987 I 
 increasements to the 2019 and 2020 election cycles.

**2019 Election Cycle**

* The influence of

0.02.755.199 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6829.47 tokens per second)
0.02.755.202 I llama_perf_context_print:        load time =     471.04 ms
0.02.755.203 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.755.205 I llama_perf_context_print:        eval time =    2263.85 ms /    32 runs   (   70.75 ms per token,    14.14 tokens per second)
0.02.755.205 I llama_perf_context_print:       total time =    2283.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.513 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.467 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.476 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.493 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.497 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.498 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.499 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.500 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.501 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.106 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.516 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.517 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.518 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.518 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.522 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.522 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.523 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.523 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.524 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.528 I llama_model_loader: - type  f32:   37 tensors
0.00.132.530 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.952 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.491 I llm_load_vocab: special tokens cache size = 5
0.00.271.581 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.598 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.599 I llm_load_print_meta: arch             = gemma
0.00.271.600 I llm_load_print_meta: vocab type       = SPM
0.00.271.600 I llm_load_print_meta: n_vocab          = 256000
0.00.271.601 I llm_load_print_meta: n_merges         = 0
0.00.271.601 I llm_load_print_meta: vocab_only       = 0
0.00.271.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.602 I llm_load_print_meta: n_embd           = 2048
0.00.271.602 I llm_load_print_meta: n_layer          = 18
0.00.271.614 I llm_load_print_meta: n_head           = 8
0.00.271.614 I llm_load_print_meta: n_head_kv        = 1
0.00.271.615 I llm_load_print_meta: n_rot            = 256
0.00.271.615 I llm_load_print_meta: n_swa            = 0
0.00.271.616 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.617 I llm_load_print_meta: n_gqa            = 8
0.00.271.619 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.622 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.624 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.625 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.631 I llm_load_print_meta: n_ff             = 16384
0.00.271.631 I llm_load_print_meta: n_expert         = 0
0.00.271.631 I llm_load_print_meta: n_expert_used    = 0
0.00.271.632 I llm_load_print_meta: causal attn      = 1
0.00.271.632 I llm_load_print_meta: pooling type     = 0
0.00.271.633 I llm_load_print_meta: rope type        = 2
0.00.271.633 I llm_load_print_meta: rope scaling     = linear
0.00.271.635 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.636 I llm_load_print_meta: freq_scale_train = 1
0.00.271.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.638 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.639 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.640 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.640 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.641 I llm_load_print_meta: model type       = 2B
0.00.271.644 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.645 I llm_load_print_meta: model params     = 2.51 B
0.00.271.647 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.652 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.654 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.655 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.656 I llm_load_print_meta: max token length = 93
0.00.342.803 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.810 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.263 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.270 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.271 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.271 I llama_new_context_with_model: n_batch       = 2048
0.00.348.272 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.273 I llama_new_context_with_model: flash_attn    = 0
0.00.348.276 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.277 I llama_new_context_with_model: freq_scale    = 1
0.00.348.278 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.304 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.363.257 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.272 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.378 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.659 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.665 I llama_new_context_with_model: graph nodes  = 601
0.00.364.666 I llama_new_context_with_model: graph splits = 1
0.00.364.668 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.471 I main: llama threadpool init, n_threads = 4
0.00.453.487 I 
0.00.453.572 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.575 I 
0.00.453.615 I sampler seed: 3209999781
0.00.453.627 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.631 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.632 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.633 I 
 increamically.

The answer is: rapidly.

The word "rapidly" means "in a rapid or quick manner." It is an adverb that indicates

0.02.882.273 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6352.26 tokens per second)
0.02.882.276 I llama_perf_context_print:        load time =     452.72 ms
0.02.882.277 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.882.278 I llama_perf_context_print:        eval time =    2409.14 ms /    32 runs   (   75.29 ms per token,    13.28 tokens per second)
0.02.882.279 I llama_perf_context_print:       total time =    2428.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.801s
user	0m36.167s
sys	0m9.411s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4368 (7ab08d52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40252.14 ms
main:    total time = 40252.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.157 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.341 I main: llama backend init
0.00.000.347 I main: load the model and apply lora adapter, if any
0.00.021.267 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.276 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.289 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.293 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.294 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.301 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.302 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.306 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.308 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.701 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.708 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.709 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.709 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.711 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.711 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.714 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.714 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.715 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.715 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.716 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.720 I llama_model_loader: - type  f32:   37 tensors
0.00.131.721 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.722 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.785 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.496 I llm_load_vocab: special tokens cache size = 5
0.00.286.093 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.114 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.115 I llm_load_print_meta: arch             = gemma
0.00.286.115 I llm_load_print_meta: vocab type       = SPM
0.00.286.116 I llm_load_print_meta: n_vocab          = 256000
0.00.286.116 I llm_load_print_meta: n_merges         = 0
0.00.286.117 I llm_load_print_meta: vocab_only       = 0
0.00.286.117 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.117 I llm_load_print_meta: n_embd           = 2048
0.00.286.118 I llm_load_print_meta: n_layer          = 18
0.00.286.130 I llm_load_print_meta: n_head           = 8
0.00.286.131 I llm_load_print_meta: n_head_kv        = 1
0.00.286.132 I llm_load_print_meta: n_rot            = 256
0.00.286.132 I llm_load_print_meta: n_swa            = 0
0.00.286.132 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.134 I llm_load_print_meta: n_gqa            = 8
0.00.286.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.138 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.139 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.139 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.140 I llm_load_print_meta: n_ff             = 16384
0.00.286.140 I llm_load_print_meta: n_expert         = 0
0.00.286.140 I llm_load_print_meta: n_expert_used    = 0
0.00.286.141 I llm_load_print_meta: causal attn      = 1
0.00.286.141 I llm_load_print_meta: pooling type     = 0
0.00.286.141 I llm_load_print_meta: rope type        = 2
0.00.286.141 I llm_load_print_meta: rope scaling     = linear
0.00.286.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.144 I llm_load_print_meta: freq_scale_train = 1
0.00.286.144 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.145 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.145 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.146 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.147 I llm_load_print_meta: model type       = 2B
0.00.286.148 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.149 I llm_load_print_meta: model params     = 2.51 B
0.00.286.150 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.151 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.153 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.153 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.154 I llm_load_print_meta: max token length = 93
0.00.345.542 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.549 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.550 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.550 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.551 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.551 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.645 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.651 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.651 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.652 I llama_new_context_with_model: n_batch       = 2048
0.00.350.652 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.653 I llama_new_context_with_model: flash_attn    = 0
0.00.350.655 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.656 I llama_new_context_with_model: freq_scale    = 1
0.00.350.657 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.675 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.364.856 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.868 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.959 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.197 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.204 I llama_new_context_with_model: graph nodes  = 601
0.00.366.205 I llama_new_context_with_model: graph splits = 1
0.00.366.207 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.207 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.035 I main: llama threadpool init, n_threads = 4
0.00.442.052 I 
0.00.442.126 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.442.130 I 
0.00.442.162 I sampler seed: 3967598340
0.00.442.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.185 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.188 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.188 I 
 increasities, and the resultant tension have caused widespread economic instability in the nation.

**Identify the cause of the instability.**

**Answer:**

The provided

0.02.044.272 I llama_perf_sampler_print:    sampling time =       5.42 ms /    33 runs   (    0.16 ms per token,  6093.06 tokens per second)
0.02.044.274 I llama_perf_context_print:        load time =     441.67 ms
0.02.044.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.044.276 I llama_perf_context_print:        eval time =    1582.16 ms /    32 runs   (   49.44 ms per token,    20.23 tokens per second)
0.02.044.277 I llama_perf_context_print:       total time =    1602.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4368 (7ab08d52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40232.08 ms
main:    total time = 40232.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.561 I build: 4368 (7ab08d52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.841 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.867 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.872 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.873 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.873 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.874 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.878 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.879 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.879 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.194 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.333 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.333 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.337 I llama_model_loader: - type  f32:   37 tensors
0.00.132.338 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.339 I llama_model_loader: - type q6_K:   19 tensors
0.00.222.959 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.302 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.893 I llm_load_vocab: special tokens cache size = 5
0.00.293.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.217 I llm_load_print_meta: arch             = gemma
0.00.293.217 I llm_load_print_meta: vocab type       = SPM
0.00.293.218 I llm_load_print_meta: n_vocab          = 256000
0.00.293.219 I llm_load_print_meta: n_merges         = 0
0.00.293.219 I llm_load_print_meta: vocab_only       = 0
0.00.293.220 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.220 I llm_load_print_meta: n_embd           = 2048
0.00.293.220 I llm_load_print_meta: n_layer          = 18
0.00.293.232 I llm_load_print_meta: n_head           = 8
0.00.293.233 I llm_load_print_meta: n_head_kv        = 1
0.00.293.233 I llm_load_print_meta: n_rot            = 256
0.00.293.233 I llm_load_print_meta: n_swa            = 0
0.00.293.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.235 I llm_load_print_meta: n_gqa            = 8
0.00.293.236 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.237 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.237 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.239 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.240 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.240 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.240 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.241 I llm_load_print_meta: n_ff             = 16384
0.00.293.241 I llm_load_print_meta: n_expert         = 0
0.00.293.242 I llm_load_print_meta: n_expert_used    = 0
0.00.293.242 I llm_load_print_meta: causal attn      = 1
0.00.293.242 I llm_load_print_meta: pooling type     = 0
0.00.293.242 I llm_load_print_meta: rope type        = 2
0.00.293.243 I llm_load_print_meta: rope scaling     = linear
0.00.293.244 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.245 I llm_load_print_meta: freq_scale_train = 1
0.00.293.245 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.245 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.246 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.246 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.246 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.247 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.247 I llm_load_print_meta: model type       = 2B
0.00.293.249 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.293.250 I llm_load_print_meta: model params     = 2.51 B
0.00.293.251 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.293.251 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.251 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.252 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.253 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.253 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.254 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.254 I llm_load_print_meta: max token length = 93
0.00.350.190 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.355.428 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.436 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.436 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.436 I llama_new_context_with_model: n_batch       = 2048
0.00.355.437 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.437 I llama_new_context_with_model: flash_attn    = 0
0.00.355.440 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.440 I llama_new_context_with_model: freq_scale    = 1
0.00.355.441 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.460 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.370.285 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.301 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.632 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.639 I llama_new_context_with_model: graph nodes  = 601
0.00.371.640 I llama_new_context_with_model: graph splits = 1
0.00.371.641 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.222 I main: llama threadpool init, n_threads = 4
0.00.446.239 I 
0.00.446.314 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.317 I 
0.00.446.351 I sampler seed: 1769548558
0.00.446.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.373 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.377 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.377 I 
 encompassing the entire spectrum of human emotion.

While I am unable to generate responses that claim to encompass the entirety of human emotion, I can offer a comprehensive

0.01.999.068 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6594.72 tokens per second)
0.01.999.070 I llama_perf_context_print:        load time =     445.44 ms
0.01.999.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.073 I llama_perf_context_print:        eval time =    1534.50 ms /    32 runs   (   47.95 ms per token,    20.85 tokens per second)
0.01.999.073 I llama_perf_context_print:       total time =    1552.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.366s
user	10m24.122s
sys	0m7.021s
