+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.001.819 I main: load the model and apply lora adapter, if any
0.00.022.094 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.166 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.174 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.176 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.186 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.190 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.190 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.192 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.418 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.471 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.349 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.356 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.357 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.358 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.359 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.361 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.362 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.362 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.364 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.365 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.368 I llama_model_loader: - type  f32:   37 tensors
0.00.132.370 I llama_model_loader: - type q8_0:  127 tensors
0.00.187.979 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.201.374 I llm_load_vocab: special tokens cache size = 5
0.00.222.374 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.388 I llm_load_print_meta: arch             = gemma
0.00.222.388 I llm_load_print_meta: vocab type       = SPM
0.00.222.389 I llm_load_print_meta: n_vocab          = 256000
0.00.222.390 I llm_load_print_meta: n_merges         = 0
0.00.222.390 I llm_load_print_meta: vocab_only       = 0
0.00.222.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.391 I llm_load_print_meta: n_embd           = 2048
0.00.222.391 I llm_load_print_meta: n_layer          = 18
0.00.222.402 I llm_load_print_meta: n_head           = 8
0.00.222.403 I llm_load_print_meta: n_head_kv        = 1
0.00.222.403 I llm_load_print_meta: n_rot            = 256
0.00.222.404 I llm_load_print_meta: n_swa            = 0
0.00.222.404 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.404 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.405 I llm_load_print_meta: n_gqa            = 8
0.00.222.406 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.407 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.409 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.410 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.410 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.411 I llm_load_print_meta: n_ff             = 16384
0.00.222.411 I llm_load_print_meta: n_expert         = 0
0.00.222.411 I llm_load_print_meta: n_expert_used    = 0
0.00.222.412 I llm_load_print_meta: causal attn      = 1
0.00.222.412 I llm_load_print_meta: pooling type     = 0
0.00.222.412 I llm_load_print_meta: rope type        = 2
0.00.222.413 I llm_load_print_meta: rope scaling     = linear
0.00.222.414 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.415 I llm_load_print_meta: freq_scale_train = 1
0.00.222.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.416 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.417 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.417 I llm_load_print_meta: model type       = 2B
0.00.222.418 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.419 I llm_load_print_meta: model params     = 2.51 B
0.00.222.419 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.420 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.420 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.421 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.421 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.421 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.422 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.422 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.222.423 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.222.423 I llm_load_print_meta: max token length = 93
0.00.222.446 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.113 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.324.122 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.324.123 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.324.123 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.324.124 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.324.125 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.329.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.174 I llama_new_context_with_model: n_batch    = 2048
0.00.329.175 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.175 I llama_new_context_with_model: flash_attn = 0
0.00.329.177 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.178 I llama_new_context_with_model: freq_scale = 1
0.00.358.442 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.358.458 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.358.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.404 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.412 I llama_new_context_with_model: graph nodes  = 601
0.00.359.412 I llama_new_context_with_model: graph splits = 1
0.00.359.414 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.377 I main: llama threadpool init, n_threads = 4
0.00.450.390 I 
0.00.450.460 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.464 I 
0.00.450.499 I sampler seed: 2613720337
0.00.450.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.510 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.450.511 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.511 I 
 increasively.

I am not sure what you are trying to ask. Please rephrase your question. [end of text]


0.01.996.925 I llama_perf_sampler_print:    sampling time =       3.26 ms /    23 runs   (    0.14 ms per token,  7046.57 tokens per second)
0.01.996.928 I llama_perf_context_print:        load time =     448.54 ms
0.01.996.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.932 I llama_perf_context_print:        eval time =    1533.43 ms /    22 runs   (   69.70 ms per token,    14.35 tokens per second)
0.01.996.932 I llama_perf_context_print:       total time =    1546.55 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.571 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.022.907 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.918 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.926 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.931 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.931 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.932 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.938 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.939 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.950 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.819 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.820 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.822 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.824 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.825 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.826 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.829 I llama_model_loader: - type  f32:   37 tensors
0.00.133.832 I llama_model_loader: - type q8_0:  127 tensors
0.00.192.071 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.205.800 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.206.558 I llm_load_vocab: special tokens cache size = 5
0.00.227.463 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.227.476 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.227.477 I llm_load_print_meta: arch             = gemma
0.00.227.477 I llm_load_print_meta: vocab type       = SPM
0.00.227.478 I llm_load_print_meta: n_vocab          = 256000
0.00.227.478 I llm_load_print_meta: n_merges         = 0
0.00.227.478 I llm_load_print_meta: vocab_only       = 0
0.00.227.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.227.479 I llm_load_print_meta: n_embd           = 2048
0.00.227.479 I llm_load_print_meta: n_layer          = 18
0.00.227.492 I llm_load_print_meta: n_head           = 8
0.00.227.493 I llm_load_print_meta: n_head_kv        = 1
0.00.227.494 I llm_load_print_meta: n_rot            = 256
0.00.227.494 I llm_load_print_meta: n_swa            = 0
0.00.227.495 I llm_load_print_meta: n_embd_head_k    = 256
0.00.227.495 I llm_load_print_meta: n_embd_head_v    = 256
0.00.227.496 I llm_load_print_meta: n_gqa            = 8
0.00.227.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.227.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.227.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.227.500 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.227.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.227.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.227.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.227.501 I llm_load_print_meta: n_ff             = 16384
0.00.227.502 I llm_load_print_meta: n_expert         = 0
0.00.227.502 I llm_load_print_meta: n_expert_used    = 0
0.00.227.502 I llm_load_print_meta: causal attn      = 1
0.00.227.503 I llm_load_print_meta: pooling type     = 0
0.00.227.503 I llm_load_print_meta: rope type        = 2
0.00.227.503 I llm_load_print_meta: rope scaling     = linear
0.00.227.504 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.227.505 I llm_load_print_meta: freq_scale_train = 1
0.00.227.505 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.227.506 I llm_load_print_meta: rope_finetuned   = unknown
0.00.227.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.227.506 I llm_load_print_meta: ssm_d_inner      = 0
0.00.227.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.227.507 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.227.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.227.507 I llm_load_print_meta: model type       = 2B
0.00.227.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.227.508 I llm_load_print_meta: model params     = 2.51 B
0.00.227.509 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.227.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.227.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.227.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.227.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.227.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.227.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.227.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.227.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.227.513 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.227.513 I llm_load_print_meta: max token length = 93
0.00.227.535 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.323.128 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.328.094 I llama_new_context_with_model: n_ctx      = 8192
0.00.328.100 I llama_new_context_with_model: n_batch    = 2048
0.00.328.100 I llama_new_context_with_model: n_ubatch   = 512
0.00.328.101 I llama_new_context_with_model: flash_attn = 0
0.00.328.103 I llama_new_context_with_model: freq_base  = 10000.0
0.00.328.104 I llama_new_context_with_model: freq_scale = 1
0.00.357.819 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.835 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.785 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.792 I llama_new_context_with_model: graph nodes  = 601
0.00.358.792 I llama_new_context_with_model: graph splits = 1
0.00.358.793 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.302 I main: llama threadpool init, n_threads = 4
0.00.447.315 I 
0.00.447.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.387 I 
0.00.447.422 I sampler seed: 4245513191
0.00.447.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.431 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.432 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.432 I 
 increasities in the realm of artificial intelligence and machine learning?

**1. Explain the concept of a catastrophic failure in AI.**

**2. Discuss the

0.02.638.693 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6318.21 tokens per second)
0.02.638.695 I llama_perf_context_print:        load time =     445.39 ms
0.02.638.696 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.638.698 I llama_perf_context_print:        eval time =    2171.74 ms /    32 runs   (   67.87 ms per token,    14.73 tokens per second)
0.02.638.698 I llama_perf_context_print:       total time =    2191.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.845 I main: load the model and apply lora adapter, if any
0.00.021.969 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.016 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.033 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.034 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.034 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.050 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.555 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.681 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.688 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.688 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.689 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.690 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.690 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.693 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.693 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.695 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.696 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.700 I llama_model_loader: - type  f32:   37 tensors
0.00.132.703 I llama_model_loader: - type q8_0:  127 tensors
0.00.189.279 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.203.626 I llm_load_vocab: special tokens cache size = 5
0.00.224.688 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.700 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.701 I llm_load_print_meta: arch             = gemma
0.00.224.701 I llm_load_print_meta: vocab type       = SPM
0.00.224.702 I llm_load_print_meta: n_vocab          = 256000
0.00.224.702 I llm_load_print_meta: n_merges         = 0
0.00.224.703 I llm_load_print_meta: vocab_only       = 0
0.00.224.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.703 I llm_load_print_meta: n_embd           = 2048
0.00.224.703 I llm_load_print_meta: n_layer          = 18
0.00.224.714 I llm_load_print_meta: n_head           = 8
0.00.224.715 I llm_load_print_meta: n_head_kv        = 1
0.00.224.715 I llm_load_print_meta: n_rot            = 256
0.00.224.716 I llm_load_print_meta: n_swa            = 0
0.00.224.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.716 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.717 I llm_load_print_meta: n_gqa            = 8
0.00.224.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.719 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.720 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.721 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.722 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.722 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.723 I llm_load_print_meta: n_ff             = 16384
0.00.224.724 I llm_load_print_meta: n_expert         = 0
0.00.224.724 I llm_load_print_meta: n_expert_used    = 0
0.00.224.724 I llm_load_print_meta: causal attn      = 1
0.00.224.725 I llm_load_print_meta: pooling type     = 0
0.00.224.725 I llm_load_print_meta: rope type        = 2
0.00.224.725 I llm_load_print_meta: rope scaling     = linear
0.00.224.727 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.728 I llm_load_print_meta: freq_scale_train = 1
0.00.224.728 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.728 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.729 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.729 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.729 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.729 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.730 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.730 I llm_load_print_meta: model type       = 2B
0.00.224.731 I llm_load_print_meta: model ftype      = Q8_0
0.00.224.732 I llm_load_print_meta: model params     = 2.51 B
0.00.224.732 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.224.733 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.733 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.734 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.734 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.735 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.735 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.224.735 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.224.736 I llm_load_print_meta: max token length = 93
0.00.224.759 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.299.280 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.299.288 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.299.289 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.299.290 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.299.290 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.299.291 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.304.356 I llama_new_context_with_model: n_ctx      = 8192
0.00.304.362 I llama_new_context_with_model: n_batch    = 2048
0.00.304.362 I llama_new_context_with_model: n_ubatch   = 512
0.00.304.363 I llama_new_context_with_model: flash_attn = 0
0.00.304.365 I llama_new_context_with_model: freq_base  = 10000.0
0.00.304.365 I llama_new_context_with_model: freq_scale = 1
0.00.333.370 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.333.386 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.333.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.334.377 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.334.385 I llama_new_context_with_model: graph nodes  = 601
0.00.334.385 I llama_new_context_with_model: graph splits = 1
0.00.334.388 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.105 I main: llama threadpool init, n_threads = 4
0.00.424.116 I 
0.00.424.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.190 I 
0.00.424.224 I sampler seed: 1459630392
0.00.424.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.236 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.424.238 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.238 I 
 increasels and all that jazz!

This is a riddle and I need to come up with a solution.

Riddle:
I have a neck,

0.02.708.372 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6382.98 tokens per second)
0.02.708.375 I llama_perf_context_print:        load time =     422.24 ms
0.02.708.376 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.377 I llama_perf_context_print:        eval time =    2265.18 ms /    32 runs   (   70.79 ms per token,    14.13 tokens per second)
0.02.708.378 I llama_perf_context_print:       total time =    2284.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.021.806 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.850 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.857 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.864 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.868 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.868 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.869 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.869 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.870 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.875 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.876 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.877 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.877 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.069 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.221 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.227 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.228 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.229 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.230 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.230 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.233 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.234 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.235 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.236 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.239 I llama_model_loader: - type  f32:   37 tensors
0.00.133.242 I llama_model_loader: - type q8_0:  127 tensors
0.00.188.823 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.071 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.202.779 I llm_load_vocab: special tokens cache size = 5
0.00.223.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.223.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.223.813 I llm_load_print_meta: arch             = gemma
0.00.223.814 I llm_load_print_meta: vocab type       = SPM
0.00.223.815 I llm_load_print_meta: n_vocab          = 256000
0.00.223.815 I llm_load_print_meta: n_merges         = 0
0.00.223.815 I llm_load_print_meta: vocab_only       = 0
0.00.223.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.223.816 I llm_load_print_meta: n_embd           = 2048
0.00.223.816 I llm_load_print_meta: n_layer          = 18
0.00.223.828 I llm_load_print_meta: n_head           = 8
0.00.223.829 I llm_load_print_meta: n_head_kv        = 1
0.00.223.830 I llm_load_print_meta: n_rot            = 256
0.00.223.830 I llm_load_print_meta: n_swa            = 0
0.00.223.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.223.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.223.831 I llm_load_print_meta: n_gqa            = 8
0.00.223.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.223.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.223.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.223.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.223.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.223.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.223.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.223.838 I llm_load_print_meta: n_ff             = 16384
0.00.223.838 I llm_load_print_meta: n_expert         = 0
0.00.223.838 I llm_load_print_meta: n_expert_used    = 0
0.00.223.839 I llm_load_print_meta: causal attn      = 1
0.00.223.839 I llm_load_print_meta: pooling type     = 0
0.00.223.840 I llm_load_print_meta: rope type        = 2
0.00.223.840 I llm_load_print_meta: rope scaling     = linear
0.00.223.842 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.223.843 I llm_load_print_meta: freq_scale_train = 1
0.00.223.843 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.223.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.223.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.223.844 I llm_load_print_meta: ssm_d_inner      = 0
0.00.223.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.223.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.223.845 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.223.845 I llm_load_print_meta: model type       = 2B
0.00.223.846 I llm_load_print_meta: model ftype      = Q8_0
0.00.223.847 I llm_load_print_meta: model params     = 2.51 B
0.00.223.848 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.223.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.223.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.223.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.223.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.223.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.223.850 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.223.850 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.223.850 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.223.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.223.851 I llm_load_print_meta: max token length = 93
0.00.223.875 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.294.199 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.294.207 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.299.242 I llama_new_context_with_model: n_ctx      = 8192
0.00.299.248 I llama_new_context_with_model: n_batch    = 2048
0.00.299.248 I llama_new_context_with_model: n_ubatch   = 512
0.00.299.249 I llama_new_context_with_model: flash_attn = 0
0.00.299.251 I llama_new_context_with_model: freq_base  = 10000.0
0.00.299.253 I llama_new_context_with_model: freq_scale = 1
0.00.329.194 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.329.208 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.329.307 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.330.180 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.330.188 I llama_new_context_with_model: graph nodes  = 601
0.00.330.188 I llama_new_context_with_model: graph splits = 1
0.00.330.190 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.984 I main: llama threadpool init, n_threads = 4
0.00.431.998 I 
0.00.432.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.074 I 
0.00.432.109 I sampler seed: 3431575759
0.00.432.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.119 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.432.120 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.120 I 
 increasities to a question about the nature of consciousness.

**Question:** What is the relationship between consciousness and the brain?

**Answer:** Consciousness is intric

0.02.830.897 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6330.33 tokens per second)
0.02.830.899 I llama_perf_context_print:        load time =     430.10 ms
0.02.830.900 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.830.902 I llama_perf_context_print:        eval time =    2380.00 ms /    32 runs   (   74.38 ms per token,    13.45 tokens per second)
0.02.830.902 I llama_perf_context_print:       total time =    2398.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.638s
user	0m36.371s
sys	0m9.417s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3865 (04ef648f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32011.14 ms
main:    total time = 32011.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.559 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.284 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.347 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.350 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.354 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.354 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.355 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.356 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.359 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.360 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.360 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.361 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.951 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.827 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.828 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.832 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.833 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.833 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.834 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.838 I llama_model_loader: - type  f32:   37 tensors
0.00.132.841 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.842 I llama_model_loader: - type q6_K:   19 tensors
0.00.187.379 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.241 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.200.891 I llm_load_vocab: special tokens cache size = 5
0.00.221.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.730 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.730 I llm_load_print_meta: arch             = gemma
0.00.221.731 I llm_load_print_meta: vocab type       = SPM
0.00.221.731 I llm_load_print_meta: n_vocab          = 256000
0.00.221.731 I llm_load_print_meta: n_merges         = 0
0.00.221.732 I llm_load_print_meta: vocab_only       = 0
0.00.221.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.733 I llm_load_print_meta: n_embd           = 2048
0.00.221.733 I llm_load_print_meta: n_layer          = 18
0.00.221.745 I llm_load_print_meta: n_head           = 8
0.00.221.746 I llm_load_print_meta: n_head_kv        = 1
0.00.221.746 I llm_load_print_meta: n_rot            = 256
0.00.221.747 I llm_load_print_meta: n_swa            = 0
0.00.221.747 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.748 I llm_load_print_meta: n_gqa            = 8
0.00.221.749 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.754 I llm_load_print_meta: n_ff             = 16384
0.00.221.755 I llm_load_print_meta: n_expert         = 0
0.00.221.755 I llm_load_print_meta: n_expert_used    = 0
0.00.221.756 I llm_load_print_meta: causal attn      = 1
0.00.221.756 I llm_load_print_meta: pooling type     = 0
0.00.221.756 I llm_load_print_meta: rope type        = 2
0.00.221.757 I llm_load_print_meta: rope scaling     = linear
0.00.221.758 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.759 I llm_load_print_meta: freq_scale_train = 1
0.00.221.759 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.761 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.761 I llm_load_print_meta: model type       = 2B
0.00.221.762 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.221.763 I llm_load_print_meta: model params     = 2.51 B
0.00.221.763 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.221.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.765 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.766 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.767 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.221.767 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.221.767 I llm_load_print_meta: max token length = 93
0.00.221.802 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.280.384 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.280.390 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.280.391 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.280.391 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.280.392 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.280.392 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.285.466 I llama_new_context_with_model: n_ctx      = 8192
0.00.285.472 I llama_new_context_with_model: n_batch    = 2048
0.00.285.472 I llama_new_context_with_model: n_ubatch   = 512
0.00.285.473 I llama_new_context_with_model: flash_attn = 0
0.00.285.475 I llama_new_context_with_model: freq_base  = 10000.0
0.00.285.476 I llama_new_context_with_model: freq_scale = 1
0.00.315.918 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.932 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.316.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.897 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.904 I llama_new_context_with_model: graph nodes  = 601
0.00.316.905 I llama_new_context_with_model: graph splits = 1
0.00.316.907 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.398.738 I main: llama threadpool init, n_threads = 4
0.00.398.750 I 
0.00.398.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.398.827 I 
0.00.398.862 I sampler seed: 1444264521
0.00.398.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.398.879 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.398.879 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.398.880 I 
 affors to promote the use of electric vehicles.

**Question:** What is the main idea of the text?

**Options:**

A. Electric vehicles

0.01.990.114 I llama_perf_sampler_print:    sampling time =       5.93 ms /    33 runs   (    0.18 ms per token,  5566.80 tokens per second)
0.01.990.117 I llama_perf_context_print:        load time =     396.85 ms
0.01.990.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.990.119 I llama_perf_context_print:        eval time =    1570.81 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.01.990.119 I llama_perf_context_print:       total time =    1591.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3865 (04ef648f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32044.15 ms
main:    total time = 32044.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 3865 (04ef648f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.875 I main: load the model and apply lora adapter, if any
0.00.022.467 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.479 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.486 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.489 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.491 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.493 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.497 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.498 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.499 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.094 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.815 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.733 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.740 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.741 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.742 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.742 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.743 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.744 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.746 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.747 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.751 I llama_model_loader: - type  f32:   37 tensors
0.00.133.754 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.755 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.882 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.211.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.212.172 I llm_load_vocab: special tokens cache size = 5
0.00.233.370 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.233.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.233.385 I llm_load_print_meta: arch             = gemma
0.00.233.386 I llm_load_print_meta: vocab type       = SPM
0.00.233.386 I llm_load_print_meta: n_vocab          = 256000
0.00.233.387 I llm_load_print_meta: n_merges         = 0
0.00.233.387 I llm_load_print_meta: vocab_only       = 0
0.00.233.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.233.388 I llm_load_print_meta: n_embd           = 2048
0.00.233.388 I llm_load_print_meta: n_layer          = 18
0.00.233.401 I llm_load_print_meta: n_head           = 8
0.00.233.402 I llm_load_print_meta: n_head_kv        = 1
0.00.233.402 I llm_load_print_meta: n_rot            = 256
0.00.233.402 I llm_load_print_meta: n_swa            = 0
0.00.233.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.233.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.233.404 I llm_load_print_meta: n_gqa            = 8
0.00.233.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.233.406 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.233.407 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.233.408 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.233.409 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.233.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.233.410 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.233.411 I llm_load_print_meta: n_ff             = 16384
0.00.233.411 I llm_load_print_meta: n_expert         = 0
0.00.233.411 I llm_load_print_meta: n_expert_used    = 0
0.00.233.411 I llm_load_print_meta: causal attn      = 1
0.00.233.412 I llm_load_print_meta: pooling type     = 0
0.00.233.412 I llm_load_print_meta: rope type        = 2
0.00.233.412 I llm_load_print_meta: rope scaling     = linear
0.00.233.414 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.233.414 I llm_load_print_meta: freq_scale_train = 1
0.00.233.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.233.415 I llm_load_print_meta: rope_finetuned   = unknown
0.00.233.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.233.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.233.416 I llm_load_print_meta: ssm_d_state      = 0
0.00.233.416 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.233.417 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.233.417 I llm_load_print_meta: model type       = 2B
0.00.233.418 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.233.418 I llm_load_print_meta: model params     = 2.51 B
0.00.233.419 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.233.419 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.233.420 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.233.420 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.233.420 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.233.421 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.233.421 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.233.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.233.422 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.233.422 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.233.423 I llm_load_print_meta: max token length = 93
0.00.233.451 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.019 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.297.021 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.027 I llama_new_context_with_model: n_batch    = 2048
0.00.297.027 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.028 I llama_new_context_with_model: flash_attn = 0
0.00.297.029 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.030 I llama_new_context_with_model: freq_scale = 1
0.00.326.097 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.112 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.135 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.144 I llama_new_context_with_model: graph nodes  = 601
0.00.327.144 I llama_new_context_with_model: graph splits = 1
0.00.327.146 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.507 I main: llama threadpool init, n_threads = 4
0.00.409.519 I 
0.00.409.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.409.598 I 
0.00.409.634 I sampler seed: 2029463966
0.00.409.643 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.645 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.409.646 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.646 I 
 increasels and their origins in the ocean.

**Introduction:**

The ocean holds a vast array of strange and fascinating creatures, some with unique adaptations that allow

0.01.986.029 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6773.40 tokens per second)
0.01.986.031 I llama_perf_context_print:        load time =     407.61 ms
0.01.986.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.034 I llama_perf_context_print:        eval time =    1558.78 ms /    32 runs   (   48.71 ms per token,    20.53 tokens per second)
0.01.986.034 I llama_perf_context_print:       total time =    1576.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.811s
user	8m14.383s
sys	0m6.902s
