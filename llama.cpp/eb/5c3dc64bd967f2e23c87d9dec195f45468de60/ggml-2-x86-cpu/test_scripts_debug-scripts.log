+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.679 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.693 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.790 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.803 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.805 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.813 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.819 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.820 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.823 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.824 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.834 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.836 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.837 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.839 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.603 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.970 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.570 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.580 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.596 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.601 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.603 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.610 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.612 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.614 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.616 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.625 I llama_model_loader: - type  f32:   37 tensors
0.00.358.630 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.775 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.677.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.678.071 I llm_load_vocab: special tokens cache size = 5
0.00.884.492 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.884.564 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.884.565 I llm_load_print_meta: arch             = gemma
0.00.884.565 I llm_load_print_meta: vocab type       = SPM
0.00.884.566 I llm_load_print_meta: n_vocab          = 256000
0.00.884.568 I llm_load_print_meta: n_merges         = 0
0.00.884.569 I llm_load_print_meta: vocab_only       = 0
0.00.884.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.884.570 I llm_load_print_meta: n_embd           = 2048
0.00.884.570 I llm_load_print_meta: n_layer          = 18
0.00.884.633 I llm_load_print_meta: n_head           = 8
0.00.884.640 I llm_load_print_meta: n_head_kv        = 1
0.00.884.641 I llm_load_print_meta: n_rot            = 256
0.00.884.641 I llm_load_print_meta: n_swa            = 0
0.00.884.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.884.642 I llm_load_print_meta: n_embd_head_v    = 256
0.00.884.646 I llm_load_print_meta: n_gqa            = 8
0.00.884.651 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.884.656 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.884.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.884.660 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.884.660 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.884.662 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.884.662 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.884.667 I llm_load_print_meta: n_ff             = 16384
0.00.884.668 I llm_load_print_meta: n_expert         = 0
0.00.884.668 I llm_load_print_meta: n_expert_used    = 0
0.00.884.670 I llm_load_print_meta: causal attn      = 1
0.00.884.670 I llm_load_print_meta: pooling type     = 0
0.00.884.670 I llm_load_print_meta: rope type        = 2
0.00.884.671 I llm_load_print_meta: rope scaling     = linear
0.00.884.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.884.673 I llm_load_print_meta: freq_scale_train = 1
0.00.884.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.884.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.884.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.884.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.884.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.884.682 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.884.682 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.884.683 I llm_load_print_meta: model type       = 2B
0.00.884.684 I llm_load_print_meta: model ftype      = Q8_0
0.00.884.696 I llm_load_print_meta: model params     = 2.51 B
0.00.884.697 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.884.698 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.884.699 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.884.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.884.700 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.884.700 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.884.701 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.884.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.884.708 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.884.709 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.884.709 I llm_load_print_meta: max token length = 93
0.00.985.410 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.985.416 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.985.417 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.985.418 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.985.419 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.985.419 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.991.469 I llama_new_context_with_model: n_seq_max     = 1
0.00.991.477 I llama_new_context_with_model: n_ctx         = 4096
0.00.991.478 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.991.478 I llama_new_context_with_model: n_batch       = 2048
0.00.991.479 I llama_new_context_with_model: n_ubatch      = 512
0.00.991.479 I llama_new_context_with_model: flash_attn    = 0
0.00.991.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.991.483 I llama_new_context_with_model: freq_scale    = 1
0.00.991.484 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.991.575 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.006.722 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.006.763 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.006.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.009.545 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.009.549 I llama_new_context_with_model: graph nodes  = 601
0.01.009.550 I llama_new_context_with_model: graph splits = 1
0.01.009.575 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.009.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.621.363 I main: llama threadpool init, n_threads = 4
0.01.621.380 I 
0.01.621.513 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.621.518 I 
0.01.621.756 I sampler seed: 2024085271
0.01.621.771 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.621.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.621.784 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.621.784 I 
 seconde,
I am writing to express my concern regarding the ongoing political tensions and divisions within our community.

I believe it is imperative to address these issues

0.15.171.628 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.64 tokens per second)
0.15.171.632 I llama_perf_context_print:        load time =    1620.40 ms
0.15.171.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.171.645 I llama_perf_context_print:        eval time =   13459.77 ms /    32 runs   (  420.62 ms per token,     2.38 tokens per second)
0.15.171.647 I llama_perf_context_print:       total time =   13550.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.228 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.334 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.354 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.361 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.369 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.374 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.379 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.387 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.393 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.400 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.630 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.282 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.294 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.296 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.300 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.301 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.306 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.307 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.309 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.310 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.358.312 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.320 I llama_model_loader: - type  f32:   37 tensors
0.00.358.322 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.394 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.431 I llm_load_vocab: special tokens cache size = 5
0.00.853.604 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.680 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.681 I llm_load_print_meta: arch             = gemma
0.00.853.682 I llm_load_print_meta: vocab type       = SPM
0.00.853.682 I llm_load_print_meta: n_vocab          = 256000
0.00.853.684 I llm_load_print_meta: n_merges         = 0
0.00.853.685 I llm_load_print_meta: vocab_only       = 0
0.00.853.685 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.686 I llm_load_print_meta: n_embd           = 2048
0.00.853.686 I llm_load_print_meta: n_layer          = 18
0.00.853.751 I llm_load_print_meta: n_head           = 8
0.00.853.759 I llm_load_print_meta: n_head_kv        = 1
0.00.853.760 I llm_load_print_meta: n_rot            = 256
0.00.853.761 I llm_load_print_meta: n_swa            = 0
0.00.853.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.768 I llm_load_print_meta: n_gqa            = 8
0.00.853.772 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.778 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.779 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.781 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.784 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.788 I llm_load_print_meta: n_ff             = 16384
0.00.853.789 I llm_load_print_meta: n_expert         = 0
0.00.853.790 I llm_load_print_meta: n_expert_used    = 0
0.00.853.790 I llm_load_print_meta: causal attn      = 1
0.00.853.791 I llm_load_print_meta: pooling type     = 0
0.00.853.792 I llm_load_print_meta: rope type        = 2
0.00.853.792 I llm_load_print_meta: rope scaling     = linear
0.00.853.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.800 I llm_load_print_meta: freq_scale_train = 1
0.00.853.801 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.801 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.801 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.806 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.807 I llm_load_print_meta: model type       = 2B
0.00.853.807 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.808 I llm_load_print_meta: model params     = 2.51 B
0.00.853.809 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.809 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.810 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.811 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.811 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.819 I llm_load_print_meta: max token length = 93
0.00.949.442 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.955.857 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.868 I llama_new_context_with_model: n_batch       = 2048
0.00.955.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.868 I llama_new_context_with_model: flash_attn    = 0
0.00.955.873 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.874 I llama_new_context_with_model: freq_scale    = 1
0.00.955.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.979 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.971.702 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.745 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.971.869 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.470 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.474 I llama_new_context_with_model: graph nodes  = 601
0.00.974.475 I llama_new_context_with_model: graph splits = 1
0.00.974.499 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.974.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.474 I main: llama threadpool init, n_threads = 4
0.01.583.490 I 
0.01.583.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.583.633 I 
0.01.583.871 I sampler seed: 1871345779
0.01.583.884 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.583.895 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.583.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.583.896 I 
 increasities and a seductive whisper in the wind. [end of text]


0.06.246.597 I llama_perf_sampler_print:    sampling time =      17.21 ms /    12 runs   (    1.43 ms per token,   697.23 tokens per second)
0.06.246.600 I llama_perf_context_print:        load time =    1582.52 ms
0.06.246.602 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.246.604 I llama_perf_context_print:        eval time =    4630.45 ms /    11 runs   (  420.95 ms per token,     2.38 tokens per second)
0.06.246.604 I llama_perf_context_print:       total time =    4663.13 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.722 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.935 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.023.837 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.852 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.996 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.004 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.006 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.017 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.018 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.026 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.028 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.033 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.258.290 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.364.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.390.876 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.390.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.390.893 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.390.895 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.390.896 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.390.897 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.390.898 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.390.902 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.390.903 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.390.905 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.390.906 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.390.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.390.918 I llama_model_loader: - type  f32:   37 tensors
0.00.390.921 I llama_model_loader: - type q8_0:  127 tensors
0.00.639.699 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.713.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.714.071 I llm_load_vocab: special tokens cache size = 5
0.00.903.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.903.188 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.903.189 I llm_load_print_meta: arch             = gemma
0.00.903.190 I llm_load_print_meta: vocab type       = SPM
0.00.903.191 I llm_load_print_meta: n_vocab          = 256000
0.00.903.193 I llm_load_print_meta: n_merges         = 0
0.00.903.194 I llm_load_print_meta: vocab_only       = 0
0.00.903.195 I llm_load_print_meta: n_ctx_train      = 8192
0.00.903.195 I llm_load_print_meta: n_embd           = 2048
0.00.903.195 I llm_load_print_meta: n_layer          = 18
0.00.903.260 I llm_load_print_meta: n_head           = 8
0.00.903.267 I llm_load_print_meta: n_head_kv        = 1
0.00.903.268 I llm_load_print_meta: n_rot            = 256
0.00.903.268 I llm_load_print_meta: n_swa            = 0
0.00.903.269 I llm_load_print_meta: n_embd_head_k    = 256
0.00.903.269 I llm_load_print_meta: n_embd_head_v    = 256
0.00.903.275 I llm_load_print_meta: n_gqa            = 8
0.00.903.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.903.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.903.292 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.903.295 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.903.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.903.296 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.903.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.903.308 I llm_load_print_meta: n_ff             = 16384
0.00.903.312 I llm_load_print_meta: n_expert         = 0
0.00.903.313 I llm_load_print_meta: n_expert_used    = 0
0.00.903.313 I llm_load_print_meta: causal attn      = 1
0.00.903.314 I llm_load_print_meta: pooling type     = 0
0.00.903.314 I llm_load_print_meta: rope type        = 2
0.00.903.315 I llm_load_print_meta: rope scaling     = linear
0.00.903.317 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.903.318 I llm_load_print_meta: freq_scale_train = 1
0.00.903.318 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.903.319 I llm_load_print_meta: rope_finetuned   = unknown
0.00.903.320 I llm_load_print_meta: ssm_d_conv       = 0
0.00.903.321 I llm_load_print_meta: ssm_d_inner      = 0
0.00.903.322 I llm_load_print_meta: ssm_d_state      = 0
0.00.903.323 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.903.324 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.903.324 I llm_load_print_meta: model type       = 2B
0.00.903.328 I llm_load_print_meta: model ftype      = Q8_0
0.00.903.329 I llm_load_print_meta: model params     = 2.51 B
0.00.903.330 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.903.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.903.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.903.332 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.903.333 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.903.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.903.335 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.903.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.903.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.903.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.903.348 I llm_load_print_meta: max token length = 93
0.00.982.355 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.982.367 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.982.368 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.982.369 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.982.370 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.982.370 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.988.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.988.773 I llama_new_context_with_model: n_ctx         = 4096
0.00.988.774 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.988.774 I llama_new_context_with_model: n_batch       = 2048
0.00.988.774 I llama_new_context_with_model: n_ubatch      = 512
0.00.988.775 I llama_new_context_with_model: flash_attn    = 0
0.00.988.779 I llama_new_context_with_model: freq_base     = 10000.0
0.00.988.780 I llama_new_context_with_model: freq_scale    = 1
0.00.988.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.988.879 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.004.054 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.004.096 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.004.228 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.006.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.006.978 I llama_new_context_with_model: graph nodes  = 601
0.01.006.978 I llama_new_context_with_model: graph splits = 1
0.01.007.003 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.007.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.616.252 I main: llama threadpool init, n_threads = 4
0.01.616.272 I 
0.01.616.402 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.616.407 I 
0.01.616.648 I sampler seed: 2263924641
0.01.616.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.616.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.616.680 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.616.681 I 
 seconally. [end of text]


0.03.307.101 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   784.93 tokens per second)
0.03.307.103 I llama_perf_context_print:        load time =    1615.15 ms
0.03.307.105 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.307.106 I llama_perf_context_print:        eval time =    1677.58 ms /     4 runs   (  419.40 ms per token,     2.38 tokens per second)
0.03.307.121 I llama_perf_context_print:       total time =    1690.86 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.704 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.956 I main: llama backend init
0.00.000.965 I main: load the model and apply lora adapter, if any
0.00.023.622 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.781 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.783 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.793 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.795 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.807 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.814 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.819 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.241.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.344.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.369.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.369.655 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.369.656 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.369.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.369.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.369.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.369.662 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.369.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.369.667 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.369.669 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.369.670 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.369.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.369.680 I llama_model_loader: - type  f32:   37 tensors
0.00.369.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.606.720 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.675.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.676.246 I llm_load_vocab: special tokens cache size = 5
0.00.877.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.877.951 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.877.952 I llm_load_print_meta: arch             = gemma
0.00.877.953 I llm_load_print_meta: vocab type       = SPM
0.00.877.953 I llm_load_print_meta: n_vocab          = 256000
0.00.877.956 I llm_load_print_meta: n_merges         = 0
0.00.877.957 I llm_load_print_meta: vocab_only       = 0
0.00.877.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.877.957 I llm_load_print_meta: n_embd           = 2048
0.00.877.958 I llm_load_print_meta: n_layer          = 18
0.00.878.027 I llm_load_print_meta: n_head           = 8
0.00.878.034 I llm_load_print_meta: n_head_kv        = 1
0.00.878.035 I llm_load_print_meta: n_rot            = 256
0.00.878.035 I llm_load_print_meta: n_swa            = 0
0.00.878.036 I llm_load_print_meta: n_embd_head_k    = 256
0.00.878.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.878.041 I llm_load_print_meta: n_gqa            = 8
0.00.878.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.878.051 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.878.052 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.878.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.878.054 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.878.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.878.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.878.059 I llm_load_print_meta: n_ff             = 16384
0.00.878.060 I llm_load_print_meta: n_expert         = 0
0.00.878.061 I llm_load_print_meta: n_expert_used    = 0
0.00.878.061 I llm_load_print_meta: causal attn      = 1
0.00.878.061 I llm_load_print_meta: pooling type     = 0
0.00.878.062 I llm_load_print_meta: rope type        = 2
0.00.878.062 I llm_load_print_meta: rope scaling     = linear
0.00.878.063 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.878.064 I llm_load_print_meta: freq_scale_train = 1
0.00.878.064 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.878.064 I llm_load_print_meta: rope_finetuned   = unknown
0.00.878.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.878.065 I llm_load_print_meta: ssm_d_inner      = 0
0.00.878.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.878.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.878.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.878.067 I llm_load_print_meta: model type       = 2B
0.00.878.068 I llm_load_print_meta: model ftype      = Q8_0
0.00.878.068 I llm_load_print_meta: model params     = 2.51 B
0.00.878.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.878.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.878.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.878.071 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.878.071 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.878.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.878.072 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.878.072 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.878.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.878.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.878.081 I llm_load_print_meta: max token length = 93
0.00.950.791 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.950.804 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.957.308 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.317 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.317 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.318 I llama_new_context_with_model: n_batch       = 2048
0.00.957.318 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.319 I llama_new_context_with_model: flash_attn    = 0
0.00.957.323 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.324 I llama_new_context_with_model: freq_scale    = 1
0.00.957.325 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.430 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.973.344 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.514 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.247 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.251 I llama_new_context_with_model: graph nodes  = 601
0.00.976.252 I llama_new_context_with_model: graph splits = 1
0.00.976.277 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.976.281 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.638.984 I main: llama threadpool init, n_threads = 4
0.01.639.001 I 
0.01.639.134 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.639.139 I 
0.01.639.374 I sampler seed: 3776820994
0.01.639.388 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.639.403 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.639.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.639.407 I 
 increasities, but he is not so proud of his accomplishments.

(a) Who is the speaker?
(b) What is the main theme of

0.15.100.852 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.54 tokens per second)
0.15.100.855 I llama_perf_context_print:        load time =    1637.91 ms
0.15.100.856 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.100.871 I llama_perf_context_print:        eval time =   13372.16 ms /    32 runs   (  417.88 ms per token,     2.39 tokens per second)
0.15.100.873 I llama_perf_context_print:       total time =   13461.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.950s
user	2m27.435s
sys	0m9.713s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4371 (eb5c3dc6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185992.55 ms
main:    total time = 185992.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.726 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.965 I main: llama backend init
0.00.000.974 I main: load the model and apply lora adapter, if any
0.00.023.678 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.692 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.832 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.842 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.853 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.855 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.857 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.882 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.884 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.887 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.889 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.599 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.358 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.373 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.380 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.387 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.388 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.399 I llama_model_loader: - type  f32:   37 tensors
0.00.356.402 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.403 I llama_model_loader: - type q6_K:   19 tensors
0.00.608.016 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.680.360 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.681.431 I llm_load_vocab: special tokens cache size = 5
0.00.870.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.522 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.523 I llm_load_print_meta: arch             = gemma
0.00.870.524 I llm_load_print_meta: vocab type       = SPM
0.00.870.525 I llm_load_print_meta: n_vocab          = 256000
0.00.870.527 I llm_load_print_meta: n_merges         = 0
0.00.870.527 I llm_load_print_meta: vocab_only       = 0
0.00.870.528 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.528 I llm_load_print_meta: n_embd           = 2048
0.00.870.529 I llm_load_print_meta: n_layer          = 18
0.00.870.592 I llm_load_print_meta: n_head           = 8
0.00.870.599 I llm_load_print_meta: n_head_kv        = 1
0.00.870.600 I llm_load_print_meta: n_rot            = 256
0.00.870.600 I llm_load_print_meta: n_swa            = 0
0.00.870.601 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.606 I llm_load_print_meta: n_gqa            = 8
0.00.870.610 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.615 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.616 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.617 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.618 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.618 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.619 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.624 I llm_load_print_meta: n_ff             = 16384
0.00.870.625 I llm_load_print_meta: n_expert         = 0
0.00.870.625 I llm_load_print_meta: n_expert_used    = 0
0.00.870.625 I llm_load_print_meta: causal attn      = 1
0.00.870.626 I llm_load_print_meta: pooling type     = 0
0.00.870.626 I llm_load_print_meta: rope type        = 2
0.00.870.627 I llm_load_print_meta: rope scaling     = linear
0.00.870.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.628 I llm_load_print_meta: freq_scale_train = 1
0.00.870.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.870.629 I llm_load_print_meta: rope_finetuned   = unknown
0.00.870.629 I llm_load_print_meta: ssm_d_conv       = 0
0.00.870.630 I llm_load_print_meta: ssm_d_inner      = 0
0.00.870.630 I llm_load_print_meta: ssm_d_state      = 0
0.00.870.630 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.870.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.870.631 I llm_load_print_meta: model type       = 2B
0.00.870.632 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.870.633 I llm_load_print_meta: model params     = 2.51 B
0.00.870.634 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.870.634 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.870.635 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.870.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.870.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.870.636 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.870.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.870.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.870.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.870.664 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.870.665 I llm_load_print_meta: max token length = 93
0.00.932.965 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.932.972 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.932.973 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.932.974 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.932.975 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.932.975 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.939.121 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.129 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.129 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.130 I llama_new_context_with_model: n_batch       = 2048
0.00.939.130 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.131 I llama_new_context_with_model: flash_attn    = 0
0.00.939.135 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.135 I llama_new_context_with_model: freq_scale    = 1
0.00.939.136 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.939.235 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.954.213 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.259 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.379 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.036 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.040 I llama_new_context_with_model: graph nodes  = 601
0.00.957.040 I llama_new_context_with_model: graph splits = 1
0.00.957.065 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.957.069 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.537.993 I main: llama threadpool init, n_threads = 4
0.01.538.012 I 
0.01.538.156 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.538.161 I 
0.01.538.409 I sampler seed: 3059641756
0.01.538.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.436 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.440 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.441 I 
 encomporn and clueless, but full of the potential for growth and change.

This is how I would describe the current state of many of our team members.

0.12.654.764 I llama_perf_sampler_print:    sampling time =      49.72 ms /    33 runs   (    1.51 ms per token,   663.74 tokens per second)
0.12.654.780 I llama_perf_context_print:        load time =    1536.90 ms
0.12.654.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.654.784 I llama_perf_context_print:        eval time =   11026.26 ms /    32 runs   (  344.57 ms per token,     2.90 tokens per second)
0.12.654.785 I llama_perf_context_print:       total time =   11116.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4371 (eb5c3dc6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185842.70 ms
main:    total time = 185842.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4371 (eb5c3dc6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.024.021 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.146 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.153 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.162 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.170 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.172 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.173 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.258.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.361.269 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.385.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.385.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.385.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.385.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.385.962 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.385.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.385.966 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.385.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.385.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.385.982 I llama_model_loader: - type  f32:   37 tensors
0.00.385.984 I llama_model_loader: - type q4_K:  108 tensors
0.00.385.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.619.333 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.684.651 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.685.592 I llm_load_vocab: special tokens cache size = 5
0.00.897.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.897.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.897.933 I llm_load_print_meta: arch             = gemma
0.00.897.934 I llm_load_print_meta: vocab type       = SPM
0.00.897.935 I llm_load_print_meta: n_vocab          = 256000
0.00.897.937 I llm_load_print_meta: n_merges         = 0
0.00.897.938 I llm_load_print_meta: vocab_only       = 0
0.00.897.938 I llm_load_print_meta: n_ctx_train      = 8192
0.00.897.938 I llm_load_print_meta: n_embd           = 2048
0.00.897.939 I llm_load_print_meta: n_layer          = 18
0.00.898.003 I llm_load_print_meta: n_head           = 8
0.00.898.023 I llm_load_print_meta: n_head_kv        = 1
0.00.898.024 I llm_load_print_meta: n_rot            = 256
0.00.898.025 I llm_load_print_meta: n_swa            = 0
0.00.898.026 I llm_load_print_meta: n_embd_head_k    = 256
0.00.898.026 I llm_load_print_meta: n_embd_head_v    = 256
0.00.898.031 I llm_load_print_meta: n_gqa            = 8
0.00.898.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.898.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.898.042 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.898.044 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.898.044 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.898.045 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.898.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.898.066 I llm_load_print_meta: n_ff             = 16384
0.00.898.067 I llm_load_print_meta: n_expert         = 0
0.00.898.068 I llm_load_print_meta: n_expert_used    = 0
0.00.898.068 I llm_load_print_meta: causal attn      = 1
0.00.898.068 I llm_load_print_meta: pooling type     = 0
0.00.898.069 I llm_load_print_meta: rope type        = 2
0.00.898.069 I llm_load_print_meta: rope scaling     = linear
0.00.898.071 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.898.072 I llm_load_print_meta: freq_scale_train = 1
0.00.898.072 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.898.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.898.073 I llm_load_print_meta: ssm_d_conv       = 0
0.00.898.074 I llm_load_print_meta: ssm_d_inner      = 0
0.00.898.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.898.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.898.075 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.898.075 I llm_load_print_meta: model type       = 2B
0.00.898.077 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.898.078 I llm_load_print_meta: model params     = 2.51 B
0.00.898.078 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.898.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.898.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.898.087 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.898.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.898.088 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.898.089 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.898.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.898.102 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.898.103 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.898.104 I llm_load_print_meta: max token length = 93
0.00.958.343 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.964.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.134 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.134 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.135 I llama_new_context_with_model: n_batch       = 2048
0.00.964.135 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.136 I llama_new_context_with_model: flash_attn    = 0
0.00.964.139 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.140 I llama_new_context_with_model: freq_scale    = 1
0.00.964.140 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.232 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.979.453 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.494 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.982.280 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.982.284 I llama_new_context_with_model: graph nodes  = 601
0.00.982.284 I llama_new_context_with_model: graph splits = 1
0.00.982.307 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.982.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.562.163 I main: llama threadpool init, n_threads = 4
0.01.562.179 I 
0.01.562.301 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.562.305 I 
0.01.562.541 I sampler seed: 4215285783
0.01.562.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.562.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.562.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.562.569 I 
 seconded
## The Importance of Empathy in Relationships

Empathy is the ability to understand and share the feelings of another person. It is a core component of

0.12.744.590 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.00 tokens per second)
0.12.744.593 I llama_perf_context_print:        load time =    1561.15 ms
0.12.744.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.744.595 I llama_perf_context_print:        eval time =   11093.55 ms /    32 runs   (  346.67 ms per token,     2.88 tokens per second)
0.12.744.596 I llama_perf_context_print:       total time =   11182.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.210s
user	46m45.967s
sys	0m6.317s
